<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zell Liew</title>
  <subtitle>Zell is a designer, developer and writer. He shares things he knows about web development on this blog.</subtitle>
  <link href="https://zellwk.com/feed/feed.xml" rel="self"/>
  <link href="https://zellwk.com/"/>
  <id>https://zellwk.com/</id>
  <updated>2020-02-26T00:00:00-00:00</updated>
  <author>
    <name>Zell Liew</name>
    <email>zellwk@gmail.com</email>
    <uri>https://zellwk.com/about </uri>
  </author>
  
  <entry>
    <title>Two interesting JavaScript books</title>
    <link href="https://zellwk.com/blog/two-interesting-javascript-books/"/>
    <updated>2020-02-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/two-interesting-javascript-books/</id>
    <content type="html">&lt;p&gt;I deleted many resources I found useful because I restricted myself to sharing &lt;em&gt;only&lt;/em&gt; blog posts here.&lt;/p&gt;
&lt;p&gt;I want to change things up by sharing things I found helpful. I’ll send them once a month. Let me know if you enjoy this new format, or if you have any feedback!&lt;/p&gt;
&lt;p&gt;Without further ado, let’s jump in.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;This month, I want to share two super helpful JavaScript resources with you.&lt;/p&gt;
&lt;h2 id=&quot;just-javascript&quot;&gt;&lt;a href=&quot;https://justjavascript.com/&quot;&gt;Just JavaScript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just JavaScript is a course by Dan Abramov and Maggie Appleton. It’s free!&lt;/p&gt;
&lt;p&gt;I’m into the fourth email in this course and I’m totally loving it.&lt;/p&gt;
&lt;p&gt;Dan talks about his way of understanding JavaScript. He shares his mental model (which is very different from mine). And I’m having fun looking at JavaScript in a different way.&lt;/p&gt;
&lt;p&gt;Highly recommended if you already know some JavaScript. (If you don’t JavaScript, I think this would confuse you more…).&lt;/p&gt;
&lt;p&gt;Finally, if you need help with JavaScript, consider &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt; by yours truly :)&lt;/p&gt;
&lt;h2 id=&quot;refactoring-(2nd-edition)&quot;&gt;&lt;a href=&quot;https://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Signature/dp/0134757599/&quot;&gt;Refactoring (2nd edition)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Refactoring (by Martin Fowler) is a popular book for programmers. I hesitated to get the 1st edition because it was written in a language I didn’t know. The 2nd edition is written in JavaScript, so I grabbed it immediately :)&lt;/p&gt;
&lt;p&gt;I’m halfway through it now, and I’m gaining confidence in my own refactoring skills. Bonus points: I began to understand why people use encapsulation and what the hell is “Polymorphism”.&lt;/p&gt;
&lt;p&gt;(My story regarding polymorphism is so interesting, I’ll likely publish an article about polymorphism in future).&lt;/p&gt;
&lt;p&gt;That’s it from me this month!&lt;/p&gt;
&lt;p&gt;What’s the best programming book or course you read this month? Let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Designing Learn JavaScript&#39;s course portal (Part 2)</title>
    <link href="https://zellwk.com/blog/learn-javascript-portal-design-2/"/>
    <updated>2020-02-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learn-javascript-portal-design-2/</id>
    <content type="html">&lt;p&gt;This is the second article where I explain how I designed Learn JavaScript’s course portal.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;If you missed the first part, you’ll want to &lt;a href=&quot;https://zellwk.com/blog/learn-javascript-portal-design&quot;&gt;read it first&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;content-page&quot;&gt;Content page&lt;/h2&gt;
&lt;p&gt;After I finished with the lessons page, I began work on the content page. I designed the contents page next because students need this page to access lessons.&lt;/p&gt;
&lt;p&gt;Most courses choose to use a sidebar or off-canvas menu for their content. But I can’t because Learn JavaScript is huge. When I designed the course portal, I already have 150+ lessons. (Today, I have 250+ and I’m still writing the course).&lt;/p&gt;
&lt;p&gt;If you see 150+ lessons in a sidebar, you’ll definitely get overwhelmed. So I chose to create a dedicated content page for the course. It’s still a ton of lessons, but it feels more manageable.&lt;/p&gt;
&lt;p&gt;I figured the best way is to present lessons is with a list.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/contents.png&quot; alt=&quot;Contents page.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Two points to note here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;: Learn JavaScript is split into 20 modules. I styled each module like &lt;code&gt;h2&lt;/code&gt;. This style allows students to quickly understand which lessons are inside each module.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;h2&lt;/code&gt; also means I added a second layer of repetition across the page. This increases familiarity and unity in the design.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;: I removed underlines from each link. Why? Because it’s hard to read when everything is underlined. Ease-of-reading is always a priority.&lt;/p&gt;
&lt;p&gt;The unfortunate side-effect is it makes links harder to spot for color-blind users. There’s not enough contrast between normal text and links. But since this is a page of links, I don’t think it’s too much of a problem.&lt;/p&gt;
&lt;h2 id=&quot;login-page&quot;&gt;Login page&lt;/h2&gt;
&lt;p&gt;I designed the login page next. Why? Because I need students to log in to enter the course.&lt;/p&gt;
&lt;p&gt;I got stuck at the login page at first, so I searched the web for inspiration. I found that most login designs include a Modal window of some sort.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/login-google.png&quot; alt=&quot;Searching for login page inspiration on Google.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I didn’t want to use a Modal window for the login page. Modals make logins unnecessarily complicated. I wanted it to be clean and simple like Wordpress’s login page.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/wordpress.png&quot; alt=&quot;Wordpress login page.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;But I also found the Wordpress’s page boring. I wanted my login page to be beautiful. It should also speak boldly about the course. This meant I had to design the login page from scratch.&lt;/p&gt;
&lt;p&gt;I realised that five elements were critical for a login page:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A logo (so people know which course they’re logging into)&lt;/li&gt;
&lt;li&gt;An email field&lt;/li&gt;
&lt;li&gt;A password field&lt;/li&gt;
&lt;li&gt;A password reset link&lt;/li&gt;
&lt;li&gt;A login button&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-logo&quot;&gt;The logo&lt;/h3&gt;
&lt;p&gt;I chose to work on the logo first.&lt;/p&gt;
&lt;p&gt;Ironically, learn JavaScript doesn’t have a logo. All I have is an animated visual I use to describe the course.&lt;/p&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://zellwk.com/images/2020/ljs-portal-2/visual.mp4&quot; type=&quot;video/mp4&quot;&gt;
    Your browser doesn&#39;t support embedded videos. Watch the video &lt;a href=&quot;https://zellwk.com/images/2020/ljs-portal-2/visual.mp4&quot;&gt; here &lt;/a&gt; instead. 
  &lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;The animating text doesn’t suit the login page. I don’t have to convince anyone to invest in the course anymore. So I removed the animated words and shifted the brackets up.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/logo-no-yellow.png&quot; alt=&quot;Learn JavaScript logo without animating text.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Deleting the text makes the visual lose the feel of a “brand”. The words “Learn JavaScript” is too plain and cold, so I added the yellow highlight back.&lt;/p&gt;
&lt;p&gt;Here’s what I ended up with after tweaking typography, sizes, and positioning.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/logo.png&quot; alt=&quot;Learn JavaScript logo&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;email-and-password-fields&quot;&gt;Email and password fields&lt;/h3&gt;
&lt;p&gt;Both email and password are text fields. When I design text fields, I start by inheriting typography from the rest of the page. This is as easy as setting &lt;code&gt;font&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; to &lt;code&gt;inherit&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/inputs-1.png&quot; alt=&quot;Two input fields. Inherited typography from the rest of the page.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Each text field needs something to define its boundaries. There are three ways to create a boundary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With background-color&lt;/li&gt;
&lt;li&gt;With shadows&lt;/li&gt;
&lt;li&gt;With borders&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I started with a 2px border first because I like well-defined boundaries. I tried playing around with different border colors and eventually settled with a light grey border.&lt;/p&gt;
&lt;p&gt;I also rounded the borders to make inputs feel friendlier.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/inputs-2.png&quot; alt=&quot;Two input fields, each with a white background and light-gray rounded border.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;buttons&quot;&gt;Buttons&lt;/h3&gt;
&lt;p&gt;At this point, I knew I had to make two buttons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A primary button for the call to action&lt;/li&gt;
&lt;li&gt;A secondary button for less important actions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most primary buttons contain a solid fill. This solid fill draws attention to the button. On the other hand, secondary buttons are usually ghost buttons (buttons with a transparent background).&lt;/p&gt;
&lt;p&gt;Sometimes, secondary buttons have a white fill.&lt;/p&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Example of primary and secondary buttons on Stripe.&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/stripe.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Example of primary and secondary buttons on Stripe.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I decided to go for a solid yellow fill for the primary button.&lt;/p&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Primary (left) and Secondary (right) buttons for the course portal&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/buttons.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Primary (left) and Secondary (right) buttons for the course portal&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;button-hover-and-focus-states&quot;&gt;Button hover and focus states&lt;/h3&gt;
&lt;p&gt;Buttons are interactive elements. They need a hover state and a focus state. Both states &lt;a href=&quot;https://zellwk.com/blog/style-hover-focus-active-states/&quot; title=&quot;Style focus and hover states differently&quot;&gt;need to be distinct&lt;/a&gt; because they represent different actions.&lt;/p&gt;
&lt;p&gt;For hover, I decided to change the background of the button to the orange-yellow gradient. This reuses another element so it unifies the design even more.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/button-hover.gif&quot; alt=&quot;Hover over button. Background becomes orange-yellow gradient.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;For focus, I added a blue outline around the button. This outline stands out when you Tab onto it. I wrote an article about creating these kinds of outlines. You can find out more about the technique &lt;a href=&quot;https://zellwk.com/blog/creating-focus-style/&quot; title=&quot;Creating a custom focus style&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/focus-buttons.png&quot; alt=&quot;Blue outline when button gets focus.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;focus-on-email-and-password-fields&quot;&gt;Focus on email and password fields&lt;/h3&gt;
&lt;p&gt;I decided to use the same focus state on email and password fields. The difference is: I changed the border color to a dark blue to match the focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/focus-text.png&quot; alt=&quot;Blue outline when text field gets focus.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;bringing-the-login-form-together&quot;&gt;Bringing the login form together&lt;/h3&gt;
&lt;p&gt;If I bring the elements together for the login page, they look like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/form-1.png&quot; alt=&quot;Initial look for the form.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;It works, but it doesn’t look great.&lt;/p&gt;
&lt;p&gt;I tried to center-align every element, but it doesn’t look great either. Something seems to be missing.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/form-2.png&quot; alt=&quot;Align every form element to the center.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I was stuck for a long time. Around this period, I came across &lt;a href=&quot;https://pjrvs.com/&quot; title=&quot;Paul Jarvis&quot;&gt;Paul Jarvis&lt;/a&gt;’s &lt;a href=&quot;https://chimpessentials.com/&quot; title=&quot;Chimp Essentials&quot;&gt;Chimp Essentials&lt;/a&gt; course again.&lt;/p&gt;
&lt;p&gt;Here, I noticed Paul accentuated his login form with a thick border. This helps me focus on the text fields and login button.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/chimp-essentials.png&quot; alt=&quot;Chimp Essentials login form design.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;So I stole this idea.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/form-3.png&quot; alt=&quot;Aligned email field, password field, and login button in a single row.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Then, I accentuated my form by adding a light yellow background. This allows the form to draw more attention.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/form-4.png&quot; alt=&quot;Form has light-yellow background.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, I wanted to emphasize the login button more. It looks receded in the login form right now. I played around with a few options and chose to increase the &lt;code&gt;border-width&lt;/code&gt; from &lt;code&gt;2px&lt;/code&gt; to &lt;code&gt;4px&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/form-5.png&quot; alt=&quot;Increased login button&#39;s border-width to 4px.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;login-states&quot;&gt;Login states&lt;/h3&gt;
&lt;p&gt;When a user clicks the submit button, I log them into the course with JavaScript. (Read more about the &lt;a href=&quot;https://zellwk.com/blog/frontend-login-system/&quot; title=&quot;Building a login system with HTML, CSS, and JavaScript&quot;&gt;login process&lt;/a&gt; here). This can take a while if they’re on a slow connection.&lt;/p&gt;
&lt;p&gt;I wanted to give users feedback that they’re logging into the course. The simplest way to do this is to add a status message that says “Logging in”. I decided to add this status message to the bottom of the form.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/login-status-message.png&quot; alt=&quot;Example of the login status message.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This message can be easily changed to a failure message if the login fails.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal-2/login-error-message.png&quot; alt=&quot;Example of the login error message.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;That’s all the considerations I made for the login page. Next week, I’ll end the series with the Accounts and Components page. I’ll also share some of my learnings from this experience.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Installing and Using MongoDB on Mac (Catalina and non-Catalina)</title>
    <link href="https://zellwk.com/blog/install-mongodb/"/>
    <updated>2020-02-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/install-mongodb/</id>
    <content type="html">&lt;p&gt;I had to reconfigure my Macbook after sending it for repairs. During the reconfiguration period, I noticed the instructions I linked to in &lt;a href=&quot;https://zellwk.com/blog/local-mongodb/&quot; title=&quot;Setting up a local MongoDB connection&quot;&gt;“Setting up a local MongoDB connection”&lt;/a&gt; were outdated.&lt;/p&gt;
&lt;p&gt;Here’s an updated version on how to install MongoDB on a Mac.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;There are a few steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, you install Homebrew.&lt;/strong&gt; If you’re curious about what Homebrew is, read &lt;a href=&quot;https://zellwk.com/blog/homebrew&quot; title=&quot;Understanding Homebrew&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Installs Homebrew
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Second, find the MongoDB tap&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew tap mongodb/brew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Third, install MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;brew install mongodb-community
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MongoDB is now installed on your computer.&lt;/p&gt;
&lt;h2 id=&quot;preparations-(before-macos-catalina)&quot;&gt;Preparations (Before MacOS Catalina)&lt;/h2&gt;
&lt;p&gt;Before you can use MongoDB, you need to create a &lt;code&gt;/data/db&lt;/code&gt; folder on your computer to use MongoDB. You can create this folder with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo mkdir -p /data/db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also need to give permissions to use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo chown -R `id -un` /data/db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can follow the rest of &lt;a href=&quot;https://zellwk.com/blog/local-mongodb/&quot; title=&quot;Setting up a local MongoDB connection&quot;&gt;the article&lt;/a&gt; to set up your MongoDB connection.&lt;/p&gt;
&lt;h2 id=&quot;preparations-(macos-catalina-onwards)&quot;&gt;Preparations (MacOS Catalina onwards)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT210650&quot;&gt;Apple created a new Volume in Catalina&lt;/a&gt; for security purposes. If you’re on Catalina, you need to create the &lt;code&gt;/data/db&lt;/code&gt; folder in &lt;code&gt;System/Volumes/Data&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo mkdir -p /System/Volumes/Data/data/db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, use this command to give permissions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo chown -R `id -un` /System/Volumes/Data/data/db
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-mongodb&quot;&gt;Using MongoDB&lt;/h2&gt;
&lt;p&gt;In the past, I can run the &lt;code&gt;mongod&lt;/code&gt; command to start MongoDB. This no longer works out for the box from MongoDB v4.2.3 onwards.&lt;/p&gt;
&lt;p&gt;The best way to start MongoDB now is via &lt;code&gt;brew services&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;starting-mongodb&quot;&gt;&lt;strong&gt;Starting MongoDB&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew services run mongodb-community
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MongoDB will start as a background service. Here’s what you’ll see:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/install-mongodb/start.png&quot; alt=&quot;Started MongoDB with brew services&quot;&gt;
&lt;/figure&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;You can use &lt;code&gt;start&lt;/code&gt; instead of &lt;code&gt;run&lt;/code&gt;. &lt;code&gt;start&lt;/code&gt; will start MongoDB automatically when you login into your Macbook. I prefer &lt;code&gt;run&lt;/code&gt; since I don’t want MongoDB to be running all the time.&lt;/p&gt;
&lt;/div&gt;&lt;h3 id=&quot;checking-if-mongodb-is-running&quot;&gt;Checking if MongoDB is running&lt;/h3&gt;
&lt;p&gt;Use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew services list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Homebrew will list all running services. If MongoDB is running, &lt;code&gt;mongodb-community&lt;/code&gt; will have a status set to &lt;code&gt;started&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/install-mongodb/list.png&quot; alt=&quot;Mongodb-community has status set to started.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;the-mongo-shell&quot;&gt;The Mongo Shell&lt;/h3&gt;
&lt;p&gt;If MongoDB is running, you should be able to access the Mongo shell with the &lt;code&gt;mongo&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/install-mongodb/mongo-shell.png&quot; alt=&quot;Starts the Mongo shell.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;stopping-mongodb&quot;&gt;Stopping MongoDB&lt;/h3&gt;
&lt;p&gt;Use this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew services stop mongodb-community
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Homebrew will stop MongoDB and let you know.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/install-mongodb/stop.png&quot; alt=&quot;Stopped MongoDB&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;aliases-to-make-these-easier&quot;&gt;Aliases to make these easier&lt;/h2&gt;
&lt;p&gt;It’s a chore typing &lt;code&gt;brew services run mongodb-community&lt;/code&gt; every time I want to start MongoDB.&lt;/p&gt;
&lt;p&gt;I created some aliases to make things easier for me. Here are my aliases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alias mongod=&#39;brew services run mongodb-community&#39;
alias mongod-status=&#39;brew services list&#39;
alias mongod-stop=&#39;brew services stop mongodb-community&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;If you haven’t already, you should learn &lt;a href=&quot;https://zellwk.com/blog/local-mongodb/&quot;&gt;how to set up a local MongoDB connection&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Designing Learn JavaScript&#39;s course portal</title>
    <link href="https://zellwk.com/blog/learn-javascript-portal-design/"/>
    <updated>2020-02-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learn-javascript-portal-design/</id>
    <content type="html">&lt;p&gt;Learn JavaScript is my flagship JavaScript course. It helps people go from knowing nothing about JavaScript to becoming a professional JavaScript developer.&lt;/p&gt;
&lt;p&gt;Today, I want to share with you how I designed Learn JavaScript’s course portal.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/login.png&quot; alt=&quot;Learn JavaScript login page.&quot;&gt;
&lt;/figure&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-lessons-page&quot;&gt;The lessons page&lt;/h2&gt;
&lt;p&gt;I started by designing the lessons page because most of your time would be spent on the lessons if you’re going through a course.&lt;/p&gt;
&lt;p&gt;Each lesson in Learn JavaScript is an article. They contain images, gifs, videos, and code blocks.&lt;/p&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Example of Learn JavaScript content&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/article.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Example of Learn JavaScript content&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I started by choosing the typeface for the body text. This was easy for me because I knew I wanted to use Adelle Sans. I chose Adelle Sans because I wanted the course portal to mirror the &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript product page&quot;&gt;product page&lt;/a&gt; (which uses Adelle Sans).&lt;/p&gt;
&lt;h3 id=&quot;font-size&quot;&gt;Font size&lt;/h3&gt;
&lt;p&gt;I used a large &lt;code&gt;font-size&lt;/code&gt; for the body text because I want students to have an easier time reading the course. After playing around with different sizes, I eventually decided on the following sizes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;18px on mobile&lt;/li&gt;
&lt;li&gt;25px on laptop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set the &lt;code&gt;line-height&lt;/code&gt; to &lt;code&gt;1.4&lt;/code&gt; for both viewports. This &lt;code&gt;line-height&lt;/code&gt; was enough since I limited the measure to &lt;code&gt;32em&lt;/code&gt; (which is approximately 64 characters).&lt;/p&gt;
&lt;h3 id=&quot;layout&quot;&gt;Layout&lt;/h3&gt;
&lt;p&gt;I wanted a single-column layout for students to focus on the course contents.&lt;/p&gt;
&lt;p&gt;I had two choices here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Align the column in the middle (like Medium style)&lt;/li&gt;
&lt;li&gt;Align the column closer to the left edge (like this blog)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Aligning in the middle&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/center-align.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Aligning in the middle&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Align closer to the left edge&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/left-align.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Align closer to the left edge&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I chose to align the column closer to the left edge because the left edge had a strong alignment (caused by the left edge of the screen). This strong alignment allows readers to find the start of the next line easily. (which makes it easier to read).&lt;/p&gt;
&lt;p&gt;The extra whitespace on the right creates breathing room as well.&lt;/p&gt;
&lt;h3 id=&quot;headings&quot;&gt;Headings&lt;/h3&gt;
&lt;p&gt;When I wrote Learn JavaScript, I consciously limited headings to &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;h3&lt;/code&gt; to keep lessons concise and understandable. I realised that adding a &lt;code&gt;h4&lt;/code&gt; into a lesson makes it difficult to understand. When I had a &lt;code&gt;h4&lt;/code&gt; in the lesson, I knew it’s time to break it up into two lessons.&lt;/p&gt;
&lt;p&gt;This meant I only had to design for three heading levels: &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, and &lt;code&gt;h3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h1&lt;/code&gt; was easy. I used a large (but workable) &lt;code&gt;font-size&lt;/code&gt; to draw attention. While creating &lt;code&gt;h1&lt;/code&gt;, I also toyed around with using Adelle Condensed, but I decided that Adelle Sans was good enough. There was no need to introduce another typeface.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/h1.png&quot; alt=&quot;Level 1 heading has a large size compared to the rest of the page.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;h2&lt;/code&gt; was easy as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h2&lt;/code&gt; is the main separator between sections of text. I chose to set &lt;code&gt;h2&lt;/code&gt; at a larger &lt;code&gt;font-size&lt;/code&gt; and bolder &lt;code&gt;font-weight&lt;/code&gt; to separate it from body text.&lt;/p&gt;
&lt;p&gt;I also added more whitespace to above each &lt;code&gt;h2&lt;/code&gt; to separate sections of text. This allows users to associate &lt;code&gt;h2&lt;/code&gt; with the next set of content.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/h2.png&quot; alt=&quot;Example of the h2 element.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;h3&lt;/code&gt; is a subheading. It needs to be significantly different from &lt;code&gt;h2&lt;/code&gt; so students immediately tell that the &lt;code&gt;h3&lt;/code&gt; is a subheading. At the same time, it needs to have enough contrast with the body text.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h3&lt;/code&gt; was hard. It wasn’t enough to change the &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;font-weight&lt;/code&gt;. The contrast wasn’t enough if I changed only &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;font-weight&lt;/code&gt;. I needed a different way to accentuate the &lt;code&gt;h3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I had to work on other elements before coming back to it.&lt;/p&gt;
&lt;p&gt;Eventually, I went with a gradient underline. I’ll explain why I did this below.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/h3.png&quot; alt=&quot;Example of h3&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;You need to use a monospace typeface for all code-related stuff. Here, I went with Dank Mono because I use it as my main coding font. And I liked it.&lt;/p&gt;
&lt;p&gt;I’ll talk more about I designed inline code and code blocks in the “colors” section below.&lt;/p&gt;
&lt;h3 id=&quot;other-elements&quot;&gt;Other elements&lt;/h3&gt;
&lt;p&gt;I had to create lists and figures for the page as well. They’re pretty standard so I don’t think there’s a need to say more.&lt;/p&gt;
&lt;h2 id=&quot;colors&quot;&gt;Colors&lt;/h2&gt;
&lt;p&gt;When I choose colors, I &lt;strong&gt;start by thinking about the message I want to convey&lt;/strong&gt; to the user. In this case, I wanted to tell the user that JavaScript can be fun and easy to learn.&lt;/p&gt;
&lt;p&gt;Yellow comes to mind when I think of fun. Yellow is bright, has high energy, and conveys a sense of optimism. So I chose yellow as my primary color.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/color-emotion.png&quot; alt=&quot;Color emotion chart.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;It also helped that JavaScript is usually associated with yellow. (No idea why though).&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/js.jpg&quot; alt=&quot;JavaScript logos made with yellow.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;color-for-links&quot;&gt;Color for links&lt;/h3&gt;
&lt;p&gt;Besides fun, I wanted to emphasise on the importance of fundamentals. When I think about fundamentals, I think about origin and history.&lt;/p&gt;
&lt;p&gt;If you trace the web back to its starting point, you’ll know that links were blue in color. I wanted to retain this “blueness” as a sign of the fundamentals.&lt;/p&gt;
&lt;h3 id=&quot;picking-colors-from-refactoring-ui&quot;&gt;Picking colors from Refactoring UI&lt;/h3&gt;
&lt;p&gt;I’m serious! I followed Steve Schoger’s &lt;a href=&quot;https://refactoringui.com/previews/building-your-color-palette/&quot;&gt;advice on building color palettes&lt;/a&gt; for this project.&lt;/p&gt;
&lt;p&gt;On top of the primary colors we chose, we also need these colors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A neutral color&lt;/li&gt;
&lt;li&gt;Green for success&lt;/li&gt;
&lt;li&gt;Yellow/orange for warnings&lt;/li&gt;
&lt;li&gt;Red for errors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Steve suggested we should create 9 different shades of each color we use.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/steve-colors.png&quot; alt=&quot;9 shades of 6 different colors.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I didn’t have the luxury to pick colors from scratch for this project. I only gave myself a week to design and build the course portal.&lt;/p&gt;
&lt;p&gt;So I grabbed one of the color palettes Steve created for Refactoring UI. I looked for one that contains blue and yellow.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/palette.jpg&quot; alt=&quot;The color palette from Refactoring UI that I used for the project.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The yellow hue was different from the one I wanted, so I had to tweak most of the yellows a bit.&lt;/p&gt;
&lt;h3 id=&quot;gradient-links&quot;&gt;Gradient links&lt;/h3&gt;
&lt;p&gt;Speaking of links, I got to tell you about gradient links.&lt;/p&gt;
&lt;p&gt;I love the gradient links in CSS Trick’s redesign. When I saw them, I told myself I’m going to try using gradients for my links in the next project. This next project happens to be Learn JavaScript’s course portal.&lt;/p&gt;
&lt;p&gt;Here’s the links I created:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/link.gif&quot; alt=&quot;Blue color link with blue underline. When hovered, the text has an orange to yellow gradient; underline becomes solid orange.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Notice I used orange and yellow for the gradient. I did this because yellow is hard to work with. Darker shades of yellow were muddy. It doesn’t convey the vibrancy and energy that I wanted. So I went with orange instead.&lt;/p&gt;
&lt;p&gt;I wrote how I created these links in a &lt;a href=&quot;https://zellwk.com/blog/multi-line-gradient-links&quot; title=&quot;Multi-line gradient links&quot;&gt;separate article&lt;/a&gt; if you want to replicate them.&lt;/p&gt;
&lt;h3 id=&quot;text-color&quot;&gt;Text color&lt;/h3&gt;
&lt;p&gt;I wanted to use a light background with dark text because it’s &lt;a href=&quot;https://www.quora.com/Which-is-better-for-the-eyes-a-white-background-with-black-text-a-black-background-with-white-text-or-sepia-mode&quot;&gt;easier to read&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the contrast between &lt;code&gt;black&lt;/code&gt; and &lt;code&gt;white&lt;/code&gt; is too strong. Many people choose to reduce the contrast by using a dark grey text on white background.&lt;/p&gt;
&lt;p&gt;I chose to reduce the contrast further by setting a light grey background. This eases the strain on the eyes, which allows my students to concentrate for a longer period.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/text-color.jpg&quot; alt=&quot;Background color set to #f7f7f7. Text color set to #222&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;inline-code&quot;&gt;Inline code&lt;/h3&gt;
&lt;p&gt;Inline code requires a boundary. I can either create this boundary with &lt;code&gt;background-color&lt;/code&gt; or &lt;code&gt;border&lt;/code&gt;. In this case, since my primary color was yellow, I decided to try a light yellow background.&lt;/p&gt;
&lt;p&gt;I was quite happy with the result.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/inline-code.png&quot; alt=&quot;Code has yellow background when placed inside a paragraph.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;code-blocks&quot;&gt;Code blocks&lt;/h3&gt;
&lt;p&gt;Code blocks require syntax highlighting. Here, I went with &lt;a href=&quot;https://draculatheme.com/visual-studio-code/&quot; title=&quot;Dracula&quot;&gt;Dracula&lt;/a&gt; because the emotional temperature of the colors match what I’m trying to convey. They’re bright and kinda funky.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/code-block.png&quot; alt=&quot;Code block uses Dracula theme.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;circling-back-to-h3&quot;&gt;Circling back to h3&lt;/h3&gt;
&lt;p&gt;Since I used gradients for links, I thought about trying gradients to emphasize h3. I was surprised by the results. It looked good.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/h3.png&quot; alt=&quot;Example of h3&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;There are three reasons why it looked good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First:&lt;/strong&gt; The colors from the orange-yellow gradient created enough contrast so the &lt;code&gt;h3&lt;/code&gt; stands out from &lt;code&gt;h2&lt;/code&gt; and the body text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second:&lt;/strong&gt; I needed to repeat yellow to convey the “fun” message I was trying to convey. There were enough &lt;code&gt;h3&lt;/code&gt; elements around for this repetition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third:&lt;/strong&gt; Repetition breeds familiarity. It unites a design. You should repeat things as much as possible. (This is also &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;why Vertical Rhythm is an important design principle&lt;/a&gt;). I decided to use the greater unifying principle across the site.&lt;/p&gt;
&lt;p&gt;Since the gradients looked so good with the &lt;code&gt;h3&lt;/code&gt;, I decided it add another gradient to separate the lesson and the navigation.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/ljs-portal/article.png&quot; alt=&quot;Orange-yellow gradient separates the navigation from the rest of the page.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;That’s all the considerations I made for the lessons page. Next week, I’ll share how I created other pages.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building a login system with HTML, CSS, and JavaScript</title>
    <link href="https://zellwk.com/blog/frontend-login-system/"/>
    <updated>2020-02-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/frontend-login-system/</id>
    <content type="html">&lt;p&gt;I built a login system with HTML, CSS, and JavaScript when I made Learn JavaScript’s student portal. I’d like to share this system with you since it seems to work well.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;how-the-system-works&quot;&gt;How the system works&lt;/h2&gt;
&lt;p&gt;The system goes like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let user login at the login page
&lt;ol&gt;
&lt;li&gt;Upon login, store user’s information in &lt;code&gt;localStorage&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Redirect to the content page&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;When student lands on a page
&lt;ol&gt;
&lt;li&gt;Check if student can access the page&lt;/li&gt;
&lt;li&gt;If yes, allow student to enter&lt;/li&gt;
&lt;li&gt;If no, redirect to login page&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;logging-in&quot;&gt;Logging in&lt;/h2&gt;
&lt;p&gt;Students can log in to the course with their email address and a password.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/login-system/login.png&quot; alt=&quot;Login form. It has two fields: email address and password.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When they submit the form, I send their email and password to my server through a POST request. Here’s what the request looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function basiclogin (email, password) {
  const response = await zlFetch.post(loginEndpoint, {
    auth: {
      username: email,
      password: password
    },
    body: { /*...*/ }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;&lt;p&gt;&lt;code&gt;zlFetch&lt;/code&gt; is a library I built to make the Fetch API easier to use. You can find out more about &lt;code&gt;zlFetch&lt;/code&gt; &lt;a href=&quot;https://github.com/zellwk/zl-fetch&quot;&gt;here&lt;/a&gt;. The &lt;code&gt;auth&lt;/code&gt; option transforms &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; into a basic authentication header.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;My server uses &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON_Web_Token&quot;&gt;JSON Web Tokens&lt;/a&gt; (JWT) to authenticate users. It sends back a JWT token. The JWT token is a long string that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdE5hbWUiOiJaZWxsIiwiZW1haWwiOiJ6ZWxsd2tAZ21haWwuY29tIiwiaWF0IjoxNTc3ODYzNzc3LCJleHAiOjE1ODA0NTU3Nzd9.i3rOwqV1Bc-JEAaxT7lHZHUlDuFf9ADVP7qjy50WqT0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This token acts as credentials for future logins. I save this token inside &lt;code&gt;localStorage&lt;/code&gt; so I can log students in automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function basiclogin (email, password) {
  const response = await zlFetch.post(/*...*/)
  const { token } = response.body
  
  localStorage.setItem(&#39;token&#39;, token)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;checking-if-the-student-is-logged-in&quot;&gt;Checking if the student is logged in&lt;/h2&gt;
&lt;p&gt;To check whether a student is logged in, I check the &lt;code&gt;localStorage&lt;/code&gt; for the token. If &lt;code&gt;localStorage&lt;/code&gt; doesn’t have a &lt;code&gt;token&lt;/code&gt;, I know the student has not logged in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function isLoggedIn () {
  const token = store.get(&#39;token&#39;)
  if (!token) return false
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the student is not logged in, I redirect them to the login page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function autoRedirect () {
  const validLogin = await isLoggedIn()
  if (!validLogin &amp;amp;&amp;amp; location.pathname !== &#39;/login/&#39;) redirect(&#39;/login&#39;)
  if (validLogin &amp;amp;&amp;amp; location.pathname === &#39;/login/&#39;) redirect(&#39;/&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;localStorage&lt;/code&gt; has a token, I still need to check the validity of this token. To do this, I send another POST request to my server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function isLoggedIn () {
  // ...
  // Checks validity of token
  const response = await zlFetch.post(loginEndpoint, {
    auth: token,
    body: { course: &#39;learn-javascript&#39; }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the response is successful, my server returns another token with a new expiry date. This new token allows students to remain logged in for a longer period.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function isLoggedIn () {
  // ...
  // Saves token into localStorage again
  const { token } = response.body
  localStorage.setItem(&#39;token&#39;, token)

  return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;updating-a-student%E2%80%99s-access-level&quot;&gt;Updating a student’s access level&lt;/h3&gt;
&lt;p&gt;Besides &lt;code&gt;token&lt;/code&gt;, I store a student’s “access level” inside &lt;code&gt;localStorage&lt;/code&gt; as well. This “access level” determines what lessons a student can access.&lt;/p&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Students can access these lessons&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/login-system/can-access.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Students can access these lessons&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Students cannot access these lessons&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/login-system/cannot-access.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Students cannot access these lessons&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I store this access level when the student logs in for the first time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function basiclogin (email, password) {
  const response = await zlFetch.post(/*...*/)
  const { token, user } = response.body
  // ...

  // user contains accessLevel
  localStorage.setItem(&#39;user&#39;, user)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I store the access level again when the token is validated. This allows me to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prevent students from tampering with their &lt;code&gt;localStorage&lt;/code&gt; (and getting access to lessons they should not have)&lt;/li&gt;
&lt;li&gt;Update a student’s access automatically once they upgraded to a higher tier&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two birds with one stone!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function isLoggedIn () {
  // ...
  const { token, user } = response.body
  localStorage.setItem(&#39;user&#39;, user)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;logging-out&quot;&gt;Logging out&lt;/h2&gt;
&lt;p&gt;It’s simple to logout. We just have to clear the items we placed in &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function logout () {
  localStorage.removeItem(&#39;token&#39;)
  localStorage.removeItem(&#39;user&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;preventing-access-for-students-without-javascript&quot;&gt;Preventing access for students without JavaScript&lt;/h2&gt;
&lt;p&gt;This course is built with a static site generator. Each lesson is a plain HTML file. Students can bypass the authentication layer and read the HTML directly if they turned off JavaScript.&lt;/p&gt;
&lt;p&gt;This should not happen.&lt;/p&gt;
&lt;p&gt;To prevent people from turning off their JavaScript to view lessons, I added a &lt;code&gt;no-js&lt;/code&gt; class to the HTML element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot; class=&amp;quot;no-js&amp;quot;&amp;gt;...&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I remove this &lt;code&gt;no-js&lt;/code&gt; class when there’s JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.documentElement.classList.remove(&#39;no-js&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I hide the main content if the user turned off JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Disallow access if there&#39;s no JavaScript */
.no-js main {
  display: none !important;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-message-to-turn-on-javascript&quot;&gt;A message to turn on JavaScript&lt;/h2&gt;
&lt;p&gt;Students who try to access the course portal without JavaScript will see a blank page. They may get confused and think the page didn’t load.&lt;/p&gt;
&lt;p&gt;I need to tell these students to turn on JavaScript, so I added a &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;noscript&amp;gt;This course portal requires JavaScript to verify your identity. Please enable JavaScript to access the course.&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/login-system/noscript.png&quot; alt=&quot;Noscript message&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;That’s the entire login process!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting keyboard-focusable elements</title>
    <link href="https://zellwk.com/blog/keyboard-focusable-elements/"/>
    <updated>2020-01-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/keyboard-focusable-elements/</id>
    <content type="html">&lt;p&gt;If you create JavaScript widgets, one of the key parts to accessibility is managing focus.&lt;/p&gt;
&lt;p&gt;To manage focus, you need to find keyboard-focusable elements.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;when-you-know-the-contents&quot;&gt;When you know the contents&lt;/h2&gt;
&lt;p&gt;It’s easy to find keyboard-focusable elements if you know the contents of the element beforehand.&lt;/p&gt;
&lt;p&gt;For example, I know the focusable elements in this modal are &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/get-focusables/modal.png&quot; alt=&quot;Modal with two inputs and one button.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I can get the focusable elements with &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const focusableElements = [...modal.querySelectorAll(&#39;input, button&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;when-you-don%E2%80%99t-know-the-contents&quot;&gt;When you don’t know the contents&lt;/h2&gt;
&lt;p&gt;It’s harder to find keyboard-focusable elements if you don’t know the content beforehand.&lt;/p&gt;
&lt;p&gt;After some research, I realised you could only focus on these elements with a keyboard:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elements with &lt;code&gt;tabindex&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elements with &lt;code&gt;tabindex&lt;/code&gt; set to a positive number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can get all keyboard-focusable elements with the following &lt;code&gt;querySelectorAll&lt;/code&gt;. It looks a little complicated, but there’s no other way to include everything:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const keyboardfocusableElements = document.querySelectorAll(
  &#39;a, button, input, textarea, select, details, [tabindex]:not([tabindex=&amp;quot;-1&amp;quot;])&#39;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some elements (like &lt;code&gt;button&lt;/code&gt;) can be disabled. Disabled elements are not focusable. We can remove these elements with &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const keyboardfocusableElements = [...document.querySelectorAll(
  &#39;a, button, input, textarea, select, details, [tabindex]:not([tabindex=&amp;quot;-1&amp;quot;])&#39;
)]
  .filter(el =&amp;gt; !el.hasAttribute(&#39;disabled&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;turning-it-into-a-function&quot;&gt;Turning it into a function&lt;/h2&gt;
&lt;p&gt;This &lt;code&gt;querySelectorAll&lt;/code&gt; code is hard to read. We can put the entire thing into a function to make it more understandable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/**
 * Gets keyboard-focusable elements within a specified element
 * @param {HTMLElement} [element=document] element  
 * @returns {Array}
 */
function getKeyboardFocusableElements (element = document) {
  return [...element.querySelectorAll(
    &#39;a, button, input, textarea, select, details,[tabindex]:not([tabindex=&amp;quot;-1&amp;quot;])&#39;
  )]
    .filter(el =&amp;gt; !el.hasAttribute(&#39;disabled&#39;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;useful-javascript-functions&quot;&gt;Useful JavaScript functions&lt;/h2&gt;
&lt;p&gt;I started keeping snippets of JavaScript functions I find useful in a &lt;a href=&quot;https://github.com/zellwk/useful-js-snippets&quot; title=&quot;Useful JavaScript snpiiets&quot;&gt;Git repository&lt;/a&gt;. It’s tiny now though. I’ll add more to it as I go along.&lt;/p&gt;
&lt;p&gt;Hope you find it useful.&lt;/p&gt;
&lt;p&gt;If you have any suggestions to add to this repo, please let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Multi-line gradient links</title>
    <link href="https://zellwk.com/blog/multi-line-gradient-links/"/>
    <updated>2020-01-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/multi-line-gradient-links/</id>
    <content type="html">&lt;p&gt;When I saw the CSS Tricks redesign, I was hooked. I loved the links with gradients. I told myself I’m going to use gradient links for my next project.&lt;/p&gt;
&lt;p&gt;That’s what I did for Learn JavaScript’s course portal. The links look like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/link.gif&quot; alt=&quot;Blue color link with blue underline. When hovered, the text has an orange to yellow gradient; underline becomes solid orange.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I want to share what I learned about creating gradient links&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;creating-gradient-text&quot;&gt;Creating Gradient Text&lt;/h2&gt;
&lt;p&gt;Chris Coyier wrote an &lt;a href=&quot;https://css-tricks.com/snippets/css/gradient-text/&quot; title=&quot;Creating gradient text&quot;&gt;article on creating gradient text&lt;/a&gt; back in 2012. The article is old, but it’s still valid. He gave the following snippet in the article:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gradient-text {
  background: -webkit-linear-gradient(#eee, #333);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;linear-gradient&lt;/code&gt; is now supported across all browsers. We don’t need to add the &lt;code&gt;-webkit&lt;/code&gt; prefix anymore. The code shortened can be shortened to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gradient-text {
  background: linear-gradient(#eee, #333);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/gradient-text.png&quot; alt=&quot;Text with vertical gradient. From light gray at the top to dark gray at the bottom.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;creating-a-slanted-gradient&quot;&gt;Creating a slanted gradient&lt;/h3&gt;
&lt;p&gt;We can provide an angle to &lt;code&gt;linear-gradient&lt;/code&gt; to change the angle of the gradient. After playing around for a bit, I decided to use &lt;code&gt;120deg&lt;/code&gt; as the angle.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gradient-text {
  background: linear-gradient(120deg, #ab4e19, #c99a2e);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/gradient-text-2.png&quot; alt=&quot;Text with linear gradient set to 120 degrees.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;multi-line-gradient-text&quot;&gt;Multi-line gradient text&lt;/h3&gt;
&lt;p&gt;The snippet above supports multi-line gradient text on Chrome, Firefox, and Edge. But it doesn’t work on Safari. Text that goes into the second (or later) rows become completely transparent.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/multiline-safari.png&quot; alt=&quot;Second row of text on Safari is transparent.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I didn’t understand why, so I inspected the links on CSS Tricks. I noticed they used a &lt;a href=&quot;https://css-tricks.com/almanac/properties/b/box-decoration-break/&quot; title=&quot;Box decoration break&quot;&gt;&lt;code&gt;box-decoration-break&lt;/code&gt;&lt;/a&gt; property. The multiline gradient text works on Safari after I set &lt;code&gt;box-decoration-break&lt;/code&gt; to &lt;code&gt;clone&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gradient-text {
  background: linear-gradient(120deg, #ab4e19, #c99a2e);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  -webkit-box-decoration-break: clone;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/multiline-safari-fixed.png&quot; alt=&quot;Gradient text on safari fixed.&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;underlines&quot;&gt;Underlines&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Links should have underlines&lt;/strong&gt;. The underlines make it obvious that links are links.&lt;/p&gt;
&lt;p&gt;I tried putting the &lt;code&gt;.gradient-text&lt;/code&gt; snippet onto links, but I discovered there weren’t any underlines.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/multiline-safari-fixed.png&quot; alt=&quot;Gradient text on safari fixed.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;I dug around and realised that &lt;code&gt;-webkit-text-fill-color&lt;/code&gt; changes the &lt;code&gt;text-decoration-color&lt;/code&gt;. When we set &lt;code&gt;-webkit-text-fill-color&lt;/code&gt; to transparent, we also set &lt;code&gt;text-decoration-color&lt;/code&gt; to &lt;code&gt;transparent&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/text-fill-color.gif&quot; alt=&quot;Textsfill-color: transparent set text decoration color to transparent as well&quot;&gt;&lt;/figure&gt;
&lt;p&gt;So the easiest way to bring back the underline is to change &lt;code&gt;text-decoration-color&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;a {
  background-image: linear-gradient(120deg, #ab4e19, #c99a2e);
  text-decoration-color: #ab4e19;
  /*...*/
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/text-decoration-color.png&quot; alt=&quot;Set text decoration color to orange.&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;gradient-underlines&quot;&gt;Gradient underlines&lt;/h3&gt;
&lt;p&gt;I thought about creating a gradient underline since the text contains a gradient. Unfortunately, it’s not possible. 😢.&lt;/p&gt;
&lt;p&gt;You can only create gradient underlines with &lt;code&gt;background-image&lt;/code&gt;. (See “&lt;a href=&quot;https://css-tricks.com/styling-underlines-web/&quot;&gt;styling underlines for the web&lt;/a&gt;” for a list of possible methods to create underlines). We can’t use &lt;code&gt;background-image&lt;/code&gt; to create gradient underlines since we used it to create the gradient text.&lt;/p&gt;
&lt;h3 id=&quot;but-the-underline-looks-ugly!&quot;&gt;But the underline looks ugly!&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;text-decoration&lt;/code&gt; underline looks ugly at large font sizes. But when they’re ok when they’re at normal font sizes.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/link.gif&quot; alt=&quot;Blue color link with blue underline. When hovered, text has a orange to yellow gradient; underline becomes solid orange.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I suggest you don’t add &lt;code&gt;text-decoration&lt;/code&gt; underlines to large text. Consider &lt;a href=&quot;https://css-tricks.com/styling-underlines-web/&quot; title=&quot;Styling underlines for the web&quot;&gt;creating underlines with a different method &lt;/a&gt;instead.&lt;/p&gt;
&lt;h2 id=&quot;gradient-%2B-focus&quot;&gt;Gradient + Focus&lt;/h2&gt;
&lt;p&gt;Gradient links look amazing with focus outlines. &lt;a href=&quot;https://zellwk.com/blog/style-hover-focus-active-states&quot; title=&quot;Styles focus states different from other states&quot;&gt;Just saying&lt;/a&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;
  &lt;img src=&quot;https://zellwk.com/images/2020/multi-line-gradient/focus.gif&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
</content>
  </entry>
  
  <entry>
    <title>Year-end review: 2019</title>
    <link href="https://zellwk.com/blog/review-2019/"/>
    <updated>2020-01-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/review-2019/</id>
    <content type="html">&lt;p&gt;2019 has ended. Once again, I want to conduct my year-end review in public. This time, in a lot more depth and rawness compared to the previous years.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I’m going to split the review into four sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work&lt;/li&gt;
&lt;li&gt;Non-work&lt;/li&gt;
&lt;li&gt;Major learnings&lt;/li&gt;
&lt;li&gt;2020&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;work&quot;&gt;Work&lt;/h2&gt;
&lt;p&gt;I want to talk about six things in this section:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Blog posts&lt;/li&gt;
&lt;li&gt;Money matters&lt;/li&gt;
&lt;li&gt;Traffic&lt;/li&gt;
&lt;li&gt;Email subscribers&lt;/li&gt;
&lt;li&gt;Team&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;blog-posts&quot;&gt;Blog posts&lt;/h3&gt;
&lt;p&gt;I wrote one blog post a week for the entire year (except during launch periods).&lt;/p&gt;
&lt;p&gt;I’m happy about this. I felt it was an impossible feat a few years back. But now, it’s becoming a norm. The amount of work I’m putting into the blog is a testament to my dedication to this field.&lt;/p&gt;
&lt;h3 id=&quot;money-matters&quot;&gt;Money matters&lt;/h3&gt;
&lt;p&gt;Here are my revenue figures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018: $93k&lt;/li&gt;
&lt;li&gt;2019: $78k&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;98% of my income this year came from &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;. I’m happy that the course is doing well. But I’m also worried because I have a single source of revenue. It feels like I’m putting all my eggs in one basket.&lt;/p&gt;
&lt;p&gt;This worry had a major influence on my panic issues. (More about panic later).&lt;/p&gt;
&lt;p&gt;I expected the decrease in revenue because I let students pay for Learn JavaScript over 12 months. I’m still waiting for 6 months worth of payments, which should amount to $10k.&lt;/p&gt;
&lt;p&gt;I noticed some students defaulted in their 12-month payments. I was upset about this for 2 months. But I decided to take it in my stride because it’s part and parcel of doing business.&lt;/p&gt;
&lt;h3 id=&quot;traffic&quot;&gt;Traffic&lt;/h3&gt;
&lt;p&gt;Traffic to my blog doubled in 2019:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;November 2018: 59,847 users&lt;/li&gt;
&lt;li&gt;November 2019: 116,602 users&lt;/li&gt;
&lt;/ul&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2020/review-2019/traffic-nov.png&quot; alt=&quot;Traffic to my blog in November.&quot;&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Dec 2017 to Dec 2018: 543,951&lt;/li&gt;
&lt;li&gt;Dec 2018 to Dec 2019: 993,331&lt;/li&gt;
&lt;/ul&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2020/review-2019/traffic-year.png&quot; alt=&quot;Comparison of the traffic to my blog.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Almost a million people visited my website in 2019. I didn’t know so many people read my blog.&lt;/p&gt;
&lt;p&gt;I’m grateful for the opportunity to share my thoughts and learnings.&lt;/p&gt;
&lt;p&gt;I’m humbled by how technology allowed us to gather in the online space.&lt;/p&gt;
&lt;p&gt;And I’m surprised how hard work—one day at a time—can produce tremendous results in a couple of years. (I’ve been blogging since 2013).&lt;/p&gt;
&lt;p&gt;Sometimes, like today, I unconsciously compare my results to other people who seem to be doing better. And I feel bad, weak, slow, and worthless—for a moment.&lt;/p&gt;
&lt;p&gt;Then, I tell myself that every step is progress. I acknowledge the work I did. And I look forward to the work I’ll be doing.&lt;/p&gt;
&lt;h3 id=&quot;email-subscribers&quot;&gt;Email subscribers&lt;/h3&gt;
&lt;p&gt;Email subscribers didn’t do as well as traffic. It didn’t move much.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;January 2019: 19,000 subscribers&lt;/li&gt;
&lt;li&gt;January 2020: 22,491 subscribers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Worth noting: I deleted 6,000 cold subscribers from my list in July.&lt;/p&gt;
&lt;p&gt;I can probably do something to improve conversion rates from traffic to email subscribers. But this is not a priority right now. I want to focus on completing Learn JavaScript first.&lt;/p&gt;
&lt;h3 id=&quot;team&quot;&gt;Team&lt;/h3&gt;
&lt;p&gt;I hired Michiko back in 2018. In 2019, I added Max to my team&lt;/p&gt;
&lt;p&gt;Michiko helps me with administrative things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Onboarding students to the Learn JavaScript platform&lt;/li&gt;
&lt;li&gt;Dealing with refunds&lt;/li&gt;
&lt;li&gt;Dealing with defaulted payments&lt;/li&gt;
&lt;li&gt;Scheduling blog posts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Max helps me proofread Learn JavaScript lessons before I release them.&lt;/p&gt;
&lt;p&gt;I’m super thankful to Michiko and Max. They’ve been a tremendous help.&lt;/p&gt;
&lt;h3 id=&quot;projects&quot;&gt;Projects&lt;/h3&gt;
&lt;p&gt;I started 2019 &lt;a href=&quot;https://zellwk.com/blog/review-2019&quot;&gt;planning to make four things&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete Learn JavaScript&lt;/li&gt;
&lt;li&gt;An introductory guide for web development&lt;/li&gt;
&lt;li&gt;Some structured mini-courses&lt;/li&gt;
&lt;li&gt;Improving the functionality of this blog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It was a big failure. I ended up focusing my energies only on Learn JavaScript (and I didn’t even complete it).&lt;/p&gt;
&lt;p&gt;Speaking about Learn JavaScript, I want to stress that I’ve done good work for the course. It simply was too big of a beast than I imagined it to be.&lt;/p&gt;
&lt;p&gt;Materials-wise, it’s the best value-for-money course out there on the internet because of the depth I cover. There are a lot of lessons, and the quality of each lesson is superb.&lt;/p&gt;
&lt;h2 id=&quot;non-work-stuff&quot;&gt;Non-work stuff&lt;/h2&gt;
&lt;p&gt;I want to talk about six more things in this section:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Housing&lt;/li&gt;
&lt;li&gt;Parenting&lt;/li&gt;
&lt;li&gt;Health&lt;/li&gt;
&lt;li&gt;Spirituality&lt;/li&gt;
&lt;li&gt;Side projects&lt;/li&gt;
&lt;li&gt;Investments&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;housing&quot;&gt;Housing&lt;/h3&gt;
&lt;p&gt;I got the keys to my new house in October!&lt;/p&gt;
&lt;p&gt;I’m working on designing the interior of the house (with an interior designer) right now. I’m excited about finally creating a space for myself and my family.&lt;/p&gt;
&lt;p&gt;The house comes with additional responsibilities though. I have to pay ~$2,000 each month for the housing loan. It’s quite a heavy expense.&lt;/p&gt;
&lt;p&gt;I hope to clear my housing loan in five years if possible. But that means I need to make a lot more money compared to what I’m making.&lt;/p&gt;
&lt;h3 id=&quot;parenting&quot;&gt;Parenting&lt;/h3&gt;
&lt;p&gt;My daughter is now a 1-year-old. She’s bubbly and cute.&lt;/p&gt;
&lt;p&gt;I love her.&lt;/p&gt;
&lt;p&gt;She sticks around me a lot, but this can be irritating because I can’t get work done.&lt;/p&gt;
&lt;p&gt;I can’t say I’ve been an excellent Dad for the past year. I felt I haven’t been a good role model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I didn’t manage my own emotions and physical well being well enough&lt;/li&gt;
&lt;li&gt;I couldn’t enforce the boundaries I set (even on myself)&lt;/li&gt;
&lt;li&gt;Sometimes, I run away and hide from her 😢.&lt;/li&gt;
&lt;li&gt;When I have the space to be with her, I’m not mentally around 100% of the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to become a better parent in 2020.&lt;/p&gt;
&lt;h3 id=&quot;health&quot;&gt;Health&lt;/h3&gt;
&lt;p&gt;I discovered I had huge panic issues in October. I didn’t know the panic existed previously because I learned to block it out when I was younger.&lt;/p&gt;
&lt;p&gt;My panic hindered me quite a lot. For example, I get scared when I’m alone with my child. I’m afraid I’ll do something that’ll screw up her life for good.&lt;/p&gt;
&lt;p&gt;Another example: I’m scared when I write Learn JavaScript (especially when it comes to the Accessibility section). I’m afraid I’ll give subpar information, or worse, wrong information.&lt;/p&gt;
&lt;p&gt;My panic triggers include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Being afraid I’ll screw something up&lt;/li&gt;
&lt;li&gt;Being afraid I’m doing something wrong&lt;/li&gt;
&lt;li&gt;Being afraid I’m doing the wrong things&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The next portion may sound weird and twisted.&lt;/p&gt;
&lt;p&gt;I realised I used panic in lots of ways. Here are some examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To prevent myself from hurting others&lt;/li&gt;
&lt;li&gt;To manipulate (soften) others when they’re angry with me&lt;/li&gt;
&lt;li&gt;To apologise&lt;/li&gt;
&lt;li&gt;To run away&lt;/li&gt;
&lt;li&gt;As a form of entertainment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I still don’t understand (5). It came up a week before I wrote this review, so I haven’t explored it yet. I also think I have more triggers, but I’m not aware of them yet.&lt;/p&gt;
&lt;p&gt;I want to explore more about my panic, anxiety and, worry issues.&lt;/p&gt;
&lt;h3 id=&quot;spirituality&quot;&gt;Spirituality&lt;/h3&gt;
&lt;p&gt;I learned more about Shamanism this year. The more I learn about the spiritual world, the more I’m convinced the spiritual world exists.&lt;/p&gt;
&lt;p&gt;I began to feel fluctuations in energy. I can tell when something is good or bad. It’s interesting.&lt;/p&gt;
&lt;p&gt;The spiritual world seems to be governed by a set of laws that most of us are not familiar with. I hope to explore in this aspect.&lt;/p&gt;
&lt;h3 id=&quot;side-projects&quot;&gt;Side projects&lt;/h3&gt;
&lt;p&gt;In the early part of the year, I spent about 50% of my working time writing sales emails for a company I knew.&lt;/p&gt;
&lt;p&gt;I learned a lot from this experience.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Writing is hard&lt;/li&gt;
&lt;li&gt;Writing for others is harder than writing for myself&lt;/li&gt;
&lt;li&gt;Writing doesn’t necessarily lead to sales. Sometimes it’s just an intermediate step&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don’t think I’ll ever write for others as a business. I’m not interested in it. I rather write courses for people like you.&lt;/p&gt;
&lt;h3 id=&quot;investments&quot;&gt;Investments&lt;/h3&gt;
&lt;p&gt;I didn’t invest a single cent for the past six years, even though I studied Finance.&lt;/p&gt;
&lt;p&gt;This is embarrassing.&lt;/p&gt;
&lt;p&gt;I decided to try copy-trading on Etoro and investing in some ETFs. I’m not sure how it’ll turn out. I guess I’ll report back when 2021 comes along.&lt;/p&gt;
&lt;h2 id=&quot;major-learnings&quot;&gt;Major learnings&lt;/h2&gt;
&lt;p&gt;Random ramblings that fall into three categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Theme and focus&lt;/li&gt;
&lt;li&gt;Production creation&lt;/li&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;theme-and-focus&quot;&gt;Theme and focus&lt;/h3&gt;
&lt;p&gt;2019 was a year without a theme. It started pretty well, but chaos enveloped me soon after.&lt;/p&gt;
&lt;p&gt;Somehow, I began working on interesting side projects (like writing sales emails one). And my plan to focus on Learn JavaScript got derailed.&lt;/p&gt;
&lt;p&gt;I also allowed panic to take over in November. (I stopped writing for an entire month). You didn’t notice this because Michiko helped me schedule the emails that were sent to you. If I did it myself… you probably wouldn’t have heard from me… I retreated into oblivion.&lt;/p&gt;
&lt;p&gt;Now I understand that having a focus is important.&lt;/p&gt;
&lt;p&gt;When I talk about focus, it’s not the Pomodoro-style kind of focus keeps you glued to your chair for 30-minutes. I’m talking about the bigger picture kind, like the direction and intention for the year.&lt;/p&gt;
&lt;p&gt;I want to work on this focus in 2020.&lt;/p&gt;
&lt;h3 id=&quot;product-creation&quot;&gt;Product creation&lt;/h3&gt;
&lt;p&gt;Four factors that come into play when creating courses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quality: The ease of understanding&lt;/li&gt;
&lt;li&gt;Quantity: The number of lessons&lt;/li&gt;
&lt;li&gt;Depth: Amount of details we go into&lt;/li&gt;
&lt;li&gt;Time: Time needed to create the materials&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An increase in (1), (2), or (3) increases the amount of time you need to create the materials.&lt;/p&gt;
&lt;p&gt;For Learn JavaScript, I intend for everyone to understand and master JavaScript. Anyone who goes through the course will be proficient at JavaScript. They’ll be able to wield it like an expert.&lt;/p&gt;
&lt;p&gt;This means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Quality has to be high&lt;/li&gt;
&lt;li&gt;Depth needs to be high&lt;/li&gt;
&lt;li&gt;Quantity needs to be high as a result of depth and quality. (Because there’s a shit load to cover when it comes to JavaScript).&lt;/li&gt;
&lt;li&gt;Time to create the materials go way up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I learned to be at peace with this creation process. I’m no longer worried about completing the product on time. It was never the goal. The goal was to complete the product with enough quality and depth.&lt;/p&gt;
&lt;p&gt;People who don’t understand why I’m taking so long will be pissed at me. But people who do will appreciate the work I’m doing.&lt;/p&gt;
&lt;p&gt;Communicating the degree of work I’m doing is hard. I need to become better at it. Saying I’m doing good work isn’t enough.&lt;/p&gt;
&lt;h3 id=&quot;trust-and-reputation&quot;&gt;Trust and reputation&lt;/h3&gt;
&lt;p&gt;I worried about breaking the “promise” that I’ll complete Learn JavaScript by Dec 2019 for the most part of the year (11 out of 12 months actually).&lt;/p&gt;
&lt;p&gt;But the “promise” wasn’t set in stone. I made an estimate, but I never promised to deliver everything by the estimate. It’s an estimate for a reason.&lt;/p&gt;
&lt;p&gt;But I was fucking worried. Why?&lt;/p&gt;
&lt;p&gt;I was afraid of this: Breaking the promise means I’m not trustworthy. Eventually, it’ll snowball into a bad reputation. People will stop trusting me altogether, and I won’t be able to continue the work I do. I won’t be able to sell anything anymore. Boohoo.&lt;/p&gt;
&lt;p&gt;I think I’ll say these few words for myself:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trust is precious.&lt;/li&gt;
&lt;li&gt;Trust is sacred.&lt;/li&gt;
&lt;li&gt;Being honest builds trust.&lt;/li&gt;
&lt;li&gt;Being accountable builds trust.&lt;/li&gt;
&lt;li&gt;Keep a promise once you made it.&lt;/li&gt;
&lt;li&gt;Once a promise is broken, the shattered trust is almost irreparable.&lt;/li&gt;
&lt;li&gt;If you break a promise, don’t make excuses. Take responsibility and make compensations or amendments.&lt;/li&gt;
&lt;li&gt;Continue to make promises. Continue to keep them. Especially towards yourself.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2020&quot;&gt;2020&lt;/h2&gt;
&lt;p&gt;Here’s a list of specific things I want for 2020:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For work&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Complete Learn JavaScript&lt;/li&gt;
&lt;li&gt;Begin writing a tiny CSS course&lt;/li&gt;
&lt;li&gt;Continue with 1 blog post per week&lt;/li&gt;
&lt;li&gt;Earn $150k in revenue&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For self&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Become fitter physically&lt;/li&gt;
&lt;li&gt;Reimagined identity from a lazy good-for-nothing to something better&lt;/li&gt;
&lt;li&gt;Have more awareness&lt;/li&gt;
&lt;li&gt;Work on my panic issues&lt;/li&gt;
&lt;li&gt;Work on my expression, both verbally and written form.&lt;/li&gt;
&lt;li&gt;Work on the urge to control&lt;/li&gt;
&lt;li&gt;Work on wanting perfection&lt;/li&gt;
&lt;li&gt;Work on stubbornness&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For knowledge and spirituality&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read 10 books in 2019&lt;/li&gt;
&lt;li&gt;Learn more about the spiritual world.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For my family&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understanding&lt;/li&gt;
&lt;li&gt;Growth&lt;/li&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For everyone else&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be able to learn to code if they want to&lt;/li&gt;
&lt;li&gt;Have the courage to pursue their dreams&lt;/li&gt;
&lt;li&gt;Have the persistence to stay on the path they chose&lt;/li&gt;
&lt;li&gt;Evolution to become better versions of themselves&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-plan&quot;&gt;The plan&lt;/h3&gt;
&lt;p&gt;I always worked to get what I wanted for the year, but I never get it. Why? After reflecting, I realised my goals were always bigger than what I wanted. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I wanted $150k revenue, but I wrote $200k.&lt;/li&gt;
&lt;li&gt;I wanted to read 10 books, but I wrote 20.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was indoctrinated with the idea of “thinking big” and “pursuing more”.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;2020 will be different. It’ll be weird&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I’m ready to throw away everything I mentioned above. And I’m going to &lt;strong&gt;focus the year on three things&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reflection&lt;/li&gt;
&lt;li&gt;Intention&lt;/li&gt;
&lt;li&gt;Awareness&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are three things I want to work on for sure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reducing exaggeration and wanting of more&lt;/li&gt;
&lt;li&gt;Learning to be kinder and gentler to myself and others&lt;/li&gt;
&lt;li&gt;Creating answers for myself, not others&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I intend to dive deeper into my world. To get real answers and remove the superficial layers. I intend to embrace the truth of what I’ll find (and not hide or run like I always do).&lt;/p&gt;
&lt;p&gt;Three statements that will help me through the year:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understanding is priority&lt;/li&gt;
&lt;li&gt;Epitome of discipline&lt;/li&gt;
&lt;li&gt;Never run, never give in, never give up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It was weird saying these things. I’m not sure if anything about 2020 makes sense at all.&lt;/p&gt;
&lt;p&gt;Okay. I’m out.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mongoose 101: Population</title>
    <link href="https://zellwk.com/blog/mongoose-population/"/>
    <updated>2019-12-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mongoose-population/</id>
    <content type="html">&lt;p&gt;MongoDB documents have a size limit of 16MB. This means you can use subdocuments (or embedded documents) if they are small in number.&lt;/p&gt;
&lt;p&gt;For example, Street Fighter characters have a limited number of moves. Ryu only has 4 special moves. In this case, it’s okay to use embed moves directly into Ryu’s character document.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/ryu.png&quot; alt=&quot;Ryu&#39;s document.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;But if you have data that can contain an unlimited number of subdocuments, you need to design your database differently.&lt;/p&gt;
&lt;p&gt;One way is to create two separate models and combine them with populate.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;creating-the-models&quot;&gt;Creating the models&lt;/h2&gt;
&lt;p&gt;Let’s say you want to create a blog. And you want to store the blog content with MongoDB. Each blog has a title, content, and comments.&lt;/p&gt;
&lt;p&gt;Your first schema might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPostSchema = new Schema({
  title: String,
  content: String,
  comments: [{
    comment: String
  }]
})

module.exports = mongoose.model(&#39;BlogPost&#39;, blogPostSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a problem with this schema.&lt;/p&gt;
&lt;p&gt;A blog post can have an unlimited number of comments. If a blog post explodes in popularity and comments swell up, the document might exceed the 16MB limit imposed by MongoDB.&lt;/p&gt;
&lt;p&gt;This means we should not embed comments in blog posts. We should create a separate collection for comments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const comments = new Schema({
  comment: String
})

module.exports = mongoose.model(&#39;Comment&#39;, commentSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Mongoose, we can link up the two models with Population.&lt;/p&gt;
&lt;p&gt;To use Population, we need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;type&lt;/code&gt; of a property to &lt;code&gt;Schema.Types.ObjectId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;ref&lt;/code&gt; to the model we want to link too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, we want &lt;code&gt;comments&lt;/code&gt; in &lt;code&gt;blogPostSchema&lt;/code&gt; to link to the Comment collection. This is the schema we’ll use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPostSchema = new Schema({
  title: String,
  content: String,
  comments: [{ type: Schema.Types.ObjectId, ref: &#39;Comment&#39; }]
})

module.exports = mongoose.model(&#39;BlogPost&#39;, blogPostSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;creating-a-blog-post&quot;&gt;Creating a blog post&lt;/h2&gt;
&lt;p&gt;Let’s say you want to create a blog post. To create the blog post, you use &lt;code&gt;new BlogPost&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPost = new BlogPost({
  title: &#39;Weather&#39;,
  content: `How&#39;s the weather today?`
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A blog post can have zero comments. We can save this blog post with &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const doc = await blogPost.save()
console.log(doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/blog-post-no-comments.png&quot; alt=&quot;Created a blog post document without comments.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;creating-comments&quot;&gt;Creating comments&lt;/h2&gt;
&lt;p&gt;Now let’s say we want to create a comment for the blog post. To do this, we create and save the comment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const comment = new Comment({
  comment: `It&#39;s damn hot today`
})

const savedComment = await comment.save()
console.log(savedComment)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/comment.png&quot; alt=&quot;Created and saved a comment.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Notice the saved comment has an &lt;code&gt;_id&lt;/code&gt; attribute. We need to add this &lt;code&gt;_id&lt;/code&gt; attribute into the blog post’s &lt;code&gt;comments&lt;/code&gt; array. This creates the link.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Saves comment to Database
const savedComment = await comment.save()

// Adds comment to blog post
// Then saves blog post to database
const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })
blogPost.comments.push(savedComment._id)
const savedPost = await blogPost.save()
console.log(savedPost)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Blog post with comments.&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/blog-post-with-comments.png&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Blog post with comments.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;searching-blog-posts-and-its-comments&quot;&gt;Searching blog posts and its comments&lt;/h2&gt;
&lt;p&gt;If you tried to search for the blog post, you’ll see the blog post has an array of comment IDs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })
console.log(blogPost)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/blog-post-with-comments.png&quot; alt=&quot;Found blog post contains comment ids.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;There are four ways to get comments.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mongoose population&lt;/li&gt;
&lt;li&gt;Manual way #1&lt;/li&gt;
&lt;li&gt;Manual way #2&lt;/li&gt;
&lt;li&gt;Manual way #3&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;mongoose-population&quot;&gt;Mongoose Population&lt;/h3&gt;
&lt;p&gt;Mongoose allows you to fetch linked documents with the &lt;code&gt;populate&lt;/code&gt; method. What you need to do is call &lt;code&gt;.populate&lt;/code&gt; when you execute with &lt;code&gt;findOne&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you call populate, you need to pass in the &lt;code&gt;key&lt;/code&gt; of the property you want to populate. In this case, the &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;comments&lt;/code&gt;. (Note: Mongoose calls this the &lt;code&gt;key&lt;/code&gt; a “path”).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })
  .populate(&#39;comments&#39;)
console.log(blogPost)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/populated.png&quot; alt=&quot;Comments populated by Mongoose.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;manual-way-(method-1)&quot;&gt;Manual way (method 1)&lt;/h3&gt;
&lt;p&gt;Without Mongoose Populate, you need to find the comments manually. First, you need to get the array of comments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })
  .populate(&#39;comments&#39;)
const commentIDs = blogPost.comments
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you loop through &lt;code&gt;commentIDs&lt;/code&gt; to find each comment. If you go with this method, it’s slightly faster to use &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const commentPromises = commentIDs.map(_id =&amp;gt; {
  return Comment.findOne({ _id })
})
const comments = await Promise.all(commentPromises)
console.log(comments)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/found-comments.png&quot; alt=&quot;Comments found.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;manual-way-(method-2)&quot;&gt;Manual way (method 2)&lt;/h3&gt;
&lt;p&gt;Mongoose gives you an &lt;code&gt;$in&lt;/code&gt; operator. You can use this &lt;code&gt;$in&lt;/code&gt; operator to find all comments within an array. This syntax takes effort to get used to.&lt;/p&gt;
&lt;p&gt;If I had to do the manual way, I’d prefer Manual #1 over this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const commentIDs = blogPost.comments
const comments = await Comment.find({
    &#39;_id&#39;: { $in: commentIDs }
})

console.log(comments)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/found-comments.png&quot; alt=&quot;Comments found.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;manual-way-(method-3)&quot;&gt;Manual way (method 3)&lt;/h3&gt;
&lt;p&gt;For the third method, we need to change the schema. When we save a comment, we link the comment to the blog post.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Linking comments to blog post
const commentSchema = new Schema({
  comment: String
  blogPost: [{ type: Schema.Types.ObjectId, ref: &#39;BlogPost&#39; }]
})

module.exports = mongoose.model(&#39;Comment&#39;, commentSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to save the comment into the blog post, and the blog post id into the comment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })

// Saves comment
const comment = new Comment({
  comment: `It&#39;s damn hot today`,
  blogPost: blogPost._id
})
const savedComment = comment.save()

// Links blog post to comment
blogPost.comments.push(savedComment._id)
await blogPost.save()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you do this, you can search the Comments collection for comments that match your blog post’s id.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Searches for comments
const blogPost = await BlogPost.findOne({ title: &#39;Weather&#39; })
const comments = await Comment.find({ _id: blogPost._id })
console.log(comments)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-population/found-comments.png&quot; alt=&quot;Comments found.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I’d prefer Manual #3 over Manual #1 and Manual #2.&lt;/p&gt;
&lt;p&gt;And Population beats all three manual methods.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mongoose 101: Working with subdocuments</title>
    <link href="https://zellwk.com/blog/mongoose-subdocuments/"/>
    <updated>2019-12-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mongoose-subdocuments/</id>
    <content type="html">&lt;p&gt;You learned how to use Mongoose on a basic level to create, read, update, and delete documents in the &lt;a href=&quot;https://zellwk.com/blog/mongoose&quot;&gt;previous tutorial&lt;/a&gt;. In this tutorial, we’ll go a step further into subdocuments&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what%E2%80%99s-a-subdocument&quot;&gt;What’s a subdocument&lt;/h2&gt;
&lt;p&gt;In Mongoose, &lt;strong&gt;subdocuments&lt;/strong&gt; are documents that are &lt;strong&gt;nested in other documents&lt;/strong&gt;. You can spot a subdocument when a schema is nested in another schema.&lt;/p&gt;
&lt;p&gt;Note: MongoDB calls subdocuments &lt;strong&gt;embedded documents&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const childSchema = new Schema({
  name: String
});

const parentSchema = new Schema({
  // Single subdocument
  child: childSchema,

  // Array of subdocuments
  children: [ childSchema ]
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In practice, you don’t have to create a separate &lt;code&gt;childSchema&lt;/code&gt; like the example above. Mongoose helps you create nested schemas when you nest an object in another object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This code is the same as above
const parentSchema = new Schema({
  // Single subdocument
  child: { name: String },

  // Array of subdocuments
  children: [{name: String }]
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;updating-characterschema&quot;&gt;Updating characterSchema&lt;/h2&gt;
&lt;p&gt;Let’s say we want to create a character called Ryu. Ryu has three special moves.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hadoken&lt;/li&gt;
&lt;li&gt;Shinryuken&lt;/li&gt;
&lt;li&gt;Tatsumaki Senpukyaku&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ryu also has one ultimate move called:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Shinku Hadoken&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We want to save the names of each move. We also want to save the keys required to execute that move.&lt;/p&gt;
&lt;p&gt;Here, each move is a subdocument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const characterSchema = new Schema({
  name: { type: String, unique: true },
  // Array of subdocuments
  specials: [{
    name: String,
    keys: String
  }]
  // Single subdocument
  ultimate: {
    name: String,
    keys: String
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use the childSchema syntax if you wish to. It makes the Character schema easier to understand.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const moveSchema = new Schema({
  name: String,
  keys: String
})

const characterSchema = new Schema({
  name: { type: String, unique: true },
  // Array of subdocuments
  specials: [moveSchema],
  // Single subdocument
  ultimate: moveSchema
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;creating-documents-that-contain-subdocuments&quot;&gt;Creating documents that contain subdocuments&lt;/h2&gt;
&lt;p&gt;There are two ways to create documents that contain subdocuments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pass a nested object into &lt;code&gt;new Model&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add properties into the created document.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;method-1%3A-passing-the-entire-object&quot;&gt;Method 1: Passing the entire object&lt;/h3&gt;
&lt;p&gt;For this method, we construct a nested object that contains both Ryu’s name and his moves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = {
  name: &#39;Ryu&#39;,
  specials: [{
    name: &#39;Hadoken&#39;,
    keys: &#39;↓ ↘ → P&#39;
  }, {
    name: &#39;Shoryuken&#39;,
    keys: &#39;→ ↓ ↘ → P&#39;
  }, {
    name: &#39;Tatsumaki Senpukyaku&#39;,
    keys: &#39;↓ ↙ ← K&#39;
  }],
  ultimate: {
    name: &#39;Shinku Hadoken&#39;,
    keys: &#39;↓ ↘ → ↓ ↘ → P&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we pass this object into &lt;code&gt;new Character&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const char = new Character(ryu)
const doc = await char.save()
console.log(doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-subdocuments/ryu.png&quot; alt=&quot;Image of Ryu&#39;s document.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;method-2%3A-adding-subdocuments-later&quot;&gt;Method 2: Adding subdocuments later&lt;/h3&gt;
&lt;p&gt;For this method, we create a character with &lt;code&gt;new Character&lt;/code&gt; first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = new Character({ name: &#39;Ryu&#39; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we edit the character to add special moves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = new Character({ name: &#39;Ryu&#39; })
const ryu.specials = [{
  name: &#39;Hadoken&#39;,
  keys: &#39;↓ ↘ → P&#39;
}, {
  name: &#39;Shoryuken&#39;,
  keys: &#39;→ ↓ ↘ → P&#39;
}, {
  name: &#39;Tatsumaki Senpukyaku&#39;,
  keys: &#39;↓ ↙ ← K&#39;
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we edit the character to add the ultimate move:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = new Character({ name: &#39;Ryu&#39; })

// Adds specials
const ryu.specials = [{
  name: &#39;Hadoken&#39;,
  keys: &#39;↓ ↘ → P&#39;
}, {
  name: &#39;Shoryuken&#39;,
  keys: &#39;→ ↓ ↘ → P&#39;
}, {
  name: &#39;Tatsumaki Senpukyaku&#39;,
  keys: &#39;↓ ↙ ← K&#39;
}]

// Adds ultimate
ryu.ultimate = {
  name: &#39;Shinku Hadoken&#39;,
  keys: &#39;↓ ↘ → ↓ ↘ → P&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we’re satisfied with &lt;code&gt;ryu&lt;/code&gt;, we run &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = new Character({ name: &#39;Ryu&#39; })

// Adds specials
const ryu.specials = [{
  name: &#39;Hadoken&#39;,
  keys: &#39;↓ ↘ → P&#39;
}, {
  name: &#39;Shoryuken&#39;,
  keys: &#39;→ ↓ ↘ → P&#39;
}, {
  name: &#39;Tatsumaki Senpukyaku&#39;,
  keys: &#39;↓ ↙ ← K&#39;
}]

// Adds ultimate
ryu.ultimate = {
  name: &#39;Shinku Hadoken&#39;,
  keys: &#39;↓ ↘ → ↓ ↘ → P&#39;
}

const doc = await ryu.save()
console.log(doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-subdocuments/ryu.png&quot; alt=&quot;Image of Ryu&#39;s document.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;updating-array-subdocuments&quot;&gt;Updating array subdocuments&lt;/h2&gt;
&lt;p&gt;The easiest way to update subdocuments is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;findOne&lt;/code&gt; to find the document&lt;/li&gt;
&lt;li&gt;Get the array&lt;/li&gt;
&lt;li&gt;Change the array&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;save&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, let’s say we want to add &lt;code&gt;Jodan Sokutou Geri&lt;/code&gt; to Ryu’s special moves. The keys for &lt;code&gt;Jodan Sokutou Geri&lt;/code&gt; are &lt;code&gt;↓ ↘ → K&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, we find Ryu with &lt;code&gt;findOne&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mongoose documents behave like regular JavaScript objects. We can get the &lt;code&gt;specials&lt;/code&gt; array by writing &lt;code&gt;ryu.specials&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
const specials = ryu.specials
console.log(specials)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-subdocuments/specials.png&quot; alt=&quot;Log of specials.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This &lt;code&gt;specials&lt;/code&gt; array is a normal JavaScript array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
const specials = ryu.specials
console.log(Array.isArray(specials)) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the &lt;code&gt;push&lt;/code&gt; method to add a new item into &lt;code&gt;specials&lt;/code&gt;,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
ryu.specials.push({
  name: &#39;Jodan Sokutou Geri&#39;,
  keys: &#39;↓ ↘ → K&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After updating &lt;code&gt;specials&lt;/code&gt;, we run &lt;code&gt;save&lt;/code&gt; to save Ryu to the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
ryu.specials.push({
  name: &#39;Jodan Sokutou Geri&#39;,
  keys: &#39;↓ ↘ → K&#39;
})

const updated = await ryu.save()
console.log(updated)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-subdocuments/ryu-updated.png&quot; alt=&quot;Ryu updated with Jodan Sokutou Geri&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;updating-a-single-subdocument&quot;&gt;Updating a single subdocument&lt;/h2&gt;
&lt;p&gt;It’s even easier to update single subdocuments. You can edit the document directly like a normal object.&lt;/p&gt;
&lt;p&gt;Let’s say we want to change Ryu’s ultimate name from Shinku Hadoken to Dejin Hadoken. What we do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;findOne&lt;/code&gt; to get Ryu.&lt;/li&gt;
&lt;li&gt;Change the &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;ultimate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;save&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Characters.findOne({ name: &#39;Ryu&#39; })
ryu.ultimate.name = &#39;Dejin Hadoken&#39;

const updated = await ryu.save()
console.log(updated)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose-subdocuments/ryu-3.png&quot; alt=&quot;Ryu document with Dejin Hadoken.&quot;&gt;&lt;/figure&gt;
</content>
  </entry>
  
  <entry>
    <title>Mongoose 101</title>
    <link href="https://zellwk.com/blog/mongoose/"/>
    <updated>2019-12-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mongoose/</id>
    <content type="html">&lt;p&gt;Mongoose is a library that makes MongoDB easier to use. It does two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It gives structure to MongoDB Collections&lt;/li&gt;
&lt;li&gt;It gives you helpful methods to use&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this article, you’ll learn how to use Mongoose on a basic level.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;I assume you have done the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have installed MongoDB on your computer&lt;/li&gt;
&lt;li&gt;You know how to set up a local MongoDB connection&lt;/li&gt;
&lt;li&gt;You know how to see the data you have in your database&lt;/li&gt;
&lt;li&gt;You know what are “collections” in MongoDB&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you don’t know any of these, please read &lt;a href=&quot;https://zellwk.com/blog/local-mongodb&quot;&gt;“How to set up a local MongoDB connection”&lt;/a&gt; before you continue.&lt;/p&gt;
&lt;p&gt;I also assume you know how to use MongoDB to create a simple CRUD app. If you don’t know how to do this, please read &lt;a href=&quot;https://zellwk.com/blog/crud-express-mongodb&quot;&gt;“How to build a CRUD app with Node, Express, and MongoDB”&lt;/a&gt; before you continue.&lt;/p&gt;
&lt;h2 id=&quot;connecting-to-a-database&quot;&gt;Connecting to a database&lt;/h2&gt;
&lt;p&gt;First, you need to download Mongoose.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mongoose --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can connect to a database with the &lt;code&gt;connect&lt;/code&gt; method. Let’s say we want to connect to a database called &lt;code&gt;street-fighters&lt;/code&gt;. Here’s the code you need:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const url = &#39;mongodb://127.0.0.1:27017/street-fighters&#39;

mongoose.connect(url, { useNewUrlParser: true })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to know whether our connection has succeeded or failed. This helps us with debugging.&lt;/p&gt;
&lt;p&gt;To check whether the connection has succeeded, we can use the &lt;code&gt;open&lt;/code&gt; event. To check whether the connection failed, we use the &lt;code&gt;error&lt;/code&gt; event.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const db = mongoose.connection
db.once(&#39;open&#39;, _ =&amp;gt; {
  console.log(&#39;Database connected:&#39;, url)
})

db.on(&#39;error&#39;, err =&amp;gt; {
  console.error(&#39;connection error:&#39;, err)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try connecting to the database. You should see a log like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/connect-database.png&quot; alt=&quot;Connected to a database.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;creating-a-model&quot;&gt;Creating a Model&lt;/h2&gt;
&lt;p&gt;In Mongoose, you need to &lt;strong&gt;use models to create, read, update, or delete items&lt;/strong&gt; from a MongoDB collection.&lt;/p&gt;
&lt;p&gt;To create a Model, &lt;strong&gt;you need to create a Schema&lt;/strong&gt;. A Schema lets you** define the structure of an entry** in the collection. This entry is also called a document.&lt;/p&gt;
&lt;p&gt;Here’s how you create a schema:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const Schema = mongoose.Schema

const schema = new Schema({
  // ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://mongoosejs.com/docs/guide.html&quot;&gt;10 different kinds of values&lt;/a&gt; in a Schema. Most of the time, you’ll use these six:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;ObjectId&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s put this into practice.&lt;/p&gt;
&lt;p&gt;Say we want to create characters for our Street Fighter database.&lt;/p&gt;
&lt;p&gt;In Mongoose, it’s a normal practice to &lt;strong&gt;put each model in its own file.&lt;/strong&gt; So we will create a &lt;code&gt;Character.js&lt;/code&gt; file first. This &lt;code&gt;Character.js&lt;/code&gt; file will be placed in the &lt;code&gt;models&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;project/
    |- models/
        |- Character.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;Character.js&lt;/code&gt;, we create a &lt;code&gt;characterSchema&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const Schema = mongoose.Schema

const characterSchema = new Schema({
  // ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say we want to save two things into the database:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Name of the character&lt;/li&gt;
&lt;li&gt;Name of their ultimate move&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both can be represented with Strings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const Schema = mongoose.Schema

const characterSchema = new Schema({
  name: String,
  ultimate: String
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we’ve created &lt;code&gt;characterSchema&lt;/code&gt;, we can use mongoose’s &lt;code&gt;model&lt;/code&gt; method to create the model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = mongoose.model(&#39;Character&#39;, characterSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;creating-a-character&quot;&gt;Creating a character&lt;/h2&gt;
&lt;p&gt;Let’s say you have a file called &lt;code&gt;index.js&lt;/code&gt;. This is where we’ll perform Mongoose operations for this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;project/
    |- index.js
    |- models/
        |- Character.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, you need to load the Character model. You can do this with &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Character = require(&#39;./models/Character&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you want to create a character called Ryu. Ryu has an ultimate move called “Shinku Hadoken”.&lt;/p&gt;
&lt;p&gt;To create Ryu, you use the &lt;code&gt;new&lt;/code&gt;, followed by your model. In this case, it’s &lt;code&gt;new Character&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = new Character ({
  name: &#39;Ryu&#39;,
  ultimate: &#39;Shinku Hadoken&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;new Character&lt;/code&gt; creates the character in memory. It has not been saved to the database yet. &lt;strong&gt;To save to the database, you can run the &lt;code&gt;save&lt;/code&gt; method&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ryu.save(function (error, document) {
  if (error) console.error(error)
  console.log(document)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the code above, you should see this in the console.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/saved.png&quot; alt=&quot;Ryu saved to the database.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;promises-and-async%2Fawait&quot;&gt;Promises and Async/await&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mongoose supports promises.&lt;/strong&gt; It lets you write nicer code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This does the same thing as above
function saveCharacter (character) {
  const c = new Character(character)
  return c.save()
}

saveCharacter({
  name: &#39;Ryu&#39;,
  ultimate: &#39;Shinku Hadoken&#39;
})
  .then(doc =&amp;gt; { console.log(doc) })
  .catch(error =&amp;gt; { console.error(error) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use the &lt;code&gt;await&lt;/code&gt; keyword if you have an asynchronous function.&lt;/p&gt;
&lt;p&gt;If the Promise or Async/Await code looks foreign to you, I recommend reading &lt;a href=&quot;https://zellwk.com/blog/async-await&quot;&gt;“JavaScript async and await”&lt;/a&gt; before continuing with this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function runCode() {
  const ryu = new Character({
    name: &#39;Ryu&#39;,
    ultimate: &#39;Shinku Hadoken&#39;
  })

  const doc = await ryu.save()
  console.log(doc)
}

runCode()
  .catch(error =&amp;gt; { console.error(error) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I’ll use the async/await format for the rest of the tutorial.&lt;/p&gt;
&lt;h2 id=&quot;uniqueness&quot;&gt;Uniqueness&lt;/h2&gt;
&lt;p&gt;Mongoose adds a new character to the database each you use &lt;code&gt;new Character&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt;. If you run the code(s) above three times, you’d expect to see three Ryus in the database.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/three-ryus.png&quot; alt=&quot;Three Ryus in the database.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We don’t want to have three Ryus in the database. We want to have &lt;strong&gt;ONE Ryu only&lt;/strong&gt;. To do this, we can use the &lt;strong&gt;unique&lt;/strong&gt; option.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const characterSchema = new Schema({
  name: { type: String, unique: true },
  ultimate: String
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;unique&lt;/code&gt; option &lt;strong&gt;creates a unique index&lt;/strong&gt;. It ensures we cannot have two documents with the same value (for &lt;code&gt;name&lt;/code&gt; in this case).&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;unique&lt;/code&gt; to work properly, you need to &lt;strong&gt;clear the Characters collection&lt;/strong&gt;. To clear the Characters collection, you can use this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;await Character.deleteMany({})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try to add two Ryus into the database now. You’ll get an &lt;code&gt;E11000 duplicate key error&lt;/code&gt;. You won’t be able to save the second Ryu.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/dup-error.png&quot; alt=&quot;Duplicated key error.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Let’s add another character into the database before we continue the rest of the tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ken = new Character({
  name: &#39;Ken&#39;,
  ultimate: &#39;Guren Enjinkyaku&#39;
})

await ken.save()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/ryu-ken.png&quot; alt=&quot;Database contains two characters.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;retrieving-a-character&quot;&gt;Retrieving a character&lt;/h2&gt;
&lt;p&gt;Mongoose gives you two methods to find stuff from MongoDB.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;findOne&lt;/code&gt;: Gets one document.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;: Gets an array of documents&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;findone&quot;&gt;findOne&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;findOne&lt;/code&gt; &lt;strong&gt;returns the first document&lt;/strong&gt; it finds. You can specify any property to search for. Let’s search for &lt;code&gt;Ryu&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Character.findOne({ name: &#39;Ryu&#39; })
console.log(ryu)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/found-one.png&quot; alt=&quot;Found Ryu from the database.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;find&quot;&gt;find&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; &lt;strong&gt;returns an array&lt;/strong&gt; of documents. If you specify a property to search for, it’ll return documents that match your query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const chars = await Character.find({ name: &#39;Ryu&#39; })
console.log(chars)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/found-many-ryu.png&quot; alt=&quot;Combed through the database and found one character with the name Ryu.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you did not specify any properties to search for, it’ll return an array that contains all documents in the collection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const chars = await Character.find()
console.log(chars)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/found-many.png&quot; alt=&quot;Found two characters in the database.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;updating-a-character&quot;&gt;Updating a Character&lt;/h2&gt;
&lt;p&gt;Let’s say Ryu has three special moves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hadoken&lt;/li&gt;
&lt;li&gt;Shoryuken&lt;/li&gt;
&lt;li&gt;Tatsumaki Senpukyaku&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We want to add these special moves into the database. First, we need to update our &lt;code&gt;CharacterSchema&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const characterSchema = new Schema({
  name: { type: String, unique: true },
  specials: Array,
  ultimate: String
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we use one of these two ways to update a character:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;findOne&lt;/code&gt;, then use &lt;code&gt;save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;findOneAndUpdate&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;findone-and-save&quot;&gt;findOne and save&lt;/h3&gt;
&lt;p&gt;First, we use &lt;code&gt;findOne&lt;/code&gt; to get Ryu.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Character.findOne({ name: &#39;Ryu&#39; })
console.log(ryu)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we update Ryu to include his special moves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Character.findOne({ name: &#39;Ryu&#39; })
ryu.specials = [
  &#39;Hadoken&#39;,
  &#39;Shoryuken&#39;,
  &#39;Tatsumaki Senpukyaku&#39;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we modified &lt;code&gt;ryu&lt;/code&gt;, we run &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Character.findOne({ name: &#39;Ryu&#39; })
ryu.specials = [
  &#39;Hadoken&#39;,
  &#39;Shoryuken&#39;,
  &#39;Tatsumaki Senpukyaku&#39;
]

const doc = await ryu.save()
console.log(doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/ryu-updated.png&quot; alt=&quot;Updated Ryu.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;findoneandupdate&quot;&gt;findOneAndUpdate&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;findOneAndUpdate&lt;/code&gt; is the same as MongoDB’s &lt;code&gt;findOneAndModify&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Here, you search for Ryu and pass the fields you want to update at the same time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Syntax
await findOneAndUpdate(filter, update)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Usage
const doc = await Character.findOneAndUpdate(
  { name: &#39;Ryu&#39; },
  {
    specials: [
      &#39;Hadoken&#39;,
      &#39;Shoryuken&#39;,
      &#39;Tatsumaki Senpukyaku&#39;
    ]
  })

console.log(doc)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mongoose/ryu-updated.png&quot; alt=&quot;Updated Ryu.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;difference-between-findone-%2B-save-vs-findoneandupdate&quot;&gt;Difference between findOne + save vs findOneAndUpdate&lt;/h3&gt;
&lt;p&gt;Two major differences.&lt;/p&gt;
&lt;p&gt;First, the &lt;strong&gt;syntax for &lt;code&gt;findOne` + `save&lt;/code&gt; is easier to read&lt;/strong&gt; than &lt;code&gt;findOneAndUpdate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, &lt;code&gt;findOneAndUpdate&lt;/code&gt; does not trigger the &lt;code&gt;save&lt;/code&gt; middleware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’ll choose &lt;code&gt;findOne&lt;/code&gt; + &lt;code&gt;save&lt;/code&gt;&lt;/strong&gt; over &lt;code&gt;findOneAndUpdate&lt;/code&gt; anytime because of these two differences.&lt;/p&gt;
&lt;h2 id=&quot;deleting-a-character&quot;&gt;Deleting a character&lt;/h2&gt;
&lt;p&gt;There are two ways to delete a character:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;findOne&lt;/code&gt; + &lt;code&gt;remove&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findOneAndDelete&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;using-findone-%2B-remove&quot;&gt;Using findOne + remove&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ryu = await Character.findOne({ name: &#39;Ryu&#39; })
const deleted = await ryu.remove()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-findoneanddelete&quot;&gt;Using findOneAndDelete&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const deleted = await Character.findOneAndDelete({ name: &#39;Ken&#39; })
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;quick-summary&quot;&gt;Quick summary&lt;/h2&gt;
&lt;p&gt;You learned how to use Mongoose to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect to a database&lt;/li&gt;
&lt;li&gt;Create, Read, Update, and Delete documents&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>What to do if you&#39;re struggling with a Bootcamp</title>
    <link href="https://zellwk.com/blog/struggle-with-bootcamp/"/>
    <updated>2019-12-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/struggle-with-bootcamp/</id>
    <content type="html">&lt;p&gt;Bootcamps are fast-paced learning environments.&lt;/p&gt;
&lt;p&gt;Most people who enroll in a Bootcamp do quite well when it comes to HTML and CSS. But many people struggle with JavaScript. Some even get depressed about programming because they can’t understand JavaScript.&lt;/p&gt;
&lt;p&gt;If you’re one of these people, I want to let you know that you’re not alone. I receive emails from people like yourself occasionally.&lt;/p&gt;
&lt;p&gt;Here’s one I received from Seth.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/bootcamp/seth.png&quot; alt=&quot;Email says: I joined this coding bootcamp mid August and I was so much green to programming. I was really motivated and have been having so much interest in programming for quite a while now. I have been learning Javascript since I enrolled and I have grasped a little concept but right now I feel like QUITING, AM GIVING UP on coding. I don&#39;t feel the motivation anymore like I no longer get what the facilitator is saying. I really dont feel being in that bootcamp anymore. &quot;&gt;&lt;/figure&gt;
 &lt;!-- more --&gt;
&lt;h2 id=&quot;two-options&quot;&gt;Two options&lt;/h2&gt;
&lt;p&gt;If you enrolled in a Bootcamp and you’re struggling to catch up, (especially with JavaScript), you have two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay on&lt;/li&gt;
&lt;li&gt;Quit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both are valid options.&lt;/p&gt;
&lt;h2 id=&quot;option-1%3A-stay-on&quot;&gt;Option 1: Stay on&lt;/h2&gt;
&lt;p&gt;The good thing about staying on is you get exposed to how people do things on an advanced level. This helps when you’re trying to learn advanced stuff in the future.&lt;/p&gt;
&lt;p&gt;You will probably remain confused. And you may think you learned nothing while you’re in the Bootcamp. But the learnings stick for longer than you give it credit for.&lt;/p&gt;
&lt;p&gt;For example, let’s say you joined a Bootcamp that teaches you to become a Full Stack developer. In the Bootcamp, they teach you how to use Express and MongoDB to create a backend. You don’t remember much of this.&lt;/p&gt;
&lt;p&gt;Let’s say you feel ready to build apps a year after the Bootcamp. At this point, you know (roughly) what to use. You’ll reach for Express and MongoDB straightaway. This shaves off a huge amount of time &lt;a href=&quot;https://zellwk.com/blog/languages-to-learn/&quot;&gt;choosing a language&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You’ll also know the basics of the language. You’ll roughly know how to structure your code. This takes off a huge amount of time from browsing online tutorials.&lt;/p&gt;
&lt;h2 id=&quot;option-two%3A-quit&quot;&gt;Option Two: Quit&lt;/h2&gt;
&lt;p&gt;Our culture devalues quitting. You’re labeled as stupid and useless if you quit. But that can’t be farther from the truth.&lt;/p&gt;
&lt;p&gt;Successful people quit all the time. They quit things that do not forward them. If the Bootcamp doesn’t forward you in the direction you want to go in, then it’s best to quit.&lt;/p&gt;
&lt;p&gt;Also if you’re beating yourself up too hard, choosing to leave is a good option. If you leave, you will be able to focus your energies on the fundamentals and re-learn from there.&lt;/p&gt;
&lt;h2 id=&quot;which-to-choose%3F&quot;&gt;Which to choose?&lt;/h2&gt;
&lt;p&gt;Both are valid options. What you need depends on your current state. I won’t be able to help you make a decision. You must make it yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Whatever you choose, don’t give up coding.&lt;/strong&gt; Continue to learn. Everyone can code. You too.&lt;/p&gt;
&lt;p&gt;If you need help with JavaScript, I have a step-by-step course you will be interested in. https://learnjavascript.today.&lt;/p&gt;
&lt;p&gt;All the best :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding Homebrew</title>
    <link href="https://zellwk.com/blog/homebrew/"/>
    <updated>2019-11-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/homebrew/</id>
    <content type="html">&lt;p&gt;Homebrew is a package manager for Mac OS. It lets you download binaries, packages, and applications with a single command.&lt;/p&gt;
&lt;p&gt;In this article, I want to explain how to use Homebrew.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;installing-homebrew&quot;&gt;Installing Homebrew&lt;/h2&gt;
&lt;p&gt;You can install Homebrew with this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Installs Homebrew
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;updating-homebrew&quot;&gt;Updating Homebrew&lt;/h2&gt;
&lt;p&gt;To update homebrew, you use &lt;code&gt;brew update&lt;/code&gt;. This updates Homebrew to its latest version. (You always want Homebrew to be at the latest version before downloading anything).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# updates Homebrew
brew update
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;installing-a-package&quot;&gt;Installing a package&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Each package is called a formula&lt;/strong&gt;. To install a formula, you use the install command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, to install Node with Homebrew, you use this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re feeling bored, here’s a &lt;a href=&quot;https://formulae.brew.sh/&quot;&gt;list of everything&lt;/a&gt; you can install with Homebrew. You can also find a list of formulae I use in my &lt;a href=&quot;https://github.com/zellwk/dotfiles/blob/master/brew.sh&quot; title=&quot;Zell Dotfiles Brew.sh&quot;&gt;Dotfiles&lt;/a&gt; repository. (Unsure what dotfiles are? Read &lt;a href=&quot;https://zellwk.com/blog/mac-setup-2/&quot; title=&quot;Setting up my new Mac (Part 2—the migration process)&quot;&gt;this&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;upgrade-a-package&quot;&gt;Upgrade a package&lt;/h2&gt;
&lt;p&gt;To upgrade one package, you use this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Upgrades one package to the latest version
brew upgrade &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To upgrade all packages, you use &lt;code&gt;brew upgrade&lt;/code&gt; without specifying any formulas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Upgrades all packages to their latest version
brew upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;downgrade-a-package&quot;&gt;Downgrade a package&lt;/h2&gt;
&lt;p&gt;Let’s say you have the latest version of Node installed. You want to downgrade to a previous version.&lt;/p&gt;
&lt;p&gt;First, you need to use &lt;code&gt;brew search&lt;/code&gt; to find the package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew search node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You want to find the possible versions to download from the results. In this example, we can install node v8 or v10.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/brew/search.png&quot; alt=&quot;Brew search.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Install the version you want to use. In this case, lets install Node 10.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew install node@10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to unlink our current node version.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Unlinking node
brew unlink node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we need to link the version we installed. In this case, it’s Node@10. To link a formula, you use the &lt;code&gt;link&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Linking node
brew link node@10
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/brew/link.png&quot; alt=&quot;Linking Node 10.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Sometimes, (like in this case), you need to use &lt;code&gt;--force&lt;/code&gt; to link the formula.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew link node@10 --force
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/brew/link-force.png&quot; alt=&quot;Linking Node 10 with --force.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Now if you run &lt;code&gt;node -v&lt;/code&gt;, you should see that Node v10 is installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node -v
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/brew/version.png&quot; alt=&quot;Checking for Node version.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Notice its Node is now v10.16.3. Unfortunately, with Homebrew, we don’t get to use &lt;a href=&quot;https://zellwk.com/blog/semantic-versioning/&quot; title=&quot;Semantic Versioning&quot;&gt;Semantic Versioning&lt;/a&gt; with Homebrew, so you can’t install specific versions. You can only perform major version upgrade/downgrades.&lt;/p&gt;
&lt;p&gt;(But this is enough 99% of the time).&lt;/p&gt;
&lt;p&gt;To change back to the latest node version, you repeat the &lt;code&gt;unlink&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew unlink node@10
brew link node
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/brew/undo.png&quot; alt=&quot;Switches back from Node 10 to Node 12.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s the funny thing about Node + Homebrew.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;brew `link node&lt;/code&gt;, &lt;a href=&quot;https://github.com/Homebrew/homebrew-core/issues/34475&quot;&gt;Homebrew doesn’t install npm for you&lt;/a&gt;. So if you want to install any Node version, make sure you run &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;reinstall&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew reinstall node
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I really shouldn’t have used Node as an example 🤦‍♂️… But I still decided to use it because nobody talked about the npm problem I mentioned above. &lt;div class=&quot;kaomoji&quot;&gt;¯_(ツ)_/¯&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;deleting-a-package&quot;&gt;Deleting a package&lt;/h2&gt;
&lt;p&gt;To remove a package, you use the uninstall command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew uninstall &amp;lt;formula&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;brew-cleanup&quot;&gt;Brew cleanup&lt;/h2&gt;
&lt;p&gt;Once in a while, you might want to run &lt;code&gt;brew cleanup&lt;/code&gt; to remove state and outdated downloads from your computer. (Free up space! 😎).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;brew cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;brew-tap&quot;&gt;Brew tap&lt;/h1&gt;
&lt;p&gt;Homebrew manages a &lt;a href=&quot;https://zellwk.com/blog/homebrew/&quot;&gt;list of formulae&lt;/a&gt; in a place called &lt;code&gt;homebrew/core&lt;/code&gt;. When you install files, you install from this list.&lt;/p&gt;
&lt;p&gt;“Core” here means folks at Homebrew maintain the formulae list.&lt;/p&gt;
&lt;p&gt;Other people can let you install their stuff with Homebrew as well. To do this, they need to create a formulae list. Then, they have to publish this list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew tap&lt;/code&gt; lets you &lt;strong&gt;add a third-party formulae list&lt;/strong&gt; into Homebrew. Once you added the formulae list, you can use &lt;code&gt;brew install&lt;/code&gt; to install the formula.&lt;/p&gt;
&lt;p&gt;For example, to install MongoDB with Homebrew, you need to tap into &lt;code&gt;mongodb/brew&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Required to install MongoDB with Homebrew
brew tap mongodb/brew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you install MongoDB like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Installs MongoDB
brew install mongodb-community
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;brew-cask&quot;&gt;Brew Cask&lt;/h1&gt;
&lt;p&gt;Homebrew contains another formulae list called &lt;code&gt;homebrew/cask&lt;/code&gt;. This list lets you install GUI applications like Google Chrome, Safari, Atom, and others.&lt;/p&gt;
&lt;p&gt;To install a cask, you use the &lt;code&gt;brew cask install&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Installs Google Chrome
brew cask install google-chrome
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Protecting and syncing secret keys</title>
    <link href="https://zellwk.com/blog/environment-variables/"/>
    <updated>2019-11-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/environment-variables/</id>
    <content type="html">&lt;p&gt;You should never expose API keys or secrets. If you expose them, you might get into trouble. Once, I almost had to pay an excessive amount because my friend leaked my Amazon API key by accident.&lt;/p&gt;
&lt;p&gt;What’s the amount? I can’t remember, but I think somewhere between $20,000 to $60,000. Thankfully, Amazon waived the charges.&lt;/p&gt;
&lt;p&gt;It’s big trouble if you expose your API keys. So don’t expose them.&lt;/p&gt;
&lt;p&gt;The best way to protect your API keys is to use environment variables.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;setting-environment-variables&quot;&gt;Setting environment variables&lt;/h2&gt;
&lt;p&gt;An environment variable is a variable that’s set outside of the code you’re running. Environment variables can be set on a Machine level.&lt;/p&gt;
&lt;p&gt;If you use Bash, you can set environment variables in &lt;code&gt;.bash_profile&lt;/code&gt;. If you use ZSH, you can set environment variables in &lt;code&gt;.zshrc&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Exports a variable called helloworld
export helloworld=&amp;quot;Hello world!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After setting the environment variable, update your shell. You can do this by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Running &lt;code&gt;source&lt;/code&gt; on the file you changed. (like &lt;code&gt;source ~/.zshrc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Restarting the terminal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either way works.&lt;/p&gt;
&lt;p&gt;After you sourced the file (or restarted the terminal), type &lt;code&gt;echo $helloworld&lt;/code&gt; in your Terminal. You should see this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo $helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/dotenv/env-var.png&quot; alt=&quot;Echoing the environment variable.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;using-environment-variables&quot;&gt;Using environment variables&lt;/h2&gt;
&lt;p&gt;In Node, you can use the environment variable by writing &lt;code&gt;process.env.VARIABLE_NAME&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This is located in a Node file called server.js
const variable = process.env.helloworld
console.log(variable)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/dotenv/env-in-node.png&quot; alt=&quot;Terminal shows Hello world! when we run the server.js file.&gt;&lt;/figure&gt;
&lt;h2 id=&quot; a-better-way-to-use-environment-variables&quot;=&quot;&quot;&gt;A better way to use environment variables
&lt;p&gt;It can be a hassle to setup environment variables on your computer, on the server, and on computers for all your team members.&lt;/p&gt;
&lt;p&gt;The easy way to sync environment variables across all computers is to use a &lt;code&gt;dotenv&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;setting-up-dotenv&quot;&gt;Setting up dotenv&lt;/h3&gt;
&lt;p&gt;First, you’ll need to install &lt;code&gt;dotenv&lt;/code&gt; from npm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install dotenv --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; lets you save environment variables into a &lt;code&gt;.env&lt;/code&gt; file. I like to put this &lt;code&gt;.env&lt;/code&gt; file in the &lt;code&gt;secrets&lt;/code&gt; folder. This can go along with all my secret files (like &lt;code&gt;gcreds.json&lt;/code&gt;).&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/dotenv/dotenv-location.png&quot; alt=&quot;Placed the variables.env file in the secrets folder.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s the syntax to create an environment variable in a &lt;code&gt;.env&lt;/code&gt; file. (Note: DO NOT write the &lt;code&gt;export&lt;/code&gt; keyword!).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Creates a environment variable called &amp;quot;variable&amp;quot;.
variable=&amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;helloworld=&amp;quot;Hello world!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-variables-from-dotenv&quot;&gt;Using variables from dotenv&lt;/h3&gt;
&lt;p&gt;First, you need to load the &lt;code&gt;.env&lt;/code&gt; file. If you placed &lt;code&gt;.env&lt;/code&gt; in &lt;code&gt;./secrets&lt;/code&gt;, you can load the &lt;code&gt;.env&lt;/code&gt; file this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dotenv = require(&#39;dotenv&#39;).config({
  path: &#39;./secrets/.env&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you use the environment variable like before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const variable = process.env.helloworld
console.log(variable)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/dotenv/dotenv-usage.png&quot; alt=&quot;Logged helloworld environment variable in the console.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;syncing-the-.env-file-into-the-server&quot;&gt;Syncing the .env file into the server&lt;/h2&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://linux.die.net/man/1/rsync&quot;&gt;rsync&lt;/a&gt; to sync the &lt;code&gt;.env&lt;/code&gt; file into your server. (I use &lt;a href=&quot;https://m.do.co/c/64daa7a7a455&quot; title=&quot;Digital Ocean&quot;&gt;Digital Ocean&lt;/a&gt; if you’re curious. Use this link to get $50 credit).&lt;/p&gt;
&lt;p&gt;To use rsync, you can run a command like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rsync -avzr ./secrets/ user@host:/path-to-destination
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command syncs everything in the &lt;code&gt;./secrets&lt;/code&gt; folder into your destination folder. In the example above, I had a &lt;code&gt;greds.json&lt;/code&gt; file. This &lt;code&gt;gcreds.json&lt;/code&gt; file gets synced as well.&lt;/p&gt;
&lt;p&gt;Unfortunately, you need to enter &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; into the rsync command. This means the user and hostname of your server gets exposed (if you synced the command).&lt;/p&gt;
&lt;p&gt;A better way is to run &lt;code&gt;rsync&lt;/code&gt; in Node.&lt;/p&gt;
&lt;h3 id=&quot;node-rsync&quot;&gt;Node Rsync&lt;/h3&gt;
&lt;p&gt;First, you need to install rsync from npm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install rsync --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you need to require &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Rsync = require(&#39;rsync&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you create an rsync object with the options you want to include. Here’s what I use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const rsync = new Rsync()
  .shell(&#39;ssh&#39;) // Tells rsync to use SSH
  .set(&#39;stats&#39;) // Tells rysnc to display stats from the
  .flags(&#39;avz&#39;) // Tells rsync to use `a`, `v`, and `z` options. (Archive, Verbose, and Compress).
  .flags(&#39;n&#39;) // This is for dryrun. Test before syncing! :)
  .source(&#39;./secrets&#39;) // The folder you want to sync
  .destination(`${process.env.SSH_USER}@${process.env.SSH_HOST}:/path-to-destination`) // The destination
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice I used &lt;code&gt;SSH_USER&lt;/code&gt; and &lt;code&gt;SSH_HOST&lt;/code&gt; environment variables in the &lt;code&gt;rsyrc&lt;/code&gt; object? This allows me to access the server on any computer via SSH. (Provided the computer has a valid SSH private key).&lt;/p&gt;
&lt;p&gt;This also means I need to include &lt;code&gt;dotenv&lt;/code&gt; before &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dotenv = require(&#39;dotenv&#39;).config({
  path: &#39;./secrets/.env&#39;
})

const rsync = new Rsync()
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After setting up the &lt;code&gt;rsync&lt;/code&gt; object, you can pipe the outputs from rsync into the terminal. You can do it with this command.&lt;/p&gt;
&lt;p&gt;Note: You only do this if you want to see the results from rsync in your terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;rsync.output(
  function (data) {
    // do things like parse progress
    const string = Buffer.from(data).toString()
    console.log(string)
  }, function (data) {
    // do things like parse error output
    console.log(data)
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you execute rsync with this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Execute the command
rsync.execute(function (error, code, cmd) {
  if (error) console.error(error)
  console.log(cmd)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I put all the code above into a file called &lt;code&gt;sync.js&lt;/code&gt;. When I want to sync my secrets, I run this &lt;code&gt;sync.js&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node sync.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make things easier for me, I put this command as a script in my &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;sync&amp;quot;: &amp;quot;node sync.js&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;updating-environment-variables&quot;&gt;Updating environment variables&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; does not overwrite environment variables that are already set. If you need to overwrite environment variables, you can run this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Rsync = require(&#39;rsync&#39;)
const fs = require(&#39;fs&#39;)
const dotenv = require(&#39;dotenv&#39;)

const updateEnv = pathToConfig =&amp;gt; {
  const envConfig = dotenv.parse(fs.readFileSync(pathToConfig))
  for (const k in envConfig) {
    process.env[k] = envConfig[k]
  }
}

updateEnv(&#39;./secrets/.env&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;/figure&gt;</content>
  </entry>
  
  <entry>
    <title>Handling Errors in Express</title>
    <link href="https://zellwk.com/blog/express-errors/"/>
    <updated>2019-11-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/express-errors/</id>
    <content type="html">&lt;p&gt;I had a hard time learning how to handle errors in Express when I started. Nobody seemed to have written the answers I needed, so I had to learn it the hard way.&lt;/p&gt;
&lt;p&gt;Today, I want to share everything I know about handling errors in an Express app.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Let’s begin with synchronous errors.&lt;/p&gt;
&lt;h2 id=&quot;handling-synchronous-errors&quot;&gt;Handling synchronous errors&lt;/h2&gt;
&lt;p&gt;If you want to handle a synchronous error, you can &lt;code&gt;throw&lt;/code&gt; the error in an Express request handler. (Note: Request handlers are also called controllers. I prefer saying request handlers because they’re explicit and easy to understand).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/testing&#39;, (req, res) =&amp;gt; {
  throw new Error(&#39;Something broke! 😱&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These errors can be caught with an Express error handler. If you did not write a custom error handler (more on this below), Express will handle the error for you with a default error handler.&lt;/p&gt;
&lt;p&gt;Express’s default error handler will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the HTTP Status to 500&lt;/li&gt;
&lt;li&gt;Sends a text response to the requester&lt;/li&gt;
&lt;li&gt;Logs the text response in the console&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/sync-error.png&quot; alt=&quot;Error returns to the client&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;handling-asynchronous-errors&quot;&gt;Handling asynchronous errors&lt;/h2&gt;
&lt;p&gt;If you want to handle an asynchronous error, you need to send the error into an express error handler through the &lt;code&gt;next&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/testing&#39;, async (req, res, next) =&amp;gt; {
  return next(new Error(&#39;Something broke again! 😱&#39;))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/async-error-log.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you’re using Async/await in an Express app, you want to use a wrapper function like &lt;a href=&quot;https://zellwk.com/blog/express-errors/&quot;&gt;express-async-handler&lt;/a&gt;. This lets you write asynchronous code without try/catch blocks. I wrote more about this in “&lt;a href=&quot;https://zellwk.com/blog/async-await-express&quot;&gt;Using Async/await in Express&lt;/a&gt;”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const asyncHandler = require(&#39;express-async-handler&#39;)

app.post(&#39;/testing&#39;, asyncHandler(async (req, res, next) =&amp;gt; {
  // Do something
}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you wrapped the request handler with &lt;code&gt;express-async-handler&lt;/code&gt;, you can &lt;code&gt;throw&lt;/code&gt; the error as before, and it’ll be handled with an Express error handler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/testing&#39;, asyncHandler(async (req, res, next) =&amp;gt; {
  throw new Error(&#39;Something broke yet again! 😱&#39;)
}))
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/async-handler-error-log.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;writing-a-custom-error-handler&quot;&gt;Writing a custom error handler&lt;/h2&gt;
&lt;p&gt;Express error handlers take in four arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;req&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They must be placed after all your middlewares and routes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use(/*...*/)
app.get(/*...*/)
app.post(/*...*/)
app.put(/*...*/)
app.delete(/*...*/)

// Place your error handler after all other middlewares
app.use((error, req, res, next) =&amp;gt; { /* ... */ })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Express will stop using its default error handler once you create a custom error handler. To handle an error, you need to communicate with the frontend that’s requesting the endpoint. This means you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send over a valid HTTP status code&lt;/li&gt;
&lt;li&gt;Send over a valid response&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A valid HTTP status code depends on what happened. Here’s a list of common errors you should prepare for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;400 Bad Request Error:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Used when user fails to include a field (like no credit card information in a payment form)&lt;/li&gt;
&lt;li&gt;Also used when user enters incorrect information (Example: Entering different passwords in a password field and password confirmation field).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;401 Unauthorized Error:&lt;/strong&gt; Used when user enters incorrect login information (like username, email or password).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;403 Forbidden Error:&lt;/strong&gt; Used when user is not allowed access the endpoint.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404 Not Found Error:&lt;/strong&gt; Used when the endpoint cannot be found.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;500 Internal Server Error:&lt;/strong&gt; Used the request sent by the frontend is correct, but there was an error from the backend.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you determined the correct HTTP status code, you want to set the status with &lt;code&gt;res.status&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  // Bad request error
  res.status(400)
  res.json(/* ... */)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The HTTP status code should match the error message. For the status code to match the error message, you must send the status code together with the error.&lt;/p&gt;
&lt;p&gt;The easiest way is to use the &lt;a href=&quot;https://www.npmjs.com/package/http-errors&quot; title=&quot;Http errors package&quot;&gt;http-errors&lt;/a&gt; package. It lets you send three things in your errors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A status code&lt;/li&gt;
&lt;li&gt;A message to go with the error&lt;/li&gt;
&lt;li&gt;Any properties you’d like to send. This is optional.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Installing &lt;code&gt;http-errors&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install http-errors --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;http-errors&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createError = require(&#39;http-errors&#39;)

// Creating an error
throw createError(status, message, properties)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s work through an example together to make it clearer. Let’s say you tried to find a user by their email address. The user cannot be found. You want to throw an error that says “User not found”.&lt;/p&gt;
&lt;p&gt;When you create the error, you want to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Send a 400 Bad Request Error (because the user filled in incorrect information). You send this as the first parameter.&lt;/li&gt;
&lt;li&gt;Send a message that says “User not found”. You send this as the second parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.put(&#39;/testing&#39;, asyncHandler(async (req, res) =&amp;gt; {
  const { email } = req.body
  const user = await User.findOne({ email })

  // Throws error if user not found
  if (!user) throw createError(400, `User &#39;${email}&#39; not found`)
}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can get the status code with &lt;code&gt;error.status&lt;/code&gt; and the error message with &lt;code&gt;error.message&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Logging the error
app.use((error, req, res, next) =&amp;gt; {
  console.log(&#39;Error status: &#39;, error.status)
  console.log(&#39;Message: &#39;, error.message)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/http-errors.png&quot; alt=&quot;Status code and error message logged into the console. &quot;&gt;&lt;/figure&gt;
&lt;p&gt;Then, you set the error status with &lt;code&gt;res.status&lt;/code&gt;. You send the message with &lt;code&gt;res.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  // Sets HTTP status code
  res.status(error.status)

  // Sends response
  res.json({ message: error.message })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Personally I like to send the status, the message, and the stack trace for me to debug easily.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  // Sets HTTP status code
  res.status(error.status)

  // Sends response
  res.json({
    status: error.status,
    message: error.message,
    stack: error.stack
  })
})

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;fallback-status-code&quot;&gt;Fallback status code&lt;/h3&gt;
&lt;p&gt;If the error did not originate from &lt;code&gt;createError&lt;/code&gt;, it will not have a status property.&lt;/p&gt;
&lt;p&gt;Here’s an example. Let’s say you tried to read a file with &lt;code&gt;fs.readFile&lt;/code&gt;, but the file does not exist.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;)
const util = require(&#39;util&#39;)

// Converts readFile from callbacks to Async/await.
// Find out how to do this here: https://zellwk.com/blog/callbacks-to-promises
const readFilePromise = util.promisify(fs.readFile)

app.get(&#39;/testing&#39;, asyncHandler(async (req, res, next) =&amp;gt; {
  const data = await readFilePromise(&#39;some-file&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This error would not contain a &lt;code&gt;status&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  console.log(&#39;Error status: &#39;, error.status)
  console.log(&#39;Message: &#39;, error.message)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/fallback-error.png&quot; alt=&quot;Error does not contain the status property&quot;&gt;&lt;/figure&gt;
&lt;p&gt;In these cases, you can default to 500 Internal Server Error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  res.status(error.status || 500)
  res.json({
    status: error.status,
    message: error.message,
    stack: error.stack
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;changing-an-error%E2%80%99s-status-code&quot;&gt;Changing an error’s status code&lt;/h3&gt;
&lt;p&gt;Let’s say you want to retrieve a file from a user’s input. If the file does not exist, you should throw a 400 Bad Request Error, because it’s not your server’s fault.&lt;/p&gt;
&lt;p&gt;In this case, you want to use &lt;code&gt;try/catch&lt;/code&gt; to catch the original error. Then, you recreate an error with &lt;code&gt;createError&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/testing&#39;, asyncHandler(async (req, res, next) =&amp;gt; {
  try {
    const { file } = req.body
    const contents = await readFilePromise(path.join(__dirname, file))
  } catch (error) {
    throw createError(400, `File ${file} does not exist`)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;handling-404-errors&quot;&gt;Handling 404 errors&lt;/h2&gt;
&lt;p&gt;An endpoint is not found if a request falls through all your middlewares and routes.&lt;/p&gt;
&lt;p&gt;To handle a Not Found Error, you insert a middleware between your routes and your error handler. Here, create an error with &lt;code&gt;createError&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Middlewares...
// Routes...

app.use((req, res, next) =&amp;gt; {
  next(createError(404))
})

// Error handler...
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/not-found-error.png&quot; alt=&quot;Not found error sent to the client.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;regarding-%E2%80%9Ccannot-set-headers-after-they-are-sent-to-the-client%E2%80%9D&quot;&gt;Regarding “Cannot set headers after they are sent to the client”&lt;/h2&gt;
&lt;p&gt;Don’t panic if you see an error that says “Cannot set headers after they’re sent to the server”.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-errors/http-errors.png&quot; alt=&quot;Error: Cannot set headers after they&#39;re sent.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This error happens because the code ran methods that set response headers more than once in the same handler. These are the methods that set a response headers for you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;res.send&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.render&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.sendFile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.sendStatus&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;res.redirect&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, if you run &lt;code&gt;res.render&lt;/code&gt; and &lt;code&gt;res.json&lt;/code&gt; in the same response handler, you will get the “Cannot set headers after they’re sent” error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/testing&#39;, (req, res) =&amp;gt; {
  res.render(&#39;new-page&#39;)
  res.json({ message: &#39;¯\_(ツ)_/¯&#39; })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, if you get this error, double-check your response handlers to make it doesn’t run the above methods twice.&lt;/p&gt;
&lt;h3 id=&quot;when-streaming&quot;&gt;When streaming&lt;/h3&gt;
&lt;p&gt;If an error occurs when you’re streaming a response to the frontend, you will get the same “Cannot set headers” error.&lt;/p&gt;
&lt;p&gt;In this case, Express states you should delegate the error handling to the default Express handlers. It will send an error and close the connection for you.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use((error, req, res, next) =&amp;gt; {
  // Do this only if you&#39;re streaming a response
  if (res.headersSent) {
    return next(error)
  }

  // Rest of the error handlers
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all I know for now! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What programming languages should you learn?</title>
    <link href="https://zellwk.com/blog/languages-to-learn/"/>
    <updated>2019-10-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/languages-to-learn/</id>
    <content type="html">&lt;p&gt;There are LOTS of languages. Picking one (or two, or three! 😱) can be scary and overwhelming at first. In this article, I want to share three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What to consider when picking languages&lt;/li&gt;
&lt;li&gt;What NOT to worry about when you pick languages&lt;/li&gt;
&lt;li&gt;Recommendations for languages to learn&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;p&gt;For this article, I assume you want &lt;strong&gt;to be a web developer&lt;/strong&gt;. If you don’t want to be a web developer, then these considerations and recommendations do not apply to you.&lt;/p&gt;
&lt;h2 id=&quot;two-categories-of-web-development&quot;&gt;Two categories of web development&lt;/h2&gt;
&lt;p&gt;Web development can be divided into two large categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Frontend&lt;/li&gt;
&lt;li&gt;Backend&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote about the difference between Frontend and Backend in detail in “&lt;a href=&quot;https://zellwk.com/blog/frontend-vs-backend&quot; title=&quot;Frontend vs backend&quot;&gt;Frontend vs Backend&lt;/a&gt;”.&lt;/p&gt;
&lt;p&gt;The basic gist is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Frontend is about stuff a user can see (and touch).&lt;/li&gt;
&lt;li&gt;Backend is about stuff a user cannot see (or touch).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;must-learn-languages&quot;&gt;Must-learn languages&lt;/h2&gt;
&lt;p&gt;It doesn’t matter whether you want to specialize in Frontend or Backend (or both). &lt;strong&gt;You need to know these two languages&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote more about the difference between HTML, CSS, and JavaScript in &lt;a href=&quot;https://zellwk.com/blog/difference-between-html-css-javascript&quot;&gt;this article&lt;/a&gt;. The basic gist is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML is used to structure a website.&lt;/li&gt;
&lt;li&gt;CSS makes it look nice®.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;You don’t have to be an expert in either one&lt;/strong&gt;. You just need to know the basics before you decide whether to work on your Frontend or Backend skills.&lt;/p&gt;
&lt;p&gt;You also need to learn a little bit of server stuff (more on this in the &lt;a href=&quot;#configuring-a-server&quot;&gt;Server&lt;/a&gt; section later).&lt;/p&gt;
&lt;h2 id=&quot;learning-frontend-development&quot;&gt;Learning Frontend Development&lt;/h2&gt;
&lt;p&gt;If you want to specialize in Frontend, &lt;strong&gt;you need to become good at these three languages:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what I measure by good.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For HTML:
&lt;ol&gt;
&lt;li&gt;You know how to create a structure for the site&lt;/li&gt;
&lt;li&gt;You know when to use which tag (and why)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;For CSS:
&lt;ol&gt;
&lt;li&gt;You know how to create responsive websites&lt;/li&gt;
&lt;li&gt;You can get things to look exactly as you want it to&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;For JavaScript:
&lt;ol&gt;
&lt;li&gt;You know how to add interactions. For example, if a user clicks a button, you can get a menu to show up.&lt;/li&gt;
&lt;li&gt;You know how to use APIs&lt;/li&gt;
&lt;li&gt;You know how to create keyboard shortcuts&lt;/li&gt;
&lt;li&gt;You know how to make accessible components&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, there’s much more to each language than what I mentioned above. You can spend years honing your skills and becoming amazing at each language. But I know you’re not looking so far ahead yet 😉.&lt;/p&gt;
&lt;p&gt;When it comes to these three languages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML is easy for most people&lt;/li&gt;
&lt;li&gt;CSS starts off easy, but it becomes hard later&lt;/li&gt;
&lt;li&gt;JavaScript is scary for most people&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the way, I wrote a &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript&quot;&gt;huge course on JavaScript&lt;/a&gt;. If you need help, look at the course details. I’m sure it can help you.&lt;/p&gt;
&lt;h2 id=&quot;learning-backend-development&quot;&gt;Learning backend development&lt;/h2&gt;
&lt;p&gt;Backend can be split into three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Backend languages&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;backend-languages&quot;&gt;Backend languages&lt;/h3&gt;
&lt;p&gt;There are many backend languages. You can choose from:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.php.net/&quot; title=&quot;PHP&quot;&gt;PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;Node&quot;&gt;Node&lt;/a&gt; (JavaScript on the backend)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/&quot; title=&quot;Python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/&quot; title=&quot;Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://golang.org/&quot; title=&quot;Go&quot;&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These languages do the same thing. They let you serve up a website from a server (more on servers later). You don’t need to learn everything. Pick one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn one language.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t learn any other backend languages until you’re proficient enough to build stuff without googling (much).&lt;/p&gt;
&lt;p&gt;What language you choose depends on what you want to build.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to &lt;strong&gt;build Wordpress websites&lt;/strong&gt;, you need to learn &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you want to &lt;strong&gt;build an app&lt;/strong&gt;, you can go with &lt;strong&gt;any language&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to build an app, I recommend choosing one of these:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, &lt;strong&gt;doesn’t matter which one you pick&lt;/strong&gt;. Pick one and go. &lt;strong&gt;I chose Node&lt;/strong&gt; because I can use JavaScript both on the frontend and backend. I don’t have to switch between languages)&lt;/p&gt;
&lt;p&gt;When you pick a backend language, you also want to &lt;strong&gt;pick a framework&lt;/strong&gt; to go with it. It’s hard to build a backend without a framework. Plus, tutorials and books usually teach you how to use a framework (and not build things from scratch).&lt;/p&gt;
&lt;p&gt;I suggest you &lt;strong&gt;use these frameworks&lt;/strong&gt; if you don’t know what to choose:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/&quot; title=&quot;Express&quot;&gt;Express&lt;/a&gt; (for Node)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; (for Ruby)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; (for Python)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;databases&quot;&gt;Databases&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Databases let you save things.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example. Let’s say you logged into Twitter. How does Twitter know you’re you? The answer is they saved your login information and your preferences in a database.&lt;/p&gt;
&lt;p&gt;When it comes to databases, there are two main types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SQL Databases&lt;/li&gt;
&lt;li&gt;No-SQL Databases&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: SQL can be spoken as “sequel”. When people say “sequel”, they mean SQL. Same thing.&lt;/p&gt;
&lt;p&gt;Again, both types of databases work. You don’t want to learn both types when you’re starting out. &lt;strong&gt;Pick one and go.&lt;/strong&gt; Doesn’t matter which you pick. &lt;strong&gt;Don’t worry about pros and cons&lt;/strong&gt; (you’re won’t know enough to evaluate the differences at this stage).&lt;/p&gt;
&lt;p&gt;If you pick SQL databases, you can choose from three:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you pick No-SQL databases, popular choices include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, &lt;strong&gt;pick one and go&lt;/strong&gt;. Don’t get paralyzed. &lt;strong&gt;I chose MongoDB&lt;/strong&gt; because people were talking about MongoDB when I started learning. (See, pick and go!).&lt;/p&gt;
&lt;p&gt;You can (and will) learn about their differences as you get more advanced. No hurry to learn the differences. &lt;strong&gt;Build something first.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;servers&quot;&gt;Servers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Servers are where you host your website.&lt;/strong&gt; They can go from simple to super-duper complicated.&lt;/p&gt;
&lt;p&gt;For servers, you can choose from these platforms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zeit.co/&quot;&gt;Now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://m.do.co/c/64daa7a7a455&quot; title=&quot;Digital Ocean&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both &lt;strong&gt;Now and Netlify&lt;/strong&gt; let you host &lt;strong&gt;static frontend&lt;/strong&gt; websites easily. (And they’re free!). If you only need frontend stuff, then go for Now.sh or Netlify.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Heroku&lt;/strong&gt; is a good choice if you want to build an app, but you’re &lt;strong&gt;not ready to dive into server&lt;/strong&gt; configurations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Digital Ocean&lt;/strong&gt; is a good choice to &lt;strong&gt;configure your own server&lt;/strong&gt;. (The link above gives you $50 credit).&lt;/p&gt;
&lt;h3 id=&quot;configuring-a-server&quot;&gt;Configuring a server&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Servers are hosted on Linux machines&lt;/strong&gt; (not Windows, not Mac). This means you need to learn to use Linux when you configure a server.&lt;/p&gt;
&lt;p&gt;Before learning Linux, you need to &lt;strong&gt;be comfortable with the command line&lt;/strong&gt;. (&lt;a href=&quot;https://zellwk.com/blog/fear-of-command-line/&quot; title=&quot;Overcome fear of command line&quot;&gt;Here&lt;/a&gt;’s a good place to start).&lt;/p&gt;
&lt;p&gt;You also need to &lt;strong&gt;pick a language&lt;/strong&gt;. Here, you can choose from:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nginx.org/en/&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again, pick one and go. &lt;strong&gt;I used Apache initially&lt;/strong&gt; when I first built websites (because it was configured for me). &lt;strong&gt;Later, I moved on to Nginx&lt;/strong&gt; when I configured my server. Today, this blog (and almost everything I build) runs on a Digital Ocean server.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Here’s a quick summary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web development can be split into two categories&lt;/strong&gt;: Frontend and Backend.&lt;/p&gt;
&lt;p&gt;It doesn’t matter whether you want to be a frontend developer or backend developer (or full-stack, if that’s what you want). &lt;strong&gt;You need to know the basics of HTML and CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you want to become a frontend developer, you need to become good at HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;p&gt;If you want to become a backend developer, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose one backend language&lt;/li&gt;
&lt;li&gt;Choose one database language&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Start by building a website on Now.sh or Netlify. Then, move to Heroku. Finally, configure your own server with Digital Ocean.&lt;/p&gt;
&lt;p&gt;When you configure your server, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn to use Linux&lt;/li&gt;
&lt;li&gt;Choose between Apache or Nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s a lot of stuff going on here. &lt;strong&gt;Take your time to learn&lt;/strong&gt;. Don’t rush. Enjoy the learning process :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The difference between HTML, CSS, and JavaScript</title>
    <link href="https://zellwk.com/blog/difference-between-html-css-javascript/"/>
    <updated>2019-10-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/difference-between-html-css-javascript/</id>
    <content type="html">&lt;p&gt;In this article, I want to explain the difference between HTML, CSS, and JavaScript with an analogy. I hope it helps you understand what these languages are, and what they do.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Let’s start with HTML.&lt;/p&gt;
&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; stands for &lt;strong&gt;Hypertext Markup Language&lt;/strong&gt;. It creates the structure of a website.&lt;/p&gt;
&lt;p&gt;Let’s use a house as an analogy. Think about the house you currently live in. How many rooms does it have? My house has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One living room&lt;/li&gt;
&lt;li&gt;One kitchen&lt;/li&gt;
&lt;li&gt;Two bedrooms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I write this structure into code, it might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;house&amp;gt;
  &amp;lt;living-room&amp;gt;&amp;lt;/living-room&amp;gt;
  &amp;lt;kitchen&amp;gt;&amp;lt;/kitchen&amp;gt;
  &amp;lt;bedroom&amp;gt;&amp;lt;/bedroom&amp;gt;
  &amp;lt;bedroom&amp;gt;&amp;lt;/bedroom&amp;gt;
&amp;lt;/house&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each set of &lt;strong&gt;item within angled brackets&lt;/strong&gt; (&lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;) &lt;strong&gt;is called a tag&lt;/strong&gt;. Here, &lt;code&gt;&amp;lt;house&amp;gt;&lt;/code&gt; is a tag. It has one &lt;code&gt;&amp;lt;living-room&amp;gt;&lt;/code&gt;, one &lt;code&gt;&amp;lt;kitchen&amp;gt;&lt;/code&gt;, and two &lt;code&gt;&amp;lt;bedroom&amp;gt;&lt;/code&gt;s in it.&lt;/p&gt;
&lt;p&gt;HTML is similar to the code above. But &lt;strong&gt;HTML requires you to use a predefined list of tags&lt;/strong&gt; instead of &lt;code&gt;&amp;lt;house&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;living-room&amp;gt;&lt;/code&gt;. You can find a list of all possible tags on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot; title=&quot;HTML elements reference&quot;&gt;MDN&lt;/a&gt;. Examples of these tags include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The most basic of all tags in HTML is &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/strong&gt; For this article, I’ll use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to show you what basic HTML is about.&lt;/p&gt;
&lt;p&gt;In HTML, we can’t write &lt;code&gt;&amp;lt;house&amp;gt;&lt;/code&gt; because &lt;code&gt;&amp;lt;house&amp;gt;&lt;/code&gt; is not a valid HTML tag. We can use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as a replacement for the &lt;code&gt;&amp;lt;house&amp;gt;&lt;/code&gt; tag. But we need some way to identify “house”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To identify “house”, we use a class.&lt;/strong&gt; A HTML version of the house looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;house&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;living-room&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;kitchen&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can dive deeper.&lt;/p&gt;
&lt;p&gt;Consider the room you are in. What furniture do you have in the room? In my room, there’s a chair, a table, a wardrobe, and a bed.&lt;/p&gt;
&lt;p&gt;The HTML version of this would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;house&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;living-room&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;kitchen&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;
    &amp;lt;!-- Items in the bedroom --&amp;gt;
    &amp;lt;div class=&amp;quot;chair&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;table&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;wardrobe&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;bed&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The words between &lt;code&gt;&amp;lt;--&lt;/code&gt; and &lt;code&gt;--&amp;gt;&lt;/code&gt; are called comments.&lt;/strong&gt; They’re words meant for you and me to read. Browsers will not try to understand what they are. We use comments to write down thoughts for ourselves and other developers.&lt;/p&gt;
&lt;p&gt;You can still dive deeper.&lt;/p&gt;
&lt;p&gt;On my bed, I have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Two pillows&lt;/li&gt;
&lt;li&gt;One bolster&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;house&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;living-room&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;kitchen&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;
    &amp;lt;!-- Items in the bedroom --&amp;gt;
    &amp;lt;div class=&amp;quot;chair&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;table&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;wardrobe&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;bed&amp;quot;&amp;gt;
      &amp;lt;!-- Items on my bed --&amp;gt; 
      &amp;lt;div class=&amp;quot;pillow&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;pillow&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;bolster&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you go on, &lt;strong&gt;you can create the entire structure of your house in HTML.&lt;/strong&gt; This is what I mean when I say &lt;strong&gt;HTML is the structure&lt;/strong&gt; of a website.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;house&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;living-room&amp;quot;&amp;gt;&amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;kitchen&amp;quot;&amp;gt;&amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;bedroom&amp;quot;&amp;gt;&amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; stands for &lt;strong&gt;Cascading Stylesheets&lt;/strong&gt;. It lets you &lt;strong&gt;make a website look nicer&lt;/strong&gt;. In industry terms, we say you “style” a website with CSS.&lt;/p&gt;
&lt;p&gt;You can style an item by writing the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;selector {
  property: value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;selector&lt;/code&gt; refers to the tag or class, (or attributes, if you get a bit more advanced) you want to style. &lt;code&gt;property&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; pairs let you defined the style. These would make more sense if we go back to our house analogy again.&lt;/p&gt;
&lt;p&gt;Consider your bedroom. How’s the furniture arranged? For my bedroom, my:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bed is placed in the north-eastern corner&lt;/li&gt;
&lt;li&gt;Wardrobe is placed in the south-eastern corner&lt;/li&gt;
&lt;li&gt;door is at the south-west corner&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a website, we don’t have north/east/south/west directions. But we can still say where things are with top/right/bottom/left.&lt;/p&gt;
&lt;p&gt;Let’s say my bed is placed in the top-right corner of the room. This is what I might write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.bed {
  position: absolute;
  top: 0; 
  right: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;position&lt;/code&gt; to &lt;code&gt;absolute&lt;/code&gt; for elements the &lt;code&gt;bed&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;Push it all the way to the top&lt;/li&gt;
&lt;li&gt;Push it all the way to the right&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Besides locations, you can also change things like size and color.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.bed {
  width: 400px; 
  height: 200px; 
  background-color: lightskyblue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;404&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;vYBWLwM&quot; style=&quot;height: 404px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;vYBWLwM&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/vYBWLwM/&quot;&gt;
  vYBWLwM&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;You can find a list of all CSS properties &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Reference&quot; title=&quot;CSS reference&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: This is a huge list. You might get overwhelmed if you look at it. The good news is, you don’t have to learn everything at once. If you’re starting out from scratch, I highly suggest reading “&lt;a href=&quot;https://internetingishard.com/&quot; title=&quot;Interneting is hard&quot;&gt;Interneting is hard&lt;/a&gt;”. It explains the basics of HTML and CSS in a simple manner.&lt;/p&gt;
&lt;p&gt;(I’ll work on a step-by-step CSS course to bring you from novice to advance in future. Leave your email &lt;a href=&quot;https://zellwk.com/newsletter/&quot;&gt;here&lt;/a&gt; if you want to ask questions/get updates about this course).&lt;/p&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;HTML and CSS are static. You cannot change HTML and CSS (by changing the HTML or CSS file) after a website gets loaded. But &lt;strong&gt;JavaScript&lt;/strong&gt; gives you the ability to &lt;strong&gt;change the HTML and CSS&lt;/strong&gt; on the page.&lt;/p&gt;
&lt;p&gt;Let’s use the analogy of a house again to explain what JavaScript is. By the way, &lt;strong&gt;JavaScript and Java are two different things.&lt;/strong&gt; Don’t mix them up!&lt;/p&gt;
&lt;p&gt;Let’s say it’s dark right now. You walk into your room. What would you see?&lt;/p&gt;
&lt;p&gt;Nothing. Because it’s pitch black inside.&lt;/p&gt;
&lt;p&gt;You move your hands to the switch and you switch on the lights. This is an example of an interaction. Other examples are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turning on the TV&lt;/li&gt;
&lt;li&gt;Turning on the tap for running water&lt;/li&gt;
&lt;li&gt;Turning on the air-conditioner&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On a website, a basic interaction is similar to switching on the lights. You click a button and something happens. In this GIF below, I clicked a button and a menu pops out. I clicked the button again and the menu closes.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/html-css-js/off-canvas.gif&quot; alt=&quot;Menu pops out when I click a button. Menu closes when I click the button again.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You can do a lot more with JavaScript. Examples are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Play an animation when you scroll down&lt;/li&gt;
&lt;li&gt;Open a menu when you hit a button on the keyboard&lt;/li&gt;
&lt;li&gt;Create keyboard shortcuts for your website&lt;/li&gt;
&lt;li&gt;Create a carousel where people can switch between slides&lt;/li&gt;
&lt;li&gt;Make a calculator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s so much more about JavaScript than I can say with one blog post. If you’re interested in learning JavaScript, I wrote &lt;strong&gt;a course to teach you everything&lt;/strong&gt; you need to know &lt;strong&gt;about JavaScript&lt;/strong&gt;. It’s called &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript&quot;&gt;Learn JavaScript&lt;/a&gt;. Check it out! You’ll also see some inspirations on what you can build :)&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; lets you &lt;strong&gt;create the structure&lt;/strong&gt; of a website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; lets you &lt;strong&gt;make the website look nice&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; lets you &lt;strong&gt;change HTML and CSS&lt;/strong&gt;. Because it lets you change HTML and CSS, it can do tons of things.&lt;/p&gt;
&lt;p&gt;That’s it! Hope this helps you better understand the differences between HTML, CSS, and JavaScript!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Style hover, focus, and active states differently</title>
    <link href="https://zellwk.com/blog/style-hover-focus-active-states/"/>
    <updated>2019-10-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/style-hover-focus-active-states/</id>
    <content type="html">&lt;p&gt;I’ve been styling &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:focus&lt;/code&gt;, and &lt;code&gt;:active&lt;/code&gt; states the same way for years. I can’t remember when I started styling this way. Here’s the code I always use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Not the best approach. I&#39;ll explain why in this article
.selector {
  &amp;amp;:hover, 
  &amp;amp;:focus,
  &amp;amp;:active {
    // Styles here
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I paid more attention to keyboard accessibility (and therefore paying more attention to focus), I began to think we should not style hover, focus, and active states the same way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hover, focus, and active states should be styled different.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a simple reason: They’re different states!&lt;/p&gt;
&lt;p&gt;Today, I want to show you a magical way to style all three states effortlessly.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Let’s start with &lt;code&gt;:hover&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;styling-hover-states&quot;&gt;Styling hover states&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; triggers when a user brings their mouse over an element.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hover states are usually represented by a change in &lt;code&gt;background-color&lt;/code&gt; (and/or &lt;code&gt;color&lt;/code&gt;)&lt;/strong&gt;. The difference in states doesn’t have to be obvious because users already know they hovered on something.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;button {
  background-color: #dedede;
}

button:hover {
  background-color: #aaa;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/hover.gif&quot; alt=&quot;On hover, button darkens slightly.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;styling-focus-states&quot;&gt;Styling focus states&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:focus&lt;/code&gt; activates when an element receives focus. Elements can receive focus in two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When users tab into a focusable element&lt;/li&gt;
&lt;li&gt;When users click on a focusable element&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Focusable elements are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Links (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Buttons (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Form elements (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;Elements with &lt;code&gt;tabindex&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are a few important points to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Users cannot tab into an element with &lt;code&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/code&gt;, but they can click on it. The click triggers focus.&lt;/li&gt;
&lt;li&gt;On Safari and Firefox (Mac), clicks do not focus the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element. &lt;a href=&quot;https://zellwk.com/blog/inconsistent-button-behavior&quot; title=&quot;Inconsistent button behavior across browsers&quot;&gt;More info here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When you click on a link (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;), focus remains on the link until you lift your finger from your mouse. When you lift your finger, the focus gets redirected elsewhere if the &lt;code&gt;href&lt;/code&gt; points to a valid &lt;code&gt;id&lt;/code&gt; on the same page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For focus, we’re more concerned about users tabbing into elements than clicking on elements.&lt;/p&gt;
&lt;p&gt;When a user hits tab, they don’t know where the focus will go to. They can only guess. This is why &lt;strong&gt;we need a prominent change a user’s attention attention to the focused element&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The default focus style is okay most of the time. If you want to &lt;a href=&quot;https://zellwk.com/blog/design-focus-style&quot; title=&quot;Design your own focus&quot;&gt;design your own focus&lt;/a&gt;, think about these four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding an outline&lt;/li&gt;
&lt;li&gt;Creating animations with movement&lt;/li&gt;
&lt;li&gt;Changing &lt;code&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changing &lt;code&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since &lt;code&gt;background-color&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; changes often accompany &lt;code&gt;:hover&lt;/code&gt;, it makes sense that &lt;strong&gt;outlines or animations should accompany &lt;code&gt;:focus&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can use a combination of &lt;code&gt;outline&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, and &lt;code&gt;box-shadow&lt;/code&gt; properties to create nice focus styles. I share how to do this in “&lt;a href=&quot;https://zellwk.com/blog/creating-focus-style&quot; title=&quot;Creating a custom focus style&quot;&gt;Creating a custom focus style&lt;/a&gt;”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;button {
  background-color: #dedede;
}

button:hover {
  background-color: #aaa;
}

button:focus {
  outline: none;
  box-shadow: 0 0 0 3px lightskyblue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/focus.gif&quot; alt=&quot;Focus a button with Tab. When focused, shows an outline with box-shadow.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;styling-active-states&quot;&gt;Styling active states&lt;/h2&gt;
&lt;p&gt;When you interact with things in real life, you expect some sort of feedback. For example, if you push a button, you expect the button to get pressed.&lt;/p&gt;
&lt;p&gt;This feedback is useful on websites too. You can style the “push button” moment with &lt;code&gt;:active&lt;/code&gt;. &lt;strong&gt;&lt;code&gt;:active&lt;/code&gt; triggers when you interact with an element&lt;/strong&gt;. Interacting here means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Holding down your left mouse button on an element (even non-focusable ones)&lt;/li&gt;
&lt;li&gt;Holding down the Space key (on buttons)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;button:active {
  background-color: #333;
  border-color: #333;
  color: #eee;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/active.gif&quot; alt=&quot;Changes background-color and color when user holds their left mouse button down on the button.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Two weird things to take note of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Holding down Space triggers &lt;code&gt;:active&lt;/code&gt; on buttons, but holding down Enter doesn’t.&lt;/li&gt;
&lt;li&gt;Enter triggers links but it doesn’t create create an active state. Space doesn’t trigger links at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;default-styles-for-links&quot;&gt;Default styles for links&lt;/h3&gt;
&lt;p&gt;Links have a default active style. They turn red when they get clicked.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/link-active.gif&quot; alt=&quot;By default, links turn red when they get clicked.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;the-relationship-between-active-and-focus&quot;&gt;The relationship between active and focus&lt;/h3&gt;
&lt;p&gt;When you &lt;strong&gt;hold down the left mouse button&lt;/strong&gt; on a focusable element, you &lt;strong&gt;trigger the active state&lt;/strong&gt;. You also &lt;strong&gt;trigger the focus state&lt;/strong&gt; at the same time.&lt;/p&gt;
&lt;p&gt;When you release the left mouse button, focus remains on the element&lt;/p&gt;
&lt;p&gt;👆 is true for most focusable elements except links and buttons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For links:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you hold down left mouse button: Triggers &lt;code&gt;:active&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; state on Firefox and Chrome  Only triggers active on Safari (tested on Mac only)&lt;/li&gt;
&lt;li&gt;When you release left mouse button: &lt;code&gt;:focus&lt;/code&gt; remains on link (if the link’s &lt;code&gt;href&lt;/code&gt; does not match an &lt;code&gt;id&lt;/code&gt; on the same page). On Safari, focus goes back to &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For buttons:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you hold down left mouse button: Triggers &lt;code&gt;:active&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; state on Chrome only. Does not trigger &lt;code&gt;:focus&lt;/code&gt; at all in Safari and Firefox (Mac). I wrote about this strange behavior &lt;a href=&quot;https://zellwk.com/blog/inconsistent-button-behavior&quot; title=&quot;Inconsistent button behavior across browsers&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want clicks to focus on buttons, you need to add this JavaScript as early as you can. (As for why, you can read the article I linked to above for more information).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&#39;click&#39;, event =&amp;gt; {
  if (event.target.matches(&#39;button&#39;)) {
    event.target.focus()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have this code, click behaviour on buttons become:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you hold down left mouse button: Triggers &lt;code&gt;:active&lt;/code&gt; in all browsers. Triggers &lt;code&gt;:focus&lt;/code&gt; on Chrome only.&lt;/li&gt;
&lt;li&gt;When you release left mouse button: Triggers &lt;code&gt;:focus&lt;/code&gt; on Safari and Firefox (Mac). &lt;code&gt;:focus&lt;/code&gt; remains on button for other browsers.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Button&#39;s behavior on Safari after adding the JavaScript snippet above.&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/magic-mouse-safari.gif&quot; alt=&quot;Button behavior on Safari.&quot;&gt;&lt;figcaption&gt;Button&#39;s behavior on Safari after adding the JavaScript snippet above.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Now you know about hover, focus, and active states, I want to talk about styling all three.&lt;/p&gt;
&lt;h2 id=&quot;the-magic-combination&quot;&gt;The magic combination&lt;/h2&gt;
&lt;p&gt;The magic combination &lt;strong&gt;allows users to get feedback when they hover, focus, and interact&lt;/strong&gt; with an element. Here’s the code you need:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.element:hover,
.element:active {
  /* Change background/text color */ 
}

.element:focus {
  /* Show outline /* 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For mouse users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the user hovers over an element, &lt;code&gt;background-color&lt;/code&gt; (and/or &lt;code&gt;color&lt;/code&gt;) changes. They get feedback.&lt;/li&gt;
&lt;li&gt;When the user clicks on an element, focus outline shows. They get feedback.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/magic-mouse.gif&quot; alt=&quot;Mouse users receive feedback on hover and on click.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;For keyboard users:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the user tabs into an element, focus outline shows. They get feedback.&lt;/li&gt;
&lt;li&gt;When they interact with the element, &lt;code&gt;background-color&lt;/code&gt; (and/or &lt;code&gt;color&lt;/code&gt;) changes. They get feedback.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/magic-keyboard.gif&quot; alt=&quot;Keyboard users receive focus on Tab and on interaction.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Best of both worlds!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;I have not tested the magic combination thoroughly.&lt;/strong&gt; This is a proof of concept. I’d appreciate it if you help me with some tests and let me know how it fares.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you run tests, don’t use Codepen.&lt;/strong&gt; Focus states for links are weird on Codepen. If you hover over a link, the focus outline gets removed. Why? I don’t know. Sometimes I think it’s best to test stuff like these without any fancy tools. Just plain ol’ HTML, CSS, JS.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-non-magic-(but-might-be-better)-combination&quot;&gt;The non-magic (but might be better) combination&lt;/h2&gt;
&lt;p&gt;Like I mentioned above, clicks on buttons have a weird behavior in Safari and Firefox (Mac). If you added the JavaScript snippet I showed you, the magic combination still works. But it’s not perfect.&lt;/p&gt;
&lt;p&gt;For Safari and Firefox (Mac), this is what happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When users hold their mouse button down, nothing changes.&lt;/li&gt;
&lt;li&gt;When users lift their mouse button up, the element gets focus&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/magic-mouse-safari.gif&quot; alt=&quot;Button behavior on click in Safari.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you think this is enough affordance, then the magic combination works. You can stop here.&lt;/p&gt;
&lt;p&gt;But if you think there’s not enough affordance, you’d want to style &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:focus&lt;/code&gt;, and &lt;code&gt;:active&lt;/code&gt; separately.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.element:hover {
  /* Change background/text color */ 
}

.element:active {
  /* Another change in background/text color */
}

.element:focus {
  /* Show outline /* 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Button behavior on Safari if you styled all three states.&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/states/non-magic-safari.gif&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Button behavior on Safari if you styled all three states.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;That’s it! Hope you learned something today!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a custom focus style</title>
    <link href="https://zellwk.com/blog/creating-focus-style/"/>
    <updated>2019-10-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/creating-focus-style/</id>
    <content type="html">&lt;p&gt;When you create a custom focus style, you want to think about four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding an outline&lt;/li&gt;
&lt;li&gt;Creating animations that contain movement&lt;/li&gt;
&lt;li&gt;Changing the background color&lt;/li&gt;
&lt;li&gt;Changing the text color&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote more about this in my article on &lt;a href=&quot;https://zellwk.com/blog/design-focus-style&quot; title=&quot;Designing a focus style&quot;&gt;designing focus&lt;/a&gt;. During my research, I found three kinds of focus style I liked.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The one on Smashing Magazine&lt;/li&gt;
&lt;li&gt;The one on WTF Forms&lt;/li&gt;
&lt;li&gt;The one on Slack&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/create-focus/combined.png&quot; alt=&quot;Focus styles on Smashing Mag, WTF Forms and Slack&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Today, I want to show you how to create these focus styles and use them effortlessly across your website.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;creating-the-focus-for-smashing-magazine&quot;&gt;Creating the focus for Smashing Magazine&lt;/h2&gt;
&lt;p&gt;Smashing Magazine uses a large dotted outline for focus. To create this focus style, you set the &lt;code&gt;outline&lt;/code&gt; property to &lt;code&gt;3px dotted&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/create-focus/smashing.png&quot; alt=&quot;Focus styles on Smashing Magazine.&quot;&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;*:focus {
  outline: 3px dotted #761b15;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;dybzwPj&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Focus style Smashing Mag (default)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/dybzwPj/&quot;&gt;
  Focus style Smashing Mag (default)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;If you want to change the color of the outline, you can change the &lt;code&gt;outline-color&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.red-background *:focus {
  outline-color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;gOYxZMJ&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Focus style Smashing Mag (changing outline colors)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/gOYxZMJ/&quot;&gt;
  Focus style Smashing Mag (changing outline colors)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Alternatively, you can use CSS Variables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --outline-color: #761b15;
}

*:focus {
  outline: 3px dotted var(--outline-color);
}

.red-background {
  --outline-color: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;ZEzJVpK&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Focus style Smashing Mag (with CSS Variables)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/ZEzJVpK/&quot;&gt;
  Focus style Smashing Mag (with CSS Variables)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;creating-focus-styles-for-wtf-forms&quot;&gt;Creating focus styles for WTF Forms&lt;/h2&gt;
&lt;p&gt;The focus style for WTF forms contains two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A white border&lt;/li&gt;
&lt;li&gt;A blue border&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/create-focus/wtf.png&quot; alt=&quot;Focus styles for WTF Forms.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This style can be created with &lt;code&gt;box-shadow&lt;/code&gt;. The idea is you create two shadows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first shadow with the background’s color&lt;/li&gt;
&lt;li&gt;The second shadow with the focus’s color&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;*:focus {
  outline: none;
  box-shadow: 0 0 0 .075rem #fff, 
              0 0 0 .2rem #0069d4;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to change the focus color, you need to rewrite the entire &lt;code&gt;box-shadow&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.blue-background *:focus {
  outline: none;
  box-shadow: 0 0 0 .075rem #0069d4, 
              0 0 0 .2rem #fff;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: WTF Forms does not have styles for links and buttons. Only form elements. It doesn’t have styles for a darker background either. I created this demo according to what I thought looks okay.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;305&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;KKPvbag&quot; style=&quot;height: 305px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;WTF Forms focus style&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/KKPvbag/&quot;&gt;
  WTF Forms focus style&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;There’s an easier way. If you used CSS variables, you only need to switch the colors.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --focus-inner-color: #fff;
  --focus-outer-color: #0069d4;
}

*:focus {
  outline: none;
  box-shadow: 0 0 0 .075rem var(--focus-inner-color), 
              0 0 0 .2rem var(--focus-outer-color);
}

.blue-background {
  --focus-inner-color: #0069d4;
  --focus-outer-color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;ExYvGXQ&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;WTF Forms focus style (with CSS Variables)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/ExYvGXQ/&quot;&gt;
  WTF Forms focus style (with CSS Variables)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;creating-focus-styles-for-slack&quot;&gt;Creating focus styles for Slack&lt;/h2&gt;
&lt;p&gt;The focus style on Slack contains two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A dark blue outline&lt;/li&gt;
&lt;li&gt;A light-blue border&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/create-focus/slack.png&quot; alt=&quot;Focus styles on Slack.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This focus style can be created with the same technique as WTF Forms.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;*:focus {
  outline: none;
  box-shadow: 0 0 0 2px hsla(210, 52%, 42%, 1.00), 
              0 0 0 .6rem hsla(200, 72%, 83%, 0.75);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS Variables trick works wonders if you need to change colors.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --focus-inner-color: hsla(210, 52%, 42%, 1.00);
  --focus-outer-color: hsla(200, 72%, 83%, 0.75);
}

*:focus {
  outline: none;
  box-shadow: 0 0 0 2px var(--focus-inner-color), 
              0 0 0 .6rem var(--focus-outer-color);
}

.dark {
  --focus-inner-color: hsla(0, 0%, 100%, 0.75);
  --focus-outer-color: hsla(0, 0%, 100%, 0.25);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;JjPywVx&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Slack Forms focus style (with CSS Variables)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/JjPywVx/&quot;&gt;
  Slack Forms focus style (with CSS Variables)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;If you use this technique on elements with borders, you might want to remove the borders. It’s not pretty to see two stacking borders.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/create-focus/double-borders.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button:focus {
  border-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;rNBzPNr&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Slack Forms focus style (improved border)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/rNBzPNr/&quot;&gt;
  Slack Forms focus style (improved border)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;combined-demo&quot;&gt;Combined demo&lt;/h2&gt;
&lt;p&gt;I combined the different methods onto one demo for you to play with. Here it is:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;yLBOqLG&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Focus style&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/yLBOqLG/&quot;&gt;
  Focus style&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Designing a focus style</title>
    <link href="https://zellwk.com/blog/design-focus-style/"/>
    <updated>2019-10-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/design-focus-style/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Focus is important.&lt;/strong&gt; It tells us what element we’re currently focusing on. Most developers suggest keeping the default focus style.&lt;/p&gt;
&lt;p&gt;I think &lt;strong&gt;there are problems with the default style.&lt;/strong&gt; I tried searching for inspiration to design a better focus style, but I couldn’t find anything on this topic. So I did some quick research by visiting sites I use and paying attention to their focus styles.&lt;/p&gt;
&lt;p&gt;I want to document my research and findings in this article. I hope it helps you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand the problems with the default focus style&lt;/li&gt;
&lt;li&gt;Give you some inspiration to &lt;strong&gt;design your own focus styles&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;p&gt;Let’s start off by talking about the pros and cons of browser default focus styles.&lt;/p&gt;
&lt;h2 id=&quot;pros-and-cons-with-the-defaults&quot;&gt;Pros and cons with the defaults&lt;/h2&gt;
&lt;h3 id=&quot;pros&quot;&gt;Pros&lt;/h3&gt;
&lt;p&gt;The default focus style is great because &lt;strong&gt;we’re familiar with it&lt;/strong&gt;. When we see the blue ring around something, we know it is in focus.&lt;/p&gt;
&lt;p&gt;Note: Since the default focus style is a ring around the content, I’m going to use the term “focus ring” and “focus style” interchangeably.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/chrome-focus.png&quot; alt=&quot;Default focus ring in Chrome.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;It is also great because &lt;strong&gt;you don’t have to write any code&lt;/strong&gt; to create a usable focus ring.&lt;/p&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons&lt;/h3&gt;
&lt;p&gt;Here’s the major problem. &lt;strong&gt;The default focus style is different across browsers.&lt;/strong&gt; They’re not consistent.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari: Blue solid outline&lt;/li&gt;
&lt;li&gt;Firefox: Thin dotted outline&lt;/li&gt;
&lt;li&gt;Chrome: Blue blurry outline&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/default-style.png&quot; alt=&quot;Default focus style across browsers.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s the second major problem. The default focus lacks contrast in specific situations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firefox’s thin dotted outline lacks contrast on pages with a white background&lt;/strong&gt;. You can hardly see the outline. Luckily, firefox switches the outline from black to white on dark backgrounds. The contrast is okay.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/default-style-dark.png&quot; alt=&quot;Default focus style on a dark background.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Safari and Chrome’s blue outlines lack contrast on pages with dark backgrounds&lt;/strong&gt;. The contrast is even worse if you used a bluebackground.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/default-style-blue.png&quot; alt=&quot;Default focus styles on a blue background. &quot;&gt;&lt;/figure&gt;
&lt;p&gt;Third problem. &lt;strong&gt;Chrome’s focus-ring blur makes the element looks unfocused&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The purpose of a focus ring is to draw attention to the focused element. If you blur the focus ring, you lose focus. Why would you draw attention to an element, but take away attention at the same time? It doesn’t make sense. Are you telling me to focus or not?&lt;/p&gt;
&lt;p&gt;Fourth problem. This is more of a design thing. When you think about branding, &lt;strong&gt;you want users to have a consistent experience&lt;/strong&gt; across your site (as much as possible). It shouldn’t matter if they’re using Safari, or Chrome, or Firefox.&lt;/p&gt;
&lt;p&gt;Focus is one small part of the entire experience. We have the tools to make sure focus remains consistent across browsers. It’s not hard at all!&lt;/p&gt;
&lt;p&gt;If you “just use the default”, does it mean focus is an afterthought in your design process?&lt;/p&gt;
&lt;h2 id=&quot;focus-inspirations&quot;&gt;Focus inspirations&lt;/h2&gt;
&lt;p&gt;I couldn’t find any good articles about designing the focus ring, so I went to websites I normally visit, and paid special attention to their focus. 🤓.&lt;/p&gt;
&lt;h3 id=&quot;css-tricks&quot;&gt;CSS Tricks&lt;/h3&gt;
&lt;p&gt;CSS Tricks used the default focus ring for every element.&lt;/p&gt;
&lt;p&gt;There’s a tiny addition to links. If you focus on links, they get a color-gradient. I love this color-gradient treatment. It brings a ton of personality to the site.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/css-tricks-links.gif&quot; alt=&quot;Tabbing over CSS Tricks links.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;However, buttons don’t get any special treatment. If you focus over buttons, you only see the default focus style. Also, the focus ring doesn’t show up clearly on the dark background.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/css-tricks-buttons.gif&quot; alt=&quot;Tabbing over CSS Tricks buttons.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;There was a special treatment on tags though. When I focused on the tag for the article, the white border popped out at me. I see this element clearly compared to the others.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/css-tricks-header.gif&quot; alt=&quot;Tabbing over CSS Tricks elements in the header.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;smashing-magazine&quot;&gt;Smashing Magazine&lt;/h3&gt;
&lt;p&gt;Smashing Magazine uses a dark-red outline instead of the default one. I found it pleasant to look at. The contrast is large enough for most of the links.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/smashing-text.gif&quot; alt=&quot;Tabbing over links in Smashing Mag.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;However, the dark-red outline doesn’t make focused elements stand out as much when they’re on a red background. The contrast wasn’t huge. But the text color change from white to black draws my attention.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/smashing-links.gif&quot; alt=&quot;Tabbing over links in the red background on Smashing Mag.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The dark-red outline failed to catch my attention when I tabbed through a button on a red background. The &lt;code&gt;color&lt;/code&gt; change from blue to red wasn’t enough to draw my attention.&lt;/p&gt;
&lt;p&gt;Deep in my mind, I might have expected a change in the button’s &lt;code&gt;background-color&lt;/code&gt;. Regardless of my expectations, I failed to realize when the button got focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/smashing-button.gif&quot; alt=&quot;Tabbing over buttons in the red background on Smashing Mag.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;twitter&quot;&gt;Twitter&lt;/h3&gt;
&lt;p&gt;Twitter used a combination of styles for focus. They used:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The default focus ring for most elements&lt;/li&gt;
&lt;li&gt;An underline (no focus ring) for text links&lt;/li&gt;
&lt;li&gt;Background and outline changes for buttons&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/twitter.gif&quot; alt=&quot;Tabbing through a Twitter card.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s what I think.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The default focus ring does not have enough contrast&lt;/li&gt;
&lt;li&gt;Underlined links (without focus ring) doesn’t catch my attention. I had to search for what I focused on.&lt;/li&gt;
&lt;li&gt;I love the focus styles for the buttons. The slight difference in background colors gave each action distinct personalities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the sidebar, Twitter highlighted each menu item with a bright border (I suspect with &lt;code&gt;outline&lt;/code&gt;) and a change in &lt;code&gt;background-color&lt;/code&gt;. These changes were visible and held my attention.&lt;/p&gt;
&lt;p&gt;However, the focus style on the Tweet button wasn’t as obvious since the outline was light. It does not have enough contrast when compared to the button’s bright &lt;code&gt;background-color&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/twitter-sidebar.gif&quot; alt=&quot;Tabbing through the sidebar on Twitter.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;slack&quot;&gt;Slack&lt;/h3&gt;
&lt;p&gt;Slack’s focus looks good. They introduced a (tiny) dark-blue border plus a (larger) light-blue tint around their focused elements.&lt;/p&gt;
&lt;p&gt;I liked how the dark-blue border stood out from other elements. I also liked how the light-blue tint allowed the dark-blue border to blend in with other elements on the same page.&lt;/p&gt;
&lt;p&gt;(Although I used the word “border” here, I suspect this is created with &lt;code&gt;box-shadow&lt;/code&gt;).&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/slack.gif&quot; alt=&quot;Tabbing through a Slack message.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Slack used the same styles on the sidebar, but they used white instead. This stuff works for both dark and light backgrounds!&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/slack-sidebar.gif&quot; alt=&quot;Tabbing through the sidebar in Slack.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;wtf-forms&quot;&gt;WTF Forms&lt;/h3&gt;
&lt;p&gt;Chris Coyier pointed to &lt;a href=&quot;http://wtfforms.com/&quot;&gt;WTF Forms&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/mdo/&quot;&gt;Mark Otto&lt;/a&gt; during my research. The focus ring for WTF Forms looks pretty good! It contains two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A white border&lt;/li&gt;
&lt;li&gt;And a solid blue border&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Again, even though I used the word “border”, this is actually created with &lt;code&gt;box-shadow&lt;/code&gt;).&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/wtf-forms.gif&quot; alt=&quot;Tabbing through elements on WTF Forms.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;my-own-site&quot;&gt;My own site&lt;/h3&gt;
&lt;p&gt;No research is complete without checking whether I failed or succeeded at creating focus styles. (Bad habit).&lt;/p&gt;
&lt;p&gt;Turns out, I did not create enough focus for the links on my own site. The color change was not enough to catch my attention immediately. It would have been sufficient if I added the focus ring though!&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/zellwk.gif&quot; alt=&quot;Tabbing through links on my site.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;However, I did good work for the navigation. The pink border and animation made the focused element pop. 🎉.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/focus/zell-nav.gif&quot; alt=&quot;Tabbing through my nav.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The default focus ring works.&lt;/strong&gt; There are problems with it, but it can be good enough, especially &lt;strong&gt;if you can’t dedicate time and energy to create a custom focus ring&lt;/strong&gt;. (This can be quite easy. I’ll show you how in the &lt;a href=&quot;https://zellwk.com/blog/creating-focus-style&quot; title=&quot;Creating a custom focus style&quot;&gt;next article&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you want to design your own focus style, you need to &lt;strong&gt;think about four variables.&lt;/strong&gt; The presence of each variable helps your focus stand out more. I ranked these variables &lt;strong&gt;in the order of importance.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating an outline (with outline, box-shadow, borders, etc).&lt;/li&gt;
&lt;li&gt;Animations with movement (if any)&lt;/li&gt;
&lt;li&gt;Changing the background color (if any)&lt;/li&gt;
&lt;li&gt;Changing the color of the text (if any)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Outlines are best because they create the most amount of contrast.&lt;/p&gt;
&lt;p&gt;Animations come next because our eyes get drawn to moving objects.&lt;/p&gt;
&lt;p&gt;Changes in &lt;code&gt;background-color&lt;/code&gt; can sometimes be sufficient. This is because the change happens in a relatively large surface area.&lt;/p&gt;
&lt;p&gt;Finally, you want to consider changing &lt;code&gt;color&lt;/code&gt;. Use &lt;code&gt;color&lt;/code&gt; with the three other things I mentioned above. Try to avoid using &lt;code&gt;color&lt;/code&gt; by itself because contrast might not be enough to draw a keyboard user’s attention.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Async/await in Express</title>
    <link href="https://zellwk.com/blog/async-await-express/"/>
    <updated>2019-09-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/async-await-express/</id>
    <content type="html">&lt;p&gt;Have you noticed you write a lot of asynchronous code in Express request handlers? This is normal because you need to communicate with the database, the file system, and other APIs.&lt;/p&gt;
&lt;p&gt;When you have so much asynchronous code, it helps to use Async/await. It makes your code easier to understand.&lt;/p&gt;
&lt;p&gt;Today, I want to share how to use async/await in an Express request handler.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Note: Before you continue, you need to know what Async/await is. If you don’t know, you can read &lt;a href=&quot;https://zellwk.com/blog/async-await&quot;&gt;this article&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&quot;using-async%2Fawait-with-a-request-handler&quot;&gt;Using Async/await with a request handler&lt;/h2&gt;
&lt;p&gt;To use Async/await, you need to use the &lt;code&gt;async&lt;/code&gt; keyword when you define a request handler. (Note: These request handlers are known as called “controllers”. I prefer calling them request handlers because request handlers are more explicit).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/testing&#39;, async (req, res) =&amp;gt; {
  // Do something here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have the &lt;code&gt;async&lt;/code&gt; keyword, you can &lt;code&gt;await&lt;/code&gt; something immediately in your code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/testing&#39;, async (req, res) =&amp;gt; {
  const user = await User.findOne({email: req.body.email})
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;handling-async-errors&quot;&gt;Handling Async errors&lt;/h2&gt;
&lt;p&gt;Let’s say you want to create a user through a POST request. To create a user, you need to pass in a &lt;code&gt;firstName&lt;/code&gt; and an &lt;code&gt;email&lt;/code&gt; address. Your Mongoose Schema looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const userSchema = new Schema({
  email: {
    type: String,
    required: true,
    unique: true,
  },
  firstName: {
    type: String,
    required: true,
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s your request handler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res) =&amp;gt; {
  const { email, firstName } = req.body
  const user = new User({ email, firstName })
  const ret = await user.save()
  res.json(ret)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s say you send a request that lacks an email address to your server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fetch(&#39;/signup&#39;, {
  method: &#39;post&#39;
  headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }
  body: JSON.stringify({
    firstName: &#39;Zell&#39;
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This request results in an error. Unfortunately, Express will not be able to handle this error. You’ll receive a log like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-express/unhandled-error.png&quot; alt=&quot;Unhandled Promise Rejection Warning.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;To handle an error in an asynchronous function, you need to catch the error first. You can do this with &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res) =&amp;gt; {
  try {
    const { email, firstName } = req.body
    const user = new User({ email, firstName })
    const ret = await user.save()
    res.json(ret)
  } catch (error) {
    console.log(error)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-express/console-log-error.png&quot; alt=&quot;Logging the error into the console.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Next, you pass the error into an Express error handler with the &lt;code&gt;next&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res, next) =&amp;gt; {
  try {
    const { email, firstName } = req.body
    const user = new User({ email, firstName })
    const ret = await user.save()
    res.json(ret)
  } catch (error) {
    // Passes errors into the error handler
    return next(error)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you did not write a custom error handler yet, Express will handle the error for you with its default error handler. (Though I recommend you write a custom error handler. You can learn more about it &lt;a href=&quot;https://zellwk.com/blog/express-errors/&quot; title=&quot;Handling express errors&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Express’s default error handler will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the HTTP status to 500&lt;/li&gt;
&lt;li&gt;Send a Text response back to the requester&lt;/li&gt;
&lt;li&gt;Log the text response in the console&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;I used Postman to send a request to my server. Here&#39;s the text response back from the server.&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-express/default-error-handler-response.png&quot; alt=&quot;Sends a text response back to the request&quot;&gt;&lt;figcaption&gt;I used Postman to send a request to my server. Here&#39;s the text response back from the server. &lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;Notice the 500 HTTP Status log in this image. This tells me Express&#39;s default handler changed the HTTP Status to 500.&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-express/default-error-handler-log.png&quot; alt=&quot;Logs the text response into the console.&quot;&gt;&lt;figcaption&gt;Notice the 500 HTTP Status log in this image. This tells me Express&#39;s default handler changed the HTTP Status to 500. The log is from Morgan. I talked about Morgan in detail &lt;a href=&quot;https://zellwk.com/blog/express-middlewares&quot;&gt; here&lt;/a&gt;. &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;handling-two-or-more-async-errors&quot;&gt;Handling two or more async errors&lt;/h2&gt;
&lt;p&gt;If you need to handle two &lt;code&gt;await&lt;/code&gt; statements, you might write this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res, next) =&amp;gt; {
  try {
    await firstThing()
  } catch (error) {
    return next(error)
  }

  try {
    await secondThing()
  } catch (error) {
    return next(error)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is unnecessary. If &lt;code&gt;firstThing&lt;/code&gt; results in an error, the request will be sent to an error handler immediately. You would not trigger a call for &lt;code&gt;secondThing&lt;/code&gt;. If &lt;code&gt;secondThing&lt;/code&gt; results in an error, &lt;code&gt;firstThing&lt;/code&gt; would not have triggered an error.&lt;/p&gt;
&lt;p&gt;This means: Only one error will be sent to the error handler. It also means we can wrap all &lt;code&gt;await&lt;/code&gt; statements in ONE &lt;code&gt;try/catch&lt;/code&gt; statement.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res, next) =&amp;gt; {
  try {
    await firstThing()
    await secondThing()
  } catch (error) {
    return next(error)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;cleaning-up&quot;&gt;Cleaning up&lt;/h2&gt;
&lt;p&gt;It sucks to have a &lt;code&gt;try/catch&lt;/code&gt; statement in each request handler. They make the request handler seem more complicated than it has to be.&lt;/p&gt;
&lt;p&gt;A simple way is to change the &lt;code&gt;try/catch&lt;/code&gt; into a promise. This feels more friendly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/signup&#39;, async(req, res, next) =&amp;gt; {
  function runAsync () {
    await firstThing()
    await secondThing()
  }

  runAsync()
    .catch(next)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it’s a chore to write &lt;code&gt;runAsync&lt;/code&gt; for every Express handler. We can abstract it into a wrapper function. And we can attach this wrapper function to each request handler&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function runAsyncWrapper (callback) {
  return function (req, res, next) {
    callback(req, res, next)
      .catch(next)
  }
}

app.post(&#39;/signup&#39;, runAsyncWrapper(async(req, res) =&amp;gt; {
    await firstThing()
    await secondThing()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;express-async-handler&quot;&gt;Express Async Handler&lt;/h2&gt;
&lt;p&gt;You don’t have to write &lt;code&gt;runAsyncWrapper&lt;/code&gt; code each time you write an express app either. &lt;a href=&quot;https://github.com/Abazhenov&quot;&gt;Alexei Bazhenov&lt;/a&gt; has created a package called &lt;a href=&quot;https://www.npmjs.com/package/express-async-handler&quot;&gt;express-async-handler&lt;/a&gt; that does the job in a slightly more robust way. (It ensures &lt;code&gt;next&lt;/code&gt; is always the last argument).&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;express-async-handler&lt;/code&gt;, you have to install it first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install express-async-handler --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using it in your app:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const asyncHandler = require(&#39;express-async-handler&#39;)

app.post(&#39;/signup&#39;, asyncHandler(async(req, res) =&amp;gt; {
    await firstThing()
    await secondThing()
}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t like to write &lt;code&gt;asyncHandler&lt;/code&gt;. It’s quite long. My obvious solution is to abbreviate &lt;code&gt;asyncHandler&lt;/code&gt; to &lt;code&gt;ash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’re fancier, you can consider using &lt;a href=&quot;https://www.npmjs.com/package/@awaitjs/express&quot;&gt;@awaitjs/express&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/code_barbarian&quot;&gt;Valeri Karpov&lt;/a&gt;. It adds methods like &lt;code&gt;getAsync&lt;/code&gt; and &lt;code&gt;postAsync&lt;/code&gt; to Express so you don’t have to use &lt;code&gt;express-async-handler&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Converting callbacks to promises</title>
    <link href="https://zellwk.com/blog/converting-callbacks-to-promises/"/>
    <updated>2019-09-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/converting-callbacks-to-promises/</id>
    <content type="html">&lt;p&gt;It’s easier to work with Promises (or Async/await) compared to callbacks. This is especially true when you work in Node-based environments. Unfortunately, most Node APIs are written with callbacks.&lt;/p&gt;
&lt;p&gt;Today I want to show you how to convert callbacks to promises.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Before you read this article, it helps to know what a &lt;a href=&quot;https://zellwk.com/blog/js-promises/&quot; title=&quot;JavaScript promise&quot;&gt;promise&lt;/a&gt; is.&lt;/p&gt;
&lt;h2 id=&quot;converting-node-styled-callbacks-to-promises&quot;&gt;Converting Node-styled callbacks to promises&lt;/h2&gt;
&lt;p&gt;Callbacks from Node’s API have the same pattern. They’re passed into functions as the final argument. Here’s an example with &lt;code&gt;fs.readFile&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;) 

fs.readFile(filePath, options, callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, each callback contains at least two arguments. The first argument must be an error object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fs.readFile(&#39;some-file&#39;, (err, data) =&amp;gt; {
  if (err) {
    // Handle error 
  } else {
    // Do something with data
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you encounter a callback of this pattern, you can convert it into a promise with Node’s &lt;code&gt;util.promisify&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;)
const util = require(&#39;util&#39;)

const readFilePromise = util.promisify(fs.readFile)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you convert the callback into a promise, you can use it like any other promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;readFilePromise(filePath, options)
  .then(data =&amp;gt; {/* Do something with data */})
  .catch(err =&amp;gt; {/* Handle error */}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once in a while, you may run into APIs that do not conform to Node’s error-first callback format. For these situations, you cannot use &lt;code&gt;util.promisify&lt;/code&gt;. You need to write your own promise.&lt;/p&gt;
&lt;h2 id=&quot;writing-your-own-promise&quot;&gt;Writing your own promise&lt;/h2&gt;
&lt;p&gt;To convert a callback into a promise, you need to return a promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const readFilePromise = () =&amp;gt; {
  return new Promise ((resolve, reject) =&amp;gt; {
    // ...  
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You run the code with the callback inside the promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const readFilePromise = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    fs.readFile(filePath, options, (err, data) =&amp;gt; {
      // ...
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there’s an error, you reject the promise. This allows users to handle errors in &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there are no errors, you resolve the promise. This allows users to decide what to do next in &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const readFilePromise = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    fs.readFile(filePath, options, (err, data) =&amp;gt; {
      if (err) return reject(err)
      resolve(data)
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you need to provide arguments like &lt;code&gt;filePath&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; to the code within the promise. To do this, you can use &lt;a href=&quot;https://zellwk.com/blog/es6/#the-rest-parameter-and-spread-operator&quot; title=&quot;Introduction to ES6: Rest and Spread Operators&quot;&gt;rest and spread&lt;/a&gt; operators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const readFilePromise = (...args) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    fs.readFile(...args, (err, data) =&amp;gt; {
      if (err) return reject(err)
      resolve(data)
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use &lt;code&gt;readFilePromise&lt;/code&gt; as a promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;readFilePromise(filePath, options)
  .then(data =&amp;gt; {/* Do something with data */})
  .catch(err =&amp;gt; {/* Handle error */}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;converting-non-node-styled-callbacks-into-promises&quot;&gt;Converting non-Node-styled callbacks into promises&lt;/h2&gt;
&lt;p&gt;Turning a non-Node-style callback into a promise is easy once you know how to construct a promise. You follow the same steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reject if there’s an error&lt;/li&gt;
&lt;li&gt;Resolve otherwise&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s say you have an API that returns &lt;code&gt;data&lt;/code&gt; as the first argument and &lt;code&gt;err&lt;/code&gt; as the second argument. Here’s what you do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const shootPeasPromise = (...args) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // This is a not a Node styled callback. 
    // 1. data is the first argument 
    // 2. err is the second argument
    shootPeas(...args, (data, err) =&amp;gt; {
      if (err) return reject(err)
      resolve(data)
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;callbacks-with-multiple-arguments&quot;&gt;Callbacks with multiple arguments&lt;/h2&gt;
&lt;p&gt;Let’s say you have a callback with three arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An error object&lt;/li&gt;
&lt;li&gt;Some data&lt;/li&gt;
&lt;li&gt;Another piece of data&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;growTrees(options, (error, location, size) =&amp;gt; {
  // ... 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You cannot write this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Note: This does not work 
const growTreesPromise = (...args) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    growTrees(...args, (error, location, size) =&amp;gt; {
      if (err) return reject(err)
      // You can&#39;t send two arguments into resolve
      resolve(location, size)
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above doesn’t work because promises can only return one argument. If you want to return many arguments, you can either use an array or an object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Using an array object
resolve([location, size])

// Using an object
resolve({location, size})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, You can destructure the array or object in the &lt;code&gt;then&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// If you use arrays
growTreesPromise(options)
  .then([location, size]) =&amp;gt; {/* Do something */})

// If you use objects
growTreesPromise(options)
  .then({location, size}) =&amp;gt; {/* Do something */})
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Three useful Express middleware</title>
    <link href="https://zellwk.com/blog/express-middlewares/"/>
    <updated>2019-09-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/express-middlewares/</id>
    <content type="html">&lt;p&gt;As I created applications with Express and Node, I learned about three useful middlewares:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Morgan&lt;/li&gt;
&lt;li&gt;Camelcase&lt;/li&gt;
&lt;li&gt;Remove empty properties&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of these three, Morgan is an actual middleware. You can download &lt;a href=&quot;https://www.npmjs.com/package/morgan&quot; title=&quot;Morgan&quot;&gt;Morgan&lt;/a&gt; from npm directly. The other two are middlewares I created with &lt;a href=&quot;https://www.npmjs.com/package/camelcase-keys&quot; title=&quot;camelcase-keys&quot;&gt;camelcase-keys&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/omit-empty&quot; title=&quot;Omit Empty&quot;&gt;omit-empty&lt;/a&gt; respectively.&lt;/p&gt;
&lt;p&gt;I want to share what these three middlewares do, and how they make life easier for me when I’m creating applications.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;morgan&quot;&gt;Morgan&lt;/h2&gt;
&lt;p&gt;Morgan is a request logger. It tells you several things when your server receives a request. It can log things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;HTTP version&lt;/li&gt;
&lt;li&gt;Method&lt;/li&gt;
&lt;li&gt;Referrer&lt;/li&gt;
&lt;li&gt;Remote Address&lt;/li&gt;
&lt;li&gt;Remote User&lt;/li&gt;
&lt;li&gt;Request header&lt;/li&gt;
&lt;li&gt;Response headers&lt;/li&gt;
&lt;li&gt;Response time&lt;/li&gt;
&lt;li&gt;Status code&lt;/li&gt;
&lt;li&gt;Url of the request&lt;/li&gt;
&lt;li&gt;User Agent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Morgan comes with five predefined formats for you to choose from:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Combined&lt;/li&gt;
&lt;li&gt;Common&lt;/li&gt;
&lt;li&gt;Short&lt;/li&gt;
&lt;li&gt;Dev&lt;/li&gt;
&lt;li&gt;Tiny&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I only use the &lt;code&gt;dev&lt;/code&gt; format. A &lt;code&gt;dev&lt;/code&gt; log from Morgan looks like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/200.png&quot; alt=&quot;Example of a Dev log.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I use Morgan to check two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The method and the endpoint&lt;/li&gt;
&lt;li&gt;Status codes&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;checking-the-method-and-endpoint&quot;&gt;Checking the method and endpoint&lt;/h3&gt;
&lt;p&gt;When you write backend code, you need to make sure you send a request with the correct method and endpoint. If the method or endpoint is wrong, you will not be able to trigger the request handler you’re expecting to trigger.&lt;/p&gt;
&lt;p&gt;For example, if you want to trigger &lt;code&gt;requestHandler&lt;/code&gt; in the code below, you need to send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/testing&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/testing&#39;, requestHandler)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If something goes wrong when I code backend applications, the first thing I check whether I’m sending the correct method and endpoint. Checking this first helps me save a ton of time debugging what would have been a typo.&lt;/p&gt;
&lt;p&gt;When I send a request to the server, I get a log from Morgan. This log tells me the method and endpoint. The first value is the method. The second value is the endpoint.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/breakdown.png&quot; alt=&quot;Identifies the method and endpoint in a dev log.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;checking-status-codes&quot;&gt;Checking status codes&lt;/h3&gt;
&lt;p&gt;Since backend is about &lt;a href=&quot;https://zellwk.com/blog/frontend-vs-backend&quot; title=&quot;Frontend vs Backend&quot;&gt;communication&lt;/a&gt;, I want to make sure I send the correct status code back to the frontend. If a user tries to login with an incorrect username or password, I want to send an 401 Unauthorized Error instead of a 500 Internal Server Error.&lt;/p&gt;
&lt;p&gt;The best part about the &lt;code&gt;dev&lt;/code&gt; format is it shows the status code with different colors. This makes status codes easier to spot.&lt;/p&gt;
&lt;p&gt;A 200+ status code is green:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/200.png&quot; alt=&quot;200 status code is green.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;A 300+ status code is cyan:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/300.png&quot; alt=&quot;300 status code is cyan.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;A 400+ status code is yellow:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/400.png&quot; alt=&quot;400 status code is yellow.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;And a 500+ status code is red:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/express-middlewares/500.png&quot; alt=&quot;500 status code is red.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;camelcase&quot;&gt;CamelCase&lt;/h2&gt;
&lt;p&gt;Let’s say you want to get a user’s first name from a form. To do this, you need a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; in your HTML. The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; should contain an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; of &lt;code&gt;first-name&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;input name=&amp;quot;first-name&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To receive &lt;code&gt;first-name&lt;/code&gt; in the backend, you need to use the bracket notation. This is because &lt;code&gt;-&lt;/code&gt; is an operator in JavaScript. It is not recognized as a hyphen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  // Bracket notation to get the value of a property
  const firstName = req.body[&#39;first-name&#39;]
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t like using the bracket notation. I prefer using the dot notation whenever possible.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  // Dot notation
  const firstName = req.body.firstName
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I prefer the dot notation because I use it everywhere. I’m used to writing camel case in JavaScript. It feels weird if I don’t use the dot notation. Plus, I can destructure the property if I can use the dot notation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  const { firstName } = req.body
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use dot notation, I need to make sure the &lt;code&gt;name&lt;/code&gt; property in the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element is written in camel case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;input name=&amp;quot;firstName&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this feels weird, because we don’t usually camel case stuff in HTML! We separate words with hyphens!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- This feels weird --&amp;gt;
&amp;lt;input name=&amp;quot;firstName&amp;quot;&amp;gt;

&amp;lt;!-- This feels normal --&amp;gt;
&amp;lt;input name=&amp;quot;first-name&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My solution is to convert all properties into camel case when before it hits my request handler. I do this with a middleware I made using &lt;a href=&quot;https://sindresorhus.com/&quot; title=&quot;Sindre Sorhus&quot;&gt;Sindre Sorhus’s&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/camelcase-keys&quot; title=&quot;camelcase-keys&quot;&gt;camelcase-keys&lt;/a&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const camelcaseKeys = require(&#39;camelcase-keys&#39;)

const camelcase = () =&amp;gt; {
  return function (req, res, next) {
    req.body = camelcaseKeys(req.body, { deep: true })
    req.params = camelcaseKeys(req.params)
    req.query = camelcaseKeys(req.query)
    next()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use the middleware like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use(camelcase())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;camelcase&lt;/code&gt;, you don’t have to worry about &lt;code&gt;first name&lt;/code&gt;, &lt;code&gt;first_name&lt;/code&gt;, &lt;code&gt;first-name&lt;/code&gt;, or &lt;code&gt;FirstName&lt;/code&gt;. It’ll always be &lt;code&gt;firstName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It doesn’t matter whether you’re getting from &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.params&lt;/code&gt; or &lt;code&gt;req.query&lt;/code&gt; too. All properties will be in camel case.&lt;/p&gt;
&lt;h2 id=&quot;remove-empty-properties&quot;&gt;Remove empty properties&lt;/h2&gt;
&lt;p&gt;Let’s imagine a situation where you expect an array of skills.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fetch(&#39;/endpoint&#39;, {
  method: &#39;post&#39;,
  headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }
  body: JSON.stringify({
    name: &#39;Zell&#39;,
    skills: [&#39;coding&#39;, &#39;designing&#39;, &#39;writing&#39;]
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are one or more skills, you want to add the skills to the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  const { skills } = req.body

  if (skills.length !== 0) {
    // Add skills to database
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But we have a problem. Users can send you a variation of the request:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Contains no &lt;code&gt;skills&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Contains an empty &lt;code&gt;skills&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;Contains a &lt;code&gt;skills&lt;/code&gt; property with at least one skill&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the user does not send you a &lt;code&gt;skills&lt;/code&gt; property, you cannot write &lt;code&gt;skills.length&lt;/code&gt;. You’ll get an error that says &lt;code&gt;Cannot read property &#39;length&#39; of undefined &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To correctly check for one or more skills, you need two conditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check if there’s a skills array&lt;/li&gt;
&lt;li&gt;Check if there’s at least one item in the array&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  const { skills } = req.body
  
  if (skills &amp;amp;&amp;amp; skills.length !== 0) {
    // Add skills to database
  }
})

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a way to simplify these checks. My solution is to create a middleware with &lt;a href=&quot;https://twitter.com/jonschlinkert&quot; title=&quot;Jon Schlinkert&quot;&gt;Jon Schlinkert’s&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/omit-empty&quot; title=&quot;Omit Empty&quot;&gt;omit-empty&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;omitEmpty&lt;/code&gt; removes empty properties from an object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const object = {
  null: null, 
  undefined: undefined,
  emptyString: &#39;&#39;,
  emptyArray: [],
  emptyObject: {},
  filled: &#39;yay&#39;
}

console.log(omitEmpty(object))
// {
//   filled: &#39;yay&#39;
// }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the middleware I made:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const omitEmpty = require(&#39;omitEmpty&#39;)

const removeEmptyProperties = () =&amp;gt; {
  return function (req, res, next) {
    req.body = omitEmpty(req.body)
    req.params = omitEmpty(req.params)
    req.query = omitEmpty(req.query)
    next()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;removeEmptyProperties&lt;/code&gt; this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.use(removeEmptyProperties())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you use the &lt;code&gt;removeEmptyProperties&lt;/code&gt; middleware, you don’t have to check for the length of &lt;code&gt;skills&lt;/code&gt;. You can be sure &lt;code&gt;skills&lt;/code&gt; contains one or more items if it is present.&lt;/p&gt;
&lt;p&gt;So the code becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/endpoint&#39;, (req, res) =&amp;gt; {
  const { skills } = req.body
  
  if (skills) {
    // Add skills to database
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much simpler!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Inconsistent behavior among browsers when clicking on buttons</title>
    <link href="https://zellwk.com/blog/inconsistent-button-behavior/"/>
    <updated>2019-09-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/inconsistent-button-behavior/</id>
    <content type="html">&lt;p&gt;I noticed browsers were inconsistent in how they handle a click on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Some browsers choose to focus on the button. Some browsers don’t.&lt;/p&gt;
&lt;p&gt;In this article, I want to show you my test and findings. Then, I want to talk about a way to overcome these inconsistencies.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-test&quot;&gt;The test&lt;/h2&gt;
&lt;p&gt;The test is simple. We’re testing what happens when we click on a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Specifically, we want to know if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does clicking focus the button?&lt;/li&gt;
&lt;li&gt;After clicking, does keypresses originate from the button?&lt;/li&gt;
&lt;li&gt;After clicking, can we tab to the next element?&lt;/li&gt;
&lt;li&gt;After clicking, can we shift-tab to the previous element?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the HTML we’re using for the test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div tabindex=&amp;quot;0&amp;quot;&amp;gt;Placeholder for testing tab&amp;lt;/div&amp;gt;
&amp;lt;button&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;div tabindex=&amp;quot;0&amp;quot;&amp;gt;Placeholder for testing tab&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s are there for us to test tabbing and shift-tabbing easily.&lt;/p&gt;
&lt;p&gt;Here’s a Codepen for you if you want to follow along with the tests.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;402&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;WVMMvy&quot; style=&quot;height: 402px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Button and link focus test&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/WVMMvy/&quot;&gt;
  Button and link focus test&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;testing-for-focus&quot;&gt;Testing for focus&lt;/h3&gt;
&lt;p&gt;We can test for focus visually. If the button gets focused, there should be the default visual glow around the button.&lt;/p&gt;
&lt;p&gt;We can also test for focus programmatically. In JavaScript, you can get the focused element with &lt;code&gt;document.activeElement&lt;/code&gt;. When we click a button, we can log the focused element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;button&#39;)
button.addEventListener(&#39;click&#39;, event =&amp;gt; {
  console.log(&#39;Click:&#39;, document.activeElement)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: If you’re using Chrome, you can use the Live Expression tool (so there’s no need to log &lt;code&gt;document.activeElement&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;testing-for-keypress&quot;&gt;Testing for keypress&lt;/h3&gt;
&lt;p&gt;Here, we can add a &lt;code&gt;keydown&lt;/code&gt; event listener to the document. Here, we want to log what element triggered the event. We can tell the element with &lt;code&gt;event.target&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&#39;keydown&#39;, event =&amp;gt; {
  console.log(`Keydown:`, event.target)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;testing-for-tab-and-shift-tab&quot;&gt;Testing for Tab and Shift-tab&lt;/h3&gt;
&lt;p&gt;After clicking on a button, does Tab go to the next focusable element? If it goes to the next focusable element, that element should receive a focus outline.&lt;/p&gt;
&lt;p&gt;Likewise, does &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; goes to the previous focusable element? If it goes to the previous focusable element, that element should receive a focus outline too.&lt;/p&gt;
&lt;p&gt;I did not log &lt;code&gt;document.activeElement&lt;/code&gt; because the focus glow is enough.&lt;/p&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;h3 id=&quot;safari-(mac)&quot;&gt;Safari (Mac)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Safari (12.1.1), the button does not get focus. The document gets focus instead. We know this because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There’s no focus glow on the button.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.activeElement&lt;/code&gt; points to &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/safari-click.gif&quot; alt=&quot;In Safari, document gets focused when you click on a button&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Since &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; gets focus, any further keypress originates from the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/safari-keydown.gif&quot; alt=&quot;Next keypress originate from the document.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Tabbing into the next element works as expected. The next element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/safari-tab.gif&quot; alt=&quot;Tabbing into the next element works as expected.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; doesn’t work as I expected. I expect the previous element to get focus, but &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; gets focus instead.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/safari-shift-tab.gif&quot; alt=&quot;Shift tab does not focus on the previous element. It focuses on the button instead.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;firefox-(mac)&quot;&gt;Firefox (Mac)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Firefox (Nightly 70.0a1), the button does not get focus. The document gets focus instead.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-click.gif&quot; alt=&quot;In Firefox, document gets focused when you click on a button&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Any further keypress originates from the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-keydown.gif&quot; alt=&quot;Next keypress originate from the document.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; does not work as expected. When you press &lt;code&gt;Tab&lt;/code&gt;, Firefox focuses on the first element in the document.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-tab.gif&quot; alt=&quot;Tab goes to the first element.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; is funny. If &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is the first thing you clicked on, Firefox focuses on the last focusable element in the document. If you focused on an element before clicking the button, Firefox focuses that element.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-shift-tab.gif&quot; alt=&quot;Shift-tab behavior.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The problem with Firefox and buttons date back to Firefox 63 (at least). MDN has a section on this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/mdn.png&quot; alt=&quot;MDN&#39;s documentation regarding button clicks in Firefox and other browsers.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;firefox-(windows)&quot;&gt;Firefox (Windows)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Firefox (Quantum 68.0.1, Windows version), the button gets focus, but the focus glow does not show up.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-windows-click.gif&quot; alt=&quot;Buttons gets focus but the focus glow does not show up.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Further keypress originates from the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-windows-keydown.gif&quot; alt=&quot;Next keypress originate from the button.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Tab works as expected. The next item gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-windows-tab.gif&quot; alt=&quot;Next item gets focus.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; works as expected. The previous item gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/firefox-windows-shift-tab.gif&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;chrome-(mac)&quot;&gt;Chrome (Mac)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Chrome (Canary 78.0), the button gets focus. This implementation is different from Safari and Firefox.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-click.gif&quot; alt=&quot;In Chrome, the button gets focus when you click on it.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The next keypress originates from &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. This is expected since &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is the focused element.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-keydown.gif&quot; alt=&quot;Next keypress originates from the button&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; works as expected. The next element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-tab.gif&quot; alt=&quot;Next element gets focus when you tab&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; works as expected. The previous element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-shift-tab.gif&quot; alt=&quot;Previous element gets focus when you press Shift + Tab&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;chrome-(windows)&quot;&gt;Chrome (Windows)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Chrome (Chrome 75.0), the button gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-windows-click.gif&quot; alt=&quot;The button gets focus when you click on it.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The next keypress originates from &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-windows-keydown.gif&quot; alt=&quot;Next keypress originates from the button&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; works as expected. The next element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-windows-tab.gif&quot; alt=&quot;Next element gets focus when you tab&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; works as expected. The previous element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/chrome-windows-shift-tab.gif&quot; alt=&quot;Previous element gets focus when you press Shift + Tab&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;edge-(windows)&quot;&gt;Edge (Windows)&lt;/h3&gt;
&lt;p&gt;When you click on a button in Edge (Edge 17), the button gets focus, but the focus ring did not appear.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/edge-click.gif&quot; alt=&quot;The button gets focus when you click on it, but the focus ring did not appear.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The next keypress originates from &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/edge-keydown.gif&quot; alt=&quot;Next keypress originates from the button&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; works as expected. The next element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/edge-tab.gif&quot; alt=&quot;Next element gets focus when you tab&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; works as expected. The previous element gets focus.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/inconsistent-button-behavior/edge-shift-tab.gif&quot; alt=&quot;Previous element gets focus when you press Shift + Tab&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;summary-of-the-results&quot;&gt;Summary of the results&lt;/h2&gt;
&lt;p&gt;We tested for four things across the common browsers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does clicking focus the button?&lt;/li&gt;
&lt;li&gt;After clicking, does keypresses originate from the button?&lt;/li&gt;
&lt;li&gt;After clicking, can we tab to the next element?&lt;/li&gt;
&lt;li&gt;After clicking, can we shift-tab to the previous element?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the results in a table form.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Test&lt;/th&gt;
      &lt;th&gt;Safari&lt;/th&gt;
      &lt;th&gt;Firefox ()&lt;/th&gt;
      &lt;th&gt;Firefox (⊞)&lt;/th&gt;
      &lt;th&gt;Chrome ()&lt;/th&gt;
      &lt;th&gt;Chrome (⊞)&lt;/th&gt;
      &lt;th&gt;Edge (⊞)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Focused element&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (but no focus glow)&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; (but no focus glow)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Next Keypress from:&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tab goes to:&lt;/td&gt;
      &lt;td&gt;Next element&lt;/td&gt;
      &lt;td&gt;First element in document&lt;/td&gt;
      &lt;td&gt;Next element&lt;/td&gt;
      &lt;td&gt;Next element&lt;/td&gt;
      &lt;td&gt;Next element&lt;/td&gt;
      &lt;td&gt;Next element&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Shift + Tab goes to:&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Previously focused element (if any)&lt;/td&gt;
      &lt;td&gt;Previous Element&lt;/td&gt;
      &lt;td&gt;Previous Element&lt;/td&gt;
      &lt;td&gt;Previous Element&lt;/td&gt;
      &lt;td&gt;Previous Element&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can see the inconsistencies here. It’s clear as day. The major inconsistencies are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Firefox on Mac is simply weird.&lt;/strong&gt; Everything seems wrong.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Some browsers don’t focus on the button&lt;/strong&gt; when they’re clicked.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Some browsers don’t include a focus glow&lt;/strong&gt; on the button when they’re clicked.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/2011/WD-html5-20110525/the-button-element.html#the-button-element&quot;&gt;HTML Spec&lt;/a&gt; doesn’t state what browsers should do after a user clicks on a button. So &lt;em&gt;no browsers are at fault&lt;/em&gt; for the inconsistent behavior.&lt;/p&gt;
&lt;h2 id=&quot;here%E2%80%99s-a-potential-fix&quot;&gt;Here’s a potential fix&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I think Chrome’s implementation (both Mac and Windows) makes the most sense.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you click on a button, focus should be on the button.&lt;/li&gt;
&lt;li&gt;Button should have a focus glow.&lt;/li&gt;
&lt;li&gt;When you press &lt;code&gt;Tab&lt;/code&gt; after clicking a button, the next element should get focus.&lt;/li&gt;
&lt;li&gt;When you press &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Tab&lt;/code&gt; after clicking a button, the previous element should get focus.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: If you’re the kind of person that hates the default focus style, you can restyle the focus ring (or you can wait for &lt;code&gt;:focus-visible&lt;/code&gt; to be widely supported).&lt;/p&gt;
&lt;p&gt;There’s a quick fix if you want to make the other browsers behave consistently with Chrome’s implementation. All you have to do is add this code at the top of your JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.addEventListener(&#39;click&#39;, function (event) {
  if (event.target.matches(&#39;button&#39;)) {
    event.target.focus()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code focuses on the button when you click on it. This also makes sure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The focus glow appears.&lt;/li&gt;
&lt;li&gt;Tab goes to the next element.&lt;/li&gt;
&lt;li&gt;Shift-Tab goes to the previous element&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; You want to put this code AT THE TOP of your JavaScript files. It works because event listeners are called in the order they’re declared. Focus will always go to the button first. You can then redirect focus to other elements if you desire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note #2:&lt;/strong&gt; I have not tested this code thoroughly with all devices yet. (Only Mac versions Safari, Firefox, and Chrome). I appreciate it if you can help to conduct some tests. Let me know if I’m wrong in any way. Thanks.&lt;/p&gt;
&lt;p&gt;In case you were wondering why I did these tests: I realized the inconsistent behavior when I was writing the Keyboard section for &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript&quot;&gt;Learn JavaScript&lt;/a&gt;. I did these tests because I wanted to teach my students the right way to handle buttons and focus (which is a big part of accessibility!).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dancing with Fear</title>
    <link href="https://zellwk.com/blog/dancing-with-fear/"/>
    <updated>2019-08-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dancing-with-fear/</id>
    <content type="html">&lt;p&gt;Fears and doubt often pop into my head when I work.&lt;/p&gt;
&lt;p&gt;When I code, I wonder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Am I using best practices?&lt;/li&gt;
&lt;li&gt;Did I structure code in the best possible way?&lt;/li&gt;
&lt;li&gt;Am I doing it correctly?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I write, I wonder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What makes me qualified to teach anything?&lt;/li&gt;
&lt;li&gt;Will people understand what I’m trying to say?&lt;/li&gt;
&lt;li&gt;THIS THING IS TOTALLY OFF-TOPIC. IT’S NOT TECH RELATED! OH MY GOD!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I run my business, I wonder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should I reply to every single email?&lt;/li&gt;
&lt;li&gt;Should I continue to focus on articles?&lt;/li&gt;
&lt;li&gt;Can I see pre-orders for courses?&lt;/li&gt;
&lt;li&gt;What if I can’t complete my courses on time?&lt;/li&gt;
&lt;li&gt;Are my products and sales emails persuasive but not coming off too sales-y?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hate having these thoughts because they make me hesitate. And I slow down in my work.&lt;/p&gt;
&lt;p&gt;But I love these thoughts because they tell me I’m doing the right thing.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;cherish-the-fear&quot;&gt;Cherish the fear&lt;/h2&gt;
&lt;p&gt;If you feel fear trying code, to write, to speak, to put yourself out there in this world, it’s a good thing. It’s good to have this kind of fear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This kind of fear comes up when we’re trying to do things we care about. Cherish it because it leads you to where you want to be.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You don’t feel this fear when you’re doing things that are not as important. For example, you don’t feel this fear when you decide what to eat for lunch.&lt;/p&gt;
&lt;h2 id=&quot;dance-with-the-fear&quot;&gt;Dance with the fear&lt;/h2&gt;
&lt;p&gt;Seth Godin always tells people to “dance with their fear”.&lt;/p&gt;
&lt;p&gt;For me, this means to allow my fear to guide me as I work. The key to working with my fear is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Acknowledge it exists&lt;/li&gt;
&lt;li&gt;Acknowledge I’m afraid&lt;/li&gt;
&lt;li&gt;Lean into the fear&lt;/li&gt;
&lt;li&gt;Continue to work&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fear always creeps up on me. I’m always unaware of it until it gets too late. When I notice it, it’s always crippling. And I pause, I stop working, and I doubt myself.&lt;/p&gt;
&lt;p&gt;Sometimes the fear gets so overwhelming, I have to stop working to catch my breath. I distract myself by reading manga, eating, or other activities. But the fear always remains. And I still have to work through it when I begin working.&lt;/p&gt;
&lt;p&gt;The only way to overcome this fear is to give myself enough patience to acknowledge and sit through it. If I do this, I come up with things of better quality than what I can normally create. I say the important things I need to say.&lt;/p&gt;
&lt;p&gt;For example, this is one article where I went “I honestly don’t know what the fuck I’m doing”. I hesitated for a long time. I gave myself days to think through the article. But nothing good comes out of it. I only managed to the right words to say until I sat down and worked past the fear. The result is what you’re reading now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you feel fear, congratulations. You’re moving in the right direction. What’s next is the dance with it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Easier said than done.&lt;/p&gt;
&lt;h2 id=&quot;an-interesting-exercise&quot;&gt;An interesting exercise&lt;/h2&gt;
&lt;p&gt;Take thirty steps forward with your eyes closed. Pay attention to the emotions that surface as you walk. (Disclaimer: Please don’t walk into the traffic…).&lt;/p&gt;
&lt;p&gt;Notice what happens?&lt;/p&gt;
&lt;p&gt;You start off confident and you take big steps.&lt;/p&gt;
&lt;p&gt;Then, you begin to hesitate. You wonder whether you’re going in the right direction, whether there are obstacles in front of you,  whether you’re still walking straight, etc. Each step you take becomes smaller than the previous step.&lt;/p&gt;
&lt;p&gt;There will be a point where you stop. Fear shoots through your head and paralyzes you. You can’t even take one more step forward without opening your eyes.&lt;/p&gt;
&lt;p&gt;Try it.&lt;/p&gt;
&lt;p&gt;When you walk forward with your eyes closed, you experience fear because you don’t know where you’re going. There may be dangers lurking right in front of you.&lt;/p&gt;
&lt;p&gt;This fear is similar to the fear you feel when you work on things that are important to you. It’s of a different nature but it feels almost the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you always get paralyzed by fear, you can use this exercise to get used with how fear feels.&lt;/strong&gt; Try taking one or two extra steps each time you fear prevents you from moving forward. It trains your resistance.&lt;/p&gt;
&lt;h2 id=&quot;an-easier-way-to-dance-with-the-fear&quot;&gt;An easier way to dance with the fear&lt;/h2&gt;
&lt;p&gt;It’s hard to overcome fear as crippling as the one you face when you walk forward with your eyes closed. &lt;strong&gt;An easier way is to walk backward.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few things happen when you walk backward (instead of forward):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You’ll go further&lt;/li&gt;
&lt;li&gt;You’ll feel less fear&lt;/li&gt;
&lt;li&gt;The fear becomes easier to handle&lt;/li&gt;
&lt;li&gt;You can navigate where you’re going based on where you went&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to elaborate on the fourth point a bit more.&lt;/p&gt;
&lt;p&gt;When you walk backward, you have your eyes opened. You can see the path you walked. From the corner of your eyes, you can see any potential bends you need to take.&lt;/p&gt;
&lt;p&gt;You still can’t see what’s ahead of you, but it is easier than walking blind.&lt;/p&gt;
&lt;p&gt;You can apply the same concept when you work. Draw strength from your past achievements and experiences. Acknowledge where you were and how far you’ve come.&lt;/p&gt;
&lt;p&gt;This doesn’t help you see what obstacles are in front of you. It doesn’t remove the obstacles. It doesn’t remove the fear. But it makes the fear more manageable.&lt;/p&gt;
&lt;p&gt;I hope this gives you a way to dance with fear.&lt;/p&gt;
&lt;p&gt;Now go.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Seeding a database</title>
    <link href="https://zellwk.com/blog/seed-database/"/>
    <updated>2019-08-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/seed-database/</id>
    <content type="html">&lt;p&gt;When you write tests for the backend, you need to test for four different kinds of operations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create (for adding things to the database)&lt;/li&gt;
&lt;li&gt;Read (for getting things from the database)&lt;/li&gt;
&lt;li&gt;Update (for changing the database)&lt;/li&gt;
&lt;li&gt;Delete (for deleting things from the database)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The easiest type to test for is create operations. You put something into the database and test whether it’s there.&lt;/p&gt;
&lt;p&gt;For the other three types of operations, you need to put something into the database &lt;em&gt;before&lt;/em&gt; you write the test.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;putting-things-into-the-database&quot;&gt;Putting things into the database&lt;/h2&gt;
&lt;p&gt;The process where you add initial content to a database is called &lt;strong&gt;seeding&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say you want to add three users to the database. These users contain a name and an email address.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const users = [{
  name: &#39;Zell&#39;, 
  email: &#39;testing1@gmail.com&#39;
}, {
  name: &#39;Vincy&#39;, 
  email: &#39;testing2@gmail.com&#39;
}, {
  name: &#39;Shion&#39;, 
  email: &#39;testing3@gmail.com&#39;
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use your models to seed the database at the start of the test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const User = require(&#39;../model/User&#39;) // Link to User model 

it(&#39;does something&#39;, async done =&amp;gt; {
  // Add users to the database
  for (const u of users) {
    const user = new User(u)
    await user.save()
  }

  // Create the rest of your test here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need these users for every test, the best way is to add them through the &lt;code&gt;beforeEach&lt;/code&gt; hook. The &lt;code&gt;beforeEach&lt;/code&gt; hook runs before every &lt;code&gt;it&lt;/code&gt; declaration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Seed the database with users
beforeEach(async () =&amp;gt; {
  for (u of users) {
    const user = new User(u)
    await user.save()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use Mongoose’s &lt;code&gt;create&lt;/code&gt; function to do the same thing. It runs &lt;code&gt;new Model()&lt;/code&gt; and &lt;code&gt;save()&lt;/code&gt;, so the code below and the one above does the same thing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Seed the database with users
beforeEach(async () =&amp;gt; {
  await User.create(users)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;create-vs-insertmany&quot;&gt;create vs insertMany&lt;/h2&gt;
&lt;p&gt;Mongoose has a second method to help you seed the database. This method is called &lt;code&gt;insertMany&lt;/code&gt;. &lt;code&gt;insertMany&lt;/code&gt; is faster than &lt;code&gt;create&lt;/code&gt;, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insertMany&lt;/code&gt; sends one operation to the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt; sends one operation for each document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, &lt;code&gt;insertMany&lt;/code&gt; does not run the &lt;code&gt;save&lt;/code&gt; middleware.&lt;/p&gt;
&lt;h3 id=&quot;is-triggering-the-save-middleware-important%3F&quot;&gt;Is triggering the save middleware important?&lt;/h3&gt;
&lt;p&gt;This depends on your seed data. If your seed data needs to go through the &lt;code&gt;save&lt;/code&gt; middleware, you need to use &lt;code&gt;create&lt;/code&gt;. For example, let’s say you want to save a user’s password into the database. You have this data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const users = [{
  name: &#39;Zell&#39;, 
  email: &#39;testing1@gmail.com&#39;,
  password: &#39;12345678&#39;
}, {
  name: &#39;Vincy&#39;, 
  email: &#39;testing2@gmail.com&#39;,
  password: &#39;12345678&#39;
}, {
  name: &#39;Shion&#39;, 
  email: &#39;testing3@gmail.com&#39;,
  password: &#39;12345678&#39;
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we save a user’s password into the database, we want to hash the password for security reasons. We usually hash the password through the &lt;code&gt;save&lt;/code&gt; middleware.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Hashes password automatically
userSchema.pre(&#39;save&#39;, async function (next) {
  if (!this.isModified(&#39;password&#39;)) return next()
  const salt = bcrypt.genSaltSync(10)
  const hashedPassword =  bcrypt.hashSync(password, salt)
  this.password = hashedPassword
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use &lt;code&gt;create&lt;/code&gt;, you’ll get users with hashed passwords:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/seed-database/create.png&quot; alt=&quot;Create runs the save middleware.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you use &lt;code&gt;insertMany&lt;/code&gt;, you’ll get users without hashed passwords:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/seed-database/insert-many.png&quot; alt=&quot;InsertMany does not run the save middleware.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;when-to-use-create%2C-when-to-use-insertmany&quot;&gt;When to use create, when to use insertMany&lt;/h3&gt;
&lt;p&gt;Since &lt;code&gt;insertMany&lt;/code&gt; is faster than &lt;code&gt;create&lt;/code&gt;, you want to use &lt;code&gt;insertMany&lt;/code&gt; whenever you can.&lt;/p&gt;
&lt;p&gt;Here’s how I do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If seed data does not require the &lt;code&gt;save&lt;/code&gt; middleware, use &lt;code&gt;insertMany&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If seed data requires &lt;code&gt;save&lt;/code&gt; middleware, use &lt;code&gt;create&lt;/code&gt;. Then, overwrite seed data so it no longer requires the &lt;code&gt;save&lt;/code&gt; middleware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the password example above, I would run &lt;code&gt;create&lt;/code&gt; first. Then, I copy-paste the hashed password seed data. Then, I’ll run &lt;code&gt;insertMany&lt;/code&gt; from this point onwards.&lt;/p&gt;
&lt;p&gt;If you want to overwrite complicated seed data, you might want to get JSON straight from MongoDB. To do this, you can use &lt;code&gt;mongoexport&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mongoexport --db &amp;lt;databaseName&amp;gt; --collection &amp;lt;collectionName&amp;gt; --jsonArray --pretty --out output.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This says:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Export &lt;code&gt;&amp;lt;collection&amp;gt;&lt;/code&gt; from &lt;code&gt;&amp;lt;databaseName&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creates output as a JSON Array, prettified, in a file called &lt;code&gt;output.json&lt;/code&gt;. This file will be placed in the folder where you run the command.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;seeding-multiple-test-files-and-collections&quot;&gt;Seeding multiple test files and collections&lt;/h2&gt;
&lt;p&gt;You want a place to store your seed data so you can use them across all your tests and collections. Here’s a system I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I name my seed files according to their models. I seed a &lt;code&gt;User&lt;/code&gt; model with the &lt;code&gt;user.seed.js&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;I put my seed files in the &lt;code&gt;seeds&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;I loop through each seed file to seed the database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To loop through each seed file, you need to use the &lt;code&gt;fs&lt;/code&gt; module. &lt;code&gt;fs&lt;/code&gt; stands for filesystem.&lt;/p&gt;
&lt;p&gt;The easiest way to loop through the files is to create an &lt;code&gt;index.js&lt;/code&gt; file in the same &lt;code&gt;seeds&lt;/code&gt; folder. Once you have the &lt;code&gt;index.js&lt;/code&gt; file, you can use the following code to look for all files with &lt;code&gt;*.seed.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;)
const util = require(&#39;util&#39;)

// fs.readdir is written with callbacks. 
// This line converts fs.readdir into a promise
const readDir = util.promisify(fs.readdir)

async function seedDatabase () {
  // Gets list of files in the directory
  // `__dirname` points to the `seeds/` folder
  const dir = await readDir(__dirname)

  // Gets a list of files that matches *.seed.js
  const seedFiles = dir.filter(f =&amp;gt; f.endsWith(&#39;.seed.js&#39;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have a list of seed files, you can loop through each seed file to seed the database. Here, I use a &lt;code&gt;for...of&lt;/code&gt; loop to keep things simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function seedDatabase () {
  for (const file of seedFiles) {
    // Seed the database
  } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To seed the database, we need to find the correct Mongoose model from the name of the seed file. A file called &lt;code&gt;user.seed.js&lt;/code&gt; should seed the &lt;code&gt;User&lt;/code&gt; model. This means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We must find &lt;code&gt;user&lt;/code&gt; from &lt;code&gt;user.seed.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We must capitalize &lt;code&gt;user&lt;/code&gt; into &lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s a crude version that does what’s required. (If you want to, you can make the code more robust with regex instead of &lt;code&gt;split&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (const file of seedFiles) {
  const fileName = file.split(&#39;.seed.js&#39;)[0]
  const modelName = toTitleCase(fileName)
  const model = mongoose.models[modelName]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we want to make sure each file has a Model that corresponds to it. If the model cannot be found, we want to throw an error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (const file of seedFiles) {
  //...
  if (!model) throw new Error(`Cannot find Model &#39;${modelName}&#39;`)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there’s a corresponding model, we want to seed the database with the contents in the seed file. To do this, we need to read the seed file first. Here, since I used the &lt;code&gt;.js&lt;/code&gt; extension, I can simply require the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (const file of seedFiles) {
  //...
  const fileContents = require(path.join(__dirname, file))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this to work, my seed files must export an array of data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = [{
  name: &#39;Zell&#39;,
  email: &#39;testing1@gmail.com&#39;,
  password: &#39;12345678&#39;
}, {
  name: &#39;Vincy&#39;,
  email: &#39;testing2@gmail.com&#39;,
  password: &#39;12345678&#39;
}, {
  name: &#39;Shion&#39;,
  email: &#39;testing3@gmail.com&#39;,
  password: &#39;12345678&#39;
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once I have the contents of the seed file, I can run &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;insertMany&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function seedDatabase (runSaveMiddleware = false) {
  // ...
  for (const file of seedFiles) {
    // ... 

    runSaveMiddleware
      ? model.create(fileContents)
      : model.insertMany(fileContents)
  } 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the whole &lt;code&gt;seedDatabase&lt;/code&gt; code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;)
const util = require(&#39;util&#39;)
const readDir = util.promisify(fs.readdir).bind(fs)
const path = require(&#39;path&#39;)
const mongoose = require(&#39;mongoose&#39;)

function toTitleCase (str) {
  return str.replace(/\w\S*/g, (txt) =&amp;gt; {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  })
}

async function seedDatabase (runSaveMiddleware = false) {
  const dir = await readDir(__dirname)
  const seedFiles = dir.filter(f =&amp;gt; f.endsWith(&#39;.seed.js&#39;))

  for (const file of seedFiles) {
    const fileName = file.split(&#39;.seed.js&#39;)[0]
    const modelName = toTitleCase(fileName)
    const model = mongoose.models[modelName]

    if (!model) throw new Error(`Cannot find Model &#39;${modelName}&#39;`)
    const fileContents = require(path.join(__dirname, file))

    runSaveMiddleware
      ? await model.create(fileContents)
      : await model.insertMany(fileContents)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;why-js%2C-not-json%3F&quot;&gt;Why JS, not JSON?&lt;/h2&gt;
&lt;p&gt;It’s the industry norm to use JSON to store data. In this case, I find it easier to use JavaScript objects because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I don’t have to write opening and closing double-quotes for each property.&lt;/li&gt;
&lt;li&gt;I don’t have to use double-quotes at all! (It’s easier to write single-quotes because there’s no need to press the shift key).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Which is easier to write. JavaScript objects or JSON? 

// JavaScript objects 
module.exports = [{
  objectName: &#39;property&#39;
}]

// JSON
[{
  &amp;quot;objectName&amp;quot;: &amp;quot;property&amp;quot;
}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to use JSON, make sure you change &lt;code&gt;seedDatabase&lt;/code&gt; to work with JSON. (I’ll let you work through the code yourself).&lt;/p&gt;
&lt;h2 id=&quot;adjusting-the-setupdb-function&quot;&gt;Adjusting the setupDB function&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https://zellwk.com/blog/jest-and-mongoose&quot;&gt;previous article&lt;/a&gt;, I created a &lt;code&gt;setupDB&lt;/code&gt; function to help set up databases for my tests. &lt;code&gt;seedDatabase&lt;/code&gt; goes into the &lt;code&gt;setupDB&lt;/code&gt; function since seeding is part of the setting up process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function seedDatabase (runSaveMiddleware = false) {
  // ...
}

module.exports = {
  setupDB (databaseName, runSaveMiddleware = false) {
    // Connect to Mongoose
    beforeAll(/*...*/)

    // Seed Data 
    beforeEach(async () =&amp;gt; {
      await seedDatabase(runSaveMiddleware)
    })

    // Cleans up database between each test
    afterEach(/*...*/)

    // Disconnect Mongoose
    afterAll(/*...*/)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-github-repository&quot;&gt;A Github Repository&lt;/h2&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/zellwk/endpoint-testing-example&quot; title=&quot;Endpoint testing example&quot;&gt;Github repository&lt;/a&gt; to go with this three-part testing series. I hope this demo code helps you start testing your applications.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Connecting Jest and Mongoose</title>
    <link href="https://zellwk.com/blog/jest-and-mongoose/"/>
    <updated>2019-08-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/jest-and-mongoose/</id>
    <content type="html">&lt;p&gt;The hard part about testing a backend application is setting up a test database. It can be complicated.&lt;/p&gt;
&lt;p&gt;Today, I want to share how I setup Jest and Mongoose.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;setting-up-mongoose-with-jest&quot;&gt;Setting up Mongoose with Jest&lt;/h2&gt;
&lt;p&gt;Jest gives you a warning if you try to use Mongoose with Jest.&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jest-and-mongoose/mongoose-jest-warning.png&quot; alt=&quot;Warning if you try to use Mongoose with Jest&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you don’t want to see this error, you need to set &lt;code&gt;testEnvironment&lt;/code&gt; to &lt;code&gt;node&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;quot;jest&amp;quot;: {
  &amp;quot;testEnvironment&amp;quot;: &amp;quot;node&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;setting-up-mongoose-in-a-test-file&quot;&gt;Setting up Mongoose in a test file&lt;/h2&gt;
&lt;p&gt;You want to connect to a database before you begin any tests. You can use the &lt;code&gt;beforeAll&lt;/code&gt; hook to do so.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;beforeAll(async () =&amp;gt; {
  // Connect to a Mongo DB
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To connect to a MongoDB, you can use Mongoose’s &lt;code&gt;connect&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const databaseName = &#39;test&#39;

beforeAll(async () =&amp;gt; {
  const url = `mongodb://127.0.0.1/${databaseName}`
  await mongoose.connect(url, { useNewUrlParser: true })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a connection to the database named &lt;code&gt;test&lt;/code&gt;. You can name your database anything. You’ll learn how to clean them up later.&lt;/p&gt;
&lt;p&gt;Note: Make sure you have an active local MongoDB Connection before you test. Your tests will fail if you don’t have an active local MongoDB Connection. &lt;a href=&quot;https://zellwk.com/blog/local-mongodb&quot;&gt;Read this&lt;/a&gt; to learn how to create a local MongoDB connection.&lt;/p&gt;
&lt;h2 id=&quot;creating-databases-for-each-test-file&quot;&gt;Creating databases for each test file&lt;/h2&gt;
&lt;p&gt;When you test, you want to connect to a different database for each test file, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jest runs each test file asynchronously. You won’t know which file comes first.&lt;/li&gt;
&lt;li&gt;You don’t want tests to share the same database. You don’t want data from one test file to spill over to the next test file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To connect to a different database, you change the name of the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Connects to database called avengers
beforeAll(async () =&amp;gt; {
  const url = `mongodb://127.0.0.1/avengers`
  await mongoose.connect(url, { useNewUrlParser: true })
})

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Connects to database power-rangers
beforeAll(async () =&amp;gt; {
  const url = `mongodb://127.0.0.1/power-rangers`
  await mongoose.connect(url, { useNewUrlParser: true })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;sending-a-post-request&quot;&gt;Sending a POST request&lt;/h2&gt;
&lt;p&gt;Let’s say you want to create a user for your app. The user has a name and an email address. Your Mongoose Schema might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
const Schema = mongoose.Schema

const userSchema = new Schema({
  name: String,
  email: {
    type: String, 
    require: true, 
    unique: true
  }
})

module.exports = mongoose.model(&#39;User&#39;, userSchema)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a user, you need to save the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; into MongoDB. Your route and controller might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const User = require(&#39;../model/User&#39;) // Link to your user model 

app.post(&#39;/signup&#39;, async (req, res) =&amp;gt; {
  const { name, email } = req.body 
  const user = new User({name, email})
  const ret = await user.save()
  res.json(ret)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To save the user into the database, you can send a POST request to &lt;code&gt;signup&lt;/code&gt;. To send a post request, you use the &lt;code&gt;post&lt;/code&gt; method. To send data along with the POST request, you use the &lt;code&gt;send&lt;/code&gt; method. In your tests, it’ll look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;Should save user to database&#39;, async done =&amp;gt; {
  const res = await request.post(&#39;/signup&#39;)
	.send({
      name: &#39;Zell&#39;,
      email: &#39;testing@gmail.com&#39;
    })
  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: If you run this code two times, you’ll get an &lt;code&gt;E1100 duplicate key error&lt;/code&gt;. This error occurred because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We said the &lt;code&gt;email&lt;/code&gt; should be &lt;code&gt;unique&lt;/code&gt; in the Schema above.&lt;/li&gt;
&lt;li&gt;We tried to create another user with &lt;code&gt;testing@gmail.com&lt;/code&gt;. even though one already exists in the database. (The first one was created when you sent the first request).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jest-and-mongoose/duplicate-error.png&quot; alt=&quot;Duplicate key error.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;cleaning-up-the-database-between-tests&quot;&gt;Cleaning up the database between tests&lt;/h2&gt;
&lt;p&gt;You want to remove entries from the database between each test. This ensures you always start with an empty database.&lt;/p&gt;
&lt;p&gt;You can do this with the &lt;code&gt;afterEach&lt;/code&gt; hook.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Cleans up database between each test
afterEach(async () =&amp;gt; {
  await User.deleteMany()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this code above, we only cleared the &lt;code&gt;User&lt;/code&gt; collection in the database. In a real scenario, you want to clear all collections. You can use the following code to do so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function removeAllCollections () {
  const collections = Object.keys(mongoose.connection.collections)
  for (const collectionName of collections) {
    const collection = mongoose.connection.collections[collectionName]
    await collection.deleteMany()
  }
}

afterEach(async () =&amp;gt; {
  await removeAllCollections()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing-the-endpoint&quot;&gt;Testing the Endpoint&lt;/h2&gt;
&lt;p&gt;Let’s begin our tests. In this test, we will send a POST request to the &lt;code&gt;/signup&lt;/code&gt; endpoint. We want to make sure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user gets saved to the database&lt;/li&gt;
&lt;li&gt;The returned object contains information about the user&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;checking-if-the-user-was-saved-to-the-database&quot;&gt;Checking if the user was saved to the database&lt;/h3&gt;
&lt;p&gt;To check whether the user gets saved into the database, you search the database for the user.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const User = require(&#39;../model/User&#39;) // Link to your user model

it(&#39;Should save user to database&#39;, async done =&amp;gt; {
  const res = await request.post(&#39;/signup&#39;)
	.send({
      name: &#39;Zell&#39;,
      email: &#39;testing@gmail.com&#39;
    })

  // Searches the user in the database
  const user = await User.findOne({ email: &#39;testing@gmail.com&#39; })

  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;code&gt;console.log&lt;/code&gt; user, you should see something like this:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jest-and-mongoose/user.png&quot; alt=&quot;User object from MongoDB.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This means our user got saved to the database. If we want to confirm the user has a name and an email, we can do &lt;code&gt;expect&lt;/code&gt; them to be true.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;Should save user to database&#39;, async done =&amp;gt; {
  // Sends request...
  
  // Searches the user in the database
  const user = await User.findOne({ email: &#39;testing@gmail.com&#39; })
  expect(user.name).toBeTruthy()
  expect(user.email).toBeTruthy()

  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checking-if-the-returned-object-contains-the-information-about-the-user&quot;&gt;Checking if the returned object contains the information about the user&lt;/h3&gt;
&lt;p&gt;We want to make sure the returned object contains the user’s name and email address. To do this, we check the response from the post request.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;Should save user to database&#39;, async done =&amp;gt; {
  // Sends request...
  
  // Searches the user in the database... 

  // Ensures response contains name and email 
  expect(res.body.name).toBeTruthy()
  expect(res.body.email).toBeTruthy()
  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with our tests now. We want to delete the database from MongoDB.&lt;/p&gt;
&lt;h2 id=&quot;deleting-the-database&quot;&gt;Deleting the database&lt;/h2&gt;
&lt;p&gt;To delete the database, you need to ensure there are 0 collections in the database. We can do this by dropping each collection we used.&lt;/p&gt;
&lt;p&gt;We’ll do after all our tests have run, in the &lt;code&gt;afterAll&lt;/code&gt; hook.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;afterAll(async () =&amp;gt; {
  // Removes the User collection
  await User.drop() 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To drop all your collections you can use this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function dropAllCollections () {
  const collections = Object.keys(mongoose.connection.collections)
  for (const collectionName of collections) {
    const collection = mongoose.connection.collections[collectionName]
    try {
      await collection.drop()
    } catch (error) {
      // This error happens when you try to drop a collection that&#39;s already dropped. Happens infrequently. 
      // Safe to ignore. 
      if (error.message === &#39;ns not found&#39;) return

      // This error happens when you use it.todo.
      // Safe to ignore. 
      if (error.message.includes(&#39;a background operation is currently running&#39;)) return

      console.log(error.message)
    }
  }
}

// Disconnect Mongoose
afterAll(async () =&amp;gt; {
  await dropAllCollections()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you want to close the Mongoose connection to end the test. Here’s how you can do it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;afterAll(async () =&amp;gt; {
  await dropAllCollections()
  // Closes the Mongoose connection
  await mongoose.connection.close()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s everything you need to do to setup Mongoose with Jest!&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;There’s a lot of code that goes into &lt;code&gt;beforeEach&lt;/code&gt;, &lt;code&gt;afterEach&lt;/code&gt;, and &lt;code&gt;afterAll&lt;/code&gt; hooks. We will be using them for every test file. It makes sense to create a setup file for these hooks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// test-setup.js 
const mongoose = require(&#39;mongoose&#39;)
mongoose.set(&#39;useCreateIndex&#39;, true)
mongoose.promise = global.Promise

async function removeAllCollections () {
  const collections = Object.keys(mongoose.connection.collections)
  for (const collectionName of collections) {
    const collection = mongoose.connection.collections[collectionName]
    await collection.deleteMany()
  }
}

async function dropAllCollections () {
  const collections = Object.keys(mongoose.connection.collections)
  for (const collectionName of collections) {
    const collection = mongoose.connection.collections[collectionName]
    try {
      await collection.drop()
    } catch (error) {
      // Sometimes this error happens, but you can safely ignore it
      if (error.message === &#39;ns not found&#39;) return
      // This error occurs when you use it.todo. You can
      // safely ignore this error too
      if (error.message.includes(&#39;a background operation is currently running&#39;)) return
      console.log(error.message)
    }
  }
}

module.exports = {
  setupDB (databaseName) {
    // Connect to Mongoose
    beforeAll(async () =&amp;gt; {
      const url = `mongodb://127.0.0.1/${databaseName}`
      await mongoose.connect(url, { useNewUrlParser: true })
    })

    // Cleans up database between each test
    afterEach(async () =&amp;gt; {
      await removeAllCollections()
    })

    // Disconnect Mongoose
    afterAll(async () =&amp;gt; {
      await dropAllCollections()
      await mongoose.connection.close()
    })
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can import the setup file for each test like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const { setupDB } = require(&#39;../test-setup&#39;)

// Setup a Test Database
setupDB(&#39;endpoint-testing&#39;)

// Continue with your tests... 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s one more thing I want to show you.&lt;/p&gt;
&lt;p&gt;When you create tests, you want to seed the database with fake data. I came up with a way to seed the database easily. And I’ll show it to you in the next article.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Endpoint testing with Jest and Supertest</title>
    <link href="https://zellwk.com/blog/endpoint-testing/"/>
    <updated>2019-08-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/endpoint-testing/</id>
    <content type="html">&lt;p&gt;I played around with testing lately. One thing I tried to do was to test the endpoints of my Express application.&lt;/p&gt;
&lt;p&gt;Setting up the test was the hard part. People who write about tests don’t actually teach you how they set it up. I could not find any useful information about this, and I had to try and figure it out.&lt;/p&gt;
&lt;p&gt;So today, I want to share the setup I created for myself. Hopefully, this can help you when you create your own tests.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;First, let’s talk about the stack.&lt;/p&gt;
&lt;h2 id=&quot;the-stack&quot;&gt;The Stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I created my app with Express.&lt;/li&gt;
&lt;li&gt;I used Mongoose to connect to MongoDB&lt;/li&gt;
&lt;li&gt;I used Jest as my test framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might have expected Express and Mongoose because everyone else seems to use those two frameworks. I used them too.&lt;/p&gt;
&lt;p&gt;But why Jest and not other test frameworks?&lt;/p&gt;
&lt;h2 id=&quot;why-jest&quot;&gt;Why Jest&lt;/h2&gt;
&lt;p&gt;I don’t like Facebook, so I didn’t want to try anything that was created by Facebook’s team. I know it sounds silly, but that was the truth.&lt;/p&gt;
&lt;p&gt;Before Jest, I tried out all sorts of test frameworks. I tried Tap, Tape, Mocha, Jasmine, and AVA. Each test framework has its own pros and cons. I almost ended up with AVA, but I didn’t go with AVA because I found it hard to set up. Eventually, I tried Jest out because Kent C. Dodds recommended it.&lt;/p&gt;
&lt;p&gt;I fell in love with Jest after trying it out. I love it because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It’s easy to setup&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://egghead.io/lessons/javascript-use-jest-s-interactive-watch-mode&quot; title=&quot;Use Jest&#39;s Interactive Watch Mode&quot;&gt;watch-mode&lt;/a&gt; is amazing&lt;/li&gt;
&lt;li&gt;When you &lt;code&gt;console.log&lt;/code&gt; something, it actually shows up without any difficulty (this was a bitch with AVA).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;setting-up-jest&quot;&gt;Setting up Jest&lt;/h2&gt;
&lt;p&gt;First, you need to install Jest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npm install jest --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you want to add tests scripts to your &lt;code&gt;package.json&lt;/code&gt; file. It helps to add the &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;test:watch&lt;/code&gt; scripts (for one-off testing and watch-mode respectively).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;,
  &amp;quot;test:watch&amp;quot;: &amp;quot;jest --watch&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose to write your test files in one of the following formats. Jest picks them up for you automatically.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;js&lt;/code&gt; files in the &lt;code&gt;__tests__&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;files named with &lt;code&gt;test.js&lt;/code&gt; (like &lt;code&gt;user.test.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;files named with &lt;code&gt;spec.js&lt;/code&gt; (like &lt;code&gt;user.spec.js&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can place your files however you like. When I tested endpoints, I put the test files together with my endpoints. I found this easier to manage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- routes
  |- users/
    |- index.js
    |- users.test.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;writing-your-first-test&quot;&gt;Writing your first test&lt;/h2&gt;
&lt;p&gt;Jest includes &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;it&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; for you in every test file. You don’t have to &lt;code&gt;require&lt;/code&gt; them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;describe&lt;/code&gt; lets you wrap many tests together under one umbrella. (It is used for organizing your tests).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;it&lt;/code&gt; lets you run a test.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expect&lt;/code&gt; lets you perform assertions. The test passes if all assertions passes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s an example of a test that fails. In this example, I &lt;code&gt;expect&lt;/code&gt; that &lt;code&gt;1&lt;/code&gt; should be strictly equal to &lt;code&gt;2&lt;/code&gt;. Since &lt;code&gt;1 !== 2&lt;/code&gt;, the test fails.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This test fails because 1 !== 2
it(&#39;Testing to see if Jest works&#39;, () =&amp;gt; {
  expect(1).toBe(2)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll see a failing message from Jest if you run Jest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;npm run test:watch
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/endpoint-testing/test-fail.png&quot; alt=&quot;Output from Terminal. Test fails.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You can make the test pass by expecting &lt;code&gt;1 === 1&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This passes because 1 === 1
it(&#39;Testing to see if Jest works&#39;, () =&amp;gt; {
  expect(1).toBe(1)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/endpoint-testing/test-pass.png&quot; alt=&quot;Output from Terminal. Test successful.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This is the most basic of tests. It’s not useful at all because we haven’t testing anything real yet.&lt;/p&gt;
&lt;h2 id=&quot;asynchronous-tests&quot;&gt;Asynchronous tests&lt;/h2&gt;
&lt;p&gt;You need to send a request to test an endpoint. Requests are asynchronous, which means you must be able to conduct asynchronous tests.&lt;/p&gt;
&lt;p&gt;This is easy with Jest. There are two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the &lt;code&gt;async&lt;/code&gt; keyword&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;done&lt;/code&gt; when you’re done with your tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what it can look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;Async test&#39;, async done =&amp;gt; {
  // Do your async tests here
  
  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;a href=&quot;https://zellwk.com/blog/async-await&quot;&gt;Here’s an article&lt;/a&gt; on Async/await in JavaScript if you don’t know how to use it.&lt;/p&gt;
&lt;h2 id=&quot;testing-endpoints&quot;&gt;Testing Endpoints&lt;/h2&gt;
&lt;p&gt;You can use Supertest to test endpoints. First, you need to install Supertest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install supertest --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before you can test endpoints, you need to setup the server so Supertest can use it in your tests.&lt;/p&gt;
&lt;p&gt;Most tutorials teach you to &lt;code&gt;listen&lt;/code&gt; to the Express app in the server file, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const express = require(&#39;express&#39;)
const app = express()

// Middlewares...
// Routes...

app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn’t work because it starts listening to one port. If you try to write many test files, you’ll get an error that says “port in use”.&lt;/p&gt;
&lt;p&gt;You want to allow each test file to start a server on their own. To do this, you need to export &lt;code&gt;app&lt;/code&gt; without listening to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// server.js
const express = require(&#39;express&#39;)
const app = express()

// Middlewares...
// Routes...

module.exports = app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For development or production purposes, you can listen to your &lt;code&gt;app&lt;/code&gt; like normal in a different file like &lt;code&gt;start.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// start.js
const app = require(&#39;./server.js&#39;)
app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-supertest&quot;&gt;Using Supertest&lt;/h3&gt;
&lt;p&gt;To use Supertest, you require your app and supertest in the test file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const app = require(&#39;./server&#39;) // Link to your server file
const supertest = require(&#39;supertest&#39;)
const request = supertest(app)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you do this, you get the ability to send GET, POST, PUT, PATCH and DELETE requests. Before we send a request, we need to have an endpoint. Let’s say we have a &lt;code&gt;/test&lt;/code&gt; endpoint.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.get(&#39;/test&#39;, async (req, res) =&amp;gt; {
  res.json({message: &#39;pass!&#39;})
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To send a GET request to &lt;code&gt;/test&lt;/code&gt;, you use the &lt;code&gt;.get&lt;/code&gt; method from Supertest.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;Gets the test endpoint&#39;, async done =&amp;gt; {
  // Sends GET Request to /test endpoint
  const res = await request.get(&#39;/test&#39;)

  // ...
  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Supertest gives you a response from the endpoint. You can test both HTTP status and the body (whatever you send through &lt;code&gt;res.json&lt;/code&gt;) like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;it(&#39;gets the test endpoint&#39;, async done =&amp;gt; {
  const response = await request.get(&#39;/test&#39;)

  expect(response.status).toBe(200)
  expect(response.body.message).toBe(&#39;pass!&#39;)
  done()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/endpoint-testing/test-endpoint-pass.png&quot; alt=&quot;First endpoint test passes.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you want to find out more about Supertest, you can read its documentation &lt;a href=&quot;https://github.com/visionmedia/supertest&quot; title=&quot;Supertest&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the next article, I’ll show you how to to do a POST request and how to connect to Mongoose in your test file.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to setup a local MongoDB Connection</title>
    <link href="https://zellwk.com/blog/local-mongodb/"/>
    <updated>2019-07-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/local-mongodb/</id>
    <content type="html">&lt;p&gt;I always use MongoDB as a database when I work on an app. And I like to connect to a database on my computer because it speeds up dev and test-related work.&lt;/p&gt;
&lt;p&gt;Today, I want to share how to create and connect to a local MongoDB Database.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;installing-mongodb&quot;&gt;Installing MongoDB&lt;/h2&gt;
&lt;p&gt;You need to install MongoDB on your computer before you can connect to it. You can install MongoDB by following these instructions (&lt;a href=&quot;https://zellwk.com/blog/install-mongodb&quot; title=&quot;Install MongoDB on Mac&quot;&gt;Mac&lt;/a&gt; and &lt;a href=&quot;https://treehouse.github.io/installation-guides/windows/mongo-windows.html&quot; title=&quot;Treehouse — Install MongoDB on Windows&quot;&gt;Windows&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Once you have completed the installation process, try typing &lt;code&gt;mongo --version&lt;/code&gt; into your command line. You should get a response similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mongo --version
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/version.png&quot; alt=&quot;Terminal showing MongoDB Version&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;starting-mongodb&quot;&gt;Starting MongoDB&lt;/h2&gt;
&lt;p&gt;You can start MongoDB on your computer with the &lt;code&gt;mongod&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mongod
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongod.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Keep the &lt;code&gt;mongod&lt;/code&gt; window running when you want to work with your local MongoDB. MongoDB stops when you close the window.&lt;/p&gt;
&lt;h2 id=&quot;brief-overview-of-how-mongodb-works&quot;&gt;Brief overview of how MongoDB works&lt;/h2&gt;
&lt;p&gt;MongoDB lets you store things (called &lt;em&gt;documents&lt;/em&gt;) inside &lt;em&gt;databases&lt;/em&gt;. Each database contains multiple &lt;em&gt;collections&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To make it easier to understand, you can think of MongoDB as a building. It contains many rooms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Each room is a database&lt;/strong&gt;. Each database is responsible for storing information about one application. You can store as much information as you want.&lt;/p&gt;
&lt;p&gt;You have an unlimited supply of &lt;strong&gt;boxes&lt;/strong&gt; in each room. Each box is a  &lt;strong&gt;collection&lt;/strong&gt;. Each collection can only contain one type of data.&lt;/p&gt;
&lt;p&gt;For example, one collection can be used for books, one collection for users, one collection for toys, and so on.&lt;/p&gt;
&lt;h2 id=&quot;adding-items-to-a-database&quot;&gt;Adding items to a database&lt;/h2&gt;
&lt;p&gt;One way to add items to a MongoDB database is through the Mongo Shell. To open up the Mongo Shell, you open another command line window and run &lt;code&gt;mongo&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mongo
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongo-shell.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Note: Make sure you keep the &lt;code&gt;mongod&lt;/code&gt; window open! You won’t be able to interact with the Mongo Shell if you close the &lt;code&gt;mongod&lt;/code&gt; window.&lt;/p&gt;
&lt;p&gt;First, we need a database to work with. You can see the currently selected database with the &lt;code&gt;db&lt;/code&gt; command. (By default, you should be on the &lt;code&gt;test&lt;/code&gt; database).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: The &lt;code&gt;&amp;gt;&lt;/code&gt; in the code above signifies the Mongo Shell. You don’t need to type &lt;code&gt;&amp;gt;&lt;/code&gt;. It is not part of the command.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/test-db.png&quot; alt=&quot;Terminal returns &#39;test&#39; when we run the &#39;db&#39; command.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;For this article, we’ll create a database called &lt;code&gt;game-of-thrones&lt;/code&gt;. You can use the &lt;code&gt;use &amp;lt;database&amp;gt;&lt;/code&gt; command to create and switch to a new database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; use game-of-thrones
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/switch-db.png&quot; alt=&quot;Switch to a database named game-of-thrones.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We’re going to add a character into the &lt;code&gt;game-of-thrones&lt;/code&gt;. Here, we need to put the character into a collection. We’ll use &lt;code&gt;characters&lt;/code&gt; as the name of the collection.&lt;/p&gt;
&lt;p&gt;To add an item to a collection, you can pass a JavaScript object into &lt;code&gt;db.&amp;lt;collectionName&amp;gt;.insertOne()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.characters.insertOne({ name: &#39;Jon Snow&#39; })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/insert-1.png&quot; alt=&quot;Added &#39;Jon Snow&#39; into the &#39;characters&#39; collection.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Let’s add one character into the database before we continue.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.characters.insertOne({ name: &#39;Arya Stark&#39; })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/insert-2.png&quot; alt=&quot;Added &#39;Arya Stark&#39; into the &#39;characters&#39; collection.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You can see the characters we’ve added by using the &lt;code&gt;find&lt;/code&gt; command. (&lt;code&gt;db.&amp;lt;collectionName&amp;gt;.find()&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;db.characters.find()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/db-find.png&quot; alt=&quot;Database returns two characters—Jon Snow and Arya Stark.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This is all you need to know about the Mongo Shell for now.&lt;/p&gt;
&lt;h2 id=&quot;accessing-mongdb-with-mongodb-compass&quot;&gt;Accessing MongDB with MongoDB Compass&lt;/h2&gt;
&lt;p&gt;MongoDB Compass gives you another way to access MongoDB. It’s an app that makes checking (and editing) databases easier if you’re not a fan of the command line.&lt;/p&gt;
&lt;p&gt;To use MongoDB Compass, you have to install it first. You can download and install MongoDB Compass from the &lt;a href=&quot;https://docs.mongodb.com/compass/master/install/&quot; title=&quot;MongoDB Compass&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you open MongoDB Compass, you’ll see a screen that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongodb-compass.png&quot; alt=&quot;MongoDB Compass startup screen.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;To connect to your local MongoDB, you set &lt;code&gt;Hostname&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; to &lt;code&gt;27017&lt;/code&gt;. These values are the default for all local MongoDB connections (unless you changed them).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongodb-compass-settings.png&quot; alt=&quot;Sets Hostname to localhost and Port to 27017.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Press connect, and you should see the databases in your local MongoDB. Here, you should be able to see &lt;code&gt;game-of-thrones&lt;/code&gt; (the database we created for this tutorial).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongodb-compass-databases.png&quot; alt=&quot;List of databases in my local MongoDB&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you click on &lt;code&gt;game-of-thrones&lt;/code&gt;, you’ll see a &lt;code&gt;characters&lt;/code&gt; collection.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongodb-compass-collection.png&quot; alt=&quot;The characters collection in MongoDB Compass.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;And if you click on &lt;code&gt;characters&lt;/code&gt;, you’ll see the two characters we created in the earlier section.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/mongodb-compass-documents.png&quot; alt=&quot;Documents &#39;Jon Snow&#39; and &#39;Arya Stark&#39; in the &#39;Characters&#39; collection.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This is how you can use MongoDB Compass to connect to a MongoDB that’s running on your own computer.&lt;/p&gt;
&lt;h2 id=&quot;connecting-to-mongodb-with-a-node-server&quot;&gt;Connecting to MongoDB with a Node server&lt;/h2&gt;
&lt;p&gt;When we build applications, we connect to MongoDB through our applications (not through Mongo Shell nor MongoDB Compass).&lt;/p&gt;
&lt;p&gt;To connect to MongoDB, we need to use the &lt;a href=&quot;https://www.npmjs.com/package/mongodb&quot; title=&quot;MongoDB driver&quot;&gt;mongodb&lt;/a&gt; package. Alternatively, you can also use &lt;a href=&quot;https://www.npmjs.com/package/mongoose&quot; title=&quot;Mongoose&quot;&gt;Mongoose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(By the way, I prefer using Mongoose over the MongoDB native driver. I’ll share why in a future article).&lt;/p&gt;
&lt;h3 id=&quot;connecting-with-mongodb-native-driver&quot;&gt;Connecting with MongoDB native driver&lt;/h3&gt;
&lt;p&gt;First you have to install and require the mongodb package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mongodb --save
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const MongoClient = require(&#39;mongodb&#39;).MongoClient
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can connect to your local MongoDB with this url:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const url = &#39;mongodb://127.0.0.1:27017&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the Mongo Client, you need to specify the database you’re using after you connect to MongoDB. Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dbName = &#39;game-of-thrones&#39;
let db

MongoClient.connect(url, { useNewUrlParser: true }, (err, client) =&amp;gt; {
  if (err) return console.log(err)

  // Storing a reference to the database so you can use it later
  db = client.db(dbName)
  console.log(`Connected MongoDB: ${url}`)
  console.log(`Database: ${dbName}`)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/connect-mongodb.png&quot; alt=&quot;Connected to local MongoDB with MongoDB native driver.&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;connecting-with-mongoose&quot;&gt;Connecting with Mongoose&lt;/h3&gt;
&lt;p&gt;To connect with Mongoose, you need to download and require &lt;code&gt;mongoose&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mongoose --save
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mongoose = require(&#39;mongoose&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use Mongoose, the connection &lt;code&gt;url&lt;/code&gt; should include the database you’re connecting to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const url = &#39;mongodb://127.0.0.1:27017/game-of-thrones&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can connect to MongoDB with the &lt;code&gt;connect&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;mongoose.connect(url, { useNewUrlParser: true })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s how you can check whether the connection succeeds.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const db = mongoose.connection
db.once(&#39;open&#39;, _ =&amp;gt; {
  console.log(&#39;Database connected:&#39;, url)
})

db.on(&#39;error&#39;, err =&amp;gt; {
  console.error(&#39;connection error:&#39;, err)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/local-mongodb/connect-mongoose.png&quot; alt=&quot;Connected to local MongoDB through Mongoose.&quot;&gt;&lt;/figure&gt;
</content>
  </entry>
  
  <entry>
    <title>Frontend vs Backend</title>
    <link href="https://zellwk.com/blog/frontend-vs-backend/"/>
    <updated>2019-07-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/frontend-vs-backend/</id>
    <content type="html">&lt;p&gt;I used to think it would be easy to write backend if I knew JavaScript. I thought it would be easy because Node is JavaScript. I didn’t have to learn a new language.&lt;/p&gt;
&lt;p&gt;But I was wrong.&lt;/p&gt;
&lt;p&gt;But backend was hard to learn. I took ages to learn it. (And I’m still trying to master it).&lt;/p&gt;
&lt;p&gt;I realized I had problems learning backend because I thought Frontend and Backend were the same—they were just code.&lt;/p&gt;
&lt;p&gt;That’s a big mistake.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frontend and Backend are different beasts altogether&lt;/strong&gt;. I had to respect their differences before I could learn Backend properly.&lt;/p&gt;
&lt;p&gt;If I were to explain the difference between Frontend and Backend (in terms of implementation), I would say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend is about perception&lt;/li&gt;
&lt;li&gt;Backend is about communication&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;frontend-is-about-perception&quot;&gt;Frontend is about perception&lt;/h2&gt;
&lt;p&gt;When we build Frontend things, we care a lot about how users perceive what we built. We spend an ungodly amount of time asking these questions (so much that countless jobs were created for each of them).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Does it look good?&lt;/li&gt;
&lt;li&gt;Does it make sense?&lt;/li&gt;
&lt;li&gt;Is it user-friendly?&lt;/li&gt;
&lt;li&gt;Is it accessible?&lt;/li&gt;
&lt;li&gt;Is it fast?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We care.&lt;/p&gt;
&lt;p&gt;And sometimes, we want to elevate a user’s perceived experience (bring delight; yay!), we add things like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Video/Images/Gifs&lt;/li&gt;
&lt;li&gt;Animations&lt;/li&gt;
&lt;li&gt;Color themes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With each additional feature, we also have to consider their possible implications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Are videos/images/gifs too large?&lt;/li&gt;
&lt;li&gt;What if someone can’t stand our animations?&lt;/li&gt;
&lt;li&gt;Does the user prefer a light theme or a dark theme?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We account for many things—all from a user’s perspective. That’s why I say Frontend is about perception.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We think for our users.&lt;/strong&gt; And we build for them.&lt;/p&gt;
&lt;p&gt;(Unfortunately, some developers delude themselves into thinking that &lt;code&gt;users === themselves&lt;/code&gt;. They build sites for themselves instead of the people they should be building it for).&lt;/p&gt;
&lt;h2 id=&quot;backend-is-about-communication&quot;&gt;Backend is about communication&lt;/h2&gt;
&lt;p&gt;Let me be specific. When I say backend, I’m referring to the layer between the Frontend and the Database. It’s also the layer between the Frontend and any API you need to communicate with (if it goes through your own server).&lt;/p&gt;
&lt;p&gt;To make things simple for some people, I’m talking about where you would create an Express app.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/frontend-vs-backend/server.png&quot; alt=&quot;Image of a frontend, a server, and a database.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;When you work on the Backend, you’ll notice we don’t create interfaces anymore. You don’t fill up forms; you don’t click on buttons. That’s because they’re not needed.&lt;/p&gt;
&lt;p&gt;Backend isn’t about perception. Nobody has to see anything. It just has to… work.&lt;/p&gt;
&lt;p&gt;But what does “work” mean?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backend is there to allow communication between a Frontend and a Database&lt;/strong&gt; (or any external API). Imagine a telephone operator back in the early days. If you called someone on the phone, these operators had to manually connect your call to the person you’re calling. (If they get it wrong, you call the wrong person).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/frontend-vs-backend/bell-telephone-operators.jpg&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;Watch &lt;a href=&quot;https://youtu.be/2BzRjfOoiVQ&quot;&gt;bell telephone switchboard operators&lt;/a&gt; at work&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;When you build a Backend, you’re like the telephone operator. You connect things so they work.&lt;/p&gt;
&lt;p&gt;When we build a Backend, we ask questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What info do we need from the Frontend?&lt;/li&gt;
&lt;li&gt;What info should we send to the Database/API&lt;/li&gt;
&lt;li&gt;Was the operation saved properly on the Database/API?&lt;/li&gt;
&lt;li&gt;What info did the Database/API return?&lt;/li&gt;
&lt;li&gt;What info should we send back to the Frontend?&lt;/li&gt;
&lt;li&gt;Are we rendering a website? If yes, which page should we render?&lt;/li&gt;
&lt;li&gt;What should we do when info is wrong or missing?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also think about speed and reliability. (Imagine what happens if you send something but don’t hear from anything back in return…). But this one is more of an advanced topic.&lt;/p&gt;
&lt;h2 id=&quot;different-mental-models&quot;&gt;Different mental models&lt;/h2&gt;
&lt;p&gt;Here’s a common pattern I observed in my early days of learning backend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I would assume things to work in a specific way&lt;/li&gt;
&lt;li&gt;I would search on Google on how to implement things the specific way I thought&lt;/li&gt;
&lt;li&gt;(Google results would come up empty)&lt;/li&gt;
&lt;li&gt;I would hack around it and build my own infrastructure&lt;/li&gt;
&lt;li&gt;Only to learn (much later) that my way sucked&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I was almost always wrong because I unconsciously relied on my frontend experience while I learned backend. I had to learn things the hard way to rewire my thinking.&lt;/p&gt;
&lt;p&gt;Here’s my biggest takeaway:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t assume you know anything about what you’re learning.&lt;/strong&gt; You’re almost always wrong. Slow down so you have the time and space to learn. Always verify as you learn, so you remember and you rewire your brain.&lt;/p&gt;
&lt;p&gt;(I hope I remember this when I learn something new next time).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to add Flexbox fallback to CSS Grid</title>
    <link href="https://zellwk.com/blog/calendar-flexbox-fallback/"/>
    <updated>2019-07-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/calendar-flexbox-fallback/</id>
    <content type="html">&lt;p&gt;I shared how to build a calendar with CSS Grid in the &lt;a href=&quot;https://zellwk.com/blog/calendar-with-css-grid&quot;&gt;previous article&lt;/a&gt;. Today, I want to share how to build a Flexbox fallback for the same calendar.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;how-to-provide-support&quot;&gt;How to provide support&lt;/h2&gt;
&lt;p&gt;Generally, there are three ways to provide support when it comes to CSS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First method:&lt;/strong&gt; Write fallback code. Overwrite fallback code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  property: fallback-value;
  property: actual-value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Second method:&lt;/strong&gt; Write fallback code. Overwrite fallback code in CSS Feature Queries (&lt;code&gt;@supports&lt;/code&gt;). Reset properties inside &lt;code&gt;@supports&lt;/code&gt; if you need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  property: fallback-value;
}

@supports (display: grid) {
  property: actual-value;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Third method:&lt;/strong&gt; Write everything in &lt;code&gt;@supports&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports not (display: grid) {
  .selector {
    property: fallback-value;
  }
}

@supports (display: grid) {
  .selector {
    property: actual-value;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These three methods are listed in order of decreasing-complexity. (If you need to overwrite code, it’s more complicated). This means writing everything in &lt;code&gt;@supports&lt;/code&gt; is the simplest of the three.&lt;/p&gt;
&lt;p&gt;How you choose to support your project depends on browser support for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The feature&lt;/li&gt;
&lt;li&gt;The fallback feature&lt;/li&gt;
&lt;li&gt;Support for Feature Queries&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;checking-for-support&quot;&gt;Checking for support&lt;/h2&gt;
&lt;p&gt;The best place to check for support is &lt;a href=&quot;https://caniuse.com/&quot; title=&quot;Can I use&quot;&gt;caniuse&lt;/a&gt;. Here, I see that support for CSS Grid is decent. Browsers I have to worry about are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opera Mini: 1.42% global usage&lt;/li&gt;
&lt;li&gt;Android Browsers 2.1 to 4.4.4: 0.67% global usage&lt;/li&gt;
&lt;li&gt;Blackberry browser: 0.02% global usage (Not gonna worry about this one).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/css-grid-support.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Support for the fallback (Flexbox) is also good.&lt;/p&gt;
&lt;p&gt;But we have a problem: Flexbox fallback wouldn’t work for Android 2.1 to 4.3 (it doesn’t support wrapping). Global usage for Android 2.1 to 4.3 is 0.37%.&lt;/p&gt;
&lt;p&gt;Here, I have to decide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is providing Flexbox fallback for Opera Mini (1.42%), Android 4.4.4 (0.3%), and Blackberry (0.02%) worth the effort?&lt;/li&gt;
&lt;li&gt;Should I change fallback from Flexbox to an older feature to support Android 2.1 to 4.3 (another 0.37%)?&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-support.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Let’s assume, for this project, I decide that Flexbox fallback is sufficient. I’m not going to worry about Android 2.1 to 4.3.&lt;/p&gt;
&lt;p&gt;Next, I want to check whether browsers support CSS Feature Queries.&lt;/p&gt;
&lt;p&gt;Here, I see:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opera Mini supports Feature Queries&lt;/li&gt;
&lt;li&gt;Android 4.4.4 supports Feature Queries&lt;/li&gt;
&lt;li&gt;Blackberry browser doesn’t support Feature Queries&lt;/li&gt;
&lt;li&gt;IE 11 does’t support Feature Queries&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/feature-queries-support&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;deciding-how-to-write-fallback-code&quot;&gt;Deciding how to write fallback code&lt;/h2&gt;
&lt;p&gt;Earlier, I mentioned there are three ways to write fallback code for CSS:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write fallback code. Overwrite fallback code.&lt;/li&gt;
&lt;li&gt;Write fallback code. Overwrite fallback code in &lt;code&gt;@supports&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Write everything in &lt;code&gt;@supports&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If I write everything inside &lt;code&gt;@supports&lt;/code&gt;, I can provide support for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opera Mini (1.43%)&lt;/li&gt;
&lt;li&gt;Android 4.4.4 (0.3%)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But I lose support for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IE 11 (2.3%)&lt;/li&gt;
&lt;li&gt;Blackberry (0.02%)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I do not want to forsake the 2.3% of IE users, which means Method 3 (write everything in &lt;code&gt;@supports&lt;/code&gt;) is out.&lt;/p&gt;
&lt;p&gt;If I use Method 2 (Write fallback code. Overwrite fallback code in &lt;code&gt;@supports&lt;/code&gt;), I can provide support for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IE 11 (2.3%)&lt;/li&gt;
&lt;li&gt;Opera Mini (1.43%)&lt;/li&gt;
&lt;li&gt;Android 4.4.4 (0.3%)&lt;/li&gt;
&lt;li&gt;Blackberry browser (0.02%)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s everything I need. That’s why I’m gonna go with Method 2.&lt;/p&gt;
&lt;p&gt;Note: If you want to code along, you can use &lt;a href=&quot;https://codepen.io/zellwk/pen/xNpKwp&quot; title=&quot;Codepen: Building a Calendar with CSS Grid&quot;&gt;demo&lt;/a&gt; from &lt;a href=&quot;https://zellwk.com/blog/calendar-with-css-grid&quot;&gt;my previous article&lt;/a&gt; as the starting point.&lt;/p&gt;
&lt;h2 id=&quot;disabling-grid-code&quot;&gt;Disabling Grid code&lt;/h2&gt;
&lt;p&gt;First, we park the CSS Grid code under &lt;code&gt;@supports&lt;/code&gt; (like we discussed above).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (display: grid) {
  .day-of-week,
  .date-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
  }

  .date-grid button:first-child {
    grid-column: 6;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can disable the CSS Grid code by setting &lt;code&gt;display&lt;/code&gt; to an invalid value (not &lt;code&gt;grid&lt;/code&gt;). This disables the entire block of code.&lt;/p&gt;
&lt;p&gt;(Thank Rachel Andrew for this neat trick. I believe I learned it from her 😄).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (display: gridx) {
  /*...*/
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/inital-layout.png&quot; alt=&quot;Initial layout.&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;writing-flexbox-code&quot;&gt;Writing Flexbox code&lt;/h2&gt;
&lt;p&gt;We need to build the same seven-column grid with Flexbox. The first thing we need to do is acknowledge that Flexbox and Grid work differently. We won’t be able to get a perfect replica, but we can get close.&lt;/p&gt;
&lt;p&gt;The first thing is set &lt;code&gt;display&lt;/code&gt; to &lt;code&gt;flex&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.day-of-week,
.date-grid {
  display: flex;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-1.png&quot; alt=&quot;Results after setting display to flex.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We need the buttons in &lt;code&gt;.date-grid&lt;/code&gt; to wrap, so we set &lt;code&gt;flex-wrap&lt;/code&gt; to &lt;code&gt;wrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.date-grid {
  flex-wrap: wrap;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-2.png&quot; alt=&quot;Buttons in date grid wrapped at the edges.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We need to replicate the seven-column grid. An easy way to do this is calculate the width of the grid according to the width of each button. Here, I have already set each button to 4.5ch. This means the width of the grid should be &lt;code&gt;7 x 4.5ch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(We can use CSS Calc to do the math for us).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.day-of-week,
.date-grid {
  max-width: calc(4.5ch * 7);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-3.png&quot; alt=&quot;Wrapping at 7 columns&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We need the elements in &lt;code&gt;.day-of-week&lt;/code&gt; to spread out across the available width. One simple way is to set &lt;code&gt;justify-content&lt;/code&gt; to &lt;code&gt;space-between&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.day-of-week {
  justify-content: space-between;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-4.png&quot; alt=&quot;After setting space-between.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here, we can see that elements in &lt;code&gt;.day-of-week&lt;/code&gt; extend past the grid. This extension happens because we let Flexbox calculate &lt;code&gt;flex-basis&lt;/code&gt; for us. If we want every element in &lt;code&gt;.day-of-week&lt;/code&gt; to be have the same width, we need to set &lt;code&gt;flex-basis&lt;/code&gt; ourselves.&lt;/p&gt;
&lt;p&gt;In this case, the easiest way is to set &lt;code&gt;flex-basis&lt;/code&gt; to the width of one grid item (or &lt;code&gt;4.5ch&lt;/code&gt;). Note: I adjusted &lt;code&gt;font-size&lt;/code&gt; of each item in &lt;code&gt;.day-of-week&lt;/code&gt; to &lt;code&gt;0.7em&lt;/code&gt; (for visual aesthetics). We have to account for this change.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.day-of-week &amp;gt; * {
  flex-basis: calc(4.5ch / 0.7);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-5.png&quot; alt=&quot;Adjusted .day-of-week for size.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Finally, we need to push the 1 February to Friday. (Five columns). Since column is &lt;code&gt;4.5ch&lt;/code&gt;, we simply push it by &lt;code&gt;4.5ch x 5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Again, we can use CSS Calc to help us with this).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.date-grid button:first-child {
  margin-left: calc(4.5ch * 5)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/flexbox-6.png&quot; alt=&quot;Pushed 1 Febuary to Friday&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;fixing-the-css-grid-version&quot;&gt;Fixing the CSS Grid version&lt;/h2&gt;
&lt;p&gt;We can reactivate the CSS Grid code and make any necessary changes now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports(display: grid) {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/grid-fix-1.png&quot; alt=&quot;Activating CSS Grid code&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here, we see some values fly far out to the right. This happens because we added &lt;code&gt;margin-left&lt;/code&gt; to the first grid item. We need to reset the added margin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports(display: grid) {
  /* ... */
  .date-grid button:first-child {
    grid-column: 6;
    margin-left: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/grid-fix-2.png&quot; alt=&quot;Removed margin-left.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Another thing: We can remove &lt;code&gt;max-width&lt;/code&gt; because we don’t need it in the CSS Code. (Even though this doesn’t affect the CSS Code, we still want to remove it. Always better to have less properties).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports(display: grid) {
  .day-of-week,
  .date-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    max-width: initial;
  }

  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the visual difference between the Flexbox and CSS Grid versions. Not too bad!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/difference.gif&quot; alt=&quot;Visual difference between the Flexbox and CSS Grid code&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;one-fun-thing&quot;&gt;One fun thing&lt;/h2&gt;
&lt;p&gt;CSS Grid is cool because it follows writing direction. We can easily change the flow from left-to-right to right-to-left.&lt;/p&gt;
&lt;p&gt;Note: I don’t know if calendars are read from right to left in rtl languages. I just thought it’ll fun to mention this 😜).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/rtl.gif&quot; alt=&quot;Switching between ltr and rtl.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Our code for CSS Grid supports this behaviour naturally. If you want to support the same behaviour with Flexbox, you need to use &lt;a href=&quot;https://css-tricks.com/css-logical-properties/&quot; title=&quot;CSS Logical Properties&quot;&gt;CSS Logical Properties&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-flexbox/css-logical-properties-support.png&quot; alt=&quot;Support for CSS Logical Properties.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Since support for CSS Logical Properties is not-so-great, we need to provide fallback for it. (Best way is to through Method 1: Write fallback; overwrite fallback).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.date-grid button:first-child {
  margin-left: calc(4.5ch * 5);
  margin-inline-start: calc(4.5ch * 5);
}


@supports(display: grid) {
  /* ... */
 .date-grid button:first-child {
    grid-column: 6;
    margin-left: 0;
    margin-inline-start: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! Here’s a Codepen for the final code:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;581&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;ZNrezV&quot; style=&quot;height: 581px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Building a Calendar with CSS Grid (and fallback with Flexbox)&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/ZNrezV/&quot;&gt;
  Building a Calendar with CSS Grid (and fallback with Flexbox)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>How to build a calendar with CSS Grid</title>
    <link href="https://zellwk.com/blog/calendar-with-css-grid/"/>
    <updated>2019-07-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/calendar-with-css-grid/</id>
    <content type="html">&lt;p&gt;Building a calendar with CSS Grid is actually quite easy. I want to show you how to do it.&lt;/p&gt;
&lt;p&gt;Here’s what you’ll create by the end of this article:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/calendar-fixed.png&quot; alt=&quot;A calendar built with CSS Grid&quot;&gt;&lt;/figure&gt;
&lt;!-- more --&gt;
&lt;h1 id=&quot;creating-the-html&quot;&gt;Creating the HTML&lt;/h1&gt;
&lt;p&gt;You can tell from the image that the calendar contains three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The month indicator&lt;/li&gt;
&lt;li&gt;The weekday/weekend indicator&lt;/li&gt;
&lt;li&gt;The dates themselves&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/structure.png&quot; alt=&quot;Structure of the calendar&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The best way to structure the HTML is to go with what feels right. We’ll create the HTML according to these three sections:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;calendar&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;month-indicator&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;day-of-week&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;date-grid&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should also be able to see we need seven columns for the grid.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/seven-columns.png&quot; alt=&quot;Seven columns required for the grid&quot;&gt;&lt;/figure&gt;
&lt;p&gt;We’ll focus the conversation on &lt;code&gt;.day-of-week&lt;/code&gt; and &lt;code&gt;.date-grid&lt;/code&gt; since we’re only talking about grid.&lt;/p&gt;
&lt;h2 id=&quot;structuring-the-grid&quot;&gt;Structuring the grid&lt;/h2&gt;
&lt;p&gt;There are two ways to create the CSS Grid.&lt;/p&gt;
&lt;p&gt;The first way is to merge elements within &lt;code&gt;.day-of-week&lt;/code&gt; and &lt;code&gt;.date-grid&lt;/code&gt; into one selector. If we do this, we can set the selector in &lt;code&gt;display: grid&lt;/code&gt;. Here’s what the HTML would have looked like if we did this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
  &amp;lt;!-- Day of week --&amp;gt;
  &amp;lt;div&amp;gt;Su&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Mo&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Tu&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;We&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Th&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Fr&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Sa&amp;lt;/div&amp;gt;

  &amp;lt;!-- Dates --&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-01&amp;quot;&amp;gt;1&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-02&amp;quot;&amp;gt;2&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-03&amp;quot;&amp;gt;3&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;!-- ... --&amp;gt; 
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-28&amp;quot;&amp;gt;28&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I discourage this method because the HTML loses its structural meaning. I prefer keeping &lt;code&gt;.day-of-week&lt;/code&gt; and &lt;code&gt;.date-grid&lt;/code&gt; as separate elements if possible. This makes it easy for me to read/understand the code I’ve written.&lt;/p&gt;
&lt;p&gt;Here’s the HTML structure i chose to go with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;day-of-week&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;Su&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Mo&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Tu&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;We&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Th&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Fr&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Sa&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;date-grid&amp;quot;&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-01&amp;quot;&amp;gt;1&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-02&amp;quot;&amp;gt;2&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-03&amp;quot;&amp;gt;3&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
  &amp;lt;!-- ... --&amp;gt; 
  &amp;lt;button&amp;gt;&amp;lt;time datetime=&amp;quot;2019-02-28&amp;quot;&amp;gt;28&amp;lt;/time&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The best way to create a CSS Grid with the structure I proposed is to use subgrid. Unfortunately, most browsers don’t support subgrid yet. In the meantime, the best way is to create two separate grids—one for &lt;code&gt;.day-of-week&lt;/code&gt; and one for &lt;code&gt;.date-grid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;.day-of-week&lt;/code&gt; and &lt;code&gt;.date-grid&lt;/code&gt; can use the same seven-column grid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* The grid */
.day-of-week,
.date-grid {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/calendar-grid.png&quot; alt=&quot;1 Feb 2019 begins on a Friday&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;pushing-the-dates&quot;&gt;Pushing the dates&lt;/h2&gt;
&lt;p&gt;February 2019 begins on a Friday. If we want the calendar to be correct, we need to make sure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 Feb 2019 falls on Friday&lt;/li&gt;
&lt;li&gt;2 Feb 2019 falls on Saturday&lt;/li&gt;
&lt;li&gt;3 Feb 2019 falls on Sunday&lt;/li&gt;
&lt;li&gt;And so on…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With CSS Grid, this part is easy.&lt;/p&gt;
&lt;p&gt;CSS Grid has placement algorithm that kinda follows the following rules (if you didn’t set &lt;code&gt;grid-auto-flow&lt;/code&gt; to &lt;code&gt;dense&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Place items that have explicit &lt;code&gt;grid-column&lt;/code&gt; or &lt;code&gt;grid-row&lt;/code&gt; first&lt;/li&gt;
&lt;li&gt;Fill in the rest according to the last-placed item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What this means is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the first item falls on column 6&lt;/li&gt;
&lt;li&gt;The second item will be placed in column 7.&lt;/li&gt;
&lt;li&gt;The third item will be placed on the next row, in column 1 (because there are only seven columns).&lt;/li&gt;
&lt;li&gt;The fourth item will be placed in column 2,&lt;/li&gt;
&lt;li&gt;And so on…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, if we position 1 February on the sixth column (friday), the rest of the dates will be placed correctly.&lt;/p&gt;
&lt;p&gt;Simple as that!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt; /* Positioning the first day on a Friday */
.date-grid button:first-child {
  grid-column: 6;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/calendar-fixed.png&quot; alt=&quot;1 Feb 2019 begins on a Friday&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s a codepen for you to play with:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;581&quot; data-theme-id=&quot;7929&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;xNpKwp&quot; style=&quot;height: 581px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Building a Calendar with CSS Grid&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/xNpKwp/&quot;&gt;
  Building a Calendar with CSS Grid&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;want-to-learn-more%3F&quot;&gt;Want to learn more?&lt;/h2&gt;
&lt;p&gt;This article contains one fraction of a component (a datepicker) from Learn JavaScript. There’s so much more I want to show you. (But they’re mostly JavaScript related topics).&lt;/p&gt;
&lt;p&gt;For example, in Learn JavaScript, I show you how to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build a calendar for any month (and any year)&lt;/li&gt;
&lt;li&gt;Add a previous/next button to switch between months&lt;/li&gt;
&lt;li&gt;Click on each date to display a date&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/calendar-css-grid/datepicker.gif&quot; alt=&quot;Example of the datepicker in action&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you want to learn to build this datepicker, I highly recommend joining &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript&quot;&gt;Learn JavaScript&lt;/a&gt; when enrolment opens in July 2019. I’m excited to share it with you!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Stages of learning</title>
    <link href="https://zellwk.com/blog/stages-of-learning/"/>
    <updated>2019-06-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/stages-of-learning/</id>
    <content type="html">&lt;p&gt;Over time, I realized there are five stages of learning.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Awareness&lt;/li&gt;
&lt;li&gt;Panic&lt;/li&gt;
&lt;li&gt;Avoidance&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;awareness&quot;&gt;Awareness&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;“Oh! This is possible?!”&lt;/li&gt;
&lt;li&gt;“Ah, so that’s how you solve this”.&lt;/li&gt;
&lt;li&gt;“This is good. I need to learn this”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the awareness stage, you learn about a problem. And you realize you need to find a solution.&lt;/p&gt;
&lt;h2 id=&quot;panic&quot;&gt;Panic&lt;/h2&gt;
&lt;p&gt;Panic might come to some people. This depends on how much pressure you put on yourself. If you pressure yourself hard, you’ll get into panic mode.&lt;/p&gt;
&lt;p&gt;If you set a deadline for learning, you’re giving yourself pressure. Most people don’t realize this. They set an ambitious deadline for themselves and they fail hard.&lt;/p&gt;
&lt;p&gt;If you set a deadline to learn something, that deadline you set is probably ambitious. It’s ambitious because learning usually takes more time and effort than you account for.&lt;/p&gt;
&lt;p&gt;If you put too much pressure on yourself, you may get overwhelmed. You may look for shortcuts instead of actually learning what you’re supposed to learn.&lt;/p&gt;
&lt;h2 id=&quot;avoidance&quot;&gt;Avoidance&lt;/h2&gt;
&lt;p&gt;When panic/overwhelm sets in, we tend to avoid what we’re doing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“I can’t do this right now”&lt;/li&gt;
&lt;li&gt;“I’m not smart enough”&lt;/li&gt;
&lt;li&gt;“I need a break”&lt;/li&gt;
&lt;li&gt;“Life happens”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We give ourselves &lt;span class=&quot;strikeout&quot;&gt; excuses &lt;/span&gt; permission to drop the thing we’re learning.&lt;/p&gt;
&lt;p&gt;It’s okay to pause for a breather if you can’t catch your breath. We all need a breather sometimes. But it’s not okay to give up. (Unless you decide it’s something you never wanted to do for the rest of your life. In which case, giving up is a good choice).&lt;/p&gt;
&lt;p&gt;The unfortunate thing is: Some people never realize they’re avoiding. They search the internet, hoping to find “good tutorials” that’ll teach them everything they need to know. And they use “I can’t find any good tutorials” as an excuse not to learn.&lt;/p&gt;
&lt;h2 id=&quot;acceptance&quot;&gt;Acceptance&lt;/h2&gt;
&lt;p&gt;This is where you accept you bit off more than you can chew, and decide to chew it anyway. You accept the tough challenge ahead. And you prepare to face it head-on.&lt;/p&gt;
&lt;p&gt;For most people, it’s when they say “I’m going to fucking learn this no matter what”.&lt;/p&gt;
&lt;p&gt;This is when we dedicate the necessary resources, time, and energy to learn the thing we need to learn.&lt;/p&gt;
&lt;p&gt;If you get into this mode, anything you learn stays with you for a long time. Before this stage, you don’t actually learn. You may remember something for a short while, but you’ll forget about it quickly.&lt;/p&gt;
&lt;h2 id=&quot;learning&quot;&gt;Learning&lt;/h2&gt;
&lt;p&gt;And so learning begins.&lt;/p&gt;
&lt;p&gt;We read everything we need to read.&lt;/p&gt;
&lt;p&gt;We do everything we need to do.&lt;/p&gt;
&lt;p&gt;We code if we have to.&lt;/p&gt;
&lt;p&gt;We think if we have to.&lt;/p&gt;
&lt;p&gt;We get our hands dirty if we have to.&lt;/p&gt;
&lt;p&gt;Learning is like a marathon. There’s no best pace. All we have is the pace we’re comfortable with. And the pace changes according to our states.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If we go too slow, we get bored.&lt;/li&gt;
&lt;li&gt;If we go too fast, we get into an overwhelmed or panic state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So what’s important is to pace yourself. Take it step by step. Go slow if you’re running out of breath, and run faster if you’re getting bored.&lt;/p&gt;
&lt;p&gt;At a certain point, we may decide we learned enough.&lt;/p&gt;
&lt;p&gt;And learning stops.&lt;/p&gt;
&lt;h2 id=&quot;mastery&quot;&gt;Mastery&lt;/h2&gt;
&lt;p&gt;Mastery is a continuous process where you learn more and more things about the same subject. You get deeper into the subject and you’re able to sieve out the nuances.&lt;/p&gt;
&lt;p&gt;Mastery comes with repeated learning. It comes with going through the five stages over and over again.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Awareness&lt;/li&gt;
&lt;li&gt;Panic&lt;/li&gt;
&lt;li&gt;Avoidance&lt;/li&gt;
&lt;li&gt;Acceptance&lt;/li&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With enough time, you’ll become a master one thing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Shutting down Fridays with Zell</title>
    <link href="https://zellwk.com/blog/shutting-down-fridays-with-zell/"/>
    <updated>2019-06-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/shutting-down-fridays-with-zell/</id>
    <content type="html">&lt;p&gt;If you stuck around for a while, you might have noticed I used to post a video (and an audio) every Friday for most of 2018. I call them “Fridays with Zell”.&lt;/p&gt;
&lt;p&gt;In 2019, I decided to stop making videos. I want to share why I decided to stop making videos.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;why-i-started-making-videos&quot;&gt;Why I started making videos&lt;/h2&gt;
&lt;p&gt;I started making videos because of three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I thought it would be fun.&lt;/li&gt;
&lt;li&gt;It would be good practice if I want to release video-based courses in the future.&lt;/li&gt;
&lt;li&gt;I heard good things about video helping to bring more subscribers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I finally got a chance to try making videos at the start of 2018. I committed for one year (and made 44 videos in total). That’s approximately 1 video per week.&lt;/p&gt;
&lt;h2 id=&quot;why-i%E2%80%99m-shutting-down-fridays-with-zell.&quot;&gt;Why I’m shutting down Fridays with Zell.&lt;/h2&gt;
&lt;p&gt;Two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Videos don’t bring me additional subscribers&lt;/li&gt;
&lt;li&gt;Video-making is not fun for me&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I should probably say more about each statement, so here we go.&lt;/p&gt;
&lt;h3 id=&quot;videos-don%E2%80%99t-bring-me-additional-subscribers&quot;&gt;Videos don’t bring me additional subscribers&lt;/h3&gt;
&lt;p&gt;Here’s a chart of subscribers in 2018 and in 2019.
Green bars indicate the number of new subscribers.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/shutting-fridays-with-zell/subs.png&quot; alt=&quot;Subscriber count hovered around 250 a week with or without videos&quot;&gt;&lt;/figure&gt;
&lt;p&gt;The number of new subscribers hovered around 250 per week from 1st January 2018 to 22 May 2019. I stopped posting videos in January 2019, but the number of subscribers remained at 250 per week.&lt;/p&gt;
&lt;p&gt;This tells me the videos didn’t bring in new subscribers. My videos were mostly watched by people who are already following me.&lt;/p&gt;
&lt;h3 id=&quot;video-making-is-not-fun&quot;&gt;Video-making is not fun&lt;/h3&gt;
&lt;p&gt;A lot of work goes into creating videos.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I had to put myself in front of the camera&lt;/li&gt;
&lt;li&gt;Speak in a manner that doesn’t feel too fake&lt;/li&gt;
&lt;li&gt;Edit the hell out of what I spoke (the hard part)&lt;/li&gt;
&lt;li&gt;Write an article that goes along with the video&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Points 3 and 4 are killers.&lt;/p&gt;
&lt;p&gt;I loathe the editing process. I hate scrubbing and trimming the audio. This process is not fun at all. I would rather do ANYTHING else than edit a video.&lt;/p&gt;
&lt;p&gt;Plus, converting a video into an article takes a hell lot of work too. I have to write a transcript of what transpired in the video, create images, and write an article that flows.&lt;/p&gt;
&lt;p&gt;It’s not fun.&lt;/p&gt;
&lt;p&gt;It’s too much work.&lt;/p&gt;
&lt;p&gt;I got burned out.&lt;/p&gt;
&lt;p&gt;So I decided to stop.&lt;/p&gt;
&lt;h2 id=&quot;will-i-ever-make-videos-again%3F&quot;&gt;Will I ever make videos again?&lt;/h2&gt;
&lt;p&gt;I can’t say for sure. Maybe I will make videos again when the dread fades away. But if I ever start making videos again, I’ll do it in a different way.&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;You won’t know whether you should (or shouldn’t) do something until you’ve done it.&lt;/p&gt;
&lt;p&gt;Give it a try.&lt;/p&gt;
&lt;p&gt;You can always walk away if it’s not for you.&lt;/p&gt;
&lt;p&gt;If you walk away, you’ll know why it’s not for you. You’ll have a better idea about what you want/don’t want to do. And you can focus better on the next thing.&lt;/p&gt;
&lt;p&gt;Sometimes, what’s right for you now doesn’t mean it’s always going to be right for you.&lt;/p&gt;
&lt;p&gt;Keep experimenting, and continue to challenge your assumptions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Everything You Need to Know About Date in JavaScript</title>
    <link href="https://zellwk.com/blog/https:/css-tricks.com/everything-you-need-to-know-about-date-in-javascript/"/>
    <updated>2019-06-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/css-tricks.com/everything-you-need-to-know-about-date-in-javascript/</id>
    <content type="html">&lt;p&gt;Date is weird in JavaScript. It gets on our nerves so much that we reach for libraries (like Date-fns and Moment) the moment (ha!) we need to work with date and time.&lt;/p&gt;
&lt;p&gt;But we don’t always need to use libraries. Date can actually be quite simple if you know what to watch out for. In this article, I’ll walk you through everything you need to know about the Date object.&lt;/p&gt;
&lt;!-- more --&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Standard with VSCode</title>
    <link href="https://zellwk.com/blog/standard-with-vscode/"/>
    <updated>2019-06-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/standard-with-vscode/</id>
    <content type="html">&lt;p&gt;I use &lt;a href=&quot;https://code.visualstudio.com/&quot; title=&quot;Visual Studio Code&quot;&gt;Visual Studio Code&lt;/a&gt; as my text editor. When I write JavaScript, I follow &lt;a href=&quot;https://standardjs.com/&quot;&gt;JavaScript Standard Style&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There’s an easy way to integrate Standard in VS Code—with the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs&quot; title=&quot;vscode-standardjs plugin&quot;&gt;vscode-standardjs&lt;/a&gt; plugin. I made a &lt;a href=&quot;https://youtu.be/Hv8FgxJyI9Y&quot;&gt;video&lt;/a&gt; for this some time ago if you’re interested in setting it up.&lt;/p&gt;
&lt;p&gt;But, if you follow the instructions in the video (or on vscode-standardjs’s readme file), you’ll come to notice there’s one small detail that needs to be ironed out.&lt;/p&gt;
&lt;p&gt;Try writing a &lt;code&gt;function&lt;/code&gt; the old way, and save it repeatedly. VS code will toggle between having and not having a space before the left-parenthesis of the function.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/vscode-standard/functions.gif&quot; alt=&quot;VS code toggles between having and not having a space before &#39;(&#39;.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You get the same problem when you write methods with the ES6 method shorthands:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/vscode-standard/methods.gif&quot; alt=&quot;Same problem happens when you create methods with ES6 method shorthands.&quot;&gt;&lt;/figure&gt;
&lt;!-- more --&gt;
&lt;p&gt;There’s a quick way to fix this issue.&lt;/p&gt;
&lt;p&gt;What you need to do is set &lt;code&gt;javascript.format.enable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. This disables VS Code’s default Javascript formatter (and lets vscode-standandjs does the formatting work).&lt;/p&gt;
&lt;p&gt;So the minimum configuration you need to get Standard and VS Code to work together is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // Prevents VS Code from formatting JavaScript with the default linter
  &amp;quot;javascript.format.enable&amp;quot;: false,

  // Prevents VS Code linting JavaScript with the default linter
  &amp;quot;javascript.validate.enable&amp;quot;: false,

  // Lints with Standard JS
  &amp;quot;standard.enable&amp;quot;: true,

  // Format files with Standard whenever you save the file
  &amp;quot;standard.autoFixOnSave&amp;quot;: true,

  // Files to validate with Standard JS
  &amp;quot;standard.validate&amp;quot;: [
    &amp;quot;javascript&amp;quot;,
    &amp;quot;javascriptreact&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>How to go through the job application process—an interview with Chris Lienert</title>
    <link href="https://zellwk.com/blog/job-application-process/"/>
    <updated>2019-05-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/job-application-process/</id>
    <content type="html">&lt;p&gt;“Do you have any advice on finding a job as a developer?”&lt;/p&gt;
&lt;p&gt;Many people have asked me that question, but I can’t give a proper answer because I have never been hired as a developer before. What I did was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wriggled my way into a Wordpress dev role in an admin-based internship&lt;/li&gt;
&lt;li&gt;Freelanced&lt;/li&gt;
&lt;li&gt;Run my own company&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So I’m horribly inadequate at answering a question about finding a job.&lt;/p&gt;
&lt;p&gt;But Chris Lienert is an expert at it. Chris has experience hiring and building teams of excellent developers. (A fun aside: He used to co-run CSS Singapore, which is a monthly CSS Meetup in Singapore).&lt;/p&gt;
&lt;p&gt;I managed to grab Chris (before he left Singapore for good) and asked him to talk about the job application process. You’ll hear golden advice in this interview from Chris, like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chris’ opinions about the hiring process.&lt;/li&gt;
&lt;li&gt;How to improve your chances of getting an interview&lt;/li&gt;
&lt;li&gt;What to do if you don’t get a job&lt;/li&gt;
&lt;li&gt;How you should write your CV&lt;/li&gt;
&lt;li&gt;What to do during the actual interview&lt;/li&gt;
&lt;li&gt;What questions to ask during the interview&lt;/li&gt;
&lt;li&gt;How to answer any tricky questions you get&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: We jumped around a lot in this 1.5 chat because Chris has so much to say about this topic. I highly recommend you listen to the audio version if you can.&lt;/p&gt;
&lt;p&gt;To make it easier for you to digest, I also summarized what we talked about into three stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Preparing your CV/Resume&lt;/li&gt;
&lt;li&gt;Before you apply for a job&lt;/li&gt;
&lt;li&gt;The interview process&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;your-cv-%2F-resume&quot;&gt;Your CV / Resume&lt;/h2&gt;
&lt;p&gt;It’s hard to write a CV. On one hand, you want to pad it with enough information to make you attractive. On the other hand, you want to keep it short enough for recruiters to not hate you.&lt;/p&gt;
&lt;p&gt;(Note: I use the word “recruiter” to describe anyone who participates in the hiring process).&lt;/p&gt;
&lt;p&gt;We’ll first talk about three keys to writing a CV before we talk about the structure of the CV. The three keys are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Crayon Test&lt;/li&gt;
&lt;li&gt;Keywords&lt;/li&gt;
&lt;li&gt;Differentiate yourself&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-crayon-test&quot;&gt;The Crayon Test&lt;/h3&gt;
&lt;p&gt;Recruiters are busy. They have to go through hundreds of applications for each job opening.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This means recruiters will scan through your CV&lt;/strong&gt; quickly. They’ll put away your CV immediately if there are any spelling errors. They will also put away your CV if you miss out any important information (like your email or phone number).&lt;/p&gt;
&lt;p&gt;Chris calls this The Crayon Test. (Because it tests whether the candidate is able to fulfil  basic requirements like spelling their name correctly).&lt;/p&gt;
&lt;p&gt;What you should do is &lt;strong&gt;make sure your CV is clear and understandable&lt;/strong&gt;. It should not have any spelling mistakes. It should contain the necessary information a recruiter needs to contact you.&lt;/p&gt;
&lt;h3 id=&quot;keywords&quot;&gt;Keywords&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Make sure you have the right keywords&lt;/strong&gt; for the position you want to apply for. For example, if the job ad is for a “React Developer”, make sure you have “React” somewhere on your Resume.&lt;/p&gt;
&lt;p&gt;You need to do this because people (and machines) scan your CVs for keywords. If you don’t have the necessary keyword(s) in your CV, you’ll get passed over for someone else EVEN before you get an interview.&lt;/p&gt;
&lt;p&gt;Back to the “React Developer” example. If you don’t have enough confidence in React, you still need to find a way to put React in your CV. Good ways to include keywords (if you don’t have the skill) is to put them under Job Experience or Community. More on this in the CV structure below.&lt;/p&gt;
&lt;h3 id=&quot;differentiate-yourself&quot;&gt;Differentiate yourself&lt;/h3&gt;
&lt;p&gt;What makes you different from thousands of other applicants out there?&lt;/p&gt;
&lt;p&gt;If you’re a fresh graduate, the answer is nothing.&lt;/p&gt;
&lt;p&gt;You need to make it SOMETHING.&lt;/p&gt;
&lt;p&gt;There are a variety of ways to talk about your passion and experience in this industry (even if you haven’t got a job yet). Some ways include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Notable Codepen projects&lt;/li&gt;
&lt;li&gt;Your projects on Github&lt;/li&gt;
&lt;li&gt;Things you built before (on your own, not by following tutorials!).&lt;/li&gt;
&lt;li&gt;Articles you’ve written&lt;/li&gt;
&lt;li&gt;Contributing to open source&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of these can go into the “Community” section of your CV. More on this later.&lt;/p&gt;
&lt;h3 id=&quot;length-of-your-cv&quot;&gt;Length of your CV&lt;/h3&gt;
&lt;p&gt;Your CV should be short. Keep it to 1-2 pages if you’re starting out.&lt;/p&gt;
&lt;p&gt;As you gain more experience and want to switch to more senior roles, your CV can go beyond 2 pages. (Chris’ CV is four pages longs. It needs to be that long to show he has the qualifications for a job at his level).&lt;/p&gt;
&lt;h3 id=&quot;the-structure-of-your-cv&quot;&gt;The structure of your CV&lt;/h3&gt;
&lt;p&gt;The structure we’re proposing here is drawn from Chris’ experience. You may find conflicting information elsewhere on the internet. Take what you need.&lt;/p&gt;
&lt;p&gt;Your CV should contain the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Contact Details&lt;/li&gt;
&lt;li&gt;Summary&lt;/li&gt;
&lt;li&gt;Skills&lt;/li&gt;
&lt;li&gt;Experience&lt;/li&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Contact Details&lt;/strong&gt;: This section should contain information about yourself. You need to have these three items to pass the Crayon Test:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your name&lt;/li&gt;
&lt;li&gt;Your email address&lt;/li&gt;
&lt;li&gt;Your phone number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: Summary is a one-liner of what you’re looking for. You want to be clear here. For example, “I’m looking to be a frontend developer in a great team” is a good one-liner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skills&lt;/strong&gt;: This is where you showcase 5-10 skills you’re good at. No need to put version numbers because they’re irrelevant. Example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Making simple web animations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s no need to list your years of experience on a skill. It doesn’t matter. If you work hard, you can become great in 12 months.&lt;/p&gt;
&lt;p&gt;Don’t lie about your skills. Only put the ones you’re confident in because you may get questions on each of them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Experience&lt;/strong&gt;: This is where you write about your job experience. For each job experience, you should have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The company name&lt;/li&gt;
&lt;li&gt;A one-liner explaining what they do&lt;/li&gt;
&lt;li&gt;When and the duration you worked on this job&lt;/li&gt;
&lt;li&gt;3 bullet points of what you learned from this job that’s relevant for the position you’re applying for.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s a good pattern to have at least 18 months to 2 years per job experience.&lt;/p&gt;
&lt;p&gt;If you have a time-gap between jobs, you want to state what you did during the gap. Freelancing, backpacking, etc. Stating this gives insight into how you developed yourself since school.&lt;/p&gt;
&lt;p&gt;If your experience is not relevant to the job (like if you’re a waiter/waitress), then simply say that and move on.&lt;/p&gt;
&lt;p&gt;Please DO NOT LIST the things you DON’T want to do. It might get you the job, but you’ll be miserable in it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Education&lt;/strong&gt;: This is where you list your education experience.  Create some bullet points if you have experience that’s relevant to the position you apply for. Otherwise, just list your certification and move on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;: This is where you can stand out if you don’t have prior job experience. Here, you want to talk about what you do for/in the web community. You can include things like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attending conferences&lt;/li&gt;
&lt;li&gt;Attending meetups&lt;/li&gt;
&lt;li&gt;Talks you gave&lt;/li&gt;
&lt;li&gt;Articles you wrote (that’s not on your own blog)&lt;/li&gt;
&lt;li&gt;Videos you made&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One way to game the keywords (if you need to) is to include the keyword in the title of your talk/article/video.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;: References are people who vouch for you. They can be hard to get in the early days of your career. Omit if you don’t have any.&lt;/p&gt;
&lt;h3 id=&quot;your-cover-letter&quot;&gt;Your cover letter&lt;/h3&gt;
&lt;p&gt;Some companies require a cover letter. Keep it short if you need to write one. You don’t need an essay for our industry.&lt;/p&gt;
&lt;p&gt;Your cover letter should contain these three paragraphs (in your own words):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Paragraph 1: “Hi, I’m X. I saw your job. It looks good and I want to apply”.&lt;/li&gt;
&lt;li&gt;Paragraph 2: Why you fit the role&lt;/li&gt;
&lt;li&gt;Paragraph 3: You can reach me at [this number ].&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;before-you-apply&quot;&gt;Before you apply&lt;/h2&gt;
&lt;p&gt;Most job requirements seem daunting. Everyone is looking for some JavaScript experience. Everyone want React Developers. Some even want Full Stack developers.&lt;/p&gt;
&lt;p&gt;What can you do?&lt;/p&gt;
&lt;p&gt;We’ll talk about four important things you need to understand. Some may create a paradigm shift for you. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why some job ads suck&lt;/li&gt;
&lt;li&gt;Imposter Syndrome and minorities&lt;/li&gt;
&lt;li&gt;The “Full Stack” developer&lt;/li&gt;
&lt;li&gt;Keep applying&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;why-some-job-ads-suck&quot;&gt;Why some job ads suck&lt;/h3&gt;
&lt;p&gt;The person who hires for the person and the person who crafts the job ad may be different people. This is especially true in large companies.&lt;/p&gt;
&lt;p&gt;If the person who crafts the job ad knows nothing about the industry, they may require “10 years of React experience” even though React has been out only for 6. This is why you see jokes about bad job requirements all over the place.&lt;/p&gt;
&lt;p&gt;To put your bias aside, people do try to improve their job ads. Chris, for example, does this.&lt;/p&gt;
&lt;p&gt;In the interview, Chris shared about an experience where he rewrote a job ad. And he gave the HR strict instructions to post the job as it is. But when Chris looked at the actual advertisement, he didn’t recognize the ad. It was butchered badly.&lt;/p&gt;
&lt;p&gt;The key takeaway here is: Don’t be too concerned about what’s written on the job ad. It might have been inflated with unreasonable demands.&lt;/p&gt;
&lt;h3 id=&quot;imposter-syndrome-and-minorities&quot;&gt;Imposter Syndrome and minorities&lt;/h3&gt;
&lt;p&gt;If you feel like a minority, you’ve labeled yourself as a minority. It doesn’t matter if you’re a white male, or a black woman, or an Asian, or anything else. Chris, for example, is a white male that feels like a minority because he doesn’t feel like he easily fits with anyone else.&lt;/p&gt;
&lt;p&gt;The thing about minorities is minorities have high rates of Imposter Syndrome.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They wonder if they’re qualified for the job.&lt;/li&gt;
&lt;li&gt;They wonder why people should pick them over so many qualified candidates out there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, most minorities only apply to when they feel they’re qualified for the job. This means apply to jobs if they can meet 80% of the job requirement. (On the other hand, majority candidates apply for a job if they meet 30% of the job requirements).&lt;/p&gt;
&lt;p&gt;This is insane.&lt;/p&gt;
&lt;p&gt;Minorities are usually better candidates because they have to fight through lots of barriers. They have better skills, better attitude, they work harder, and they know more about they’re doing.&lt;/p&gt;
&lt;p&gt;What this means is: If you’re a minority candidate, please apply to more jobs. Apply to jobs even if you don’t meet 80% (or 100%!) of the requirements.&lt;/p&gt;
&lt;p&gt;Don’t worry about meeting the requirements. Apply if you are confident you’ll be able to do the job (and you’re able to learn on the job).&lt;/p&gt;
&lt;p&gt;Job ads are often inflated. Remember that.&lt;/p&gt;
&lt;h3 id=&quot;the-full-stack-developer&quot;&gt;The Full-stack developer&lt;/h3&gt;
&lt;p&gt;Many jobs require a “Full Stack” developer experience. This puts pressure on developers to learn the “Full” stack (and it makes them feel inadequate in the process).&lt;/p&gt;
&lt;p&gt;But how full is a “Full Stack”? Do you need to know databases? Do you need to know how to write server code? Design? Draw? UX? There’s no concrete definition for a Full-stack developer.&lt;/p&gt;
&lt;p&gt;Most companies don’t actually want to look for a full-stack developer. They &lt;em&gt;think&lt;/em&gt; they want to look for a full-stack developer based on what they know.&lt;/p&gt;
&lt;p&gt;They’ll only interview you if your CV matches what they think is “Full Stack”. They might be wrong. And they might not even know what they need.&lt;/p&gt;
&lt;p&gt;What this means is: Don’t worry about getting a full-stack experience. Read the job description, apply, and ask questions during the interview (more on this later).&lt;/p&gt;
&lt;h3 id=&quot;keep-applying&quot;&gt;Keep applying&lt;/h3&gt;
&lt;p&gt;It can be dispiriting to apply for jobs. You’ll get rejected (many times without even knowing). It sucks.&lt;/p&gt;
&lt;p&gt;It doesn’t matter where you are in your career. If you’re looking for jobs, the same thing will happen. You’ll still get rejected.&lt;/p&gt;
&lt;p&gt;Chris is a top qualified candidate in what he does. He shared with me that during his recent job search process, he applied for 16 jobs, but only heard back from 3.&lt;/p&gt;
&lt;p&gt;Even Chris can’t get interviews at places. (I thought Chris wouldn’t have a problem with finding jobs). But this just shows how messy the hiring process can be.&lt;/p&gt;
&lt;p&gt;It’s hard to get over a rejection. You’re emotionally invested in the process, so it becomes especially hard.&lt;/p&gt;
&lt;p&gt;But you got to keep applying for jobs. You have to continue to review your CV and Cover letter.&lt;/p&gt;
&lt;p&gt;Don’t give up. You’ll get a job eventually if you keep it up.&lt;/p&gt;
&lt;h2 id=&quot;during-the-interview&quot;&gt;During the interview&lt;/h2&gt;
&lt;p&gt;Interviews are nerve-racking. We’ll talk about five things in this section:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Feeling nervous&lt;/li&gt;
&lt;li&gt;Whiteboard interviews&lt;/li&gt;
&lt;li&gt;Answering tricky questions&lt;/li&gt;
&lt;li&gt;Questions to ask&lt;/li&gt;
&lt;li&gt;Be honest&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;feeling-nervous&quot;&gt;Feeling nervous&lt;/h3&gt;
&lt;p&gt;You are going to be nervous. You’re going to be frightened out of your mind. It’s normal because you’re getting tested.&lt;/p&gt;
&lt;p&gt;You will stumble as you answer questions. You will get something wrong during the interview (only to remember the actual answer later on).&lt;/p&gt;
&lt;p&gt;It’s okay to be nervous and mess because everyone will be nervous and mess.&lt;/p&gt;
&lt;p&gt;Hopefully, this makes you feel better. The more relaxed you can be, the better. But don’t stress yourself to be relaxed.&lt;/p&gt;
&lt;h3 id=&quot;whiteboard-interviews&quot;&gt;Whiteboard interviews&lt;/h3&gt;
&lt;p&gt;Whiteboard interviews suck because people test you on the wrong things. You won’t be writing code on the whiteboard in your job, so it makes no sense to create a whiteboard interview.&lt;/p&gt;
&lt;p&gt;Chris argues that interviewers should mirror the person’s job as much as possible during the interview. If you’re hiring a developer, you’d want to put a laptop in front of them.&lt;/p&gt;
&lt;p&gt;If you want to observe what they do, you can mirror the laptop onto a screen so you can observe from afar. This way, the developer can focus on coding.&lt;/p&gt;
&lt;p&gt;We didn’t answer how to tackle a whiteboard interview during the chat, but you might want to take what Chris said in mind. Maybe you can request for the interviewer to put you in a comfortable space to perform? It’s not always possible, but it might make you stand out in the right way :).&lt;/p&gt;
&lt;h3 id=&quot;answering-tricky-questions&quot;&gt;Answering tricky questions&lt;/h3&gt;
&lt;p&gt;You will face at least three tricky questions during most interviews. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What’s your strengths and weaknesses?&lt;/li&gt;
&lt;li&gt;Where do you see yourself in 3-5 years?&lt;/li&gt;
&lt;li&gt;Why did you leave your previous job?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’d want to prepare answers for these questions (and any others you can find). Chris has some thoughts on how you should answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s your strengths and weaknesses?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are &lt;em&gt;no good answers&lt;/em&gt; for this question. What you want to do is avoid any bad answers that can skew what the interviewer thinks of you.&lt;/p&gt;
&lt;p&gt;The key is to be honest while being tactful. You can’t be boastful because they’ll take note.&lt;/p&gt;
&lt;p&gt;When you answer the question about your weakness, you want to say what you’re doing about it and explain why you’re good for the job.&lt;/p&gt;
&lt;p&gt;Here’s an example Chris gave:&lt;/p&gt;
&lt;p&gt;I was a team leader for 10 years. In the first five years, I didn’t understand what being a team leader was about. I focused on myself. It took me a while to realize that the benefit I provide as a leader is what we produce as a team and not what I produce as an individual.&lt;/p&gt;
&lt;p&gt;My weakness then was I was too focused on the individual and not very a good leader. And I did something about it.&lt;/p&gt;
&lt;p&gt;My weakness now is: I’m not technically as strong as I used to be, because I spend more time making sure everyone is doing their job properly and happily than focusing on my technical side.&lt;/p&gt;
&lt;p&gt;(This weakness makes a great manager).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where do you see yourself in 3-5 years time?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This question gives an insight into what you’re looking for. If you say something along the lines of moving up the career ladder, it hints that you’re not interested in the job itself.&lt;/p&gt;
&lt;p&gt;If you’re looking to be a frontend developer, a good example is to say you see yourself coding for the company. Keep it direct and straightforward.&lt;/p&gt;
&lt;p&gt;Example from Chris: &amp;quot;My focus then is a job where I can code. My focus now is to make the company I’m working for succeed. I’m going to code really well and lead the team really well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did you leave your previous job?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you left your job because it’s a toxic environment, you want to be specific about what made it toxic.&lt;/p&gt;
&lt;p&gt;We didn’t tackle this question any further in the chat I had with Chris, so I don’t have concrete answers for you if you got bored and simply wanted to switch.&lt;/p&gt;
&lt;h3 id=&quot;standing-out&quot;&gt;Standing out&lt;/h3&gt;
&lt;p&gt;You need to sell yourself during an interview so you stand out. You can do this by answering questions the interviewer has not asked.&lt;/p&gt;
&lt;p&gt;Tell them the things you listed on your CV. Tell them about contributing to open source, attending meetups, conferences, blogging, and anything you can think of that helps you stand out.&lt;/p&gt;
&lt;p&gt;It is the nature of our industry to think creatively. If you managed to solve a problem in a useful way before, talk about it. It’ll put you in a good light. The more you’ve done this, the more you’re of a right employee.&lt;/p&gt;
&lt;h3 id=&quot;questions-to-ask&quot;&gt;Questions to ask&lt;/h3&gt;
&lt;p&gt;As much as the interview is interviewing you, you’re also interviewing the interviewer. Remember this.&lt;/p&gt;
&lt;p&gt;Chris says he’d ask two questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What will I be doing if you sit me down at my desk and put a computer in front of me?&lt;/li&gt;
&lt;li&gt;What are the skeletons in your closest?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;What will I be doing if you sit me down at my desk and put a computer in front of me?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This question tells about the work you’ll do day-to-day with the company. If they say something concrete about the work that you align with, good!&lt;/p&gt;
&lt;p&gt;But be aware that expectations don’t always line up to reality. If this happens, Start applying for another job.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the skeletons in your closest?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This question means: What are the dirty things I should know about your company? To me, this question flips the “What’s your weakness” question back to the company.&lt;/p&gt;
&lt;p&gt;You’d want to hear what they want to hide. You want to test their honesty as well. If they say everything is perfect, they’re lying.&lt;/p&gt;
&lt;p&gt;Everyone will try to sell you the job if they’re interested in you. They’ll tell you about shiny frameworks and greenfield projects. But when you show up, they might ask you to work on legacy systems.&lt;/p&gt;
&lt;h3 id=&quot;be-honest&quot;&gt;Be honest&lt;/h3&gt;
&lt;p&gt;Always be honest. It’s not going to work if you bluff.&lt;/p&gt;
&lt;p&gt;The worst part about lying is you might get the job. And then you’re screwed because you’re expected to perform.&lt;/p&gt;
&lt;h2 id=&quot;final-words-from-chris&quot;&gt;Final words from Chris&lt;/h2&gt;
&lt;p&gt;So much about finding a job is not cutting yourself out of the process.&lt;/p&gt;
&lt;p&gt;They’re only looking for one person for the job. The odds are, you’re not going to get the job. So how do you NOT get eliminated? How do you move on to the next stage and meet the next boss?&lt;/p&gt;
&lt;p&gt;You’ll feel awful if you get rejected, and you’re going to get rejected a lot. You’ll also get interviewers who are awful and you come out of it feeling awful. But if you don’t apply, you’ll never get anywhere.&lt;/p&gt;
&lt;p&gt;You nothing much to distinguish yourself from other candidates at the start. It boils down to your luck. You have to play your odds. If possible, get someone in the industry to check your CV for you. It helps.&lt;/p&gt;
&lt;p&gt;Good luck.&lt;/p&gt;
&lt;p&gt;Please thank Chris Lienert for spending his time with us if this helped you. &lt;a href=&quot;https://twitter.com/cliener&quot; title=&quot;Chris Lienert&quot;&gt;You can reach him through Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On Advocacy</title>
    <link href="https://zellwk.com/blog/advocacy/"/>
    <updated>2019-05-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/advocacy/</id>
    <content type="html">&lt;p&gt;We’re fierce and protective when we talk about stuff we care about. And as developers, we care a lot about these topics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Web Performance&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Frameworks&lt;/li&gt;
&lt;li&gt;Inclusivity and Equality&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are no problems with voicing your opinion. We all have our opinions and we want them heard. I understand and respect that.&lt;/p&gt;
&lt;p&gt;But we should be mindful of the way we say things. If we voice our opinions as complaints, name-calling, and shaming, our opinions don’t get heard. No change would happen. They simply create a vicious cycle of worry, hate, and anxiety.&lt;/p&gt;
&lt;p&gt;If we change how we project our voice, we can make real change happen. And our culture will change for the better.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;fear-and-change&quot;&gt;Fear and Change&lt;/h2&gt;
&lt;p&gt;If you call someone out publicly, how would they feel?&lt;/p&gt;
&lt;p&gt;Ashamed. Angry. Misunderstood.&lt;/p&gt;
&lt;p&gt;They didn’t agree to get called out. Name calling is almost the same as bullying. You bully them into submission with the peer pressure.&lt;/p&gt;
&lt;p&gt;It doesn’t work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want people to listen to you, they need to know you understand them first.&lt;/strong&gt; This is why name-calling doesn’t help. It puts you in the opposite direction of where you need to be in.&lt;/p&gt;
&lt;p&gt;Another problem with name-calling is this.&lt;/p&gt;
&lt;p&gt;People who actually want to make the change become afraid to do so. They don’t dare to ask for help, because they may be shamed publicly if they didn’t well!&lt;/p&gt;
&lt;p&gt;Our culture takes a hit. The community takes a hit.&lt;/p&gt;
&lt;p&gt;Instead of bullying, a better way is to ping people gently, quietly, and ask if they need help. If they don’t want help, so be it.&lt;/p&gt;
&lt;h2 id=&quot;what-advocacy-is-about&quot;&gt;What advocacy is about&lt;/h2&gt;
&lt;p&gt;I think advocacy isn’t about complaining or shaming. It is about &lt;strong&gt;giving guidance and instructions&lt;/strong&gt;. It’s about being patient and genuine. It is about &lt;strong&gt;helping people move&lt;/strong&gt; in the direction you advocate for.&lt;/p&gt;
&lt;p&gt;Many fine folks are doing a good job of that. To name a few of my heroes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/rachelandrew&quot; title=&quot;Rachel Andrew&quot;&gt;Rachel Andrew&lt;/a&gt; regarding CSS and Layouts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/heydonworks&quot;&gt;Heydon Pickering&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/leoniewatson&quot;&gt;Léonie Watson&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/scottohara&quot;&gt;Scott O’Hara&lt;/a&gt; on Accessibility and Inclusivity.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; and &lt;a href=&quot;https://zellwk.com/blog/advocacy/@addyosmani&quot;&gt;Addy Osmani&lt;/a&gt; on JavaScript/Web Performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And of course, special mention to my buddy &lt;a href=&quot;https://twitter.com/hj_chen&quot;&gt;Chen Hui Jing&lt;/a&gt; for talking about CSS and typography all over the world.&lt;/p&gt;
&lt;p&gt;(There are a lot of great people out there. I’m sorry I can’t include most people).&lt;/p&gt;
&lt;h2 id=&quot;to-the-blatant-offenders&quot;&gt;To the blatant offenders&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Most people want to and seek change.&lt;/strong&gt; We simply need to help them clear away the barriers they face.&lt;/p&gt;
&lt;p&gt;Unfortunately, some giant corporations in the world do abuse their power. These blatant offenders don’t accept genuine help—they don’t think they need help.&lt;/p&gt;
&lt;p&gt;And if giant corporations continue to abuse their power, our world will go into ruins before we know. In these cases, it’s up to us to stand up and fight against them. And we have to do it by name-calling. We might even have to organize a boycott (if we have the power to). No way around it as far as I know, which is unfortunate.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;for general public who wants to change, the gentler version is way more effective.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So take note of who you’re talking to and what you perpetuate.&lt;/p&gt;
&lt;p&gt;Words have power.&lt;/p&gt;
&lt;p&gt;I want to end off with a precept from the movie, &lt;a href=&quot;https://www.imdb.com/title/tt2543472/&quot; title=&quot;Wonder&quot;&gt;Wonder&lt;/a&gt;. I love this precept and I try to apply it all the time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be kind, for everyone is fighting a hard battle.
And if you really wanna see what people are, all you have to do… is look.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Be kind.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Maybe we should step away from the online-world for a bit</title>
    <link href="https://zellwk.com/blog/step-away/"/>
    <updated>2019-05-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/step-away/</id>
    <content type="html">&lt;p&gt;We developers have become quite a toxic bunch of people to be with. We create fierce “debates” on every media we’re in. Twitter, Facebook, wherever we’re at.&lt;/p&gt;
&lt;p&gt;We talk about how CSS suck (and how they don’t).&lt;/p&gt;
&lt;p&gt;We talk about Accessibility and Performance (and bitch companies that don’t do them well).&lt;/p&gt;
&lt;p&gt;We talk about frameworks vs no-frameworks. React vs Vue vs Vanilla JavaScript. And why you SHOULD learn frameworks vs why you SHOULDN’T learn frameworks.&lt;/p&gt;
&lt;p&gt;We also talk about how some technologies are “dead” (even though they still continue living for quite some time).&lt;/p&gt;
&lt;p&gt;Everyone has opinions. Most of these opinions are complains. We spread anger, fear, and worry in our communications. Daily&lt;/p&gt;
&lt;p&gt;This should stop (but it won’t, because you can’t control what people say or do). What you can do is take a break and ignore what everyone else has to say.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;i%E2%80%99m-pretty-good-at-ignoring-opinions&quot;&gt;I’m pretty good at ignoring opinions&lt;/h2&gt;
&lt;p&gt;Should you learn Frameworks? Should you NOT learn frameworks?&lt;/p&gt;
&lt;p&gt;Web Components are DEAD! CSS Sucks! React Sucks!&lt;/p&gt;
&lt;p&gt;If you’re building a course, you should make videos! Plain text is no good! People react better to videos! And there’s more perceived value!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Everyone has opinions.&lt;/strong&gt; We’re entitled to our opinions. We’re entitled to voice our opinions too. But they’re just opinions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;They’re not the truth.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m pretty good at ignoring opinions because I’ve been ignoring many of them throughout my life.&lt;/p&gt;
&lt;p&gt;When I was still in school (I was a Business student), my peers want to work in large companies; or banks. I didn’t like that, and I started to code.&lt;/p&gt;
&lt;p&gt;Most people would think freelancing is tough and scary. You shouldn’t do it until you’ve had a few years of experience (and good clients) under your belt. But I went ahead and started freelancing in less than a year of learning code.&lt;/p&gt;
&lt;p&gt;I wrote my first book two years into learning code. Who the hell am I to write a book? I don’t have the authority, nor experience, nor gift for writing. Most people would think this way, me too. But I wrote (and sold) it anyway.&lt;/p&gt;
&lt;p&gt;The stunts I pulled ARE risky. I’m not denying that.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;opinions of the general public don’t matter.&lt;/strong&gt; What matters is the story we tell ourselves.&lt;/p&gt;
&lt;p&gt;Maybe you’re not in a position to do the same things I did in my younger days. That’s okay. But maybe your “I can’t do it” is simply a story you tell yourself. And it might be false.&lt;/p&gt;
&lt;p&gt;I never thought I’d be able to write a book two years into coding. I didn’t have the guts to do it. I was only able to write the book after I changed my narrative (by going through a &lt;a href=&quot;https://liveyourmark.com/website-is-under-maintenance/&quot;&gt;life-coaching course&lt;/a&gt;). I found my courage to venture into writing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I changed the story I told myself&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can change the story you tell yourself too. The first step is to step away from the comfort zone you created.&lt;/p&gt;
&lt;h2 id=&quot;stepping-out-of-the-comfort-zone.&quot;&gt;Stepping out of the comfort zone.&lt;/h2&gt;
&lt;p&gt;The best way to step outside of your comfort zone is to &lt;strong&gt;try something new&lt;/strong&gt;. Something you never thought you would do.&lt;/p&gt;
&lt;p&gt;Some stuff I did that I never thought I’d do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Marketing (had to learn because I need to sell my courses).&lt;/li&gt;
&lt;li&gt;Healing (wanted to learn because I got so tired of feeling tired and listless all the time). And boy, this work is rewarding and fun! Maybe I can work on you if we ever get a chance to meet. It’ll be interesting.&lt;/li&gt;
&lt;li&gt;Just picked up my dusty Guitar which I left untouched for ten years (because I realized I still want to learn to play the Guitar).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, this May, I’m going on a course on Shamanism.&lt;/p&gt;
&lt;p&gt;These extra things I do &lt;strong&gt;expanded my worldview&lt;/strong&gt; considerably. As I step away from the tech-bubble I created, I realized &lt;strong&gt;the world has much more to offer&lt;/strong&gt; than I thought.&lt;/p&gt;
&lt;p&gt;Coding isn’t everything.&lt;/p&gt;
&lt;p&gt;You don’t have to code. Heck, you don’t even have to design or have anything to do with the online-world if you choose to. People are surviving (thriving, even) in areas you can’t imagine.&lt;/p&gt;
&lt;p&gt;So there’s no fixed-approach to life. &lt;strong&gt;Nobody has the answers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can choose to code. But none of the fierce debate matters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What matters is the life you want to lead.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What do you want to do?&lt;/li&gt;
&lt;li&gt;How do you want to live?&lt;/li&gt;
&lt;li&gt;Who do you want to be?&lt;/li&gt;
&lt;li&gt;What do you want to be concerned with?&lt;/li&gt;
&lt;li&gt;Who do you want to help?&lt;/li&gt;
&lt;li&gt;What problems do you want to take on?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Maybe it’s time to step aside and take a breather.&lt;/strong&gt; Dig deep and answer those questions. Take another breather every few months and look at your answers again. It’ll change.&lt;/p&gt;
&lt;p&gt;Maybe something will call for you, and maybe it’s not related to web development. But off you go. Have fun and enjoy.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with nested callbacks</title>
    <link href="https://zellwk.com/blog/nested-callbacks/"/>
    <updated>2019-05-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/nested-callbacks/</id>
    <content type="html">&lt;p&gt;JavaScript is a strange language. Once in a while, you have to deal with a callback that’s in another callback that’s in yet another callback.&lt;/p&gt;
&lt;p&gt;People affectionately call this pattern the &lt;em&gt;callback hell&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It kinda looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;firstFunction(args, function() {
  secondFunction(args, function() {
    thirdFunction(args, function() {
      // And so on...
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is JavaScript for you. It’s mind-boggling to see nested callbacks, but I don’t think it’s a “hell”. The “hell” can be manageable if you know what to do with it.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;on-callbacks&quot;&gt;On callbacks&lt;/h2&gt;
&lt;p&gt;I assume you know what callbacks are if you’re reading this article. If you don’t, please read &lt;a href=&quot;https://zellwk.com/blog/callbacks&quot; title=&quot;Introduction to callbacks in JavaScript&quot;&gt;this article&lt;/a&gt; for an introduction to callbacks before continuing. There, we talk about what callbacks are and why you use them in JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;solutions-to-callback-hell&quot;&gt;Solutions to callback hell&lt;/h2&gt;
&lt;p&gt;There are four solutions to callback hell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write comments&lt;/li&gt;
&lt;li&gt;Split functions into smaller functions&lt;/li&gt;
&lt;li&gt;Using Promises&lt;/li&gt;
&lt;li&gt;Using Async/await&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before we dive into the solutions, let’s construct a callback hell together. Why? Because it’s too abstract to see &lt;code&gt;firstFunction&lt;/code&gt;, &lt;code&gt;secondFunction&lt;/code&gt;, and &lt;code&gt;thirdFunction&lt;/code&gt;. We want to make it concrete.&lt;/p&gt;
&lt;h2 id=&quot;constructing-a-callback-hell&quot;&gt;Constructing a callback hell&lt;/h2&gt;
&lt;p&gt;Let’s imagine we’re trying to make a burger. To make a burger, we need to go through the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get ingredients (we’re gonna assume it’s a beef burger)&lt;/li&gt;
&lt;li&gt;Cook the beef&lt;/li&gt;
&lt;li&gt;Get burger buns&lt;/li&gt;
&lt;li&gt;Put the cooked beef between the buns&lt;/li&gt;
&lt;li&gt;Serve the burger&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these steps are synchronous, you’ll be looking at a function that resembles this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  const beef = getBeef()
  const patty = cookBeef(beef)
  const buns = getBuns()
  const burger = putBeefBetweenBuns(buns, patty)
  return burger
}

const burger = makeBurger()
serve(burger)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, in our scenario, let’s say we can’t make the burger ourselves. We have to instruct a helper on the steps to make the burger. After we instruct the helper, we have to &lt;em&gt;WAIT&lt;/em&gt; for the helper to finish before we begin the next step.&lt;/p&gt;
&lt;p&gt;If we want to wait for something in JavaScript, we need to use a callback. To make the burger, we have to get the beef first. We can only cook the beef after we get the beef.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  getBeef(function (beef) {
    // We can only cook beef after we get it.
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To cook the beef, we need to pass &lt;code&gt;beef&lt;/code&gt; into the &lt;code&gt;cookBeef&lt;/code&gt; function. Otherwise, there’s nothing to cook! Then, we have to wait for the beef to get cooked.&lt;/p&gt;
&lt;p&gt;Once the beef gets cooked, we get buns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  getBeef(function (beef) {
    cookBeef(beef, function (cookedBeef) {
      getBuns(function (buns) {
        // Put patty in bun
      })
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we get the buns, we need to put the patty between the buns. This is where a burger gets formed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  getBeef(function (beef) {
    cookBeef(beef, function (cookedBeef) {
      getBuns(function (buns) {
        putBeefBetweenBuns(buns, cookedBeef, function(burger) {
          // Serve the burger 
        })
      })
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can serve the burger! But we can’t return &lt;code&gt;burger&lt;/code&gt; from &lt;code&gt;makeBurger&lt;/code&gt; because it’s asynchronous. We need to accept a callback to serve the burger.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = nextStep =&amp;gt; {
  getBeef(function (beef) {
    cookBeef(beef, function (cookedBeef) {
      getBuns(function (buns) {
        putBeefBetweenBuns(buns, cookedBeef, function(burger) {
          nextStep(burger)
        })
      })
    })
  })
}

// Make and serve the burger
makeBurger(function (burger) {
  serve(burger)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I had fun making this callback hell example 😆).&lt;/p&gt;
&lt;h2 id=&quot;first-solution-to-callback-hell%3A-write-comments&quot;&gt;First solution to callback hell: Write comments&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;makeBurger&lt;/code&gt; callback hell is simple to understand. We can read it. It just… doesn’t look nice.&lt;/p&gt;
&lt;p&gt;If you’re reading &lt;code&gt;makeBurger&lt;/code&gt; for the first time, you may think “Why the hell do we need so many callbacks to make a burger? It doesn’t make sense!”.&lt;/p&gt;
&lt;p&gt;In such a case, you’d want to leave comments to explain your code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Makes a burger 
// makeBurger contains four steps: 
//   1. Get beef 
//   2. Cook the beef
//   3. Get buns for the burger 
//   4. Put the cooked beef between the buns 
//   5. Serve the burger (from the callback)
// We use callbacks here because each step is asynchronous. 
//   We have to wait for the helper to complete the one step
//   before we can start the next step 
const makeBurger = nextStep =&amp;gt; {
  getBeef(function (beef) {
    cookBeef(beef, function (cookedBeef) {
      getBuns(function (buns) {
        putBeefBetweenBuns(buns, cookedBeef, function(burger) {
          nextStep(burger)
        })
      })
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, instead of thinking “wtf?!” when you see the callback hell, you get an understanding of why it has to be written this way.&lt;/p&gt;
&lt;h2 id=&quot;second-solution-to-callback-hell%3A-split-the-callbacks-into-different-functions&quot;&gt;Second solution to callback hell: Split the callbacks into different functions&lt;/h2&gt;
&lt;p&gt;Our callback hell example is already an example of this. Let me show you the step-by-step imperative code and you’ll see why.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;getBeef&lt;/code&gt;, our first callback, we have to go to the fridge to get the beef. There are two fridges in the kitchen. We need to go to the right fridge.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getBeef = (nextStep) =&amp;gt; {
  const fridge = leftFridge
  const beef = getBeefFromFridge(fridge)
  nextStep(beef)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To cook beef, we need to put the beef into an oven; turn the oven to 200 degrees, and wait for twenty minutes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const cookBeef = (beef, nextStep) =&amp;gt; {
  const workInProgress = putBeefInOven(beef)
  setTimeout (function () {
    nextStep(workInProgress)
 }, 1000 * 60 * 20)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now imagine if you have to write each of these steps in &lt;code&gt;makeBurger&lt;/code&gt;… you’ll probably faint from the sheer amount of code!&lt;/p&gt;
&lt;p&gt;For a concrete example on splitting callbacks into smaller functions, you can read &lt;a href=&quot;https://zellwk.com/blog/callbacks#callback-hell&quot; title=&quot;Real Callback Hell example&quot;&gt;this small section&lt;/a&gt; in my callback article.&lt;/p&gt;
&lt;h2 id=&quot;third-solution-to-callback-hell%3A-use-promises&quot;&gt;Third solution to callback hell: Use promises&lt;/h2&gt;
&lt;p&gt;I’m going to assume you know what promises are. If you don’t, please &lt;a href=&quot;https://zellwk.com/blog/js-promises/&quot; title=&quot;Promises in JavaScript&quot;&gt;read this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Promises can make callback hell much easier to manage. Instead of the nested code you see above, you’ll have this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  return getBeef()
    .then(beef =&amp;gt; cookBeef(beef))
    .then(cookedBeef =&amp;gt; getBuns(cookedBeef))
    .then(bunsAndBeef =&amp;gt; putBeefBetweenBuns(bunsAndBeef))
}

// Make and serve burger 
makeBurger()
  .then(burger =&amp;gt; serve(burger))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you take advantage of the single-argument style with promises, you can tweak the above to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = () =&amp;gt; {
  return getBeef()
    .then(cookBeef)
    .then(getBuns)
    .then(putBeefBetweenBuns)
}

// Make and serve burger 
makeBurger()
  .then(serve)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much easier to read and manage.&lt;/p&gt;
&lt;p&gt;But the question is how do you convert callback-based code into promise-based code.&lt;/p&gt;
&lt;h3 id=&quot;converting-callbacks-to-promises&quot;&gt;Converting callbacks to promises&lt;/h3&gt;
&lt;p&gt;To convert callbacks into promises, we need to create a new promise for each callback. We can &lt;code&gt;resolve&lt;/code&gt; the promise when the callback is successful. Or we can &lt;code&gt;reject&lt;/code&gt; the promise if the callback fails.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getBeefPromise = _ =&amp;gt; {
  const fridge = leftFridge
  const beef = getBeefFromFridge(fridge)

  return new Promise((resolve, reject) =&amp;gt; {
    if (beef) {
      resolve(beef)
    } else {
      reject(new Error(&#39;No more beef!&#39;))
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const cookBeefPromise = beef =&amp;gt; {
  const workInProgress = putBeefInOven(beef)

  return new Promise((resolve, reject) =&amp;gt; {  
    setTimeout (function () {
      resolve(workInProgress)
    }, 1000 * 60 * 20)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In practice, callbacks would probably be written for you already. If you use Node, each function that contains a callback will have the same syntax:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The callback would be the last argument&lt;/li&gt;
&lt;li&gt;The callback will always have two arguments. And these arguments are in the same order. (Error first, followed by whatever you’re interested in).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// The function that&#39;s defined for you
const functionName = (arg1, arg2, callback) =&amp;gt; {
  // Do stuff here 
  callback(err, stuff)
}

// How you use the function
functionName(arg1, arg2, (err, stuff) =&amp;gt; {
  if (err) {
    console.error(err)
  }
  // Do stuff 
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your callback has the same syntax, you can use libraries like &lt;a href=&quot;https://www.npmjs.com/package/es6-promisify&quot; title=&quot;ES6 Promisify&quot;&gt;ES6 Promisify&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/denodeify&quot; title=&quot;Denodeify&quot;&gt;Denodeify&lt;/a&gt; (de-node-ify) that callback into a promise. If you use Node v8.0 and above, you can use &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original&quot;&gt;util.promisify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All three of them work. You can choose any library to work with. There are slight nuances between each method though. I’ll leave you to check their documentation for how-tos.&lt;/p&gt;
&lt;h2 id=&quot;fourth-solution-to-callback-hell%3A-use-asynchronous-functions&quot;&gt;Fourth solution to callback hell: Use asynchronous functions&lt;/h2&gt;
&lt;p&gt;To use asynchronous functions, you need to know two things first:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to convert callbacks into promises (read above)&lt;/li&gt;
&lt;li&gt;How to use asynchronous functions (&lt;a href=&quot;https://zellwk.com/blog/async-await&quot; title=&quot;Asynchronous functions (Async/await) in JavaScript&quot;&gt;read this&lt;/a&gt; if you need help).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With asynchronous functions, you can write &lt;code&gt;makeBurger&lt;/code&gt; as if it’s synchronous again!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = async () =&amp;gt; {
  const beef = await getBeef()
  const cookedBeef = await cookBeef(beef)
  const buns = await getBuns()
  const burger = await putBeefBetweenBuns(buns, cookedBeef)
  return burger 
}

// Make and serve burger 
makeBurger()
  .then(serve)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s one improvement we can make to the &lt;code&gt;makeBurger&lt;/code&gt; here. You can probably get two helpers to &lt;code&gt;getBuns&lt;/code&gt; and &lt;code&gt;getBeef&lt;/code&gt; at the same time. This means you can &lt;code&gt;await&lt;/code&gt; them both with &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const makeBurger = async () =&amp;gt; {
  const [beef, buns] = await Promise.all([getBeef(), getBuns()])
  const cookedBeef = await cookBeef(beef)
  const burger = await putBeefBetweenBuns(buns, cookedBeef)
  return burger 
}

// Make and serve burger 
makeBurger()
  .then(serve)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note: You can do the same with Promises… but the syntax isn’t as nice and as clear as async/await functions).&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Callback hell isn’t as hellish as you think. There are four easy ways to manage callback hell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write comments&lt;/li&gt;
&lt;li&gt;Split functions into smaller functions&lt;/li&gt;
&lt;li&gt;Using Promises&lt;/li&gt;
&lt;li&gt;Using Async/await&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript async and await in loops</title>
    <link href="https://zellwk.com/blog/async-await-in-loops/"/>
    <updated>2019-05-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/async-await-in-loops/</id>
    <content type="html">&lt;p&gt;Basic &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; is simple. Things get a bit more complicated when you try to use &lt;code&gt;await&lt;/code&gt; in loops.&lt;/p&gt;
&lt;p&gt;In this article, I want to share some gotchas to watch out for if you intend to use &lt;code&gt;await&lt;/code&gt; in loops.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;I’m going to assume you know how to use &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. If you don’t, read &lt;a href=&quot;https://zellwk.com/blog/async-await&quot;&gt;the previous article&lt;/a&gt; to familiarize yourself before continuing.&lt;/p&gt;
&lt;h2 id=&quot;preparing-an-example&quot;&gt;Preparing an example&lt;/h2&gt;
&lt;p&gt;For this article, let’s say you want to get the number of fruits from a fruit basket.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruitBasket = {
  apple: 27, 
  grape: 0,
  pear: 14 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You want to get the number of each fruit from the fruitBasket. To get the number of a fruit, you can use a &lt;code&gt;getNumFruit&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getNumFruit = fruit =&amp;gt; {
  return fruitBasket[fruit]
}

const numApples = getNumFruit(&#39;apple&#39;)
console.log(numApples) // 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s say &lt;code&gt;fruitBasket&lt;/code&gt; lives on a remote server. Accessing it takes one second. We can mock this one-second delay with a timeout. (Please refer to the &lt;a href=&quot;https://zellwk.com/blog/async-await&quot;&gt;previous article&lt;/a&gt; if you have problems understanding the timeout code).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const sleep = ms =&amp;gt; {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, ms))
}

const getNumFruit = fruit =&amp;gt; {
  return sleep(1000).then(v =&amp;gt; fruitBasket[fruit])
}

getNumFruit(&#39;apple&#39;)
  .then(num =&amp;gt; console.log(num)) // 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s say you want to use &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;getNumFruit&lt;/code&gt; to get the number of each fruit in asynchronous function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const control = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const numApples = await getNumFruit(&#39;apple&#39;)
  console.log(numApples)
  
  const numGrapes = await getNumFruit(&#39;grape&#39;)
  console.log(numGrapes)

  const numPears = await getNumFruit(&#39;pear&#39;)
  console.log(numPears)

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/control.gif&quot; alt=&quot;Console shows &#39;Start&#39;. One second later, it logs 27. Another second later, it logs 0. One more second later, it logs 14, and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;With this, we can begin looking at &lt;code&gt;await&lt;/code&gt; in loops.&lt;/p&gt;
&lt;h2 id=&quot;await-in-a-for-loop&quot;&gt;Await in a for loop&lt;/h2&gt;
&lt;p&gt;Let’s say we have an array of fruits we want to get from the fruit basket.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruitsToGet = [&#39;apple&#39;, &#39;grape&#39;, &#39;pear&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to loop through this array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const forLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  for (let index = 0; index &amp;lt; fruitsToGet.length; index++) {
    // Get num of each fruit
  }

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the for-loop, we will use &lt;code&gt;getNumFruit&lt;/code&gt; to get the number of each fruit. We’ll also log the number into the console.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;getNumFruit&lt;/code&gt; returns a promise, we can &lt;code&gt;await&lt;/code&gt; the resolved value before logging it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const forLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  for (let index = 0; index &amp;lt; fruitsToGet.length; index++) {
    const fruit = fruitsToGet[index]
    const numFruit = await getNumFruit(fruit)
    console.log(numFruit)
  }

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use &lt;code&gt;await&lt;/code&gt;, you expect JavaScript to pause execution until the awaited promise gets resolved. This means &lt;code&gt;await&lt;/code&gt;s in a for-loop should get executed in series.&lt;/p&gt;
&lt;p&gt;The result is what you’d expect.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;Apple: 27&#39;
&#39;Grape: 0&#39;
&#39;Pear: 14&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/control.gif&quot; alt=&quot;Console shows &#39;Start&#39;. One second later, it logs 27. Another second later, it logs 0. One more second later, it logs 14, and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This behaviour works with most loops (like &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for-of&lt;/code&gt; loops)…&lt;/p&gt;
&lt;p&gt;But it won’t work with loops that require a callback. Examples of such loops that require a fallback include &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;reduce&lt;/code&gt;. We’ll look at how &lt;code&gt;await&lt;/code&gt; affects &lt;code&gt;forEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt; in the next few sections.&lt;/p&gt;
&lt;h2 id=&quot;await-in-a-foreach-loop&quot;&gt;Await in a forEach loop&lt;/h2&gt;
&lt;p&gt;We’ll do the same thing as we did in the for-loop example. First, let’s loop through the array of fruits.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const forEachLoop = _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  fruitsToGet.forEach(fruit =&amp;gt; {
    // Send a promise for each fruit
  })

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll try to get the number of fruits with &lt;code&gt;getNumFruit&lt;/code&gt;. (Notice the &lt;code&gt;async&lt;/code&gt; keyword in the callback function. We need this &lt;code&gt;async&lt;/code&gt; keyword because &lt;code&gt;await&lt;/code&gt; is in the callback function).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const forEachLoop = _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  fruitsToGet.forEach(async fruit =&amp;gt; {
    const numFruit = await getNumFruit(fruit)
    console.log(numFruit)
  })

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might expect the console to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;27&#39;
&#39;0&#39;
&#39;14&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the actual result is different. JavaScript proceeds to call &lt;code&gt;console.log(&#39;End&#39;)&lt;/code&gt; before the promises in the forEach loop gets resolved.&lt;/p&gt;
&lt;p&gt;The console logs in this order:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;Start&#39;
&#39;End&#39;
&#39;27&#39;
&#39;0&#39;
&#39;14&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/foreach-1.gif&quot; alt=&quot;Console logs &#39;Start&#39; and &#39;End&#39; immediately. One second later, it logs 27, 0, and 14.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;JavaScript does this because &lt;code&gt;forEach&lt;/code&gt; is not promise-aware. It cannot support &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;. You &lt;em&gt;cannot&lt;/em&gt; use &lt;code&gt;await&lt;/code&gt; in &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;await-with-map&quot;&gt;Await with map&lt;/h2&gt;
&lt;p&gt;If you use &lt;code&gt;await&lt;/code&gt; in a &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; will always return an array of promise. This is because asynchronous functions always return promises.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mapLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const numFruits = await fruitsToGet.map(async fruit =&amp;gt; {
    const numFruit = await getNumFruit(fruit)
    return numFruit
  })

  console.log(numFruits)

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;[Promise, Promise, Promise]&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/map.png&quot; alt=&quot;Console loggs &#39;Start&#39;, &#39;[Promise, Promise, Promise]&#39;, and &#39;End&#39; immediately&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Since &lt;code&gt;map&lt;/code&gt; always return promises (if you use &lt;code&gt;await&lt;/code&gt;), you have to wait for the array of promises to get resolved. You can do this with &lt;code&gt;await Promise.all(arrayOfPromises)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mapLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const promises = fruitsToGet.map(async fruit =&amp;gt; {
    const numFruit = await getNumFruit(fruit)
    return numFruit
  })
  
  const numFruits = await Promise.all(promises)
  console.log(numFruits)

  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you get:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;[27, 0, 14]&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/map-2.gif&quot; alt=&quot;Console logs &#39;Start&#39;. One second later, it logs &#39;[27, 0, 14] and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You can manipulate the value you return in your promises if you wish to. The resolved values will be the values you return.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const mapLoop = async _ =&amp;gt; {
  // ...
  const promises = fruitsToGet.map(async fruit =&amp;gt; {
    const numFruit = await getNumFruit(fruit)
    // Adds onn fruits before returning
    return numFruit + 100
  })
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;[127, 100, 114]&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;await-with-filter&quot;&gt;Await with filter&lt;/h2&gt;
&lt;p&gt;When you use &lt;code&gt;filter&lt;/code&gt;, you want to filter an array with a specific result. Let’s say you want to create an array with more than 20 fruits.&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;filter&lt;/code&gt; normally (without await), you’ll use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Filter if there&#39;s no await
const filterLoop = _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const moreThan20 = await fruitsToGet.filter(fruit =&amp;gt; {
    const numFruit = fruitBasket[fruit]
    return numFruit &amp;gt; 20
  })

  console.log(moreThan20)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You would expect &lt;code&gt;moreThan20&lt;/code&gt; to contain only apples because there are 27 apples, but there are 0 grapes and 14 pears.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
[&#39;apple&#39;]
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;await&lt;/code&gt; in &lt;code&gt;filter&lt;/code&gt; doesn’t work the same way. In fact, it doesn’t work at all. You get the unfiltered array back…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const filterLoop = _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const moreThan20 = await fruitsToGet.filter(async fruit =&amp;gt; {
    const numFruit = getNumFruit(fruit)
    return numFruit &amp;gt; 20
  })

  console.log(moreThan20)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
[&#39;apple&#39;, &#39;grape&#39;, &#39;pear&#39;]
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/filter.png&quot; alt=&quot;Console loggs &#39;Start&#39;, &#39;[&#39;apple&#39;, &#39;grape&#39;, &#39;pear&#39;]&#39;, and &#39;End&#39; immediately&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Here’s why it happens.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;await&lt;/code&gt; in a &lt;code&gt;filter&lt;/code&gt; callback, the callback always a promise. Since promises are always truthy, everything item in the array passes the filter. Writing &lt;code&gt;await&lt;/code&gt; in a &lt;code&gt;filter&lt;/code&gt; is like writing this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Everything passes the filter...
const filtered = array.filter(true)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are three steps to use &lt;code&gt;await&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; properly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;map&lt;/code&gt; to return an array promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; the array of promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; the resolved values&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const filterLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const promises = await fruitsToGet.map(fruit =&amp;gt; getNumFruit(fruit))
  const numFruits = await Promise.all(promises)
  
  const moreThan20 = fruitsToGet.filter((fruit, index) =&amp;gt; {
    const numFruit = numFruits[index]
    return numFruit &amp;gt; 20
  })

  console.log(moreThan20)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Start
[ &#39;apple&#39; ]
End
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/filter-2.gif&quot; alt=&quot;Console shows &#39;Start&#39;. One second later, console logs &#39;[&#39;apple&#39;]&#39; and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;await-with-reduce&quot;&gt;Await with reduce&lt;/h2&gt;
&lt;p&gt;For this case, let’s say you want to find out the total number of fruits in the fruitBastet. Normally, you can use &lt;code&gt;reduce&lt;/code&gt; to loop through an array and sum the number up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Reduce if there&#39;s no await
const reduceLoop = _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const sum = fruitsToGet.reduce((sum, fruit) =&amp;gt; {
    const numFruit = fruitBasket[fruit]
    return sum + numFruit
  }, 0)

  console.log(sum)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll get a total of 41 fruits. (27 + 0 + 14 = 41).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;41&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/reduce.png&quot; alt=&quot;Console logs &#39;Start&#39;, &#39;41&#39;, and &#39;End&#39; immediately&quot;&gt;&lt;/figure&gt;
&lt;p&gt;When you use &lt;code&gt;await&lt;/code&gt; with reduce, the results get extremely messy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Reduce if we await getNumFruit
const reduceLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const sum = await fruitsToGet.reduce(async (sum, fruit) =&amp;gt; {
    const numFruit = await getNumFruit(fruit)
    return sum + numFruit
  }, 0)

  console.log(sum)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;[object Promise]14&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/reduce-2.gif&quot; alt=&quot;Console logs &#39;Start&#39;. One second later, it logs &#39;[object Promise]14&#39; and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;What?! &lt;code&gt;[object Promise]14&lt;/code&gt;?!&lt;/p&gt;
&lt;p&gt;Dissecting this is interesting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the first iteration, &lt;code&gt;sum&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;numFruit&lt;/code&gt; is 27 (the resolved value from &lt;code&gt;getNumFruit(&#39;apple&#39;)&lt;/code&gt;). &lt;code&gt;0 + 27&lt;/code&gt; is 27.&lt;/li&gt;
&lt;li&gt;In the second iteration, &lt;code&gt;sum&lt;/code&gt; is a promise. (Why? Because asynchronous functions always return promises!) &lt;code&gt;numFruit&lt;/code&gt; is 0. A promise cannot be added to an object normally, so the JavaScript converts it to &lt;code&gt;[object Promise]&lt;/code&gt; string. &lt;code&gt;[object Promise] + 0&lt;/code&gt; is &lt;code&gt;[object Promise]0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the third iteration, &lt;code&gt;sum&lt;/code&gt; is also a promise. &lt;code&gt;numFruit&lt;/code&gt; is &lt;code&gt;14&lt;/code&gt;. &lt;code&gt;[object Promise] + 14&lt;/code&gt; is &lt;code&gt;[object Promise]14&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mystery solved!&lt;/p&gt;
&lt;p&gt;This means, you can use &lt;code&gt;await&lt;/code&gt; in a &lt;code&gt;reduce&lt;/code&gt; callback, but you have to remember to &lt;code&gt;await&lt;/code&gt; the accumulator first!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const reduceLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const sum = await fruitsToGet.reduce(async (promisedSum, fruit) =&amp;gt; {
    const sum = await promisedSum
    const numFruit = await getNumFruit(fruit)
    return sum + numFruit
  }, 0)

  console.log(sum)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;Start&#39;
&#39;41&#39;
&#39;End&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/reduce-3.gif&quot; alt=&quot;Console logs &#39;Start&#39;. Three seconds later, it logs &#39;41&#39; and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;But… as you can see from the gif, it takes pretty long to &lt;code&gt;await&lt;/code&gt; everything. This happens because &lt;code&gt;reduceLoop&lt;/code&gt; needs to wait for the &lt;code&gt;promisedSum&lt;/code&gt; to be completed for each iteration.&lt;/p&gt;
&lt;p&gt;There’s a way to speed up the reduce loop. (I found out about this thanks to &lt;a href=&quot;https://twitter.com/timkevinoxley&quot;&gt;Tim Oxley&lt;/a&gt;). If you &lt;code&gt;await getNumFruits()&lt;/code&gt; first before &lt;code&gt;await promisedSum&lt;/code&gt;, the &lt;code&gt;reduceLoop&lt;/code&gt; takes only one second to complete:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const reduceLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const sum = await fruitsToGet.reduce(async (promisedSum, fruit) =&amp;gt; {
    // Heavy-lifting comes first. 
    // This triggers all three `getNumFruit` promises before waiting for the next interation of the loop. 
    const numFruit = await getNumFruit(fruit)
    const sum = await promisedSum
    return sum + numFruit
  }, 0)

  console.log(sum)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/reduce-4.gif&quot; alt=&quot;Console logs &#39;Start&#39;. One second later, it logs &#39;41&#39; and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This works because &lt;code&gt;reduce&lt;/code&gt; can fire all three &lt;code&gt;getNumFruit&lt;/code&gt; promises before waiting for the next iteration of the loop. However, this method is slightly confusing since you have to be careful of the order you &lt;code&gt;await&lt;/code&gt; things.&lt;/p&gt;
&lt;p&gt;The simplest (and most efficient way) to use &lt;code&gt;await&lt;/code&gt; in reduce is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;map&lt;/code&gt; to return an array promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; the array of promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce&lt;/code&gt; the resolved values&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const reduceLoop = async _ =&amp;gt; {
  console.log(&#39;Start&#39;)

  const promises = fruitsToGet.map(getNumFruit)
  const numFruits = await Promise.all(promises)
  const sum = numFruits.reduce((sum, fruit) =&amp;gt; sum + fruit)

  console.log(sum)
  console.log(&#39;End&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This version is simple to read and understand, and takes one second to calculate the total number of fruits.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await-loop/reduce-4.gif&quot; alt=&quot;Console logs &#39;Start&#39;. One second later, it logs &#39;41&#39; and &#39;End&#39;&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;If you want to execute &lt;code&gt;await&lt;/code&gt; calls in series, use a for-loop (or any loop without a callback).&lt;/li&gt;
&lt;li&gt;Don’t ever use &lt;code&gt;await&lt;/code&gt; with &lt;code&gt;forEach&lt;/code&gt;. Use a for-loop (or any loop without a callback) instead.&lt;/li&gt;
&lt;li&gt;Don’t &lt;code&gt;await&lt;/code&gt; inside &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt;. Always &lt;code&gt;await&lt;/code&gt; an array of promises with &lt;code&gt;map&lt;/code&gt;, then &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;reduce&lt;/code&gt; accordingly.&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>A new (and easy) way to hide content accessibly</title>
    <link href="https://zellwk.com/blog/hide-content-accessibly/"/>
    <updated>2019-04-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/hide-content-accessibly/</id>
    <content type="html">&lt;p&gt;When I want to hide content accessibly, I always turn to &lt;a href=&quot;https://snook.ca/archives/html_and_css/hiding-content-for-accessibility&quot;&gt;Jonathan Snook’s snippet&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.element-invisible {
  position: absolute !important;
  height: 1px; width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But yesterday, I happened to chance upon Scott O’Hara’s &lt;a href=&quot;https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html&quot;&gt;article on hiding content&lt;/a&gt;. Scott says we only want to hide content in three different contexts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide it completely&lt;/li&gt;
&lt;li&gt;Hide it visually&lt;/li&gt;
&lt;li&gt;Hide it from screen readers&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;p&gt;When we say hide content accessibly, we effectively mean option #2 (hiding content visually, but not from screen readers and keyboard users).&lt;/p&gt;
&lt;h2 id=&quot;then-i-had-an-idea&quot;&gt;Then I had an idea&lt;/h2&gt;
&lt;p&gt;If we only want to hide elements visually, why don’t we use &lt;code&gt;opacity: 0&lt;/code&gt;? Opacity is used to hide elements visually anyway. Content hidden with &lt;code&gt;opacity: 0&lt;/code&gt; is still accessible to screen readers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.hide-accessibly {
  opacity: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I took it up a notch by adding &lt;code&gt;position: absolute&lt;/code&gt;. This takes the element away from the document flow; and allows us to style other elements as if the hidden content isn’t there.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.hide-accessibly {
  position: absolute !important;
  opacity: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought this felt good enough, and I asked Jonathan about it.&lt;/p&gt;
&lt;p&gt;Here’s what he responded with:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;While it pulls it out of flow, it can obscure clickable items. You could add `pointer-events: none;` to it. I don&amp;#39;t know how screenreaders behave with pointer-events turned off; I haven&amp;#39;t tested it. &lt;a href=&quot;https://t.co/fa8qHvfWic&quot;&gt;https://t.co/fa8qHvfWic&lt;/a&gt;&lt;/p&gt;&amp;mdash; Snook (@snookca) &lt;a href=&quot;https://twitter.com/snookca/status/1120809900878307328?ref_src=twsrc%5Etfw&quot;&gt;April 23, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;He also wondered if &lt;code&gt;pointer-events: none&lt;/code&gt; would stop keyboard-trigged click events (which are absolutely essential for screen readers and keyboard users).&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Pointer events shouldn’t obscure because any click/touch events pass through. Although, actually, unsure if that breaks keyboard-triggered clock events. 🤔&lt;/p&gt;&amp;mdash; Snook (@snookca) &lt;a href=&quot;https://twitter.com/snookca/status/1120844382754754562?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I was curious, so I tested &lt;code&gt;pointer-events: none&lt;/code&gt; and discovered it works with keyboard-generated clicks, screen-reader-generated clicks, and JavaScript generated clicks.&lt;/p&gt;
&lt;p&gt;Here’s the Codepen I used for my test:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;450&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;zellwk&quot; data-slug-hash=&quot;mgzPXa&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Pointer-events test&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/mgzPXa/&quot;&gt;
  Pointer-events test&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I reported my findings back to Jonathan and he said we might have a winner!&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Sounds like we might have a winner then!&lt;/p&gt;&amp;mdash; Snook (@snookca) &lt;a href=&quot;https://twitter.com/snookca/status/1120862948866633728?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;the-snippet&quot;&gt;The snippet&lt;/h2&gt;
&lt;p&gt;Here’s the snippet if you want to use this method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.hide-accessibly {
  position: absolute !important;
  opacity: 0;
  pointer-events: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; This method is still incredibly new. I’ve only tested it on the latest versions of Firefox, Safari, and Chrome. I wasn’t able to run a test on Edge and other browsers yet.&lt;/p&gt;
&lt;p&gt;If you’re an accessibility consultant, I’d greatly appreciate it if help me take this snippet out for a spin.&lt;/p&gt;
&lt;p&gt;For the rest: I don’t recommend using this snippet in production yet. (Not until I get confirmation from accessibility experts).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Many developers voiced their opinions, concerns, and experiments over at Twitter. I wanted to share with you what I consolidated and learned.&lt;/p&gt;
&lt;p&gt;At the start, all three properties were debated upon.&lt;/p&gt;
&lt;p&gt;First, let’s talk about &lt;code&gt;opacity&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-with-opacity%3F&quot;&gt;The problem with opacity?&lt;/h2&gt;
&lt;p&gt;Patrick and Vadim were concerned about &lt;code&gt;opacity&lt;/code&gt; because it seemed to break in some browser/screen reader combination.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;don&amp;#39;t have test results to hand/time to test just now, but in short: yes, in at least some browser/screen reader combination, opacity below a certain value results in content not being announced. suggest sticking with tried and tested (albeit a bit lengthy looking) sr-only styles&lt;/p&gt;&amp;mdash; patrick h. lauke (@patrick_h_lauke) &lt;a href=&quot;https://twitter.com/patrick_h_lauke/status/1120955137491705856?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;But Jonathan found some research that suggests that &lt;code&gt;opacity&lt;/code&gt; is okay. Patrick further did some tests and agreed that &lt;code&gt;opacity&lt;/code&gt; is okay.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;embarassing, but i stand corrected. it appears the half-remembered fact about opacity not working was, in essence, for the opposites case (problems with sites using it thinking it hides it from AT, but it not doing it).&lt;br&gt;&lt;br&gt;just opacity itself seems to be ignored by AT 1/&lt;/p&gt;&amp;mdash; patrick h. lauke (@patrick_h_lauke) &lt;a href=&quot;https://twitter.com/patrick_h_lauke/status/1121000192080273409?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Scott O’Hara also chimed in on the original problem with &lt;code&gt;opacity&lt;/code&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;ChromeVox used to completely ignore opacity: 0; essentially treated it the same as display: none.&lt;br&gt;&lt;br&gt;that was a few years back with the browser extension version. Would need an actual chromebook to test if that&amp;#39;s still an issue with the modern build.&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121045899982012416?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;The verdict at this point:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opacity seems to be screen-reader friendly!&lt;/li&gt;
&lt;li&gt;But it might not work on ChromeVox now. More tests are required to validate this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, let’s talk about &lt;code&gt;pointer-events&lt;/code&gt; because it’s the second most-troublesome thing.&lt;/p&gt;
&lt;h2 id=&quot;pointer-events&quot;&gt;Pointer-events&lt;/h2&gt;
&lt;p&gt;Scott O’Hara pointed out that iOS Voiceover users wouldn’t be able to trigger a click if an element had &lt;code&gt;pointer-events: none&lt;/code&gt;. I tested what Scott said and found it to be true.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Definitely a contextually appropriate solution to hide static text content. But this should be noted as not recommended for visually hiding interactive elements. For instance IOS VoiceOver will not be able to activate a pointer-events none button.&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1120909503585767424?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;This means we can’t use the &lt;code&gt;pointer-events&lt;/code&gt; universally on all elements.&lt;/p&gt;
&lt;p&gt;My next question was: If we can’t use &lt;code&gt;pointer-events&lt;/code&gt;, what if we set &lt;code&gt;z-index&lt;/code&gt; to &lt;code&gt;-999&lt;/code&gt;? This would prevent the hidden element from obscuring clickable elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.hide-accessibly {
  position: absolute !important;
  opacity: 0;
  z-index: -999;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, Scott said we shouldn’t use &lt;code&gt;z-index: -999&lt;/code&gt; on buttons as well, because visually hidden buttons wouldn’t work correctly on iOS Voiceover.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;it should not be used on buttons, as visually hidden buttons also won&amp;#39;t work correctly with iOS VO. It also has the potential to trigger desktop VoiceOver&amp;#39;s reading out of order, as &lt;a href=&quot;https://twitter.com/letrastudio?ref_src=twsrc%5Etfw&quot;&gt;@letrastudio&lt;/a&gt; mentioned, depending on real world styling of the interactive element it&amp;#39;s used w/in&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121016947251064832?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I’ll be honest. I don’t understand why &lt;code&gt;z-index: -999&lt;/code&gt; wouldn’t work correctly with iOS Voiceover, so I don’t have a proper conclusion here. I didn’t test it.&lt;/p&gt;
&lt;h2 id=&quot;macos-voiceover-reading-content-out-of-source-order&quot;&gt;MacOS Voiceover reading content out of source order&lt;/h2&gt;
&lt;p&gt;Scott and João Beleza Freire (@letrastudio mentioned above) pointed out a noteworthy bug where macOS Voiceover read content out of source-order.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Even for static text, VoiceOver can sometimes read hidden content out of order (it tries to follow visual order instead of source order). And sadly this solution isn&amp;#39;t impervious to that issue. Here&amp;#39;s a test: &lt;a href=&quot;https://t.co/sRfZNcmE7r&quot;&gt;https://t.co/sRfZNcmE7r&lt;/a&gt;&lt;/p&gt;&amp;mdash; Letra Studio (@letrastudio) &lt;a href=&quot;https://twitter.com/letrastudio/status/1120970115628130304?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;I did my own test on this, but the bug Joao reported doesn’t seem to happen on my computer, even though we used the same device!&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Huh, that’s weird. I’ve done some more tests, macOS 10.14.4:&lt;br&gt;&lt;br&gt;- Latest Safari and Chrome act the same: fail example 1, correct on 2&lt;br&gt;- Firefox reads 1 correctly and fails on 2!&lt;br&gt;- Safari Tech Preview reads both correctly&lt;br&gt;&lt;br&gt;That’s what I call *finicky*&lt;/p&gt;&amp;mdash; Letra Studio (@letrastudio) &lt;a href=&quot;https://twitter.com/letrastudio/status/1120980475307274240?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Scott O’Hara shared a little more info on when this bug occurs:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;it&amp;#39;s definitely still a bug, as Letra mentioned.&lt;br&gt;&lt;br&gt;It only occurs if you place position absolute content (visually hidden) within focusable elements. &lt;br&gt;&lt;br&gt;Spent way too long trying to tackle that when Joe reported it. His last workaround ended up being the best.&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121005390412562432?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;It turns out, a bunch of experts (including Scott) were already going back-and-forth about this macOS Voiceover bug since 2017. It’s worth reading through the entire &lt;a href=&quot;https://github.com/h5bp/main.css/issues/12&quot;&gt;issue thread&lt;/a&gt; about the problem.&lt;/p&gt;
&lt;p&gt;From what I’ve read, it seems like the problem happens when &lt;code&gt;position: absolute&lt;/code&gt; is used. When you use &lt;code&gt;position: absolute&lt;/code&gt; and you mess around with the CSS positing, it messes with the position of the Voiceover focus-ring, which changes the reading order.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/hide-content-accessibly/focus-ring.png&quot; alt=&quot;An image detailing the experiments done by Joe Watkin on how CSS affects focus rings&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This means ANY solution that there’s a chance that macOS Voiceover screws ANY solution that contains &lt;code&gt;position: absolute&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;😱&lt;/p&gt;
&lt;p&gt;And this whole issue is only Voiceover related. We haven’t considered how &lt;code&gt;position: absolute&lt;/code&gt; can make it weird for other screen readers.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;and that was all just VoiceOver related. nothing in there about how position: absolute can make for awkward announcements when used within interactive elements with PC screen readers...&lt;br&gt;&lt;br&gt;moral of all of this, there is presently no silver bullet to be found here.&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121053472105934849?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;the-solution-in-html-boilerplate&quot;&gt;The solution in HTML Boilerplate&lt;/h2&gt;
&lt;p&gt;Some folks have suggested they use the &lt;code&gt;sr-only&lt;/code&gt; snippet from HTML5 Boilerplate. They felt it’s the best method out there because many experts came together to create this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  /* 1 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, this is the same solution that triggered the &lt;a href=&quot;https://github.com/h5bp/main.css/issues/12&quot;&gt;issue thread&lt;/a&gt; I mentioned above! Experts, like Scott O’Hara, have been working on this since 2017 and there doesn’t seem like THE solution to date.&lt;/p&gt;
&lt;p&gt;The best solution so far was suggested by Joe Watkin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: auto; /* new - was 1px */
    margin: 0; /* new - was -1px */
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    white-space: nowrap; /* 1 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the time of writing, this solution has not been integrated into HTML5 Boilerplate officially. Do take note.&lt;/p&gt;
&lt;p&gt;Again, it’s worth going through the &lt;a href=&quot;https://github.com/h5bp/main.css/issues/12&quot;&gt;conversations in the issue thread&lt;/a&gt; if you nerd out in this field. It’s priceless. (As an aside, I learned that &lt;code&gt;aria-label&lt;/code&gt; is &lt;a href=&quot;https://github.com/h5bp/main.css/issues/12#issuecomment-392156112&quot;&gt;ignored by Google’s and Microsoft’s translators&lt;/a&gt;! 😱).&lt;/p&gt;
&lt;p&gt;Update: Aswin notified me that &lt;code&gt;clip&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/clip&quot; title=&quot;Clip&quot;&gt;is deprecated&lt;/a&gt;. We should use &lt;code&gt;clip-path&lt;/code&gt; instead.  I haven’t tested &lt;code&gt;clip-path&lt;/code&gt; in production yet though.&lt;/p&gt;
&lt;h2 id=&quot;concluding-words&quot;&gt;Concluding words&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;While Joe Watkin’s solution seems to be the best so far, the real answer is it depends.&lt;/strong&gt; Each method we discussed above, in &lt;a href=&quot;https://snook.ca/archives/html_and_css/hiding-content-for-accessibility&quot;&gt;Jonathan’s article&lt;/a&gt;, and elsewhere on the internet has their pros and cons.&lt;/p&gt;
&lt;p&gt;Like Scott mentioned, it’s almost like a situation where you can choose between grid vs flex vs other layout methods. You have to pick the best method depending on the situation (and your knowledge of the weird quirks).&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I look at it like float vs inline-block vs column-count vs flexbox vs grid vs positioning for layout purposes.&lt;br&gt;&lt;br&gt;or display none, visibility hidden, inert, aria-hidden=true, role=presentation, and the hidden attribute for fully hiding content&lt;br&gt;&lt;br&gt;they are all contextually appropriate&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121056096356007937?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;There’s one thing we can do to further clarify things.&lt;/strong&gt; And that’s to compile the pros and cons of each solution we know so far.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-dnt=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;that&amp;#39;s what i tried to do at a high level in my post about this, while leaving out a lot of the techniques that i knew had problems.&lt;br&gt;&lt;br&gt;though per all this, seems there&amp;#39;s a need to go deeper and call out the various pros/cons.&lt;/p&gt;&amp;mdash; Scott O&amp;#39;Hara (@scottohara) &lt;a href=&quot;https://twitter.com/scottohara/status/1121067322477817856?ref_src=twsrc%5Etfw&quot;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Unfortunately, this is something that’s way out of my league right now. If you’d like to step up and participate in the conversation, I’m sure Jonathan, Scott, and many others would love to chat!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript async and await</title>
    <link href="https://zellwk.com/blog/async-await/"/>
    <updated>2019-04-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/async-await/</id>
    <content type="html">&lt;p&gt;Asynchronous JavaScript has never been easy. For a while, we used callbacks. Then, we used promises. And now, we have asynchronous functions.&lt;/p&gt;
&lt;p&gt;Asynchronous functions make it easier to write asynchronous JavaScript, but it comes with its own set of gotchas that makes life hard for beginners.&lt;/p&gt;
&lt;p&gt;In this 2-part series, I want to share everything you need to know about asynchronous functions.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;asynchronous-functions&quot;&gt;Asynchronous functions&lt;/h2&gt;
&lt;p&gt;Asynchronous functions contains the &lt;code&gt;async&lt;/code&gt; keyword. You can use it in a normal function declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;async function functionName (arguments) {
  // Do something asynchronous
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use it in an arrow-function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const functionName = async (arguments) =&amp;gt; {
  // Do something asynchronous
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;asynchronous-functions-always-return-promises&quot;&gt;Asynchronous functions always return promises&lt;/h2&gt;
&lt;p&gt;It doesn’t matter what you &lt;code&gt;return&lt;/code&gt;. The returned value will always be a promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getOne = async _ =&amp;gt; { 
  return 1 
} 

const promise = getOne()
console.log(promise) // Promise 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: You should know what are JavaScript Promises and how to use them before you move on. Otherwise, it’ll start to get confusing. Use &lt;a href=&quot;https://zellwk.com/blog/js-promises/&quot; title=&quot;Promises in JavaScript&quot;&gt;this article&lt;/a&gt; to help you get familiar with JavaScript promises.&lt;/p&gt;
&lt;h2 id=&quot;the-await-keyword&quot;&gt;The await keyword&lt;/h2&gt;
&lt;p&gt;When you call a promise, you handle the next step in a &lt;code&gt;then&lt;/code&gt; call, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getOne = async _ =&amp;gt; { 
  return 1 
} 

getOne()
  .then(value =&amp;gt; {
    console.log(value) // 1
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;await&lt;/code&gt; keyword lets you wait for the promise to resolve. Once the promise is resolved, it returns the parameter passed into the &lt;code&gt;then&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  const one = await getOne()
  console.log(one) // 1
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;return-await&quot;&gt;Return await&lt;/h3&gt;
&lt;p&gt;There’s no need to &lt;code&gt;await&lt;/code&gt; before returning a promise. You can return the promise directly.&lt;/p&gt;
&lt;p&gt;(If you &lt;code&gt;return await&lt;/code&gt; something, you resolve the original promise first. Then, you create a new promise from the resolved value. &lt;code&gt;return await&lt;/code&gt; effectively does nothing. No need for the extra step).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Don&#39;t need to do this 
const test = async _ =&amp;gt; {
  return await getOne()
}

test()
  .then(value =&amp;gt; {
    console.log(value) // 1
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Do this instead
const test = async _ =&amp;gt; {
  return getOne()
}

test()
  .then(value =&amp;gt; {
    console.log(value) // 1
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: If you don’t need &lt;code&gt;await&lt;/code&gt;, you don’t need to use an async function. The example above can be rewritten as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Do this instead
const test = _ =&amp;gt; {
  return getOne()
}

test()
  .then(value =&amp;gt; {
    console.log(value) // 1
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;handling-errors&quot;&gt;Handling errors&lt;/h2&gt;
&lt;p&gt;If a promise results in an error, you handle it with a &lt;code&gt;catch&lt;/code&gt; call, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getOne = async (success = true) =&amp;gt; { 
  if (success) return 1
  throw new Error(&#39;Failure!&#39;)
} 

getOne(false)
  .catch(error =&amp;gt; console.log(error)) // Failure!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to handle an error in an asynchronous function, you need to use a &lt;code&gt;try/catch&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  try {
    const one = await getOne(false)
  } catch (error) {
    console.log(error) // Failure!
  }
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have multiple &lt;code&gt;await&lt;/code&gt; keywords, error handling can become ugly…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  try {
    const one = await getOne(false)
  } catch (error) {
    console.log(error) // Failure!
  }

  try {
    const two = await getTwo(false)
  } catch (error) {
    console.log(error) // Failure!
  }

  try {
    const three = await getThree(false)
  } catch (error) {
    console.log(error) // Failure!
  }
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a better way.&lt;/p&gt;
&lt;p&gt;We know that asynchronous functions always return a promise. When we call a promise, we can handle errors in a &lt;code&gt;catch&lt;/code&gt; call. This means we can handle any errors from our asynchronous function by adding &lt;code&gt;.catch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  const one = await getOne(false)
  const two = await getTwo(false)
  const three = await getThree(false)
}

test()
  .catch(error =&amp;gt; console.log(error)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: The Promise &lt;code&gt;catch&lt;/code&gt; method lets you catch one error only.&lt;/p&gt;
&lt;h2 id=&quot;multiple-awaits&quot;&gt;Multiple awaits&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;await&lt;/code&gt; blocks JavaScript from executing the next line of code until a promise resolves. This may have the unintended consequence of slowing down code execution.&lt;/p&gt;
&lt;p&gt;To show this in action, we need to create a delay before resolving the promise. We can create a delay with a &lt;code&gt;sleep&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const sleep = ms =&amp;gt; {
  return new Promise(resolve =&amp;gt; setTimeout(resolve, ms))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ms&lt;/code&gt; is the number of milliseconds to wait before resolving. If you pass in &lt;code&gt;1000&lt;/code&gt; into &lt;code&gt;sleep&lt;/code&gt;, JavaScript will wait for one second before resolving the promise.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Using Sleep
console.log(&#39;Now&#39;)
sleep(1000)
  .then(v =&amp;gt; { 
    console.log(&#39;After one second&#39;) 
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await/sleep.gif&quot; alt=&quot;Console logs &#39;now&#39; immediately. One second later, it logs &#39;After one second&#39;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Let’s say &lt;code&gt;getOne&lt;/code&gt; takes one second to resolve. To create this delay, we pass &lt;code&gt;1000&lt;/code&gt; (one second) into &lt;code&gt;sleep&lt;/code&gt;. After one second has passed and the &lt;code&gt;sleep&lt;/code&gt; promise resolves, we return the value 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getOne = _ =&amp;gt; {
  return sleep(1000).then(v =&amp;gt; 1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;code&gt;await getOne()&lt;/code&gt;, you’ll see that it takes one second before &lt;code&gt;getOne&lt;/code&gt; resolves.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  console.log(&#39;Now&#39;)

  const one = await getOne()
  console.log(one)
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await/block-1.gif&quot; alt=&quot;Console logs &#39;Now&#39; immediately. After one second, console logs 1&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Now let’s say you need to wait for three promises. Each promise has a one-second delay.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getOne = _ =&amp;gt; {
  return sleep(1000).then(v =&amp;gt; 1)
}

const getTwo = _ =&amp;gt; {
  return sleep(1000).then(v =&amp;gt; 2)
}

const getThree = _ =&amp;gt; {
  return sleep(1000).then(v =&amp;gt; 3)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;code&gt;await&lt;/code&gt; these three promises in a row, you’ll have to wait for three seconds before all three promises get resolved. This is not good because we forced JavaScript to wait two extra seconds before doing what we need to do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  const one = await getOne()
  console.log(one)

  const two = await getTwo()
  console.log(two)

  const three = await getThree()
  console.log(three)

  console.log(&#39;Done&#39;)
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await/block-2.gif&quot; alt=&quot;Console shows &#39;Now&#39; immediately. One second later, it shows 1. Another second later, it shows 2. Another second later, it shows 3 and &#39;Done&#39; at the same time.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If &lt;code&gt;getOne&lt;/code&gt;, &lt;code&gt;getTwo&lt;/code&gt; and &lt;code&gt;getThree&lt;/code&gt; can be fetched simultaneously, you’ll save two seconds. You can fetch these three promises at the same time with &lt;code&gt;Promise.all&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the three promises&lt;/li&gt;
&lt;li&gt;Add all three promises into an array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; the array of promises with &lt;code&gt;Promise.all&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const test = async _ =&amp;gt; {
  const promises = [getOne(), getTwo(), getThree()]
  console.log(&#39;Now&#39;)

  const [one, two, three] = await Promise.all(promises)
  console.log(one)
  console.log(two)
  console.log(three)

  console.log(&#39;Done&#39;)
}

test()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/async-await/block-3.gif&quot; alt=&quot;Console shows &#39;Now&#39; immediately. After one second, console shows 1, 2, 3, and &#39;Done&#39;.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;That’s all you need to know about basic asynchronous functions! I hope this article clears things up for you.&lt;/p&gt;
&lt;p&gt;Note: This article is a modified excerpt from &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;. If you find this article useful, you might want to check it out.&lt;/p&gt;
&lt;p&gt;Next up, we’re going to look at asynchronous functions and its behavior in loops.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Publishing packages that can be used in browsers and Node</title>
    <link href="https://zellwk.com/blog/publishing-npm-packages-that-can-be-used-in-browsers-and-node/"/>
    <updated>2019-04-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/publishing-npm-packages-that-can-be-used-in-browsers-and-node/</id>
    <content type="html">&lt;p&gt;When you create a package for others to use, you have to consider where your user will use your package. Will they use it in a browser-based environment (or frontend JavaScript)? Will they use it in Node (or backend JavaScript)? Or both?&lt;/p&gt;
&lt;p&gt;If you want to create a package that’s usable in both browsers and Node, this article is here to help.&lt;/p&gt;
&lt;p&gt;You’ll learn:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to write packages for use in browsers&lt;/li&gt;
&lt;li&gt;How to write packages for use in Node&lt;/li&gt;
&lt;li&gt;How to publish your packages for use in both browsers and Node&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;writing-a-package-for-use-in-browsers&quot;&gt;Writing a package for use in browsers&lt;/h2&gt;
&lt;p&gt;If you want to include a library in frontend JavaScript, you have to link the library first with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. You can use the library anytime after you link it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;link-to-jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
  // You can use jQuery anytime after you link to it
  console.log(jQuery)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works because JavaScript in browsers shares one global scope. It doesn’t matter how many JavaScript files you link to. They behave as if they’re one big JavaScript file.&lt;/p&gt;
&lt;p&gt;With this information, we can begin writing a library for use in the frontend world.&lt;/p&gt;
&lt;p&gt;Let’s say you want to create a library called &lt;code&gt;peachBlossom&lt;/code&gt;. &lt;code&gt;peachBlossom&lt;/code&gt; has a &lt;code&gt;bloom&lt;/code&gt; function. You write this &lt;code&gt;bloom&lt;/code&gt; function in a separate JavaScript file, &lt;code&gt;peach-blossom.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// peach-blossom.js
function bloom () {
  console.log(&#39;Bloom!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can include &lt;code&gt;peachBlossom&lt;/code&gt; in your frontend JavaScript by linking to the &lt;code&gt;peach-blossom.js&lt;/code&gt; file. Once you do this, you can use &lt;code&gt;bloom&lt;/code&gt; anywhere.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;peach-blossom.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// main.js
bloom() // Bloom!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Libraries usually have more than one piece of code. We don’t want to pollute the global scope with little variables. What we can do is wrap the functions we want to expose in an immediately-invoked function expression (IIFE).&lt;/p&gt;
&lt;p&gt;This means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create a function and run it immediately&lt;/li&gt;
&lt;li&gt;We return the library from within the function so we can use the library later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In code, it looks somewhat like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// peach-blossom.js 
const peachBlossom = (function () {
  // Write as much code as you want here

  // Return what others can use
  return {
    bloom: function () {
      console.log(&#39;Bloom!&#39;)
    }
  }
})()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then use &lt;code&gt;bloom&lt;/code&gt; anywhere by writing &lt;code&gt;peachBlossom.bloom&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// main.js
peachBlossom.bloom() // Bloom!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the basics of writing a frontend library.&lt;/p&gt;
&lt;p&gt;Now, let’s talk about writing a library for Node.&lt;/p&gt;
&lt;h2 id=&quot;writing-a-package-for-node&quot;&gt;Writing a package for Node&lt;/h2&gt;
&lt;p&gt;Adding a library to Node is different from adding a library to browsers. This is because Node doesn’t have HTML files and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Let’s make sure you know how to run Node before we begin writing a library for Node.&lt;/p&gt;
&lt;h3 id=&quot;running-node&quot;&gt;Running Node&lt;/h3&gt;
&lt;p&gt;First, you need to make sure you have Node installed on your computer. You can install Node from &lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;Node&quot;&gt;Node’s website&lt;/a&gt; if you don’t have it installed already.&lt;/p&gt;
&lt;p&gt;Once you have Node installed, you’ll want to create a folder to store your Node project. In this case, let’s call it “node-project”.&lt;/p&gt;
&lt;p&gt;The command to create a folder is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir node-project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you need to navigate to the &lt;code&gt;node-project&lt;/code&gt; directory. You can do it with &lt;code&gt;cd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd node-project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re having problems with the command line, you can use &lt;a href=&quot;https://zellwk.com/blog/fear-of-command-line/&quot; title=&quot;Overcoming your fear of the command line&quot;&gt;this guide&lt;/a&gt; to help you out.&lt;/p&gt;
&lt;p&gt;Next, we want to create a file. This will be a JavaScript file. (We will run Node on this file). Let’s call it &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/node-project.png&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt;, we’re going to write a &lt;code&gt;console.log&lt;/code&gt; statement. This is for us to know if we run the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js
console.log(&#39;Running index.js!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you can use &lt;code&gt;node&lt;/code&gt; to run &lt;code&gt;index.js&lt;/code&gt;. Here’s the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you run &lt;code&gt;index.js&lt;/code&gt;, you should see the &lt;code&gt;console.log&lt;/code&gt; in the terminal. That’s how we know the file has ran.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/run-node.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;adding-libraries-to-node&quot;&gt;Adding libraries to Node&lt;/h3&gt;
&lt;p&gt;To add libraries to Node, you have to use the &lt;code&gt;require&lt;/code&gt; statement. Once you add a library, you can use the library anywhere in the same JavaScript file.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fs = require(&#39;fs&#39;)
console.log(fs)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/log-fs.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;When you use &lt;code&gt;require&lt;/code&gt;, Node looks for the library you specified in three places:&lt;/p&gt;
&lt;p&gt;First, it checks whether the library is built into Node. In this example, &lt;code&gt;fs&lt;/code&gt; is built directly into Node. You can use &lt;code&gt;fs&lt;/code&gt; anytime if you use Node.&lt;/p&gt;
&lt;p&gt;Second, it checks whether the library exists in the &lt;code&gt;node_modules&lt;/code&gt; folder. These are user-installed libraries. You can add a library to the &lt;code&gt;node_modules&lt;/code&gt; folder by running &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example where we install &lt;code&gt;express&lt;/code&gt;, then require express in Node:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Run this in the command line
npm install express
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Index.js 
const express = require(&#39;express&#39;)
console.log(express)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/log-express.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Third, if you add &lt;code&gt;./&lt;/code&gt; to &lt;code&gt;require&lt;/code&gt;, Node will look for a file located in the current directory. This is where we can begin writing the &lt;code&gt;peach-blossom&lt;/code&gt; library.&lt;/p&gt;
&lt;h3 id=&quot;writing-your-first-library-for-node&quot;&gt;Writing your first library for Node&lt;/h3&gt;
&lt;p&gt;Let’s start by creating a &lt;code&gt;peach-blossom.js&lt;/code&gt; file. This file should be in the same directory as &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;touch peach-blossom.js
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/node-peach-blossom.png&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;We can add &lt;code&gt;peach-blossom.js&lt;/code&gt; to &lt;code&gt;index.js&lt;/code&gt; by using &lt;code&gt;require&lt;/code&gt;. Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const peachBlossom = require(&#39;./peach-blossom&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Node, there’s no concept of a shared global scope. Each file has its own scope. So, if you write &lt;code&gt;peach-blossom.js&lt;/code&gt; as if it’s used for frontend JavaScript, you won’t be able to use it. You’ll get an error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// peach-blossom.js 
const peachBlossom = (function () {
  // Write as much code as you want here

  // Return what others can use
  return {
    bloom: function () {
      console.log(&#39;Bloom!&#39;)
    }
  }
})()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js 
const peachBlossom = require(&#39;./peach-blossom&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/authoring-packages/node-peach-blossom-error.png&quot; alt=&quot;&quot;&gt;&lt;figcaption&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;To pass variables from one file to another in Node, you have to write &lt;code&gt;module.exports&lt;/code&gt;. Variables passed to &lt;code&gt;module.exports&lt;/code&gt; can be retrieved from another file.&lt;/p&gt;
&lt;p&gt;This means we must write &lt;code&gt;module.exports&lt;/code&gt; in &lt;code&gt;peach-blossom.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Write as much code as you want here 
const peachBlossom = {
  bloom () {
    console.log(&#39;Bloom!&#39;)
  }
}

// Exports peachBlossom for use in other files
module.exports = peachBlossom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have exported &lt;code&gt;peachBlossom&lt;/code&gt;, we can use it in other files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// index.js 
const peachBlossom = require(&#39;./peach-blossom&#39;)
peachBlossom.bloom() // Bloom!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This format of passing variables around in Node with &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; is called &lt;strong&gt;CommonJS&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;publishing-your-library-as-an-npm-package&quot;&gt;Publishing your library as an npm package&lt;/h3&gt;
&lt;p&gt;In short, to make your module work in Node, you have to export a variable with &lt;code&gt;module.exports&lt;/code&gt;. Other people can then &lt;code&gt;require&lt;/code&gt; this module in their code.&lt;/p&gt;
&lt;p&gt;At this point, you can move &lt;code&gt;peach-blossom&lt;/code&gt; into a separate project folder and publish it as an npm package. You can use &lt;a href=&quot;https://zellwk.com/blog/publish-to-npm/&quot; title=&quot;How to publish packages to npm (the way the industry does things)&quot;&gt;this guide&lt;/a&gt; to find out more about publishing the process.&lt;/p&gt;
&lt;h2 id=&quot;writing-modules-that-are-usable-in-both-frontend-and-backend-javascript&quot;&gt;Writing modules that are usable in both frontend and backend JavaScript&lt;/h2&gt;
&lt;p&gt;Let’s take a moment to reconcile what we know.&lt;/p&gt;
&lt;p&gt;To write a library for the frontend, we need to declare it as a variable. As much as possible, we want to expose one variable only.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const peachBlossom = (function () {
  // Write as much code as you want here

  // Return what others can use
  return {
    bloom: function () {
      console.log(&#39;Bloom!&#39;)
    }
  }
})()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To write a library for the Node, we need to export the variable with &lt;code&gt;module.exports&lt;/code&gt;. Here, we only expose one variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Write as much code as you want here 
const peachBlossom = {
  bloom () {
    console.log(&#39;Bloom!&#39;)
  }
}

// Exports peachBlossom for use in other files
module.exports = peachBlossom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But these are two completely different formats! How can we write a library once and use it in both contexts?&lt;/p&gt;
&lt;p&gt;Enter UMD.&lt;/p&gt;
&lt;h3 id=&quot;umd&quot;&gt;UMD&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/umdjs/umd&quot; title=&quot;UMD&quot;&gt;UMD (Universal Module Definition)&lt;/a&gt; is a block of code we can use to wrap around our library. This block of code makes it possible to use a library both on the frontend and in Node.&lt;/p&gt;
&lt;p&gt;It kinda looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;(function (root, factory) {
    if (typeof define === &#39;function&#39; &amp;amp;&amp;amp; define.amd) {
        // AMD. Register as an anonymous module.
        define([&#39;b&#39;], factory);
    } else if (typeof module === &#39;object&#39; &amp;amp;&amp;amp; module.exports) {
        // Node.
        module.exports = factory(require(&#39;b&#39;));
    } else {
        // Browser globals (root is window)
        root.returnExports = factory(root.b);
    }
}(typeof self !== &#39;undefined&#39; ? self : this, function (b) {
    // Use b in some fashion.

    // Just return a value to define the module export.
    // This example returns an object, but the module
    // can return a function as the exported value.
    return {};
}));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whoa! This is confusing! Hold up!&lt;/p&gt;
&lt;p&gt;In practice, we don’t have to know how to UMD-ify our code by ourselves. Many tools, like Webpack and Parcel, gives us the ability to UMD-ify our code through them.&lt;/p&gt;
&lt;p&gt;Here are some examples (and their relevant setup instructions):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eduardolundgren/gulp-umd&quot;&gt;Gulp-umd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/guides/author-libraries/&quot;&gt;Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://parceljs.org/cli.html#expose-modules-as-umd&quot;&gt;Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rollupjs.org/guide/en&quot;&gt;Rollup&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This, means you have to set up these tools if you want to write packages that can be used for both Frontend JavaScript and in Node. Yes, it complicates the authoring process, but there’s nothing much we can do about it at this point.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;If you want your library to work both on Frontend JavaScript and in Node, you need to wrap your module with UMD (Universal Module Definition).&lt;/p&gt;
&lt;p&gt;If you want to UMD-ify your code, you need to use a build tool when you author your package. This makes the authoring process more complicated. But the tradeoff can be worth it for providing users with an option to use your library anywhere.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to ignore files from your npm package</title>
    <link href="https://zellwk.com/blog/ignoring-files-from-npm-package/"/>
    <updated>2019-04-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/ignoring-files-from-npm-package/</id>
    <content type="html">&lt;p&gt;You can decide what files people get when they download your package in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;With the &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;With the &lt;code&gt;.npmignore&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;With the &lt;code&gt;files&lt;/code&gt; property&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll look at each method and discuss which methods you should (or shouldn’t) be using.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;excluding-files-with-gitignore&quot;&gt;Excluding files with gitignore&lt;/h2&gt;
&lt;p&gt;First, npm will check your repository for a &lt;code&gt;.gitignore&lt;/code&gt; file. If there is a &lt;code&gt;.gitignore&lt;/code&gt; file, npm will ignore files according to what’s listed in the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;This is the most common way package authors prevent people from downloading extra files.&lt;/p&gt;
&lt;p&gt;Let’s go through a simple example. Say you have the following directory structure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- project-name/
  |- index.js 
  |- package.json
  |- node_modules/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you don’t want people to download the &lt;code&gt;node_modules&lt;/code&gt; folder. You also don’t want to save the &lt;code&gt;node_modules&lt;/code&gt; in the Git repository.&lt;/p&gt;
&lt;p&gt;What you’ll do is create a &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .gitignore 
node_modules 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, both Git and npm ignore the &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2 id=&quot;blacklisting-files-with-npmignore&quot;&gt;Blacklisting files with npmignore&lt;/h2&gt;
&lt;p&gt;A second way is to blacklist files with a &lt;code&gt;.npmignore&lt;/code&gt; file. The &lt;code&gt;.npmignore&lt;/code&gt; file works the same way as a &lt;code&gt;.gitignore&lt;/code&gt; file. If a file is listed in the &lt;code&gt;.npmignore&lt;/code&gt; file, the file will be excluded from the package.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; If you have a &lt;code&gt;.npmignore&lt;/code&gt; file, npm will use the &lt;code&gt;.npmignore&lt;/code&gt; file. &lt;strong&gt;npm will ignore the &lt;code&gt;.gitignore&lt;/code&gt; file&lt;/strong&gt; altogether. (Many developers mistakenly believe npm will use both &lt;code&gt;.npmignore&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; files. Don’t make the same mistake!).&lt;/p&gt;
&lt;p&gt;You can use this method if you want to exclude files from the package, but keep them in the Git repository.&lt;/p&gt;
&lt;p&gt;Let’s walk through another example. Let’s say you’ve written tests for your package and you put them all in a &lt;code&gt;tests&lt;/code&gt; folder.  This is your directory structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- project-name/
  |- index.js 
  |- package.json
  |- node_modules/
  |- tests/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You want to exclude &lt;code&gt;node_modules&lt;/code&gt; from both your Git repository and your package.&lt;/p&gt;
&lt;p&gt;You want to include &lt;code&gt;tests&lt;/code&gt; in your Git repository, but exclude it from the package.&lt;/p&gt;
&lt;p&gt;If you opt for the &lt;code&gt;npmignore&lt;/code&gt; file method, you can write these in your &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;.npmignore&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .gitignore 
node_modules
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# .npmignore
node_modules
tests
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;whitelisting-files-with-the-files-property&quot;&gt;Whitelisting files with the files property&lt;/h2&gt;
&lt;p&gt;A third method is to &lt;strong&gt;whitelist&lt;/strong&gt; files you want to be &lt;strong&gt;included&lt;/strong&gt; in the &lt;code&gt;package.json&lt;/code&gt; file, under the &lt;code&gt;files&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Note: npm will prioritize this method over other methods mentioned above. This is the easiest method to limit what files others download.&lt;/p&gt;
&lt;p&gt;This approach is pretty simple. What you need is to create a &lt;code&gt;files&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; file. Then, provide a list of files you’d like to include.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;{
  &amp;quot;files&amp;quot;: [
    &amp;quot;index.js&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: Some files, like &lt;code&gt;package.json&lt;/code&gt;, is &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;always included&lt;/a&gt; in a package. You don’t have to write these files in the &lt;code&gt;files&lt;/code&gt; property.&lt;/p&gt;
&lt;h2 id=&quot;which-method-to-use%3F&quot;&gt;Which method to use?&lt;/h2&gt;
&lt;p&gt;All three methods work. Pick the one you’re most comfortable with. For simple projects, the &lt;code&gt;.gitignore&lt;/code&gt; file method should suffice.&lt;/p&gt;
&lt;p&gt;If your project is more advanced, you might want to blacklist files with &lt;code&gt;.npmignore&lt;/code&gt; or whitelist files with the &lt;code&gt;files&lt;/code&gt; property. Pick one. There’s no need for both.&lt;/p&gt;
&lt;h2 id=&quot;a-quick-tip&quot;&gt;A quick tip&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;npm pack&lt;/code&gt; to generate a package. This package includes files other people will get.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm pack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try it!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The best time to npm init</title>
    <link href="https://zellwk.com/blog/best-time-to-npm-init/"/>
    <updated>2019-03-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/best-time-to-npm-init/</id>
    <content type="html">&lt;p&gt;When should you &lt;code&gt;npm init&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Most developers run &lt;code&gt;npm init&lt;/code&gt; right after creating and navigating into a new project.&lt;/p&gt;
&lt;p&gt;It makes sense to &lt;code&gt;npm init&lt;/code&gt; at the start of the project because we use npm to download dependencies. Once we &lt;code&gt;npm init&lt;/code&gt;, we can begin downloading (and saving) our dependencies.&lt;/p&gt;
&lt;p&gt;For most projects, this workflow works.&lt;/p&gt;
&lt;p&gt;But if you’re creating an open source project, the best time to &lt;code&gt;npm init&lt;/code&gt; is slightly later. If you &lt;code&gt;npm init&lt;/code&gt; right after creating and navigating into the project, you’ll miss out a few things.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-best-time-to-npm-init&quot;&gt;The best time to npm init&lt;/h2&gt;
&lt;p&gt;The best time to &lt;code&gt;npm init&lt;/code&gt; (for an open source project) is after you added a Git remote to your project. In other words, you should only &lt;code&gt;npm init&lt;/code&gt; after you have completed the following commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you &lt;code&gt;npm init&lt;/code&gt; after you have added a Git remote, npm will generate three extra things in your &lt;code&gt;package.json&lt;/code&gt; files. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;repository&lt;/code&gt; property with a link to your remote repo&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;bugs&lt;/code&gt; property with a link to the issues page.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;homepage&lt;/code&gt; property that links to the &lt;code&gt;readme.md&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/npm-init/extras.png&quot; alt=&quot;package.json that shows a &#39;repository&#39; property, a &#39;bugs&#39; property and a &#39;homepage&#39; property&quot;&gt;&lt;/figure&gt;
&lt;p&gt;These three properties will be displayed as metadata on the right side of the project’s npm page.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/npm-init/npm-page.png&quot; alt=&quot;Metadata showing up on npm page. &quot;&gt;&lt;/figure&gt;
&lt;p&gt;These metadata are links. They let people move to your project’s Github page easily from the npm page. You’ll want these links for better discoverability.&lt;/p&gt;
&lt;h2 id=&quot;the-second-best-time-to-npm-init&quot;&gt;The second best time to npm init&lt;/h2&gt;
&lt;p&gt;The second best time to npm init is now. If you run &lt;code&gt;npm init&lt;/code&gt; now, it will generate the three properties I mentioned above.&lt;/p&gt;
&lt;p&gt;Before you run &lt;code&gt;npm init&lt;/code&gt;, make sure you rename your original &lt;code&gt;package.json&lt;/code&gt; file to something else. This way, you can copy-paste dependencies and other changes you’ve made from the  original &lt;code&gt;package.json&lt;/code&gt; file to the newly generated one.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;The best time to &lt;code&gt;npm init&lt;/code&gt; is after you’ve added a Git remote to your project. The second best time? Anytime!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to publish packages to npm (the way the industry does things)</title>
    <link href="https://zellwk.com/blog/publish-to-npm/"/>
    <updated>2019-03-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/publish-to-npm/</id>
    <content type="html">&lt;p&gt;It’s simple to publish a package onto npm. There are two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create your package.&lt;/li&gt;
&lt;li&gt;Publish the package.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But publishing packages the way the industry does it? Not so simple. There are more steps. We’ll go through what steps are required, and I’ll show you an easy way to publish and update your package.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;creating-your-first-package&quot;&gt;Creating your first package&lt;/h2&gt;
&lt;p&gt;This section is for you if you haven’t published a package to npm before. Feel free to skip to the next section if you’ve published one before.&lt;/p&gt;
&lt;p&gt;To publish your first package to npm, you need to go through these steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, you need to have an npm account&lt;/strong&gt;. Create one &lt;a href=&quot;https://www.npmjs.com/signup&quot;&gt;here&lt;/a&gt; if you don’t have one yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, you need to login to your npm account through the command line&lt;/strong&gt;. (You need to have Node and npm installed on your system before you perform this step. Install them &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To sign in, you use &lt;code&gt;npm login&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm login
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll be prompted to enter your username, password, and email address.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/npm-login.png&quot; alt=&quot;Logging into npm via the command line&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Third, you need to create a package&lt;/strong&gt;. To do so, create a folder somewhere on your computer and navigate to it. The command line version is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Creating a folder named how-to-publish-to-npm
mkdir how-to-publish-to-npm

# Navigating into the folder
cd how-to-publish-to-npm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you want to begin the project with the &lt;code&gt;npm init&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command runs you through a few questions and creates a &lt;code&gt;package.json&lt;/code&gt; file for you at the end. This &lt;code&gt;package.json&lt;/code&gt; file contains the bare necessities you need to publish your project. (Feel free to skip questions that don’t make sense).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/npm-init.png&quot; alt=&quot;Image of the npm init command&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;The final step is to publish your package&lt;/strong&gt; with the &lt;code&gt;npm publish&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the package already exists on npm (because your package has the same name as another package on npm), you won’t be able to publish it. You’ll get an error.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/npm-publish-error.png&quot; alt=&quot;&quot;&gt;&lt;/figure&gt;
&lt;p&gt;You’ll need to change your package name.&lt;/p&gt;
&lt;p&gt;To change your package name, you change the &lt;code&gt;name&lt;/code&gt; property in the &lt;code&gt;package.json&lt;/code&gt; file. Here, I changed it to &lt;code&gt;publishing-to-npm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(You can check for naming collisions by doing a search on npm, or through the &lt;code&gt;npm search&lt;/code&gt; command).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/renaming.png&quot; alt=&quot;Changed name property to publishing-to-npm&quot;&gt;&lt;/figure&gt;
&lt;p&gt;It’s also a good idea to update the folder name as well for consistency. Here’s the command line equivalent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Command to change folder names by moving everything
mv how-to-publish-to-npm publishing-to-npm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try the &lt;code&gt;publish&lt;/code&gt; command again. You should get a success message now.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/npm-publish.png&quot; alt=&quot;Successfully published to npm&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;what-to-do-if-every-name-you-came-up-with-is-taken-up-already&quot;&gt;What to do if every name you came up with is taken up already&lt;/h3&gt;
&lt;p&gt;This is a common problem since many people create packages on npm. It’s difficult to get the package name you desire sometimes. (It’s like how I can &lt;em&gt;never&lt;/em&gt; find a good &lt;code&gt;.com&lt;/code&gt; domain).&lt;/p&gt;
&lt;p&gt;To combat against this problem, npm lets you publish to a scope.   This means you can publish the package under your own username (or npm organization), so you’re free from naming problems.&lt;/p&gt;
&lt;p&gt;To publish to a scope, you can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change the &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;@username/package-name&lt;/code&gt; manually in  &lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm init --scope=username&lt;/code&gt; instead of &lt;code&gt;npm init&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your repository has a scope, you need to adjust the publish command slightly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;npm publish --access public
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to do to publish a package to npm.&lt;/p&gt;
&lt;p&gt;Now, let’s move on to how the industry does publishes packages.&lt;/p&gt;
&lt;h2 id=&quot;the-way-the-industry-publishes-(and-updates)-packages.&quot;&gt;The way the industry publishes (and updates) packages.&lt;/h2&gt;
&lt;p&gt;Consider a popular framework like React. If you dig around React, you’ll notice a few things:&lt;/p&gt;
&lt;p&gt;First, React has a &lt;a href=&quot;https://github.com/facebook/react&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, React is &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;published on&lt;/a&gt; npm.&lt;/p&gt;
&lt;p&gt;Third, React follows &lt;a href=&quot;https://zellwk.com/blog/semantic-versioning/&quot;&gt;Semantic versioning&lt;/a&gt; (Semver for short).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/semver.png&quot; alt=&quot;npm packages follows Semver&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Fourth, each update to React has a git tag associated with it. This git tag follows Semver as well.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/git-tag.png&quot; alt=&quot;Each git tag is follows Semver&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Fifth, there are &lt;a href=&quot;https://github.com/facebook/react/releases&quot;&gt;release notes&lt;/a&gt; for every React update.&lt;/p&gt;
&lt;p&gt;This means publishing a package involves many steps. At the very least, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run tests (if there are any)&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;version&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; according to Semver&lt;/li&gt;
&lt;li&gt;Create a git tag according to Semver&lt;/li&gt;
&lt;li&gt;Push the package to Github&lt;/li&gt;
&lt;li&gt;Push the package to npm&lt;/li&gt;
&lt;li&gt;Create release notes for every update&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s common to forget one of these things when we’re ready to push. Sometimes we &lt;code&gt;npm publish&lt;/code&gt; and we enjoy a break. When we’re back, we screw ourselves for forgetting.&lt;/p&gt;
&lt;p&gt;There’s an easier way. It’s with a tool called &lt;code&gt;np&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;np&quot;&gt;np&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sindresorhus/np&quot;&gt;np&lt;/a&gt; (created by &lt;a href=&quot;https://github.com/sindresorhus&quot;&gt;Sindre Sorhus&lt;/a&gt;) makes it easier for us to publish packages without missing any of the steps I detailed above.&lt;/p&gt;
&lt;h3 id=&quot;installing-np&quot;&gt;Installing np&lt;/h3&gt;
&lt;p&gt;To install &lt;code&gt;np&lt;/code&gt;, you can run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;npm install np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works. But I prefer installing &lt;code&gt;np&lt;/code&gt; globally on my computer so I can run the &lt;code&gt;np&lt;/code&gt; command anywhere.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;sudo npm install --global np
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;before-using-np&quot;&gt;Before using np&lt;/h3&gt;
&lt;p&gt;Before you use &lt;code&gt;np&lt;/code&gt; you need to make sure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your project is a Git repository&lt;/li&gt;
&lt;li&gt;It needs to have a remote&lt;/li&gt;
&lt;li&gt;You must have pushed to the remote at least once.&lt;/li&gt;
&lt;li&gt;You also need to make sure your working directory is clean.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Initialize Git
git init

# Adds a remote repository
git remote add origin some-url

# Commit changes
git add .
git commit -m &amp;quot;Initial Commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your project is not a Git repository, you’ll get this error:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-error-no-git.png&quot; alt=&quot;np&#39;s error if project is not a Git repository&quot;&gt;&lt;figcaption&gt;np&#39;s error if project is not a Git repository&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If your project doesn’t have remote, you’ll get this error (at a later part of the checks).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-error-no-remote.png&quot; alt=&quot;np&#39;s error if project does not have a remote&quot;&gt;&lt;figcaption&gt;np&#39;s error if project does not have a remote. This error happens later in the process&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If your working directory is dirty, you’ll get this error:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-error-dirty.png&quot; alt=&quot;np&#39;s error working directory is dirty&quot;&gt;&lt;figcaption&gt;np&#39;s error working directory is dirty&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;If you haven’t pushed to the Git remote at least once, &lt;code&gt;np&lt;/code&gt; will just hang and do nothing.&lt;/p&gt;
&lt;h3 id=&quot;using-npm&quot;&gt;Using npm&lt;/h3&gt;
&lt;p&gt;To use &lt;code&gt;np&lt;/code&gt;, you run the &lt;code&gt;np&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;np&lt;/code&gt; will prompt you to enter a Semver number.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np.png&quot; alt=&quot;np prompts the user for a Semver number&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Choose a number and &lt;code&gt;np&lt;/code&gt; will ask you to confirm your choice.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-confirm.png&quot; alt=&quot;np prompts a confirmation of the chosen Semver number&quot;&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;np&lt;/code&gt; then does the rest of the publishing stuff for you.&lt;/p&gt;
&lt;h3 id=&quot;error-with-running-tests&quot;&gt;Error with running tests&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;np&lt;/code&gt; runs the &lt;code&gt;npm test&lt;/code&gt; command as part of its checks.&lt;/p&gt;
&lt;p&gt;If you followed the tutorial up to this point, you would get an error that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-test-error.png&quot; alt=&quot;An error with running tests&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This happens because our &lt;code&gt;npm test&lt;/code&gt; command results in an error. You can try it yourself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm test
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/npm-test-error.png&quot; alt=&quot;npm test results in an error&quot;&gt;&lt;/figure&gt;
&lt;p&gt;To fix this error, we need to change the &lt;code&gt;test&lt;/code&gt; script in &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Right now it looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change it to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;No test specified\&amp;quot;&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This change works because &lt;code&gt;exit 1&lt;/code&gt; creates an error.&lt;/p&gt;
&lt;p&gt;With this change, &lt;code&gt;np&lt;/code&gt; should complete the publishing process. (Remember to commit the change before running &lt;code&gt;np&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-process.png&quot; alt=&quot;The np publishing process&quot;&gt;&lt;/figure&gt;
&lt;p&gt;At the end of the process, &lt;code&gt;np&lt;/code&gt; launches a browser window for you to write your release notes.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/publish-to-npm/np-release.png&quot; alt=&quot;Writing release notes&quot;&gt;&lt;/figure&gt;
&lt;p&gt;In short, &lt;code&gt;np&lt;/code&gt; makes publishing packages much simpler!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use JSDelivr</title>
    <link href="https://zellwk.com/blog/jsdelivr/"/>
    <updated>2019-03-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/jsdelivr/</id>
    <content type="html">&lt;p&gt;The most newbie-friendly way to add a library to a project is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search for the library&lt;/li&gt;
&lt;li&gt;Look for the source file&lt;/li&gt;
&lt;li&gt;Copy the source file&lt;/li&gt;
&lt;li&gt;Paste what you copied into the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This works, but it’s a painful process. It easier if you use CDNs like JSDelivr.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-is-a-cdn&quot;&gt;What is a CDN&lt;/h2&gt;
&lt;p&gt;CDN stands for content delivery network. Its main purpose is to let users download files faster. Read &lt;a href=&quot;https://www.fastly.com/blog/why-you-should-use-content-delivery-network&quot;&gt;this article&lt;/a&gt; by Fastly if you’re wondering whether you should use a CDN.&lt;/p&gt;
&lt;p&gt;CDNS let users download files faster by placing datacenters all over the world. When the browser sees a CDN link, they’ll serve up the library from the datacenter closest to the user. This is how CDNs work.&lt;/p&gt;
&lt;h2 id=&quot;what-is-jsdelivr&quot;&gt;What is JSDelivr&lt;/h2&gt;
&lt;p&gt;JSDelivr is a special kind of CDN. It’s built to let users download JavaScript libraries that are hosted on npm and Github. (You can also load Wordpress plugins if they’re hosted on Wordpress.org).&lt;/p&gt;
&lt;p&gt;If you use JSDelivr (or any other CDN that serves JavaScript libraries), you don’t need to copy-paste the source files into your project. You can use a link like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/package-name&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JSDelivr lets you specify the version of a library you want to download. If you want to specify a version, you add the version number after an &lt;code&gt;@&lt;/code&gt;, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/package-name@version&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;how-i-use-jsdelivr&quot;&gt;How I use JSDelivr&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I use JSDelivr more like a package manager&lt;/strong&gt; since JSDelivr lets you specify the version of a library. I can upgrade or downgrade the library by changing a number. There’s no need to copy-paste the original source into my project.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;I rarely use JSDelivr nowadays&lt;/strong&gt; because I already have a build process that uses Webpack. Webpack lets you &lt;code&gt;require&lt;/code&gt; libraries into frontend JavaScript. It lets you use npm as a package manager.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I only use JSDelivr for projects that:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Require a library&lt;/li&gt;
&lt;li&gt;The library exists on JSDelivr (or other CDNs)&lt;/li&gt;
&lt;li&gt;The project doesn’t have Webpack (or similar tools installed)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One example of such a project is the 20 components in &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s why.&lt;/p&gt;
&lt;p&gt;Students who’re enrolled in Learn JavaScript are trying to learn JavaScript. I don’t want to distract them by making them learn Webpack.&lt;/p&gt;
&lt;p&gt;Instead, I want to help them focus on what they’re here for—learning JavaScript. I do this by removing complexity from projects we build together. I strip everything down to plain old HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-jsdelivr&quot;&gt;How to use JSDelivr&lt;/h2&gt;
&lt;p&gt;We’ve talked about what is JSDelivr, why use it, and when to use it. Let’s dive into the details of using it now.&lt;/p&gt;
&lt;p&gt;For the rest of the article, we’ll use a library called &lt;a href=&quot;https://github.com/zellwk/zl-fetch&quot;&gt;zl-fetch&lt;/a&gt; as an example.&lt;/p&gt;
&lt;h3 id=&quot;installing-a-library&quot;&gt;Installing a library&lt;/h3&gt;
&lt;p&gt;To install a library, you need to add a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that points to the library on JSDelivr. You can load the library from npm or Github, depending on your preferences.&lt;/p&gt;
&lt;p&gt;I tend to load libraries from npm.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/package-name&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to change &lt;code&gt;package-name&lt;/code&gt; to the name of the library you’re installing. In this case, it’s &lt;code&gt;zl-fetch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/zl-fetch&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re unsure of the name of the library, you can search on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, or directly on &lt;a href=&quot;https://www.jsdelivr.com/&quot;&gt;JSDelivr&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jsdelivr/search-jsdelivr.png&quot; alt=&quot;Search bar on JSDelivr&quot;&gt;&lt;/figure&gt;
&lt;h3 id=&quot;specifying-a-version&quot;&gt;Specifying a version&lt;/h3&gt;
&lt;p&gt;By default, JSDelivr downloads the latest version of a library.&lt;/p&gt;
&lt;p&gt;I don’t recommend you use the latest version because authors may update their library. If they update their library, your code may break.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You always want to specify a version number.&lt;/strong&gt; You can add a version number by add &lt;code&gt;@&lt;/code&gt;, followed by the version number after the package name, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/package-name@version&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Version numbers follow a &lt;a href=&quot;https://zellwk.com/blog/semantic-versioning/&quot;&gt;Semver&lt;/a&gt; format.&lt;/strong&gt; You can tell what versions are available by checking the available tags on Github.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jsdelivr/tags.png&quot; alt=&quot;Tags on Github&quot;&gt;&lt;/figure&gt;
&lt;p&gt;In our case, the current version of &lt;code&gt;zl-fetch&lt;/code&gt; is &lt;code&gt;2.1.9&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/zl-fetch@2.1.9&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;loading-a-specific-file&quot;&gt;Loading a specific file&lt;/h3&gt;
&lt;p&gt;JSDelivr relies on authors to specify a default file for the above format to work. &lt;strong&gt;If the default file is not specified, you need to point to the correct file.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/package-name@version/path-to-file&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two ways to know what files are available.&lt;/p&gt;
&lt;p&gt;First, you can search for the package on JSDelivr. You’ll see a list of files and folders you can point to:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/jsdelivr/files.png&quot; alt=&quot;A list of files for zl-fetch on JSDelivr&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Second, if you know about npm, you can use npm to install the package somewhere on your computer. Then use your Finder (or Explorer) to browse through the files.&lt;/p&gt;
&lt;p&gt;In this case, let’s say the default file is not specified, and we want the &lt;code&gt;dist/index.js&lt;/code&gt; file. Here’s what you’ll write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/zl-fetch@2.1.9/dist/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;loading-a-minified-version&quot;&gt;Loading a minified version&lt;/h3&gt;
&lt;p&gt;Minified files are usually smaller in size. Users will be able to download the minified files faster than an unminified file.&lt;/p&gt;
&lt;p&gt;JSDelivr minifies files automatically if you use the &lt;code&gt;.min.js&lt;/code&gt; extension.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/zl-fetch@2.1.9/dist/index.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope this article gives you a good overview of what JSDelivr can do.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My CSS reset</title>
    <link href="https://zellwk.com/blog/css-reset/"/>
    <updated>2019-03-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-reset/</id>
    <content type="html">&lt;p&gt;Many frontend developers begin styling their websites with Normalize. Some developers have personal preferences they add on to Normalize.css. I have my preferences too.&lt;/p&gt;
&lt;p&gt;In this article, I want to share these preferences with you. personal CSS reset (that I use in addition to Normalize.css) with you.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I categorize the resets into 8 categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#box-sizing&quot;&gt;Box sizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#removing-margins-and-paddings&quot;&gt;Removing margins and paddings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#forms-and-button&quot;&gt;Forms and buttons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#images-and-embed&quot;&gt;Images and embeds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tables&quot;&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-hidden-attribute&quot;&gt;The hidden attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#noscript&quot;&gt;Noscript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;box-sizing&quot;&gt;Box Sizing&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;box-sizing&lt;/code&gt; property changes how the CSS Box model works. It changes how &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, and &lt;code&gt;margin&lt;/code&gt; properties are calculated.&lt;/p&gt;
&lt;p&gt;The default setting for &lt;code&gt;box-sizing&lt;/code&gt; is &lt;code&gt;content-box&lt;/code&gt;. I prefer changing this to &lt;code&gt;border-box&lt;/code&gt; because it’s easier for me to style &lt;code&gt;padding&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more info on Box Sizing, you might be interested in “&lt;a href=&quot;https://zellwk.com/blog/understanding-css-box-sizing/&quot;&gt;Understanding Box sizing&lt;/a&gt;”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  box-sizing: border-box;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;removing-margins-and-paddings&quot;&gt;Removing margins and paddings&lt;/h2&gt;
&lt;p&gt;Browsers set different margins and paddings for different elements. These default settings throw me off when I’m not aware. When I code, I prefer to set all margins and paddings myself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Reset margins and paddings on most elements */
body,
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
li,
p,
pre,
blockquote,
figure,
hr {
  margin: 0;
  padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;
&lt;p&gt;I use unordered lists in many situations, and I don’t need a &lt;code&gt;disc&lt;/code&gt; style in most of them. Here, I set &lt;code&gt;list-style&lt;/code&gt; to none. When I need the &lt;code&gt;disc&lt;/code&gt; style, I set it back manually on the specific &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Removes discs from ul */
ul {
  list-style: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;forms-and-buttons&quot;&gt;Forms and buttons&lt;/h2&gt;
&lt;p&gt;Browsers don’t inherit typography for forms and buttons. They set &lt;code&gt;font&lt;/code&gt; to &lt;code&gt;400 11px system-ui&lt;/code&gt;. I find this mind-boggling and weird. I always have to make them inherit from ancestor elements manually.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input,
textarea,
select,
button {
  color: inherit; 
  font: inherit; 
  letter-spacing: inherit; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Different browsers have style the borders for forms elements and  buttons differently. I dislike these default styles, and would prefer to set them to &lt;code&gt;1px solid gray&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input,
textarea,
button {
  border: 1px solid gray; 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I made a few more adjustments to buttons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set button padding to &lt;code&gt;0.75em&lt;/code&gt; and &lt;code&gt;1em&lt;/code&gt; because they seem like sensible defaults from my experience.&lt;/li&gt;
&lt;li&gt;Removed the default &lt;code&gt;border-radius&lt;/code&gt; that’s applied to buttons.&lt;/li&gt;
&lt;li&gt;Forced background color to be transparent&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
  border-radius: 0; 
  padding: 0.75em 1em;
  background-color: transparent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I set &lt;code&gt;pointer-events: none&lt;/code&gt; to elements within a button. This is mainly used for JavaScript interaction.&lt;/p&gt;
&lt;p&gt;(When users click on something in a button, &lt;code&gt;event.target&lt;/code&gt; is the thing they clicked on, not the button. This style makes it easier to work with &lt;code&gt;click&lt;/code&gt; events if there are HTML elements inside a button).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button * {
  pointer-events: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;media-elements&quot;&gt;Media elements&lt;/h2&gt;
&lt;p&gt;Media elements include images, videos, objects, iframes, and embed. I tend to let these elements conform to the width of their containers.&lt;/p&gt;
&lt;p&gt;I also set these elements to &lt;code&gt;display: block&lt;/code&gt; because &lt;code&gt;inline-block&lt;/code&gt; creates an unwanted whitespace at the bottom of the element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;embed,
iframe,
img,
object,
video {
  display: block;
  max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;
&lt;p&gt;I rarely use tables, but there may be useful sometimes. Here’s the default styles I’ll begin with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;table {
  table-layout: fixed;
  width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-hidden-attribute&quot;&gt;The hidden attribute&lt;/h2&gt;
&lt;p&gt;When an element has a &lt;code&gt;hidden&lt;/code&gt; attribute, they should be hidden from view. Normalize.css does this for us already.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;[hidden] {
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with this style is its low specificity.&lt;/p&gt;
&lt;p&gt;I often add &lt;code&gt;hidden&lt;/code&gt; to other elements I style with a class. A class’s specificity is high than an attribute, and the &lt;code&gt;display: none&lt;/code&gt; property doesn’t work.&lt;/p&gt;
&lt;p&gt;This is why I opt to bump up &lt;code&gt;[hidden]&lt;/code&gt;&#39;s specificity with &lt;code&gt;!important&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;[hidden] {
  display: none !important;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;noscript&quot;&gt;Noscript&lt;/h2&gt;
&lt;p&gt;If a component requires JavaScript to work, I’ll add a &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag to let users know (if they’ve disabled JavaScript).&lt;/p&gt;
&lt;p&gt;This creates default styles for the &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* noscript styles */
noscript {
  display: block;
  margin-bottom: 1em;
  margin-top: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Everyone begins their projects differently. Please feel free to use any of these styles I mentioned. Here’s a &lt;a href=&quot;https://github.com/zellwk/css-reset&quot;&gt;Github repo&lt;/a&gt; of my personal CSS Resets.&lt;/p&gt;
&lt;p&gt;Do you have any recommendations that would help improve this CSS Reset file? If you do, feel free to reach out and let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up my new Mac (Part 2—the migration process)</title>
    <link href="https://zellwk.com/blog/mac-setup-2/"/>
    <updated>2019-02-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mac-setup-2/</id>
    <content type="html">&lt;p&gt;Setting up a new Mac is painful. Here are some of the things I have to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install all 47 applications I use every day.&lt;/li&gt;
&lt;li&gt;Provide the right credentials for each application.&lt;/li&gt;
&lt;li&gt;Change macOS default settings to the ones I like.&lt;/li&gt;
&lt;li&gt;Set up coding configurations.&lt;/li&gt;
&lt;li&gt;Move files from the old Mac to the new one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I estimate at least a three day’s worth of work (downloading things and waiting for them to download 😴) if I have to install everything manually.&lt;/p&gt;
&lt;p&gt;But I was able to set my computer up in hours (automatically) thanks to dotfiles.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-are-dotfiles%3F&quot;&gt;What are dotfiles?&lt;/h2&gt;
&lt;p&gt;Dotfiles is a collective name for all files that begin with a dot. Examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.eslintrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.editorconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;To the programming community, dotfiles&lt;/strong&gt; are more than a name for files that begin with a dot. They &lt;strong&gt;refer to startup scripts&lt;/strong&gt; that help you set up new computers.&lt;/p&gt;
&lt;p&gt;(I have no idea why programmers call startup scripts dotfiles. Maybe because dotfiles sound sexier? ¯_(ツ)_/¯).&lt;/p&gt;
&lt;p&gt;For clarity purposes, I’ll use these terms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Dotfiles&lt;/strong&gt;: files that begin with &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Startup scripts&lt;/strong&gt;: scripts that help set up the computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-dotfiles-do&quot;&gt;What dotfiles do&lt;/h2&gt;
&lt;p&gt;A dotfile is used to configure how applications behave. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; changes how &lt;code&gt;git&lt;/code&gt; behaves.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.eslintrc&lt;/code&gt; changes how ES Lint behaves.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.editorconfig&lt;/code&gt; changes how many text editors behave.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These files live on your computer’s &lt;code&gt;$HOME&lt;/code&gt; directory. If you want to see what dotfiles you have, simply open up your Terminal app and type &lt;code&gt;ls -la&lt;/code&gt;. You’ll see a list of dotfiles.&lt;/p&gt;
&lt;p&gt;Here’s what mine looks like now:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mac-setup/dotfiles.png&quot; alt=&quot;Results from running ls -la in my $HOME directory&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Note: It’s okay if you don’t know what dotfiles are. They’re not important for this article. I just &lt;em&gt;had&lt;/em&gt; to explain the difference between dotfiles and startup scripts 😉.&lt;/p&gt;
&lt;p&gt;What’s more interesting is the next part: Startup scripts.&lt;/p&gt;
&lt;h2 id=&quot;my-startup-script&quot;&gt;My Startup script&lt;/h2&gt;
&lt;p&gt;If you get a new computer, you can run a startup script to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download applications&lt;/li&gt;
&lt;li&gt;Change default settings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My &lt;a href=&quot;https://github.com/zellwk/dotfiles&quot;&gt;startup script&lt;/a&gt; (aptly named: Dotfiles ¯\_(ツ)_/¯) helps me install 31 out of the &lt;a href=&quot;https://zellwk.com/blog/mac-setup-1&quot;&gt;47 applications&lt;/a&gt; I use. This saves me a huge ton of work!&lt;/p&gt;
&lt;p&gt;It also helps me install commands that I use regularly on my command line. Examples include: &lt;code&gt;svgo&lt;/code&gt; and &lt;code&gt;http-server&lt;/code&gt;. (Note: These “commands” are generally called command line interfaces, or CLIs).&lt;/p&gt;
&lt;p&gt;The startup script does it through three files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Brew.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.macos&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;brew.sh&quot;&gt;Brew.sh&lt;/h3&gt;
&lt;p&gt;Brew is a shorthand for &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;. Homebrew lets you download packages onto macOS or Linux computers through the command line.&lt;/p&gt;
&lt;p&gt;It can help you install useful things like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Openssh&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It can also help you install applications. Here’s a list of 31 applications I install with Homebrew.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1password&lt;/li&gt;
&lt;li&gt;Alfred&lt;/li&gt;
&lt;li&gt;Beamer&lt;/li&gt;
&lt;li&gt;Dash&lt;/li&gt;
&lt;li&gt;Dropbox&lt;/li&gt;
&lt;li&gt;Firefox&lt;/li&gt;
&lt;li&gt;Firefox Nightly&lt;/li&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;Chrome Canary&lt;/li&gt;
&lt;li&gt;Grammarly&lt;/li&gt;
&lt;li&gt;Iterm2&lt;/li&gt;
&lt;li&gt;Kap&lt;/li&gt;
&lt;li&gt;Marked&lt;/li&gt;
&lt;li&gt;Messenger&lt;/li&gt;
&lt;li&gt;MongoDB Compass&lt;/li&gt;
&lt;li&gt;Moom&lt;/li&gt;
&lt;li&gt;Mplayerx&lt;/li&gt;
&lt;li&gt;Notion&lt;/li&gt;
&lt;li&gt;Obs&lt;/li&gt;
&lt;li&gt;Odrive&lt;/li&gt;
&lt;li&gt;Postman&lt;/li&gt;
&lt;li&gt;Sketch&lt;/li&gt;
&lt;li&gt;Skitch&lt;/li&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Spotify&lt;/li&gt;
&lt;li&gt;Telegram&lt;/li&gt;
&lt;li&gt;Textexpander&lt;/li&gt;
&lt;li&gt;Tower&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Wechat&lt;/li&gt;
&lt;li&gt;Whatsapp&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;npm.sh&quot;&gt;npm.sh&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; lets you download JavaScript packages onto your computer. Many frontend development toolchains rely on npm. It comes installed with Node, and I installed Node with Brew.&lt;/p&gt;
&lt;p&gt;After running &lt;code&gt;brew.sh&lt;/code&gt;, I configured my npm and install additional CLIs I use frequently. These include &lt;code&gt;http-server&lt;/code&gt; and &lt;code&gt;svgo&lt;/code&gt; that I mentioned above.&lt;/p&gt;
&lt;h3 id=&quot;.macos&quot;&gt;.macos&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.macos&lt;/code&gt; helps you set up a new Mac with sensible default settings.&lt;/p&gt;
&lt;p&gt;Here, I copied Mathias Bynens &lt;code&gt;.macos&lt;/code&gt; script and modified it to my personal preferences. You may want to refer to &lt;a href=&quot;https://github.com/mathiasbynens/dotfiles/blob/master/.macos&quot;&gt;his version&lt;/a&gt; if you intend to build your own &lt;code&gt;.macos&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;symlinked-dotfiles&quot;&gt;Symlinked dotfiles&lt;/h2&gt;
&lt;p&gt;(Note: This is an advanced section for people who use dotfiles).&lt;/p&gt;
&lt;p&gt;Earlier, I mentioned that dotfiles can be found in the &lt;code&gt;$HOME&lt;/code&gt; folder. (Every Terminal app opens the &lt;code&gt;$HOME&lt;/code&gt; folder by default).&lt;/p&gt;
&lt;p&gt;If you want to see what dotfiles you have, you can open your  Terminal app and type &lt;code&gt;ls -la&lt;/code&gt;. You’ll see a list of dotfiles.&lt;/p&gt;
&lt;p&gt;I also showed you what mine looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mac-setup/dotfiles.png&quot; alt=&quot;Results from running ls -la in my $HOME directory&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Notice the dotfiles in pink? These dotfiles also have a &lt;code&gt;-&amp;gt;&lt;/code&gt; to another file. The &lt;code&gt;-&amp;gt;&lt;/code&gt; indicates the dotfile in the &lt;code&gt;$HOME&lt;/code&gt; folder is symlinked to the dotfile in my &lt;code&gt;dotfiles&lt;/code&gt; project.&lt;/p&gt;
&lt;h3 id=&quot;what-is-a-symlink%3F&quot;&gt;What is a symlink?&lt;/h3&gt;
&lt;p&gt;Symlink means symbolic link. It lets you open a file from a second location.&lt;/p&gt;
&lt;p&gt;Here’s how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You decide on a source file&lt;/li&gt;
&lt;li&gt;You choose a second location (a destination) to open the file with.&lt;/li&gt;
&lt;li&gt;You run the symlink command.&lt;/li&gt;
&lt;li&gt;Once you run the symlink command, this destination file will point to the source file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the case above, if I open &lt;code&gt;.gitconfig&lt;/code&gt; from &lt;code&gt;$HOME&lt;/code&gt;, I’m actually opening &lt;code&gt;.gitconfig&lt;/code&gt; from &lt;code&gt;/Users/zellwk/project/dotfiles&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;why-create-a-symlink%3F&quot;&gt;Why create a symlink?&lt;/h3&gt;
&lt;p&gt;Dotfiles can change. I want to make sure my Dotfiles repo is updated with the latest changes.&lt;/p&gt;
&lt;p&gt;If I don’t create symlinks, I’ll forget to update my dotfiles project. (This has happened before with the dotfiles on my old computer 🤭).&lt;/p&gt;
&lt;p&gt;I created a &lt;code&gt;link.sh&lt;/code&gt; file in the Dotfiles repo to help with creating symlinks. If I ever create a new dotfile in my Dotfiles repo, I just have to run &lt;code&gt;link.sh&lt;/code&gt; to make sure everything is synced up properly 🤓.&lt;/p&gt;
&lt;p&gt;Finally, let’s talk about the most important part: setting up my code editor.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-my-code-editor&quot;&gt;Setting up my code editor&lt;/h2&gt;
&lt;p&gt;I’m anal when it comes things I use. Particularly things I use on a daily basis. I had to make sure my text editor is perfect to my own likings (and I spent days to configuring it… I don’t want to do it again…).&lt;/p&gt;
&lt;p&gt;I use Visual Studio Code (VSCode from now on) as my text editor. It has a plugin that lets you sync everything you’ve configured onto another computer. The plugin is called &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&quot;&gt;Settings Sync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s how to set it up:&lt;/p&gt;
&lt;p&gt;First, create a personal &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Github OAuth Token&lt;/a&gt; according to the instructions on &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync&quot;&gt;Settings Sync&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the old computer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the &lt;code&gt;Sync: Update / Upload Settings&lt;/code&gt; command in VSCode.&lt;/li&gt;
&lt;li&gt;It’ll ask for authentication.&lt;/li&gt;
&lt;li&gt;Insert the OAuth Token you created into the box provided.&lt;/li&gt;
&lt;li&gt;Hit enter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wait for ~10 seconds for the plugin to sync your settings into a Github Gist. Once it’s done, you’ll see the VS Code integrated shell. Scroll up and you’ll see the OAuth token you used and the Gist ID the plugin stored your settings.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/mac-setup/settings-sync.png&quot; alt=&quot;Image of the Token and Gist after uploading VS Code settings&quot;&gt;&lt;/figure&gt;
&lt;p&gt;SAVE THESE SOMEWHERE. YOU WILL NEVER SEE THEM AGAIN.&lt;/p&gt;
&lt;p&gt;(No need to panic if you’ve lost them. Do the syncing process ☝️ again and you’ll get new keys).&lt;/p&gt;
&lt;p&gt;On the new computer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the &lt;code&gt;Sync: Download settings&lt;/code&gt; in VSCode&lt;/li&gt;
&lt;li&gt;Fill in your Github OAuth token&lt;/li&gt;
&lt;li&gt;Fill in your Gist ID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Settings Sync will do its job and sync everything you’ve configured in VS Code. (Yes, this includes extensions too!).&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s everything I could automate as I transitioned from my old Mac to the new one. I hope you found/learned something useful in this series!&lt;/p&gt;
&lt;h2 id=&quot;other-articles-in-this-series%3A&quot;&gt;Other articles in this series:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/mac-setup-1&quot;&gt;Setting up my new Mac (Part 1—the apps I use)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This article&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up my new Mac (Part 1—the apps I use)</title>
    <link href="https://zellwk.com/blog/mac-setup-1/"/>
    <updated>2019-02-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mac-setup-1/</id>
    <content type="html">&lt;p&gt;My first task in 2019 is to get a new computer. I didn’t want to change computers, but my old one gave way and I had no choice 😭.&lt;/p&gt;
&lt;p&gt;Since I’m already switching computers, I thought it’ll be interesting to share the apps I use on a daily basis.&lt;/p&gt;
&lt;p&gt;I hope you find some of them interesting!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;apps-for-writing&quot;&gt;Apps for writing&lt;/h2&gt;
&lt;p&gt;I do a lot of writing work (for the blog, and for the courses I make). Here are the apps I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ulysses.app/&quot;&gt;Ulysses&lt;/a&gt;. This is where I do my idea curation, outlining, drafting, writing, and editing work.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matthewpalmer.net/rocket/&quot;&gt;Rocket&lt;/a&gt;: Rocket helps me write emojis as if I’m writing them on Slack. For example, to get 😀, I type &lt;code&gt;:grinning&lt;/code&gt;. It has autocomplete features so typing emojis become a breeze 😁.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;Hemingway app&lt;/a&gt;: I use Hemingway app to ensure my sentences are easy to read and understand.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt;: I use Grammarly to help me correct any obvious grammatical errors.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wordcounterapp.com/&quot;&gt;Word counter app&lt;/a&gt;: This is a menu-bar app that tells me how many words I’ve written on my computer today. My highest track record is 12,000 words!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://marked2app.com/&quot;&gt;Marked 2&lt;/a&gt;: I use Marked 2 for converting Markdown (from Ulysses or my text editor, VS Code) into HTML or Rich Text. I then paste Rich Text into the WISYWIG editor in &lt;a href=&quot;http://mbsy.co/clb2r&quot;&gt;Convertkit&lt;/a&gt; (to send emails).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://evernote.com/products/skitch&quot;&gt;Skitch&lt;/a&gt;: Skitch helps me annotate images quickly for articles.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wulkano/kap&quot;&gt;Kap&lt;/a&gt;: Kap helps me make gifs and videos that don’t look janky (but the Gifs are quite big…).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;apps-for-coding&quot;&gt;Apps for coding&lt;/h2&gt;
&lt;p&gt;Of course, coding is a big part of my work. How else do I call myself a developer otherwise? 🤪&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;: My preferred text editor. I created a &lt;a href=&quot;https://www.youtube.com/playlist?list=PLht38HefjmzGWN0CUHGqjliTSuhXFTDG5&quot;&gt;video series&lt;/a&gt; to help you set up VS Code if you want to use it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2:&lt;/a&gt; I prefer iTerm2 over the built-in terminal app. It’s easier to configure, and I can have split screens (which makes multiple terminal windows easier to manage)&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt;: I prefer Tower over other Git clients. If you want to try Tower, you can use &lt;code&gt;zell20&lt;/code&gt; to get 20% discount off your first year! (I don’t get money for sharing this). If you want to learn Git, I have a &lt;a href=&quot;https://www.youtube.com/playlist?list=PLht38HefjmzGpNHWKlTLQAbPlwFRFd-2z&quot;&gt;video series&lt;/a&gt; for you too.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;: Postman is good for debugging API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.com/products/compass&quot;&gt;MongoDB Compass&lt;/a&gt;: This is good for checking data stored in my MongoDB Databases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;browsers-i-use&quot;&gt;Browsers I use&lt;/h2&gt;
&lt;p&gt;Like any other web developer, I install many browsers on my computer (primarily for testing). Here are the ones I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Safari: My main browser for browsing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/intl/en/chrome/canary/&quot;&gt;Chrome Canary&lt;/a&gt;: My main browser for debugging JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/channel/desktop/&quot;&gt;Firefox Nightly&lt;/a&gt;: My main browser for debugging CSS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;: For debugging.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;: For debugging.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(I rarely test against IE or Edge nowadays, because there’s generally no need to anymore).&lt;/p&gt;
&lt;h2 id=&quot;design-apps&quot;&gt;Design Apps&lt;/h2&gt;
&lt;p&gt;I may not look like it, but I’m also interested in Design. I design every website I build. Here are the tools I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://sipapp.io/&quot;&gt;Sip&lt;/a&gt;: Sip is a simple color dropper tool.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sketchapp.com/&quot;&gt;Sketch&lt;/a&gt;: For designing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://typefaceapp.com/&quot;&gt;Typeface&lt;/a&gt;: For managing typefaces on my Mac. It’s much better than font book!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.adobe.com/sea/creativecloud/desktop-app.html&quot;&gt;Adobe Fonts&lt;/a&gt;: For syncing typefaces from Typekit (now Adobe Fonts) onto my computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;apps-for-creating-videos%3A&quot;&gt;Apps for creating videos:&lt;/h2&gt;
&lt;p&gt;I’ve been creating videos for ~1 year. Here are the apps I’ve been using:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.audacityteam.org/&quot;&gt;Audacity&lt;/a&gt;: For recording audio&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.telestream.net/screenflow/&quot;&gt;Screenflow&lt;/a&gt;: For recording my screen and face&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://obsproject.com/&quot;&gt;OBS&lt;/a&gt;: For positioning my face on the video. I hope I can use it for live-streaming sometime in the future.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/sg/app/webcam-settings/id533696630?mt=12&quot;&gt;Webcam settings&lt;/a&gt;: Lights are set at 50hz over at my part of the world (it’s 60hz in USA), so my webcam flickers when recording. This sets it right.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;general-productivity-apps&quot;&gt;General productivity apps&lt;/h2&gt;
&lt;p&gt;Here are some apps I can’t live without on my Mac.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt;: Alfred is Spotlight + so many things.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://airmailapp.com/&quot;&gt;Airmail&lt;/a&gt;: My preferred email client&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flexibits.com/fantastical&quot;&gt;Fantastical2&lt;/a&gt;: My preferred calendar app&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://manytricks.com/moom/&quot;&gt;Moom&lt;/a&gt;: I use Moom to shift windows around on a Mac.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.notion.so/?r=4602c9106bdb47dda92a22fcbfc8cc6d&quot;&gt;Notion&lt;/a&gt;: I’ve recently started using Notion as a todo-list system. I may write about this in future if it sticks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.odrive.com/&quot;&gt;Odrive&lt;/a&gt;: For syncing multiple Google Drives&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;: Nothing to say here :)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;some-social-apps&quot;&gt;Some Social Apps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.messenger.com/&quot;&gt;Messenger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://telegram.org/&quot;&gt;Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tweetdeck.twitter.com/&quot;&gt;Tweetdeck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.whatsapp.com/download/&quot;&gt;Whatsapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mac.weixin.qq.com/&quot;&gt;Wechat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt; - For video calls&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;miscellaneous-apps&quot;&gt;Miscellaneous apps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://1blocker.com/&quot;&gt;1Blocker&lt;/a&gt;: Blocking ads and other stuff on Safari.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt;: Where I store all my password information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://beamer-app.com/&quot;&gt;Beamer&lt;/a&gt;: To put videos onto my Apple TV.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://macpaw.com/cleanmymac-3&quot;&gt;Clean my mac 3&lt;/a&gt;: To remove applications cleanly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mplayerx.org/&quot;&gt;MplayerX&lt;/a&gt;: For playing videos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt;: Because. music. rocks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://matthewpalmer.net/vanilla/&quot;&gt;Vanilla app&lt;/a&gt;: For managing the menu bar.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;next-up&quot;&gt;Next up&lt;/h2&gt;
&lt;p&gt;I’ll talk about my actual migration process in an upcoming article. It’ll be nerdy and fun! 🤓.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RSS and Tags are here!</title>
    <link href="https://zellwk.com/blog/rss-and-tags/"/>
    <updated>2019-02-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/rss-and-tags/</id>
    <content type="html">&lt;p&gt;Many people wanted two things at Zellwk.com:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An RSS feed (to get updates without going through emails).&lt;/li&gt;
&lt;li&gt;An easier way to browse the articles I created.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I finally found the chance to provide these features!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;rss&quot;&gt;RSS&lt;/h2&gt;
&lt;p&gt;You can find my RSS feed on &lt;a href=&quot;https://zellwk.com/rss&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;an-easier-way-to-browse-articles&quot;&gt;An easier way to browse articles&lt;/h2&gt;
&lt;p&gt;People asked for two features here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tags&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve created the tags for the blog. You can find every tag on &lt;a href=&quot;https://zellwk.com/tags&quot;&gt;the tags archive page&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/rss/tags.png&quot; alt=&quot;Image for the tags page&quot;&gt;&lt;/figure&gt;
&lt;p&gt;This page shows a list of tags for all my blog posts. You’ll also see the number of articles that are tagged with a specific tag.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2019/rss/tag-page.png&quot; alt=&quot;Image for each tag page&quot;&gt;&lt;/figure&gt;
&lt;p&gt;If you click on a tag, you’ll see a list of articles. I listed only the title of each article here. I thought it’ll be easier for you to browser through everything I’ve created.&lt;/p&gt;
&lt;p&gt;Note: This is a new UX I’m experimenting with. Please let me hear your feedback on it.&lt;/p&gt;
&lt;h2 id=&quot;search&quot;&gt;Search&lt;/h2&gt;
&lt;p&gt;I’m going to implement search with &lt;a href=&quot;https://www.algolia.com/&quot; title=&quot;Agolia&quot;&gt;Agolia&lt;/a&gt; when I find the time to. I’ll share more about it as I roll it out.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope the RSS Feed, Tags (and Search in future) helps you discover more of this blog! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Zellwk.com is now open source!</title>
    <link href="https://zellwk.com/blog/open-sourcing-my-blog/"/>
    <updated>2019-02-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/open-sourcing-my-blog/</id>
    <content type="html">&lt;p&gt;Good news!&lt;/p&gt;
&lt;p&gt;I decided to open source my blog. You can see the source code (for almost everything, except credentials) over at this &lt;a href=&quot;https://github.com/zellwk/zellwk.com/&quot; title=&quot;Zellwk.com Github repo&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;why-i-open-sourced-my-blog&quot;&gt;Why I open sourced my blog&lt;/h2&gt;
&lt;p&gt;I was afraid to open source my blog. I didn’t want people to dig through my code and point out what I did wrong. (It’s quite intimidating!).&lt;/p&gt;
&lt;p&gt;But I’ve decided to open source my blog in the spirit of sharing and of &lt;a href=&quot;https://zellwk.com/blog/its-okay-to-write-dirty-code&quot; title=&quot;Write dirty code&quot;&gt;writing dirty code&lt;/a&gt;. I hope you enjoy and learn from what I’ve created.&lt;/p&gt;
&lt;h2 id=&quot;zellwk.com-is-unique&quot;&gt;Zellwk.com is unique&lt;/h2&gt;
&lt;p&gt;It contains:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A static-site generator&lt;/li&gt;
&lt;li&gt;A node backend&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Zellwk.com is unique because most statically-generated sites don’t use a backend. They’re primarily served through Github, Netlify, or other platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I use a static-site generator because:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static sites load fast&lt;/li&gt;
&lt;li&gt;There’s no need to create a database&lt;/li&gt;
&lt;li&gt;They’re easy to maintain&lt;/li&gt;
&lt;li&gt;They’re easy to publish&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;I added a node backend because:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wanted to redirect people to a 404 page if a page isn’t found.&lt;/li&gt;
&lt;li&gt;I wanted to integrate my site with features I thought about (some of them requires a backend).&lt;/li&gt;
&lt;li&gt;I thought it’ll be fun and cool.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tools-i-used-to-build-zellwk.com&quot;&gt;Tools I used to build zellwk.com&lt;/h2&gt;
&lt;p&gt;Tools I used include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eleventy (a static site generator)&lt;/li&gt;
&lt;li&gt;Gulp 4 (a task runner)&lt;/li&gt;
&lt;li&gt;Sass (for CSS)&lt;/li&gt;
&lt;li&gt;Webpack (for JavaScript)&lt;/li&gt;
&lt;li&gt;BrowserSync (for live-reloading)&lt;/li&gt;
&lt;li&gt;CircleCI (for continuous deployment)&lt;/li&gt;
&lt;li&gt;Jest (for writing tests)&lt;/li&gt;
&lt;li&gt;Node and Express (for the server)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I encourage you to play with the &lt;a href=&quot;https://github.com/zellwk/zellwk.com/&quot; title=&quot;Zellwk.com Github repository&quot;&gt;source code&lt;/a&gt; to find out more about this repo if you’re interested.&lt;/p&gt;
&lt;h2 id=&quot;why-i-chose-these-tools&quot;&gt;Why I chose these tools&lt;/h2&gt;
&lt;p&gt;Many developers have problems choosing the “best” tool to use. I want to share my decision-making process to help you choose a tool that suitable for your project.&lt;/p&gt;
&lt;h3 id=&quot;eleventy&quot;&gt;Eleventy&lt;/h3&gt;
&lt;p&gt;I ran zellwk.com with a custom static-site generator (let’s call this CSSG) I built with Gulp for two years now. My first and obvious choice was to continue using CSSG.&lt;/p&gt;
&lt;p&gt;But I had a problem: I couldn’t test the features I built for CSSG. I was afraid to add additional features (like RSS and Tags, which are coming back to zellwk.com!). I wanted to improve zellwk.com, so I needed a static-site generator I can trust.&lt;/p&gt;
&lt;p&gt;Switching over to this static-site generator needs to be relatively painless.&lt;/p&gt;
&lt;p&gt;At this point, I heard great things about these static site generators:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;li&gt;Gatsby&lt;/li&gt;
&lt;li&gt;Eleventy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I didn’t choose Hugo because I didn’t want to learn Go. It was too much work to redo my site.&lt;/p&gt;
&lt;p&gt;I didn’t choose Gatsby because I wasn’t a React fan. I was using Nunjucks. I didn’t want to switch to React.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I chose Eleventy because&lt;/strong&gt; Eleventy allowed me to use Nunjucks. The &lt;strong&gt;switch was relatively painless&lt;/strong&gt; (still took me a week to make the switch though!).&lt;/p&gt;
&lt;h3 id=&quot;gulp-4&quot;&gt;Gulp 4&lt;/h3&gt;
&lt;p&gt;I used Gulp 3 to run CSSG previously. It was a no-brainer to continue using Gulp to build my site.&lt;/p&gt;
&lt;p&gt;I upgraded to Gulp 4 when I rebuilt zellwk.com with Eleventy because &lt;strong&gt;I wanted to understand the difference between Gulp 3 and Gulp 4.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was unnecessary work. But &lt;strong&gt;it was work I was interested in.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, I discovered Gulp 4 had a simpler API, which means I have an easier time writing plugins to improve my build processes. For example, I built a plugin that &lt;a href=&quot;https://github.com/zellwk/resize-images&quot;&gt;resizes images&lt;/a&gt; to various widths. I’ll talk about this plugin in the future when I’ve solidified everything.&lt;/p&gt;
&lt;h3 id=&quot;sass&quot;&gt;Sass&lt;/h3&gt;
&lt;p&gt;I’ve always been writing Sass. There’s nothing wrong with it, and there’s no reason for me to change.&lt;/p&gt;
&lt;h3 id=&quot;webpack&quot;&gt;Webpack&lt;/h3&gt;
&lt;p&gt;I like writing Vanilla JavaScript. I didn’t need a framework for Zellwk.com. Using a framework would be overkill.&lt;/p&gt;
&lt;p&gt;But &lt;strong&gt;I wanted the ability to &lt;code&gt;import&lt;/code&gt; packages I downloaded through npm&lt;/strong&gt;. To do this, I needed to use a tool like Browserify, Webpack, Rollup or Parcel.&lt;/p&gt;
&lt;p&gt;Here, &lt;strong&gt;I chose Webpack because I already invested a considerable amount of work into understanding Webpack.&lt;/strong&gt; I tried switching to Rollup and Parcel, but I couldn’t get them up in 20 mins (so I gave up and stuck to Webpack).&lt;/p&gt;
&lt;p&gt;I decided **it wasn’t worth my time to try something similar **if they didn’t work immediately. I could use the time elsewhere.&lt;/p&gt;
&lt;h3 id=&quot;browser-sync&quot;&gt;Browser Sync&lt;/h3&gt;
&lt;p&gt;Browser Sync is amazing. It lets you do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It reloads your website automatically when you change a file.&lt;/li&gt;
&lt;li&gt;It synchronises your website across multiple devices for quick mobile testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I love it so much I want to keep using it.&lt;/p&gt;
&lt;p&gt;If you’re interested, &lt;a href=&quot;https://css-tricks.com/gulp-for-beginners/&quot; title=&quot;Gulp for beginners&quot;&gt;this article on CSS Tricks&lt;/a&gt; shows you how to set up Browser Sync with Gulp.&lt;/p&gt;
&lt;h3 id=&quot;circleci&quot;&gt;CircleCI&lt;/h3&gt;
&lt;p&gt;It’s always a stressful moment to deploy ANYTHING to a server. I wanted to reduce this stress as much as possible by using a continuous integration (CI) tool.&lt;/p&gt;
&lt;p&gt;What this means in simple language is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I commit my files&lt;/li&gt;
&lt;li&gt;Do a &lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The CI server updates my site&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are many CI tools out there. Examples include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Codeship&lt;/li&gt;
&lt;li&gt;Travis&lt;/li&gt;
&lt;li&gt;CircleCI&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not sophisticated enough to spot the difference between CI tools. &lt;strong&gt;I picked the one that looked easy to begin with.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;jest&quot;&gt;Jest&lt;/h2&gt;
&lt;p&gt;I tried many testing frameworks, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tap&lt;/li&gt;
&lt;li&gt;Tape&lt;/li&gt;
&lt;li&gt;Mocha&lt;/li&gt;
&lt;li&gt;Jasmine&lt;/li&gt;
&lt;li&gt;Ava&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I love Jest because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t have to configure it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;watch&lt;/code&gt; mode runtime is pretty sweet. No other tools have this!&lt;/li&gt;
&lt;li&gt;(Also, because Kent C. Dotts recommended Jest over AVA, and I felt its a chore to set up tests for new projects for AVA).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;node-and-express&quot;&gt;Node and Express&lt;/h3&gt;
&lt;p&gt;I continue to use Node and Express because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I was already using it&lt;/li&gt;
&lt;li&gt;I knew Node + Express backend&lt;/li&gt;
&lt;li&gt;I didn’t want to learn anything else right now&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So there you have it.&lt;/p&gt;
&lt;p&gt;Everyone has a different definition of what’s “better”. &lt;strong&gt;For Zellwk.com, I chose to use tools I’m already familiar with&lt;/strong&gt;. I don’t want to spend extra time learning similar things.&lt;/p&gt;
&lt;p&gt;Hope you have fun going through &lt;a href=&quot;https://github.com/zellwk/zellwk.com&quot; title=&quot;Zellwk.com Github repo&quot;&gt;the repository&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>It&#39;s okay to write dirty code</title>
    <link href="https://zellwk.com/blog/its-okay-to-write-dirty-code/"/>
    <updated>2019-01-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/its-okay-to-write-dirty-code/</id>
    <content type="html">&lt;p&gt;Many developers feel they &lt;em&gt;need&lt;/em&gt; to write clean code. They’re good developers only if they write clean code. They’re lousy developers if they don’t.&lt;/p&gt;
&lt;p&gt;I feel the same way too. And I try to make my code as clean as possible.&lt;/p&gt;
&lt;p&gt;But this attempt to write clean code actually slows most of us down. We learn slower. We make fewer things. And as a result, we contribute lesser to this world.&lt;/p&gt;
&lt;p&gt;I want to make a point that it’s okay to write dirty code. I want to give permission for myself and for you to write dirty code in this article.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;when-to-write-dirty-code&quot;&gt;When to write dirty code&lt;/h2&gt;
&lt;p&gt;There are a few occasions where its okay to write dirty code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you’re stuck&lt;/li&gt;
&lt;li&gt;When you want to write good code&lt;/li&gt;
&lt;li&gt;When you want to make things quickly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Point number 2 sounds contradictory yeah? We’ll get to this. Promise.&lt;/p&gt;
&lt;h2 id=&quot;write-dirty-code-when-you%E2%80%99re-stuck&quot;&gt;Write dirty code when you’re stuck&lt;/h2&gt;
&lt;p&gt;Any progress is better than no progress when you’re stuck. This applies to everything in life, even coding.&lt;/p&gt;
&lt;p&gt;For example, I usually get stuck when I try to write articles. I get stuck because I censor myself. These thoughts went through my mind when I wrote this article:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This idea isn’t good enough&lt;/li&gt;
&lt;li&gt;I shouldn’t write this way&lt;/li&gt;
&lt;li&gt;What if someone sees this article and decide I’m a lousy developer?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s scary.&lt;/p&gt;
&lt;p&gt;Writing dirty code is equally scary because we developers pride ourselves in writing good and clean code. We wear it like a badge of honor. If we don’t write clean code, we’re lousy developers.&lt;/p&gt;
&lt;p&gt;We get stuck because we focus on &lt;em&gt;trying&lt;/em&gt; to write clean code. Our ideas don’t flow.&lt;/p&gt;
&lt;p&gt;Here’s why.&lt;/p&gt;
&lt;p&gt;Think of thoughts like water in a tap.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Good ideas, good work, good writing, good code, etc is hot water.&lt;/li&gt;
&lt;li&gt;Bad ideas, bad code, bad writing, bad work is cold water.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want thoughts to flow, you have to turn on the tap. If you censor yourself, you plug your thumb into the tap.&lt;/p&gt;
&lt;p&gt;Try turning on the tap with your thumb plugged into it. What happens? Water gets stuck. You won’t be able to let any of your thoughts flow.&lt;/p&gt;
&lt;p&gt;If you want to make anything worthwhile, you need to stop censoring yourself. This begins the creation process. It lets water flow.&lt;/p&gt;
&lt;p&gt;Next, when you turn on the tap, cold water will invariably come out first. It doesn’t matter how long you’ve turned the heater up for. This is because cold water already ready to come out. Hot water only comes after cold water empties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You have to let your bad ideas out first because good ideas don’t come until all the bad ones are gone.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t come to work with good ideas.&lt;/li&gt;
&lt;li&gt;You don’t stare at a screen and hopefully know how to code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Good ideas surface as you work. They surface only if you stop censoring yourself.&lt;/p&gt;
&lt;p&gt;Want to guess how I came up with this cold water/hot water analogy?&lt;/p&gt;
&lt;p&gt;I started writing this article with “I am censoring myself right now…”. Look at what you’re reading now. You’re not even halfway done, and you want to read more. Yes? :)&lt;/p&gt;
&lt;p&gt;Let’s continue.&lt;/p&gt;
&lt;h2 id=&quot;write-dirty-code-when-you-want-to-write-good-code&quot;&gt;Write dirty code when you want to write good code&lt;/h2&gt;
&lt;p&gt;How can you write dirty code to write good code? This sounds contradictory.&lt;/p&gt;
&lt;p&gt;But its the truth.&lt;/p&gt;
&lt;p&gt;Good code comes from bad code. Just like how good writing comes from bad writing.&lt;/p&gt;
&lt;p&gt;You can blurt out your thoughts (without editing) an put in on your blog. This is easy. But it’ll be bad writing. It’ll contain all sorts of irrelevant information.&lt;/p&gt;
&lt;p&gt;Good writing comes from refining bad writing. It’s called editing. It’s where we slash and burn anything that doesn’t help us deliver the message we want to deliver.&lt;/p&gt;
&lt;p&gt;Good code comes from editing too. Except we call this process refactoring: Changing code the way its written without affecting its behavior.&lt;/p&gt;
&lt;p&gt;You have to write bad code to get the creative juices flowing. Then you have to edit your bad code so others can understand it.&lt;/p&gt;
&lt;p&gt;This process takes time. It requires patience.&lt;/p&gt;
&lt;h3 id=&quot;when-you-want-to-make-things-quickly.&quot;&gt;When you want to make things quickly.&lt;/h3&gt;
&lt;p&gt;Developers have this habit of adding features we don’t need into our code. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We put code into functions when we don’t have to.&lt;/li&gt;
&lt;li&gt;We write OOP or FP or other programming paradigms when we don’t have to.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;map&lt;/code&gt;/&lt;code&gt;filter&lt;/code&gt;/&lt;code&gt;reduce&lt;/code&gt; when its easier to write a &lt;code&gt;for&lt;/code&gt; loop.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In these three examples, I only talked about using different JavaScript features when we’re writing code.&lt;/p&gt;
&lt;p&gt;We often add for more complexity than we need to when we make things. For example, when I made a countdown timer for the Learn JavaScript sales page, I added timezone support for every timezone in the world… even though I only needed PST.&lt;/p&gt;
&lt;p&gt;I did this because I wanted to release the countdown timer as a library for others. But I never released it anyway. I spent hours researching about timezones while there are more pressing items on my todo-list.&lt;/p&gt;
&lt;p&gt;It’s okay to write bad code at first. It prevents you from overengineering things. It helps you make things faster.&lt;/p&gt;
&lt;h2 id=&quot;how-to-write-good-code-(consistently-and-quickly)&quot;&gt;How to write good code (consistently and quickly)&lt;/h2&gt;
&lt;p&gt;Essentially the process of writing good code boils down to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write bad code&lt;/li&gt;
&lt;li&gt;Don’t censor yourself when you write bad code&lt;/li&gt;
&lt;li&gt;Refactor when you’re done writing bad code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The refactoring process is critical if you want to write good code consistently and quickly. It rewires your brain. You’ll see how you can write better code from the get-go without going through the uber-lousy code in the first place. You’ll also learn to spot what good code looks like.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;If you want to write good code, we need to write bad code first. Let the lousyness pour out of you, and the good ones will follow.&lt;/p&gt;
&lt;p&gt;It’s risky. It’s scary. But it’s what we have to do.&lt;/p&gt;
&lt;p&gt;Writing this article gave me permission to write dirty code (and also to publish dirty code). I hope it gave you the permission to write dirty code too.&lt;/p&gt;
&lt;p&gt;Here’s to making better things by writing shitty code first. 🍻.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Sit down and figure it out</title>
    <link href="https://zellwk.com/blog/figure-it-out/"/>
    <updated>2019-01-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/figure-it-out/</id>
    <content type="html">&lt;p&gt;Many people try to learn code this way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Watch a video&lt;/li&gt;
&lt;li&gt;Follow along with the video&lt;/li&gt;
&lt;li&gt;Expect they’ll be able to code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But they fail. They can’t build things on their own. They panic when they stare into a blank file.&lt;/p&gt;
&lt;p&gt;Well, that’s because they missed a critical step in the learning process. They didn’t sit down and figure things out.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;figuring-things-out&quot;&gt;Figuring things out&lt;/h2&gt;
&lt;p&gt;I was good at Mathematics for one reason: I refuse to let myself be defeated by a Math problem.&lt;/p&gt;
&lt;p&gt;I’ll work on a problem over and over until I find the right solution.&lt;/p&gt;
&lt;p&gt;If I don’t know what the solution is, I’ll still leave my best answer. If my answer turns out to be wrong, well, guess what? I know what to do next.&lt;/p&gt;
&lt;p&gt;Sometimes I can’t find a solution after spending hours at a problem. It’s too hard for me. And I give up. That’s when I ask others for their answers. But because I have already done the work of trying to figure it out, I get it immediately when I see the right answer.&lt;/p&gt;
&lt;p&gt;I carried this attitude with me as I learned to code.&lt;/p&gt;
&lt;h2 id=&quot;learning-code&quot;&gt;Learning code&lt;/h2&gt;
&lt;p&gt;Programming is easy to learn because you can see the results immediately—you’re either right or wrong. If you’re wrong, you can make adjustments until you’re right. Simple as that.&lt;/p&gt;
&lt;p&gt;If you watch (and follow) a video, don’t expect yourself to know how to build the same thing from scratch. Videos and tutorials give you knowledge about syntax and techniques. They’re like a supply of LEGO blocks.&lt;/p&gt;
&lt;p&gt;If you watch a person build a dragon with LEGO, and you follow along, you would make a dragon made with LEGOs when you’re done.&lt;/p&gt;
&lt;p&gt;But you can’t build the dragon on your own. You can’t say you know how to build a dragon until you’ve built one yourself.&lt;/p&gt;
&lt;p&gt;Watching the video doesn’t cut it. You have to sit down and figure it out. Build the dragon. Code.&lt;/p&gt;
&lt;p&gt;Unfortunately, there are no shortcuts.&lt;/p&gt;
&lt;p&gt;Once you can build the dragon on your own. You claim victory upon it. You can change it however you wish. You can make it breathe fire, extend its wings, fly, stand on two legs. Many things are possible.&lt;/p&gt;
&lt;p&gt;But first, build the dragon. Code. Figure it out.&lt;/p&gt;
&lt;h2 id=&quot;stop-googling&quot;&gt;Stop googling&lt;/h2&gt;
&lt;p&gt;There’s no point.&lt;/p&gt;
&lt;p&gt;Googling only works in two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you need general answers to your questions&lt;/li&gt;
&lt;li&gt;When you can frame your questions specifically to a single topic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;“How to build a dragon with LEGO blocks” isn’t something entirely google-able. Sure, maybe you’ll find a blueprint from Google, but it’s likely the blueprint shows you how to build a different dragon. It’s not the one you’re trying to build.&lt;/p&gt;
&lt;p&gt;Then what’s the point of Googling? So you can use a different blueprint?&lt;/p&gt;
&lt;p&gt;Stop running away. Sit down and figure it out.&lt;/p&gt;
&lt;h2 id=&quot;what-if-you-don%E2%80%99t-know-the-right-answer%3F&quot;&gt;What if you don’t know the right answer?&lt;/h2&gt;
&lt;p&gt;School is easy because there’s always a correct answer to every problem.&lt;/p&gt;
&lt;p&gt;But life? Life is difficult. Nobody has the correct answer because there isn’t one.&lt;/p&gt;
&lt;p&gt;Guess what? It’s okay if you don’t have the right answer.&lt;/p&gt;
&lt;p&gt;Do the work.&lt;/p&gt;
&lt;p&gt;Sit down and figure it out.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using small pockets of idle time</title>
    <link href="https://zellwk.com/blog/idle-time/"/>
    <updated>2019-01-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/idle-time/</id>
    <content type="html">&lt;p&gt;Let’s say you finish a task before the time is up. You have another 5 to 15 minutes more. What do you do with this time?&lt;/p&gt;
&lt;p&gt;If you get distracted during work, you may also end up with this 5 to 15 minutes left. What do you do with it?&lt;/p&gt;
&lt;p&gt;If you find yourself in a distracting situation, like having to take care of a baby who cries every now and then. You probably have 5 to 15 minutes pockets of time very often. How do you use this time?&lt;/p&gt;
&lt;p&gt;I think you can use it in four possible ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use it do errands&lt;/li&gt;
&lt;li&gt;Use it to learn&lt;/li&gt;
&lt;li&gt;Start the next thing&lt;/li&gt;
&lt;li&gt;Use it to chill&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;use-it-to-do-errands&quot;&gt;Use it to do errands&lt;/h2&gt;
&lt;p&gt;The most obvious thing to do is knock something off your todo-list. Ideally, you want something that’s urgent or important. And it doesn’t take up a lot of time.&lt;/p&gt;
&lt;p&gt;Here’s a possible list of things I cooked up with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reply emails&lt;/li&gt;
&lt;li&gt;Make a phone call&lt;/li&gt;
&lt;li&gt;Chat with someone&lt;/li&gt;
&lt;li&gt;Eat something&lt;/li&gt;
&lt;li&gt;Do groceries shopping online&lt;/li&gt;
&lt;li&gt;Do 1 push up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do this, make sure you keep a running list of small errands. Trying to search for an errand to do, deciding to do it, and doing it often takes more than 5 to 15 minutes.&lt;/p&gt;
&lt;h2 id=&quot;use-it-to-learn&quot;&gt;Use it to learn&lt;/h2&gt;
&lt;p&gt;I used to hate learning in distracting environments. I can’t even finish a page in a book or watch a 2-minute video before someone interrupts me!&lt;/p&gt;
&lt;p&gt;When I get interrupted, rage builds up inside 😡.&lt;/p&gt;
&lt;p&gt;I realized this rage builds up because I wanted things to be perfect. I want to be in my room. I want to have an undisturbed block of time. I want to make sure my back isn’t hurting, etc.&lt;/p&gt;
&lt;p&gt;But we don’t need situations to be perfect to learn. We can tell ourselves this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If we read 1 sentence, that’s enough&lt;/li&gt;
&lt;li&gt;If we watch 5 seconds of video, that’s enough&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we get distracted, we’ll just resume from where we left off.&lt;/p&gt;
&lt;h2 id=&quot;start-the-next-thing&quot;&gt;Start the next thing&lt;/h2&gt;
&lt;p&gt;If you have 5 to 15 minutes of undisturbed time left over, the best thing you can do is start the doing the next important thing.&lt;/p&gt;
&lt;p&gt;Stop when your 5 to 15 minutes is up. Yes, even if you’re only halfway into the next thing.&lt;/p&gt;
&lt;p&gt;When there’s unfinished business, we want to finish things up. And our brains work overtime without us knowing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The best way is always to stop when you are going good and when you know what will happen next. If you do that every day… you will never be stuck.&lt;/p&gt;
&lt;p&gt;Always stop while you are going good and don’t think about it or worry about it until you start to write the next day.&lt;/p&gt;
&lt;p&gt;That way your subconscious will work on it all the time. But if you think about it consciously or worry about it you will kill it and your brain will be tired before you start.
— Ernest Hemingway&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;use-it-to-chill&quot;&gt;Use it to chill&lt;/h2&gt;
&lt;p&gt;It feels like taboo to waste time and do nothing. After all, we have too much to do, why are we wasting time here?&lt;/p&gt;
&lt;p&gt;But it might just be the thing we need.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need boredom to be creative.&lt;/li&gt;
&lt;li&gt;We need to relax to perform.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And sometimes, 5 minutes of rest can get you enough clarity to do the most important work for the rest of the day.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Remember, you’re free to use this 5 to 15 minutes any way you want. It’s not a stupid block of time where you can do nothing with it. It’s a gift. Do what you want with it.&lt;/p&gt;
&lt;p&gt;One simple reframe can change how you spend your time. It can change how your day turns out. Compounded over time, it changes your life.&lt;/p&gt;
&lt;p&gt;What will you do with the next 5 to 15 minutes?&lt;/p&gt;
&lt;p&gt;Let me know in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Year end review—2018</title>
    <link href="https://zellwk.com/blog/review-2018/"/>
    <updated>2018-12-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/review-2018/</id>
    <content type="html">&lt;p&gt;We’re already at the end of 2018. This year passed by so quickly. To be honest, 2018 is a weird year for me because it’s filled with great success, but at the same time, I feel like nothing special has happened.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;results-in-2018&quot;&gt;Results in 2018&lt;/h2&gt;
&lt;p&gt;I’ve been measuring results in terms of money for a few years now. I know it’s not the best measure of results, but I can’t help it. It’s an important measure.&lt;/p&gt;
&lt;p&gt;From 2014 to 2016, I was able to make ~$50k a year from both freelancing and products. I stopped freelancing since 2016 to work on products full time. My revenue tanked.&lt;/p&gt;
&lt;p&gt;My worst year was 2017… I only earned $34k.&lt;/p&gt;
&lt;p&gt;You can imagine why I’m flustered about money last year—I didn’t earn enough. If I don’t earn enough, I’d have to find a job. If I find a job, I wouldn’t have enough time to   create content.&lt;/p&gt;
&lt;p&gt;Luckily, 2018 has been great in terms of money. I earned $40k in January. This let me focus on blogging and creating Learn JavaScript. Later, in July, I launched Learn JavaScript again and earned $56k.&lt;/p&gt;
&lt;p&gt;I earned $96k in 2018 in total. Almost every cent came from Learn JavaScript.&lt;/p&gt;
&lt;h3 id=&quot;subscriber-count&quot;&gt;Subscriber count&lt;/h3&gt;
&lt;p&gt;The second most important metric is subscriber count. I keep a close eye on subscriber count because the number of subscribers I have affects the amount of money I can make.&lt;/p&gt;
&lt;p&gt;In January 2018, I have 11,500 subscribers. Now, I have 19,000 subscribers.&lt;/p&gt;
&lt;p&gt;19,000! I never imagined I’ll speak to 19,000 people by the end of the year. It looks like I’ve been providing good resources and good value, which is reassuring.&lt;/p&gt;
&lt;h2 id=&quot;my-greatest-failure&quot;&gt;My greatest failure&lt;/h2&gt;
&lt;p&gt;My greatest success is Learn JavaScript. It’s an irony that my greatest failure this year is also Learn JavaScript.&lt;/p&gt;
&lt;p&gt;I wanted to finish Learn JavaScript by June in 2018. I declared it in my &lt;a href=&quot;https://zellwk.com/blog/review-2017/&quot; title=&quot;Year end review 2017&quot;&gt;year-end review in 2017&lt;/a&gt;. But I didn’t complete the course.&lt;/p&gt;
&lt;p&gt;In fact, it’s still not done today. I’m still working on it. I wrote about the why and details about when it’s going to be complete in &lt;a href=&quot;https://zellwk.com/blog/learn-javascript-completion-date/&quot; title=&quot;When will Learn JavaScript be completed?&quot;&gt;another blog post&lt;/a&gt;, so I’m not going to repeat myself here.&lt;/p&gt;
&lt;p&gt;By the way, &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript&quot;&gt;Learn JavaScript&lt;/a&gt; is a damn bloody good course. It’s for you if you are serious about learning JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;other-things-i-did%2Fthat-happened&quot;&gt;Other things I did/that happened&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Created 50 blog posts&lt;/li&gt;
&lt;li&gt;Created 34 videos&lt;/li&gt;
&lt;li&gt;Spoke at JSConf Asia&lt;/li&gt;
&lt;li&gt;Took a memory program&lt;/li&gt;
&lt;li&gt;Taught a marketing workshop&lt;/li&gt;
&lt;li&gt;Learned how to heal&lt;/li&gt;
&lt;li&gt;My grandfather died&lt;/li&gt;
&lt;li&gt;My baby girl come into this world&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to talk a little about each thing.&lt;/p&gt;
&lt;h3 id=&quot;50-blog-posts&quot;&gt;50 blog posts&lt;/h3&gt;
&lt;p&gt;Wow! I never imagined I’d be able to write 1 blog post per week consistently for one year. I’ve failed at this goal consistently for three years straight.&lt;/p&gt;
&lt;p&gt;I’m glad I finally accomplished it.&lt;/p&gt;
&lt;p&gt;I’m glad you let me share my thoughts with you.&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;
&lt;h3 id=&quot;34-videos-posts&quot;&gt;34 videos posts&lt;/h3&gt;
&lt;p&gt;That’s pretty good for my first year of videos! I’ve gone from someone who doesn’t know how to setup a recording, to someone who publishes a video each week.&lt;/p&gt;
&lt;p&gt;I’m also converting my videos into a Podcast called Fridays with Zell. I don’t think many people knows or subscribes to the podcast yet though.&lt;/p&gt;
&lt;p&gt;Videos are fun. They give me a chance to interact with people in a different way. I hope you’re enjoying the videos. If not, let me know and I’ll try to improve.&lt;/p&gt;
&lt;h3 id=&quot;i-spoke-at-jsconf-asia&quot;&gt;I spoke at JSConf Asia&lt;/h3&gt;
&lt;p&gt;Continuing with my lucky stroke of speaking at conferences, I had the privilege to speak at JSConf Asia this year. My topic was: “What writing about frontend dev taught me about communicating with the world”.&lt;/p&gt;
&lt;p&gt;I talked about the three most important lessons I learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Silence the critic&lt;/li&gt;
&lt;li&gt;It’s about them&lt;/li&gt;
&lt;li&gt;Be human&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This topic scared me. I talked about something that had NOTHING to do with web development in a JavaScript conference.&lt;/p&gt;
&lt;p&gt;Is this topic going to be relevant? Will people boo at me? Will I make a fool out of myself? These thoughts ran through my mind for months before I got on stage.&lt;/p&gt;
&lt;p&gt;I’m glad I gave this talk.&lt;/p&gt;
&lt;p&gt;Many people resonated with it. And for some people, it’s what’s they needed.&lt;/p&gt;
&lt;p&gt;You can find a recording of the talk on &lt;a href=&quot;https://youtu.be/XnDGJrvEzJg&quot; title=&quot;What Writing About Frontend Dev Taught Me About Communicating with the world&quot;&gt;here&lt;/a&gt;. I hope you watch it. It’s the most important message I have for you this year.&lt;/p&gt;
&lt;p&gt;And yes, I have more messages like these that are dying to come out from within. I’ll likely write them in my blog posts in 2019.&lt;/p&gt;
&lt;h3 id=&quot;i-spoke-at-cssconf-china&quot;&gt;I spoke at CSSConf China&lt;/h3&gt;
&lt;p&gt;I was lucky to be invited to speak at CSSConf China too. It was an &lt;a href=&quot;https://zellwk.com/blog/css-conf-china/&quot; title=&quot;My experience at CSS Conf China&quot;&gt;eye-opening experience&lt;/a&gt;. People in China do things completely different from people in the western world.&lt;/p&gt;
&lt;p&gt;I had such a blast at the conference. I also loved getting to know some good friends there.&lt;/p&gt;
&lt;p&gt;To be honest, I’m not sure whether I’ll be able to speak at conferences anymore. I’ve gotten to a point where I feel that I have nothing to share.&lt;/p&gt;
&lt;p&gt;Nothing technical at least.&lt;/p&gt;
&lt;p&gt;Not sure if conference organizers would invite me to their conferences. I know for sure I’m not going to send in any CFPs this year.&lt;/p&gt;
&lt;h3 id=&quot;i-took-a-memory-program&quot;&gt;I took a memory program&lt;/h3&gt;
&lt;p&gt;My memory is decent. I can remember most concepts taught when I was at school, as long as I listened to the lectures. So I did quite well in school.&lt;/p&gt;
&lt;p&gt;But I took the memory program anyway. I discovered that I can be much smarter than I thought I was. Since taking the program, I can remember things much faster, retain them much longer (maybe even forever!), and I have a better mental capacity.&lt;/p&gt;
&lt;p&gt;With this increased mental capacity, I built a new habit that let me learn for 1.5 hours a day and still produce 40% more content. I wrote about this experiment &lt;a href=&quot;https://zellwk.com/blog/becoming-more-productive-while-working-less/&quot; title=&quot;Becoming more productive while working less&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is easily one of the most life-changing programs I’ve been on. It’s not life-changing immediately after the program because you only learn to learn faster.&lt;/p&gt;
&lt;p&gt;But the lessons taught, compounded for life? Now, that’s a great investment.&lt;/p&gt;
&lt;p&gt;I know many other courses that are great investments as well. But I’m reluctant to talk about them publicly because people just roll their eyes when I share them. If you’re interested, feel free to email me. I’ll tell you about them.&lt;/p&gt;
&lt;h3 id=&quot;taught-a-marketing-workshop&quot;&gt;Taught a marketing workshop&lt;/h3&gt;
&lt;p&gt;I co-taught a marketing workshop for a group of ~15 students this year.&lt;/p&gt;
&lt;p&gt;This was interesting for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I never had any experience teaching marketing before. I’ve never even blogged about it too!&lt;/li&gt;
&lt;li&gt;I knew this group of students as friends for a while now. The group dynamics was challenging for me.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I learned so much about teaching marketing. I learned so much about marketing myself. It reaffirmed my views about how I’m doing marketing.&lt;/p&gt;
&lt;p&gt;Marketing is not sleazy. Marketing is about making change happen. And there’s a way to do it right.&lt;/p&gt;
&lt;p&gt;I’m still learning it, but I think I’m on the right track.&lt;/p&gt;
&lt;h3 id=&quot;i-learned-how-to-heal&quot;&gt;I learned how to heal&lt;/h3&gt;
&lt;p&gt;Ha! This is probably the weirdest thing you’ll hear me say. This is because programmers have a stereotype where we’re  nerds that only care about logic and computers.&lt;/p&gt;
&lt;p&gt;But programmers aren’t really all like that. We’re human too. And because we’re humans, we have our own interests and motivations.&lt;/p&gt;
&lt;p&gt;I took a program because I wanted to heal myself. I wanted to have more energy. In this program, I learned how to heal myself, and how to heal other people.&lt;/p&gt;
&lt;p&gt;I used the techniques I learned to heal my wife after childbirth. She’s recovering quickly as a result. I furthered my studies through a series of healing clinics with a few friends. We healed people who came.&lt;/p&gt;
&lt;p&gt;It’s okay to learn things other than programming. Our lives don’t revolve around programming. Programming is just one part of our lives.&lt;/p&gt;
&lt;p&gt;I have many other things that I want to learn still. I’m especially interested in things you can’t learn from the internet.&lt;/p&gt;
&lt;h3 id=&quot;my-grandfather-died&quot;&gt;My grandfather died&lt;/h3&gt;
&lt;p&gt;Life’s just different after someone dies. I believe my grandfather passed away in peace. And I’m complete with him.&lt;/p&gt;
&lt;p&gt;I’m grateful that I was able to complete his journey with him.&lt;/p&gt;
&lt;h3 id=&quot;my-baby-girl-came-into-this-world&quot;&gt;My baby girl came into this world&lt;/h3&gt;
&lt;p&gt;When a baby comes into your world, your original world gets destroyed. Everything will revolve around the baby for a while. How long? I don’t know. It’s probably going to be chaotic over here in my household for a while longer.&lt;/p&gt;
&lt;p&gt;But here’s something I realized:&lt;/p&gt;
&lt;p&gt;When something happens, I’ll throw everything aside for my child. I’ll also throw everything aside for my wife.&lt;/p&gt;
&lt;p&gt;I’m still trying to understand and process these shifts though. And I’m interested to see how this will change my attitude towards work and life.&lt;/p&gt;
&lt;h2 id=&quot;the-plan-for-2019&quot;&gt;The plan for 2019&lt;/h2&gt;
&lt;p&gt;Four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn JavaScript&lt;/li&gt;
&lt;li&gt;Web development guide&lt;/li&gt;
&lt;li&gt;Improving the blog&lt;/li&gt;
&lt;li&gt;Structured mini-courses&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;learn-javascript&quot;&gt;Learn JavaScript&lt;/h3&gt;
&lt;p&gt;My first priority is to complete Learn JavaScript. If I am realistic, I would only be able to complete the course by December 2019.&lt;/p&gt;
&lt;p&gt;But I’m going to challenge my limits and try to complete it by June 2019.&lt;/p&gt;
&lt;p&gt;Will I succeed? I don’t know. Let’s try it out.&lt;/p&gt;
&lt;h3 id=&quot;web-development-guide&quot;&gt;Web development guide&lt;/h3&gt;
&lt;p&gt;Many people asked me to give them a roadmap for learning web development. They want to know what to learn first, what to learn next, and how to get hired as a developer quickly.&lt;/p&gt;
&lt;p&gt;I want to write a guide for these people. I have a unique viewpoint to these questions. I believe my answers will help these people out.&lt;/p&gt;
&lt;p&gt;I want to give this guide away for free. It’ll help the community more than any premium courses out there. This would be my second focus after Learn JavaScript.&lt;/p&gt;
&lt;p&gt;I hope this project can turn into a hardcover book too. I’ve wanted to make one for the longest time ever. But I’m not sure if any publisher would take it up. I’m not going to actively look for publishers though. So we’ll see if I get lucky.&lt;/p&gt;
&lt;h3 id=&quot;working-through-my-blog&quot;&gt;Working through my blog&lt;/h3&gt;
&lt;p&gt;If you’re new to my blog, you’ll probably be overwhelmed by the amount of content I have. It’s understandable. You’re not the first.&lt;/p&gt;
&lt;p&gt;After all, my blog lacks proper navigation for people who’re new.&lt;/p&gt;
&lt;p&gt;After I’m done with the above two (assuming I can finish them), I’ll redesign my blog. I’ll add search and tags back to the articles and videos I make.&lt;/p&gt;
&lt;h3 id=&quot;structured-mini-courses&quot;&gt;Structured mini-courses&lt;/h3&gt;
&lt;p&gt;You’ve seen the Git video series, right?&lt;/p&gt;
&lt;p&gt;When I’m done producing the entire Git series, I’m going to put up a landing page. This page lets you go through every Git video in an easily digestible manner.&lt;/p&gt;
&lt;p&gt;I’m going to create other series this year as well because I think it’ll help many people. Two series I’ve thought are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Debugging CSS&lt;/li&gt;
&lt;li&gt;Debugging JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They’re gonna be free too.&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;Thanks for reading this review. I’m honoured you took the time to read through this wall of text.&lt;/p&gt;
&lt;p&gt;I’m going back to work now. But as you know, I try to make myself available for questions. Feel free to email me if you have one.&lt;/p&gt;
&lt;p&gt;If you have any course requests, feel free to email me and let me know too. My ears are always open.&lt;/p&gt;
&lt;p&gt;Thanks for letting me do what I do.&lt;/p&gt;
&lt;p&gt;Thank you for the support.&lt;/p&gt;
&lt;p&gt;Here’s to a year ahead. 🍻&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Checking if an input is empty with JavaScript</title>
    <link href="https://zellwk.com/blog/check-empty-input-js/"/>
    <updated>2018-12-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/check-empty-input-js/</id>
    <content type="html">&lt;p&gt;Last week, I shared how to &lt;a href=&quot;https://zellwk.com/blog/check-empty-input-css&quot; title=&quot;Checking if an input is empty with CSS&quot;&gt;check if an input is empty with CSS&lt;/a&gt;. Today, let’s talk about the same thing, but with JavaScript.&lt;/p&gt;
&lt;p&gt;It’s much simpler.&lt;/p&gt;
&lt;p&gt;Here’s what we’re building:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-js/check.gif&quot; alt=&quot;When input is filled, borders should turn green&quot;&gt;&lt;/figure&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;events-to-validate-the-input&quot;&gt;Events to validate the input&lt;/h2&gt;
&lt;p&gt;If you want to validate the input when a user types into the field, you can use the &lt;code&gt;input&lt;/code&gt; event.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const input = document.querySelector(&#39;input&#39;)
input.addEventListener(&#39;input&#39;, evt =&amp;gt; {
  // Validate input
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to validate the input when a user submits a form, you can use the &lt;code&gt;submit&lt;/code&gt; event. Make sure you prevent the default behavior with&lt;code&gt;preventDefault&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t prevent the default behavior, browsers will navigate the user to the URL stated in the action attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const form = document.querySelector(&#39;form&#39;)
form.addEventListener(&#39;submit&#39;, evt =&amp;gt; {
  evt.preventDefault()

  // Validate input
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;validating-the-input&quot;&gt;Validating the input&lt;/h2&gt;
&lt;p&gt;We want to know whether an input is empty. For our purpose, empty means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user hasn’t typed anything into the field&lt;/li&gt;
&lt;li&gt;The user has typed one or more empty spaces, but not  other characters&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In JavaScript, the pass/fail conditions can be represented as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Empty
&#39; &#39;
&#39;  &#39;
&#39;   &#39;

// Filled
&#39;one-word&#39;
&#39;one-word &#39;
&#39; one-word&#39;
&#39; one-word &#39;
&#39;one phrase with whitespace&#39;
&#39;one phrase with whitespace &#39;
&#39; one phrase with whitespace&#39;
&#39; one phrase with whitespace &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checking this is easy. We just need to use the &lt;code&gt;trim&lt;/code&gt; method. &lt;code&gt;trim&lt;/code&gt; removes any whitespace from the front and back of a string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const value = input.value.trim()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the input is valid, you can set &lt;code&gt;data-state&lt;/code&gt; to &lt;code&gt;valid&lt;/code&gt;. If the input is invalid, you can set the &lt;code&gt;data-state&lt;/code&gt; to &lt;code&gt;invalid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;input.addEventListener(&#39;input&#39;, evt =&amp;gt; {
  const value = input.value.trim()

  if (value) {
    input.dataset.state = &#39;valid&#39;
  } else {
    input.dataset.state = &#39;invalid&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Show red borders when filled, but invalid */
input[data-state=&amp;quot;invalid&amp;quot;] {
  border-color: hsl(0, 76%, 50%);;
}

/* Show green borders when valid */
input[data-state=&amp;quot;valid&amp;quot;] {
  border-color: hsl(120, 76%, 50%);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t the end yet. We have a problem.&lt;/p&gt;
&lt;p&gt;When a user enters text into the field, input validation begins. However, if the user removes all text from the field, the input continues to be invalid.&lt;/p&gt;
&lt;p&gt;We don’t want to invalidate the input if the user removes all text. They may need a moment to think, but the invalidated state sets off an unnecessary alarm.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-js/problem.gif&quot; alt=&quot;Form becomes invalid when empty after user types into it&quot;&gt;&lt;/figure&gt;
&lt;p&gt;To fix this, we can check whether the user has entered any text into the input before we &lt;code&gt;trim&lt;/code&gt; it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;input.addEventListener(&#39;input&#39;, evt =&amp;gt; {
  const value = input.value

  if (!value) {
    input.dataset.state = &#39;&#39;
    return
  }

  const trimmed = value.trim()

  if (trimmed) {
    input.dataset.state = &#39;valid&#39;
  } else {
    input.dataset.state = &#39;invalid&#39;
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;476&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;EObQpr&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Empty validation with JavaScript&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/EObQpr/&quot;&gt;Empty validation with JavaScript&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Checking if an input is empty with CSS</title>
    <link href="https://zellwk.com/blog/check-empty-input-css/"/>
    <updated>2018-12-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/check-empty-input-css/</id>
    <content type="html">&lt;p&gt;Is it possible to know if an input is empty with only CSS?&lt;/p&gt;
&lt;p&gt;I had that question when I tried to make an autocomplete component for Learn JavaScript. Basically, I wanted to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide a dropdown if the input is empty&lt;/li&gt;
&lt;li&gt;Show the dropdown if the input is filled&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/autocomplete.gif&quot; alt=&quot;autocomplete demo from https://learnjavascript.today&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I found a way to do it. It’s not perfect. There are a few nuances involved, but I want to share it with you.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-form&quot;&gt;The form&lt;/h2&gt;
&lt;p&gt;First, let’s build a form so we’re on the same page. We’re going to use a simple form with one input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;label for=&amp;quot;input&amp;quot;&amp;gt; Input &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;input&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the input is filled, we want to change its &lt;code&gt;border-color&lt;/code&gt; to green. Here’s an example of what we’re creating:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check.gif&quot; alt=&quot;when input is filled, borders should turn green&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;checking-if-the-input-is-empty&quot;&gt;Checking if the input is empty&lt;/h2&gt;
&lt;p&gt;I relied on HTML form validation to check whether the input is empty. That meant I needed a &lt;code&gt;required&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;label&amp;gt; Input &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;input&amp;quot; id=&amp;quot;input&amp;quot; required /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, it works fine when the input is filled. Borders turned green.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check.gif&quot; alt=&quot;borders turned green when input is filled&quot;&gt;&lt;/figure&gt;
&lt;p&gt;But there’s a problem: If the user enters a whitespace into the field, the borders turn green too.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check-whitespace.gif&quot; alt=&quot;Borders turn green even if user enters a whitespace&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Technically, this is correct. The input is filled because the user typed something into it.&lt;/p&gt;
&lt;p&gt;But I didn’t want whitespaces to trigger a blank dropdown menu (for the autocomplete component).&lt;/p&gt;
&lt;p&gt;It wasn’t enough. I needed a more stringent check.&lt;/p&gt;
&lt;h2 id=&quot;further-checks&quot;&gt;Further checks&lt;/h2&gt;
&lt;p&gt;HTML gives you the ability to validate inputs with regular expressions with the &lt;code&gt;pattern&lt;/code&gt; attribute. I decided to test it out.&lt;/p&gt;
&lt;p&gt;Since I didn’t want whitespaces to be recognized, I started with the &lt;code&gt;\S+&lt;/code&gt; pattern. This pattern meant: One or more characters that’s not a whitespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;label&amp;gt; Input &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;input&amp;quot; id=&amp;quot;input&amp;quot; required pattern=&amp;quot;\S+&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure enough, it worked. If a user enters a whitespace into the field, the input doesn’t get validated.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check-pattern-pre1.gif&quot; alt=&quot;Input doesn&#39;t get validated when whitespaces are entered&quot;&gt;&lt;/figure&gt;
&lt;p&gt;But when a whitespace is entered (anywhere) into the input, the input gets invalidated.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check-pattern1.gif&quot; alt=&quot;Borders turned from greet to black when a whitespace is added.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Unfortunately, this pattern didn’t work in my use case.&lt;/p&gt;
&lt;p&gt;In Learn JavaScript’s autocomplete component, I taught students how to complete a list of countries. The names of some countries had spaces…&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/autocomplete.gif&quot; alt=&quot;Dropdown contains countries with names that have spaces in them. For example, United States.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;I had to include whitespaces in the mix.&lt;/p&gt;
&lt;p&gt;The next best alternative I could think of is &lt;code&gt;\S+.*&lt;/code&gt;. This means 1 or more non-whitespace characters, followed by zero or more (any) characters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;label&amp;gt; Input &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;input&amp;quot; id=&amp;quot;input&amp;quot; required pattern=&amp;quot;\S+.*&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked! I can enter whitespaces into the mix now!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check-pattern2.gif&quot; alt=&quot;Borders remained green when whitespace is added in the middle of the input&quot;&gt;&lt;/figure&gt;
&lt;p&gt;But there’s one more problem… the input doesn’t validate if you START with a whitespace…&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-input-validation-css/check-pattern3.gif&quot; alt=&quot;Borders turned black when whitespace is added to the start of input&quot;&gt;&lt;/figure&gt;
&lt;p&gt;And that’s the problem I couldn’t resolve. More on this later.&lt;/p&gt;
&lt;p&gt;When I worked on this article, I came across another interesting question: Is it possible to style an invalid state when the input is filled incorrectly?&lt;/p&gt;
&lt;h2 id=&quot;invalidating-the-input&quot;&gt;Invalidating the input&lt;/h2&gt;
&lt;p&gt;We don’t want to use &lt;code&gt;:invalid&lt;/code&gt; because we’ll kickstart the input with an invalid state. (When the input is empty, it’s already invalid).&lt;/p&gt;
&lt;p&gt;This is where Chris Coyier swooped in to the rescue with &amp;quot;&lt;a href=&quot;https://css-tricks.com/form-validation-ux-html-css/&quot; title=&quot;Form Validation UX in HTML and CSS&quot;&gt; Form Validation UX in HTML and CSS&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;In the article, Chris talks about a &lt;code&gt;:placeholder-shown&lt;/code&gt; pseudo-class. It can be used to check whether a placeholder is shown.&lt;/p&gt;
&lt;p&gt;The idea is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You add a placeholder to your input&lt;/li&gt;
&lt;li&gt;If the placeholder is hidden, it means the user typed something into the field&lt;/li&gt;
&lt;li&gt;Proceed with validation (or invalidation)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the CSS (simplified version. For the complete version, check out &lt;a href=&quot;https://css-tricks.com/form-validation-ux-html-css/&quot; title=&quot;Form Validation UX in HTML and CSS&quot;&gt;Chris’s article&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Show red borders when filled, but invalid */
input:not(:placeholder-shown) {
  border-color: hsl(0, 76%, 50%);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I had both validation AND invalidation styles, I had to ensure the valid styles came after the invalid styles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Show red borders when filled, but invalid */
input:not(:placeholder-shown) {
  border-color: hsl(0, 76%, 50%);;
}

/* Show green borders when valid */
input:valid {
  border-color: hsl(120, 76%, 50%);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a demo for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;486&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;dgEKxX&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Pure CSS Empty validation&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/dgEKxX/&quot;&gt;Pure CSS Empty validation&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Note: Edge doesn’t support &lt;code&gt;:placeholder-shown&lt;/code&gt;,  so it’s probably not a good idea to use it in production yet. There’s no good way to detect this feature.&lt;/p&gt;
&lt;p&gt;Now back to the problem I couldn’t resolve.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-with-pattern&quot;&gt;The problem with pattern&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;pattern&lt;/code&gt; attribute is wonderful because it lets you accept a regular expression. This regular expression lets you validate the input with anything you can think of.&lt;/p&gt;
&lt;p&gt;But… &lt;strong&gt;the regular expression must match the text completely&lt;/strong&gt;. If the text doesn’t get matched completely, the input gets invalidated.&lt;/p&gt;
&lt;p&gt;This created the problem I mentioned above. (Reminder of the problem: If a user enters a whitespace first, the input becomes invalid).&lt;/p&gt;
&lt;p&gt;I couldn’t find a regular expression that worked for all use-cases that I thought of. If you want to try your hand at creating a regular expression that I need, I’d be more than welcome to receive the help!&lt;/p&gt;
&lt;p&gt;Here are the use-cases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Should not match
&#39;&#39;
&#39; &#39;
&#39;  &#39;
&#39;   &#39;

// Should match
&#39;one-word&#39;
&#39;one-word &#39;
&#39; one-word&#39;
&#39; one-word &#39;
&#39;one phrase with whitespace&#39;
&#39;one phrase with whitespace &#39;
&#39; one phrase with whitespace&#39;
&#39; one phrase with whitespace &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Then again, I might be overthinking it… 🙄).&lt;/p&gt;
&lt;h2 id=&quot;update%3A-problem-solved!&quot;&gt;Update: Problem solved!&lt;/h2&gt;
&lt;p&gt;Many readers were generous enough to email me their solutions. I want to thank everyone who helped. Thank you so much!&lt;/p&gt;
&lt;p&gt;The cleanest solution I received is: &lt;code&gt;.*\S.*&lt;/code&gt; by &lt;a href=&quot;https://www.nvinteractive.com/&quot;&gt;Daniel O’Connor&lt;/a&gt;. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt;: Any character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt;: Followed &lt;em&gt;one&lt;/em&gt; non-whitespace character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.*&lt;/code&gt;: Followed by any character&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other regexes I received include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.*\S+.*&lt;/code&gt; by &lt;a href=&quot;https://twitter.com/matthewjmink&quot;&gt;Matt Mink&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s*\S.*&lt;/code&gt; by &lt;a href=&quot;https://github.com/pcr910303&quot;&gt;Sungbin Jo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^\s?(?=\S).*&lt;/code&gt; with a lookahead by &lt;a href=&quot;https://twitter.com/KonstantinRouda&quot;&gt;Konstantin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And many others!&lt;/p&gt;
&lt;p&gt;Here’s a codepen with the updated solution by Daniel:&lt;/p&gt;
&lt;p data-height=&quot;486&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;NeRaPw&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Pure CSS Empty validation&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/NeRaPw/&quot;&gt;Pure CSS Empty validation&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Yes, it is possible to validate a form with pure CSS, but there are potential problems with validation when whitespace characters are involved.&lt;/p&gt;
&lt;p&gt;If you don’t mind the whitespaces, it works perfectly. Have fun trying this pattern out! (Sorry, I can’t help it).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Gitignore file</title>
    <link href="https://zellwk.com/blog/gitignore-file/"/>
    <updated>2018-12-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gitignore-file/</id>
    <content type="html">&lt;p&gt;If you don’t want to commit a file into a Git repository, it makes sense not to have the file show up in the staging area.&lt;/p&gt;
&lt;p&gt;You can do this with a Gitignore file.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;In the video, we installed a library called Typi with npm. Many files come into our staging area when we installed Typi.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/gitignore/node-modules-folder.png&quot; alt=&quot;Node modules files in staging area&quot;&gt;&lt;/figure&gt;
&lt;p&gt;To prevent &lt;code&gt;node_modules&lt;/code&gt; and its files from appearing in the staging area, you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;.gitignore&lt;/code&gt; file at the root of the project&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;node_modules&lt;/code&gt; in the Gitignore file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the staging area becomes clean. AT this point, you want to commit your &lt;code&gt;.gitignore&lt;/code&gt; file to preserve what to ignore.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/gitignore/clean-staging-area.png&quot; alt=&quot;Node modules removed from staging area&quot;&gt;&lt;/figure&gt;
&lt;h2 id=&quot;how-to-use-gitignore&quot;&gt;How to use Gitignore&lt;/h2&gt;
&lt;p&gt;Each line in the Gitignore file can be used to match files and folders you don’t want to see in the staging area.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To ignore a file, you write the file name.&lt;/li&gt;
&lt;li&gt;To ignore a folder, you write the folder name&lt;/li&gt;
&lt;li&gt;To ignore an extension, you can use a &lt;code&gt;*&lt;/code&gt; wildcard, like &lt;code&gt;*.log&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>Why support older browsers?</title>
    <link href="https://zellwk.com/blog/older-browsers-why/"/>
    <updated>2018-12-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/older-browsers-why/</id>
    <content type="html">&lt;p&gt;Why you have to care about old browsers?&lt;/p&gt;
&lt;p&gt;Who use old browsers? Probably, users with old computers?&lt;/p&gt;
&lt;p&gt;If they use old computers, they probably don’t have money to buy a new one.&lt;/p&gt;
&lt;p&gt;If they don’t have money to buy a new computer, they probably will not buy anything from you as well.&lt;/p&gt;
&lt;p&gt;If they will not buy anything from you, why you have to care about supporting their browsers?&lt;/p&gt;
&lt;p&gt;To a business person, that’s a perfectly reasonable train of thought. But why do we developers still insist on supporting older browsers?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;let%E2%80%99s-break-it-down&quot;&gt;Let’s break it down&lt;/h2&gt;
&lt;p&gt;There are so many layers of assumptions on the original thought process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Who use old browsers? Probably, users with old computers? If they use old computers, they probably don’t have money to buy a new one&amp;quot;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While it’s true that people use old browsers because they old computers, we cannot assume that people cannot afford to buy new ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maybe their company doesn’t want to buy them one.&lt;/li&gt;
&lt;li&gt;Maybe they’re happy with their computer, and they don’t want to upgrade.&lt;/li&gt;
&lt;li&gt;Maybe they don’t have the knowledge to upgrade their computers.&lt;/li&gt;
&lt;li&gt;Maybe they don’t have access to new computers&lt;/li&gt;
&lt;li&gt;Maybe they’re bound to mobile phones that don’t have good browsers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t assume.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If they don’t have money to buy a new computer, they probably will not buy anything from you as well. If they will not buy anything from you, why you have to care about supporting their browsers?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have to zoom out into other areas to talk about this point.&lt;/p&gt;
&lt;h2 id=&quot;wheelchair-accessibility&quot;&gt;Wheelchair accessibility&lt;/h2&gt;
&lt;p&gt;If you’ve been around Singapore, you’ll notice there’s a ramp or an elevator next to (almost) every staircase.&lt;/p&gt;
&lt;p&gt;But why? Why do the government and (even private corporations) spend money on elevators and ramps? Why build them when staircases are enough to bring people from a lower elevation to a higher one?&lt;/p&gt;
&lt;p&gt;It turns out that some people aren’t fortunate like us. They can’t walk with their feet. They have to sit in wheelchairs, and they can’t wheel themselves up a staircase. The elevators and ramps serve these people.&lt;/p&gt;
&lt;p&gt;And it turns out that more people benefit from elevators and ramps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;People who have weaker knees&lt;/li&gt;
&lt;li&gt;People who have a bicycle or scooter with them&lt;/li&gt;
&lt;li&gt;Parents who’re pushing a baby trolley&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you find yourself pushing anything with wheels, you’ll use the ramp or elevator without thinking twice. You benefit too.&lt;/p&gt;
&lt;p&gt;But the problem is: Nobody earns a single cent from operating the ramps or the elevators? So why build them?&lt;/p&gt;
&lt;p&gt;Because it’s worth it.&lt;/p&gt;
&lt;p&gt;And worth doesn’t always meanm money.&lt;/p&gt;
&lt;h2 id=&quot;consider-global-warming&quot;&gt;Consider global warming&lt;/h2&gt;
&lt;p&gt;You live on Earth. What do you feel about global warming?&lt;/p&gt;
&lt;p&gt;Some people don’t care. It’s okay if forests get burned. It’s okay if companies pollute rivers and release tonnes of carbon dioxide into the air. It doesn’t affect them.&lt;/p&gt;
&lt;p&gt;But there’s a group of people that care. They love the planet we’re living on. They want to give their children a better place to live in. There are lots of reasons why they care.&lt;/p&gt;
&lt;p&gt;Where do you stand?&lt;/p&gt;
&lt;p&gt;Would you give money to a company that destroys the Earth while it operates?&lt;/p&gt;
&lt;p&gt;Maybe you will. Maybe you won’t. Maybe you don’t care. All three options are valid.&lt;/p&gt;
&lt;p&gt;And once again, you see, it’s not always about the money.&lt;/p&gt;
&lt;h2 id=&quot;the-web-is-for-everyone&quot;&gt;The web is for everyone&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The dream behind the Web is of a common information space in which we communicate by sharing information.
— Tim Berners-Lee&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We frontend developers are the custodians of the web. How the web turns out is up to us. We can’t force everyone to build ramps and elevators, but we can make sure we build them ourselves.&lt;/p&gt;
&lt;p&gt;The choice is up to you, really.&lt;/p&gt;
&lt;p&gt;You don’t have to care if you don’t want to.&lt;/p&gt;
&lt;p&gt;Most good frontend developers I know? They care. They choose to be inclusive. It’s what makes us frontend developers.&lt;/p&gt;
&lt;p&gt;We care.&lt;/p&gt;
&lt;p&gt;But sometimes we also have constraints and limits. And we work with those limits.&lt;/p&gt;
&lt;h2 id=&quot;other-articles-in-this-series&quot;&gt;Other articles in this series&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Part 1: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-css&quot; title=&quot;Supporting older browsers&quot;&gt;Supporting older browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-css&quot; title=&quot;Supporting older browsers—Part 2: CSS&quot;&gt;Supporting older browsers—Part 2: CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-js&quot; title=&quot;Supporting older browsers—Part 3: JS&quot;&gt;Supporting older browsers—Part 3: JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: This article&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>What not to save into a Git repository</title>
    <link href="https://zellwk.com/blog/what-not-to-save-into-a-git-repo/"/>
    <updated>2018-11-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/what-not-to-save-into-a-git-repo/</id>
    <content type="html">&lt;p&gt;You should not commit these four types of files into your Git repository.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Files that don’t belong to the project&lt;/li&gt;
&lt;li&gt;Files that are automatically generated&lt;/li&gt;
&lt;li&gt;Libraries (depends on the situation)&lt;/li&gt;
&lt;li&gt;Credentials&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;files-that-don%E2%80%99t-belong-to-the-project&quot;&gt;Files that don’t belong to the project&lt;/h2&gt;
&lt;p&gt;Files like &lt;code&gt;.DS_Store&lt;/code&gt; (for Mac OS), &lt;code&gt;Thumds.db&lt;/code&gt; (for Windows), &lt;code&gt;.vscode&lt;/code&gt; (for code editors) have nothing to do with your project.&lt;/p&gt;
&lt;p&gt;They should not be checked in.&lt;/p&gt;
&lt;h2 id=&quot;files-that-are-automatically-generated&quot;&gt;Files that are automatically generated&lt;/h2&gt;
&lt;p&gt;This includes files from preprocessors (like Sass to CSS). You don’t check in the CSS. You check in the Sass files.&lt;/p&gt;
&lt;p&gt;If you use JavaScript compilers like Webpack or Rollup, you don’t check in the generated JavaScript file. You check in the code you write.&lt;/p&gt;
&lt;h2 id=&quot;libraries&quot;&gt;Libraries&lt;/h2&gt;
&lt;p&gt;If you don’t use a package manager, you should check in your libraries. This is because if you want to download the library, you have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google for the library&lt;/li&gt;
&lt;li&gt;Get to the website&lt;/li&gt;
&lt;li&gt;Find the link&lt;/li&gt;
&lt;li&gt;Download the library&lt;/li&gt;
&lt;li&gt;Put into your project&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This process is tedious. If your code needs the library to work, you should check in the library.&lt;/p&gt;
&lt;p&gt;On the other hand, if you use a package manager, you shouldn’t check in a library because you can install the library with a single command like &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;
&lt;p&gt;You shouldn’t store credentials like usernames, passwords, API keys and API secrets.&lt;/p&gt;
&lt;p&gt;If someone else steals your credentials, they can do nasty things with it. I almost lost $40,00 to $60,000 because a friend accidentally exposed my amazon credentials. Luckily, the amount was waived.&lt;/p&gt;
&lt;p&gt;If you don’t want to get into sticky situations like I did, then don’t store your credentials in a Git repository.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Supporting older browsers—Part 3: JavaScript</title>
    <link href="https://zellwk.com/blog/older-browsers-js/"/>
    <updated>2018-11-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/older-browsers-js/</id>
    <content type="html">&lt;p&gt;It’s easy to provide JavaScript support for older browsers. Most of the time, you just need to use a polyfill.&lt;/p&gt;
&lt;p&gt;But there are more things you can do.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;what%E2%80%99s-a-polyfill%3F&quot;&gt;What’s a polyfill?&lt;/h2&gt;
&lt;p&gt;A Polyfill is a piece of code that tells browsers how to implement a JavaScript feature. Once you add a polyfill, you don’t need to worry about support anymore. It’ll work.&lt;/p&gt;
&lt;p&gt;Here’s how a Polyfill works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It checks whether the feature is supported&lt;/li&gt;
&lt;li&gt;If not, it adds code to support the feature&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s an example of a polyfill at work. It checks if the browser supports &lt;code&gt;Array.prototype.find&lt;/code&gt;. If the browser doesn’t support &lt;code&gt;Array.prototype.find&lt;/code&gt;, it tells the browser how to support it.&lt;/p&gt;
&lt;p&gt;You can find this code on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find&quot; title=&quot;Array.prototype.find&quot;&gt;MDN&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, &#39;find&#39;, {
    value: function(predicate) {
     // 1. Let O be ? ToObject(this value).
      if (this
 -  null) {
        throw new TypeError(&#39;&amp;quot;this&amp;quot; is null or not defined&#39;);
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, &amp;quot;length&amp;quot;)).
      var len = o.length &amp;gt;&amp;gt;&amp;gt; 0;

      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (typeof predicate !== &#39;function&#39;) {
        throw new TypeError(&#39;predicate must be a function&#39;);
      }

      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
      var thisArg = arguments[1];

      // 5. Let k be 0.
      var k = 0;

      // 6. Repeat, while k &amp;lt; len
      while (k &amp;lt; len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];
        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        }
        // e. Increase k by 1.
        k++;
      }

      // 7. Return undefined.
      return undefined;
    },
    configurable: true,
    writable: true
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-polyfills&quot;&gt;Using Polyfills&lt;/h2&gt;
&lt;p&gt;There are two ways to use Polyfills:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Polyfill manually (like in the example above)&lt;/li&gt;
&lt;li&gt;Adding many polyfills at once through a library&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;polyfilling-manually&quot;&gt;Polyfilling manually&lt;/h3&gt;
&lt;p&gt;First, you need to &lt;strong&gt;search for the polyfill&lt;/strong&gt; you need. You should be able to find one if you google around. Smart developers have created polyfills for almost everything you’ll ever need.&lt;/p&gt;
&lt;p&gt;Once you found the polyfill, &lt;strong&gt;use the above process&lt;/strong&gt; to create provide support to older browsers.&lt;/p&gt;
&lt;h3 id=&quot;adding-many-polyfills-at-once&quot;&gt;Adding many polyfills at once&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Some libraries contain many polyfills.&lt;/strong&gt; &lt;a href=&quot;https://github.com/paulmillr/es6-shim&quot; title=&quot;ES6 shim&quot;&gt;ES6-shim&lt;/a&gt; is one example of such a library. It provides support for all ES6 features on older browsers.&lt;/p&gt;
&lt;p&gt;(Note: A polyfill is a subset of a shim. A shim is a library that brings a new API to an older environment).&lt;/p&gt;
&lt;h2 id=&quot;using-cutting-edge-javascript-features&quot;&gt;Using cutting-edge JavaScript features&lt;/h2&gt;
&lt;p&gt;If you want to use cutting-edge JavaScript features, consider adding Babel into your build process.&lt;/p&gt;
&lt;p&gt;Babel is a tool that compiles JavaScript. During this compile process, it can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add any shim / polyfill you need&lt;/li&gt;
&lt;li&gt;Compiles preprocessors into JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More on the second point:&lt;/p&gt;
&lt;p&gt;Babel works offline in your build process. It can read files you pass into it, and then convert these files into JavaScript the browser can read.&lt;/p&gt;
&lt;p&gt;What this means is you can use cutting-edge features like Flow, TypeScript and other cool technologies you’ve heard about. They’ll all work in browsers (provided you pass them through Babel first!)&lt;/p&gt;
&lt;h2 id=&quot;what-if-polyfills-aren%E2%80%99t-enough%3F&quot;&gt;What if polyfills aren’t enough?&lt;/h2&gt;
&lt;p&gt;If polyfills aren’t enough to support the feature, you might want to reconsider the amount of support you provide for the browser in question.&lt;/p&gt;
&lt;p&gt;Do you need to provide the same functionality across different browsers? Maybe you should consider progressive enhancement instead?&lt;/p&gt;
&lt;p&gt;Maybe you can code in a way that doesn’t use the feature?&lt;/p&gt;
&lt;p&gt;Lots of maybes, but you get the drift.&lt;/p&gt;
&lt;h2 id=&quot;how-to-tell-if-a-browser-supports-the-feature%3F&quot;&gt;How to tell if a browser supports the feature?&lt;/h2&gt;
&lt;p&gt;First, I’ll check &lt;a href=&quot;https://caniuse.com/&quot; title=&quot;Can I use?&quot;&gt;caniuse.com&lt;/a&gt;. Write the name of the JavaScript feature you want, and you’ll be able to see browser support levels.&lt;/p&gt;
&lt;p&gt;Here’s an example with [Abort Controller][4]&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/older-browsers/abort-caniuse.png&quot; alt=&quot;Searching for abort controller in caniuse.com&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If [caniuse.com][5] doesn’t give me any information, I’ll check MDN. You’ll find browser support at the bottom of most articles.&lt;/p&gt;
&lt;p&gt;Here’s the example with [Abort Controller][6] again:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/older-browsers/abort-mdn.png&quot; alt=&quot;Searching for abort controller in MDN&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;beware-the-cost-of-javascript&quot;&gt;Beware the cost of JavaScript&lt;/h2&gt;
&lt;p&gt;When you use Polyfills, you add more JavaScript code.&lt;/p&gt;
&lt;p&gt;The problem with adding more JavaScript is, well, there is more JavaScript. And with more JavaScript comes more problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Older browsers usually live in older computers. They may not have enough processing power.&lt;/li&gt;
&lt;li&gt;JavaScript bundles can delay site load. More on this in  “[The cost of JavaScript][7]” by Addy Osmani&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;other-articles-in-this-series&quot;&gt;Other articles in this series&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Part 1: [Supporting older browsers][8]&lt;/li&gt;
&lt;li&gt;Part 2: [Supporting older browsers—Part 2: CSS][9]&lt;/li&gt;
&lt;li&gt;Part 3: This article&lt;/li&gt;
&lt;li&gt;Part 4: Why support older browsers? (To be released!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;It’s easy to add support for JavaScript features. Most of the time, you add a polyfill and call it a day. But be aware of the cost of JavaScript when you do so!&lt;/p&gt;
&lt;p&gt;Sometimes, it might be good to ditch the feature entirely.&lt;/p&gt;
&lt;p&gt;[4]:	https://caniuse.com/#search=Abort “Searching for “abort” in caniuse”
[5]:	https://caniuse.com “Can I use?”
[6]:	https://developer.mozilla.org/en-US/docs/Web/API/AbortController “Searching for abort controller in MDN”
[7]:	https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4 “The cost of JavaScript”
[8]:	/blog/older-browsers-css “Supporting older browsers”
[9]:	/blog/older-browsers-css “Supporting older browsers—Part 2: CSS”&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Undoing changes in Git</title>
    <link href="https://zellwk.com/blog/git-undo/"/>
    <updated>2018-11-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/git-undo/</id>
    <content type="html">&lt;h1 id=&quot;undoing-with-git&quot;&gt;Undoing with Git&lt;/h1&gt;
&lt;p&gt;At this point, you already know Git is like a save point system. What you’ve done so far is to learn to save. But how do you undo, and go back to a previous state?&lt;/p&gt;
&lt;p&gt;That’s what we’re going to cover&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;local-vs-remote&quot;&gt;Local vs Remote&lt;/h2&gt;
&lt;p&gt;It’s more complicated to undo something that’s already on the remote. This is why you want to keep things on your local until they’re kind of confirmed.&lt;/p&gt;
&lt;h2 id=&quot;four-common-scenarios&quot;&gt;Four common scenarios&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Discarding local changes&lt;/li&gt;
&lt;li&gt;Amending the previous commit&lt;/li&gt;
&lt;li&gt;Rolling back to a previous commit&lt;/li&gt;
&lt;li&gt;Reverting a commit that has been pushed to the remote&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;scenario-1%3A-discarding-local-changes&quot;&gt;Scenario 1: Discarding local changes&lt;/h2&gt;
&lt;p&gt;The first scenario is when you’ve created some changes. They’re not committed yet. And you want to delete these changes.&lt;/p&gt;
&lt;p&gt;Let’s say we want to create a new feature. We’re going to add some HTML and CSS into the project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!--In index.html--&amp;gt;
&amp;lt;div class=&amp;quot;feature&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* In CSS file */
.feature {
  font-size: 2em;
  /* Other styles */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To discard these changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the staging area&lt;/li&gt;
&lt;li&gt;Select the files where you want to discard changes&lt;/li&gt;
&lt;li&gt;Right click on the files&lt;/li&gt;
&lt;li&gt;Select discard changes&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-undo/discard.png&quot; alt=&quot;Discard changes in the contextual menu&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;scenario-2%3A-amending-the-previous-commit&quot;&gt;Scenario 2: Amending the previous commit&lt;/h2&gt;
&lt;p&gt;When you have created a commit and you missed out some changes. You want to add these changes in the previous commit message.&lt;/p&gt;
&lt;p&gt;You can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the staging area&lt;/li&gt;
&lt;li&gt;Stage the files to commit&lt;/li&gt;
&lt;li&gt;Click on the amend checkbox&lt;/li&gt;
&lt;li&gt;Edit your commit message&lt;/li&gt;
&lt;li&gt;Commit&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-undo/amend.png&quot; alt=&quot;The amend checkbox in the commit area&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;scenario-3%3A-rolling-back-to-a-previous-commit&quot;&gt;Scenario 3: Rolling back to a previous commit&lt;/h2&gt;
&lt;p&gt;You already have a few commits in your local repository. You decide that you don’t want these commits anymore. You want to “load” your files from a previous state.&lt;/p&gt;
&lt;p&gt;You can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go into the Git History&lt;/li&gt;
&lt;li&gt;Right click the commit you want to roll back to&lt;/li&gt;
&lt;li&gt;Select reset &lt;code&gt;branch&lt;/code&gt; to here&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-undo/reset.png&quot; alt=&quot;Reset option in the contextual menu&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note: You can only reset to a commit that hasn’t been pushed into the remote.&lt;/p&gt;
&lt;h2 id=&quot;scenario-4%3A-reverting-a-commit-that-has-been-pushed-to-the-remote&quot;&gt;Scenario 4: Reverting a commit that has been pushed to the remote&lt;/h2&gt;
&lt;p&gt;If you have a commit that has been pushed into the remote branch, you need to revert it.&lt;/p&gt;
&lt;p&gt;Reverting means undoing the changes by creating a new commit. If you added a line, this revert commit will remove the line. If you removed a line, this revert commit will add the line back.&lt;/p&gt;
&lt;p&gt;To revert, you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the Git history&lt;/li&gt;
&lt;li&gt;Right click on the commit you want to revert&lt;/li&gt;
&lt;li&gt;Select revert commit&lt;/li&gt;
&lt;li&gt;Make sure &lt;code&gt;commit the changes&lt;/code&gt; is checked.&lt;/li&gt;
&lt;li&gt;Click revert&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-undo/revert.png&quot; alt=&quot;Revert in the contextual menu&quot;&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-undo/revert2.png&quot; alt=&quot;Commit the changes option is checked&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;other-scenarios&quot;&gt;Other scenarios&lt;/h2&gt;
&lt;p&gt;Github has a useful article that shows you how to undo almost everything with Git. It will be helpful if you face other scenarios. Read it &lt;a href=&quot;https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/&quot; title=&quot;How to undo almost anything with Git&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Supporting older browsers—Part 2: CSS</title>
    <link href="https://zellwk.com/blog/older-browsers-css/"/>
    <updated>2018-11-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/older-browsers-css/</id>
    <content type="html">&lt;p&gt;There are two ways to provide fallbacks for CSS features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Property fallbacks&lt;/li&gt;
&lt;li&gt;Feature queries&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;property-fallbacks&quot;&gt;Property fallbacks&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If a browser doesn’t recognize a property or its corresponding value, the browser will ignore the property altogether.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When this happens, the browser uses (or falls back) to the previous value it finds.&lt;/p&gt;
&lt;p&gt;This is the easiest way to provide a fallback.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.layout {
  display: block;
  display: grid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, browsers that support CSS Grid will use &lt;code&gt;display: grid&lt;/code&gt;. Browser doesn’t support CSS Grid will fall back to &lt;code&gt;display: block&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;omit-default-values&quot;&gt;Omit default values&lt;/h3&gt;
&lt;p&gt;If the element you’re using defaults to &lt;code&gt;display: block&lt;/code&gt;, you can omit the &lt;code&gt;display: block&lt;/code&gt; declaration. This means you can support CSS Grid with one line of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.layout {
  display: grid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browsers that support CSS Grid will be able to read other CSS properties like &lt;code&gt;grid-template-columns&lt;/code&gt;. Browsers that don’t support CSS Grid can’t.&lt;/p&gt;
&lt;p&gt;This means you can write additional CSS Grid properties without worrying about fallback values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.layout {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-gap: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;feature-queries&quot;&gt;Feature queries&lt;/h2&gt;
&lt;p&gt;Feature queries, or &lt;code&gt;@supports&lt;/code&gt;, tell you whether a CSS property or its corresponding value is supported is supported by the browser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can think of CSS feature queries like &lt;code&gt;if/else&lt;/code&gt; statements in JavaScript.&lt;/strong&gt; It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (property: value) {
  /* Code when property or value is supported*/
}

@supports not (property: value) {
  /* Code when property or value is not supported */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@supports&lt;/code&gt; is helpful if you want browsers to read CSS only if they support a specific property.&lt;/p&gt;
&lt;p&gt;For the CSS Grid example we had above, you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (display: grid) {
  .layout {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 1em;
    padding-left: 1em;
    padding-right: 1em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;padding-left&lt;/code&gt; and &lt;code&gt;padding-right&lt;/code&gt; will only be read by browsers that supports both &lt;code&gt;@supports&lt;/code&gt; and  CSS Grid.&lt;/p&gt;
&lt;p&gt;Jen Simmons has a better example of &lt;code&gt;@supports&lt;/code&gt; at work. She uses feature queries to detect whether browsers support a property like &lt;code&gt;-webkit-initial-letter &lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (initial-letter: 4) or (-webkit-initial-letter: 4) {
  p::first-letter {
     -webkit-initial-letter: 4;
     initial-letter: 4;
     color: #FE742F;
     font-weight: bold;
     margin-right: 0.5em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/older-browsers/initial-letter.gif&quot; alt=&quot;In Safari 9 and above, first letter has a special style&quot;&gt;
  &lt;figcaption&gt;Left: Safari 9 onwards. Right: Others&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Jen’s example brings us to a question: Should sites look the same across browsers? We’ll look at this later. But first, more about feature queries.&lt;/p&gt;
&lt;h3 id=&quot;support-for-feature-queries&quot;&gt;Support for feature queries&lt;/h3&gt;
&lt;p&gt;Features queries have gained &lt;a href=&quot;https://caniuse.com/#search=feature%20queries&quot; title=&quot;Check for feature query support on caniuse.com&quot;&gt;great support&lt;/a&gt;. All current (major) browsers support feature queries.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/older-browsers/feature-queries-support.png&quot; alt=&quot;Support for feature queries&quot;&gt;
  &lt;figcaption&gt;All major browsers support feature queries&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;what-if-a-feature-is-supported%2C-but-feature-queries-aren%E2%80%99t&quot;&gt;What if a feature is supported, but feature queries aren’t&lt;/h3&gt;
&lt;p&gt;This used to be the tricky part. Jen Simmons and other experts have warned us of this possibility. You can read how to handle it &lt;a href=&quot;https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/&quot; title=&quot;Using feature queries in CSS&quot;&gt;in this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s my take: I don’t support IE 11 anymore, so I use feature queries in the way I mentioned above.&lt;/p&gt;
&lt;h2 id=&quot;using-property-fallback-and-feature-queries-at-the-same-time&quot;&gt;Using property-fallback and feature queries at the same time&lt;/h2&gt;
&lt;p&gt;Take look at the following code. What padding values will browsers apply?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@supports (display: grid) {
  .layout {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 1em;
    padding-left: 1em;
    padding-right: 1em;
  }
}

.layout {
  padding-left: 2em;
  padding-right: 2em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The answer is: All browsers will apply &lt;code&gt;2em&lt;/code&gt; of left and right padding.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;This happens because &lt;code&gt;padding-left: 2em&lt;/code&gt; and &lt;code&gt;padding-right: 2em&lt;/code&gt; were declared later in the CSS file. Properties that were declared later override properties that were declared earlier.&lt;/p&gt;
&lt;p&gt;If you want to &lt;code&gt;padding-left: 2em&lt;/code&gt; and &lt;code&gt;padding-right: 2em&lt;/code&gt; to apply only to browsers that don’t support CSS Grid, you can swap the property order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.layout {
  padding-left: 2em;
  padding-right: 2em;
}

@supports (display: grid) {
  .layout {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 1em;
    padding-left: 1em;
    padding-right: 1em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: It’s always a good practice to declare fallback code first in CSS because of its cascading nature.&lt;/p&gt;
&lt;p&gt;This also means, if you’re using both &lt;code&gt;@supports&lt;/code&gt; and &lt;code&gt;@supports not&lt;/code&gt;, you should declare &lt;code&gt;@supports not&lt;/code&gt; first.  It makes your code consistent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Always write &amp;quot;@supports not&amp;quot; first if you use it */
@supports not (display: grid) {
  .layout {
    padding-left: 2em;
    padding-right: 2em;
  }
}

@supports (display: grid) {
  .layout {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 1em;
    padding-left: 1em;
    padding-right: 1em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s talk about whether sites should look the same across browsers.&lt;/p&gt;
&lt;h2 id=&quot;should-sites-look-the-same-across-browsers%3F&quot;&gt;Should sites look the same across browsers?&lt;/h2&gt;
&lt;p&gt;Some people believe that sites should look the same across browsers. They think that branding is important, and stress that sites should look consistent to preserve the brand.&lt;/p&gt;
&lt;p&gt;Other people say no. They believe they should embrace the spirit of progressive enhancement. They can give users with better browsers more love.&lt;/p&gt;
&lt;p&gt;Both views are right, but they come from different angles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The most important point of view comes from users.&lt;/strong&gt; Is your site able to provide users with what they came for?&lt;/p&gt;
&lt;p&gt;If yes, you don’t have to be too strict on the consistency. Go ahead and give better with better browsers even better experiences!&lt;/p&gt;
&lt;h2 id=&quot;other-articles-in-this-series&quot;&gt;Other articles in this series&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Part 1: &lt;a href=&quot;https://zellwk.com/blog/older-browsers&quot; title=&quot;Supporting older browsers&quot;&gt;Supporting older browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: This article&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-js&quot; title=&quot;Supporting older browsers—Part 3: JS&quot;&gt;Supporting older browsers—Part 3: JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: Why support older browsers? (To be released!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;To provide support for CSS features, you can use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Property fallbacks&lt;/li&gt;
&lt;li&gt;Feature queries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you write CSS, make sure you declare fallback code first before the other set of code for browsers with better support.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Git Tags</title>
    <link href="https://zellwk.com/blog/git-tags/"/>
    <updated>2018-11-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/git-tags/</id>
    <content type="html">&lt;p&gt;We use Git tags to create releases. In this video, you’ll learn how to tags manually without Git Flow.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;creating-tags&quot;&gt;Creating tags&lt;/h2&gt;
&lt;p&gt;There are two ways to create a tag.&lt;/p&gt;
&lt;h3 id=&quot;the-first-method%3A&quot;&gt;The first method:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Go to your Git history in your Git client&lt;/li&gt;
&lt;li&gt;Right click on the commit you want to create a tag at&lt;/li&gt;
&lt;li&gt;Select create tag&lt;/li&gt;
&lt;li&gt;Name your tag&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-tag/method1.png&quot; alt=&quot;Right clicking on the commit in Git history&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;the-second-method&quot;&gt;The second method&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Go to the sidebar&lt;/li&gt;
&lt;li&gt;Right click on the branch you want to create a tag at.&lt;/li&gt;
&lt;li&gt;Select create a tag&lt;/li&gt;
&lt;li&gt;Name your tag&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: This will create a tag on the same commit at where the branch is at.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-tag/method2.png&quot; alt=&quot;Right clicking on the branch in the sidebar&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;deleting-a-tag&quot;&gt;Deleting a tag&lt;/h2&gt;
&lt;p&gt;Right click on the tag and select “Delete tag”.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-tag/delete.png&quot; alt=&quot;Contextual menu when right clicking on a tag in the sidebar&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Select delete tag from remote repositories to delete the tag from your remote as well.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-tag/delete2.png&quot; alt=&quot;Choice to delete tag from remote&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pushing-tags&quot;&gt;Pushing tags&lt;/h2&gt;
&lt;p&gt;When you push changes to your remote, you can select &lt;code&gt;push all tags&lt;/code&gt; to push tags into the remote. This is checked by default.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/git-tag/push.png&quot; alt=&quot;Choice to push tag into remote&quot;&gt;
&lt;/figure&gt;
</content>
  </entry>
  
  <entry>
    <title>Supporting older browsers</title>
    <link href="https://zellwk.com/blog/older-browsers/"/>
    <updated>2018-11-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/older-browsers/</id>
    <content type="html">&lt;p&gt;You don’t have to worry much about supporting older browsers today. They’ve been decent ever since Internet Explorer 8 died.&lt;/p&gt;
&lt;p&gt;But the question remains: How should you go about supporting Internet Explorer 9 and other browsers? In the first place, should you even be thinking about supporting Internet Explorer 9?&lt;/p&gt;
&lt;p&gt;We’ll look at a few things you’d want to consider.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;think-features%2C-not-browsers&quot;&gt;Think features, not browsers&lt;/h2&gt;
&lt;p&gt;Let’s say the world contains only two features and two browsers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browser A supports feature A but not feature B.&lt;/li&gt;
&lt;li&gt;Browser B supports feature B but not feature A.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s possible to detect what browsers support what features and act from there.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (Browser A) {
  // Code for A
}

if (Browser B) {
  // code for B
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if there are more browsers? What if the world contains browsers C, D, and E? It gets hard to support the features you need if you’re thinking about browsers.&lt;/p&gt;
&lt;p&gt;There’s a better way: You can check whether a feature exists. If it exists, use it. If not, provide fallback code.&lt;/p&gt;
&lt;p&gt;The following block of code works from browser A to browser Z.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (feature A) {
  // Code if browser contains feature A
} else {
  // Code if browser doesn&#39;t contain feature A
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now you don’t have to worry about browsers.&lt;/p&gt;
&lt;h2 id=&quot;deciding-whether-to-use-a-feature&quot;&gt;Deciding whether to use a feature&lt;/h2&gt;
&lt;p&gt;Many people decide whether to use a feature depending on the number of browsers that support it. But as I argued above, &lt;strong&gt;browsers don’t matter.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What matters is: Can you code the fallback for the feature easily? &lt;strong&gt;If you can code the fallback easily, go ahead and use the feature.&lt;/strong&gt; If you can’t code the fallback easily, don’t use the feature.&lt;/p&gt;
&lt;h2 id=&quot;deciding-what-browsers-to-support&quot;&gt;Deciding what browsers to support&lt;/h2&gt;
&lt;p&gt;You still need a cutoff. What browsers are you going to support? What browsers are you NOT going to support? If you don’t want to support the browser, then it doesn’t make sense for you to write fallback code for it.&lt;/p&gt;
&lt;p&gt;My best answer is: Watch who is using your site. What browsers do they use? Follow accordingly.&lt;/p&gt;
&lt;p&gt;Yes, there may be outliers who try to visit your website on Internet Explorer 6. But do have the time and energy to write extra code for a browser that almost no one uses?&lt;/p&gt;
&lt;p&gt;Will your energy be better spent elsewhere?&lt;/p&gt;
&lt;h2 id=&quot;the-level-of-support&quot;&gt;The level of support&lt;/h2&gt;
&lt;p&gt;I’d argue there are four levels of support:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Everything must look and work the same in all browsers&lt;/li&gt;
&lt;li&gt;The site must look the same, but functionality can be different across browsers&lt;/li&gt;
&lt;li&gt;Functionality must be the same, but looks can be different across browsers&lt;/li&gt;
&lt;li&gt;Looks and functionality can both differ across browsers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What kind of support are you providing to the older browsers? Why?&lt;/p&gt;
&lt;h2 id=&quot;other-articles-in-this-series&quot;&gt;Other articles in this series&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Part 1: This article&lt;/li&gt;
&lt;li&gt;Part 2: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-css&quot;&gt;Supporting older browsers—Part 2: CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: &lt;a href=&quot;https://zellwk.com/blog/older-browsers-js&quot; title=&quot;Supporting older browsers—Part 3: JS&quot;&gt;Supporting older browsers—Part 3: JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 4: Why support older browsers? (To be released!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Think about it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why are you trying to support the old browser you’re trying to support?&lt;/li&gt;
&lt;li&gt;What level of support are you giving?&lt;/li&gt;
&lt;li&gt;It is worth the resources you’ve allocated?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the following two articles, we’ll look at supporting CSS  and JavaScript features in older browsers. We’ll also talk about what level of support you should provide.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Switching to Dvorak as a web developer</title>
    <link href="https://zellwk.com/blog/dvorak/"/>
    <updated>2018-11-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dvorak/</id>
    <content type="html">&lt;p&gt;I’m invested in QWERTY. I don’t want to change keyboards if I can, but I was forced to switch to Dvorak. My left-hand ached when I typed in QWERTY.&lt;/p&gt;
&lt;p&gt;And I didn’t like Dvorak.&lt;/p&gt;
&lt;p&gt;(At first)&lt;/p&gt;
&lt;p&gt;But I’ve grown to like it.&lt;/p&gt;
&lt;p&gt;In this article, I want to share how I switched over to the Dvorak system. This process is the same as learning any other skill.&lt;/p&gt;
&lt;p&gt;If you had problems learning how to code, you’ll benefit from learning this process.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what%E2%80%99s-dvorak%3F&quot;&gt;What’s Dvorak?&lt;/h2&gt;
&lt;p&gt;Dvorak is a keyboard system like QWERTY. Both Dvorak and Qwerty have the same number of keys, but they have different arrangements.&lt;/p&gt;
&lt;p&gt;Many people claim Dvorak to be a “better” system because commonly used keys are placed in the middle (home) row. You can type faster because it’s easier for you to reach these keys.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/dvorak/keyboard.png&quot; alt=&quot;Arrangement of keys on a Dvorak Keyboard.&quot;&gt;
  &lt;figcaption&gt;Arrangement of keys on a Dvorak Keyboard. Image from https://www.dvorak-keyboard.com&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;switching-to-dvorak-was-painful&quot;&gt;Switching to Dvorak was painful&lt;/h2&gt;
&lt;p&gt;I couldn’t type a word in Dvorak without making a bunch of mistakes. &lt;strong&gt;I had to hit delete so many times that my right-hand ached.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I wondered if it’s worth learning Dvorak&lt;/em&gt;. I switched away from QWERTY because my left-hand ached when I typed. If switching to Dvorak means my right-hand would ache, then there’s no point in switching.&lt;/p&gt;
&lt;p&gt;But I continued learning Dvorak because &lt;em&gt;I knew I can get better&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;learning-to-touch-type-with-dvorak&quot;&gt;Learning to touch-type with Dvorak&lt;/h2&gt;
&lt;p&gt;Many people recommend buying Dvorak stickers or using a Dvorak keyboard to learn Dvorak. If you do this, you can look at the keyboard if you don’t know the location of the key you’re trying to type.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I didn’t buy any Dvorak stickers&lt;/strong&gt; (or keyboard) so learning Dvorak was especially difficult for me at the start. I don’t want to buy them because I want to learn to touch-type. Touch typing means you type without looking at the keyboard. If you can touch type, you will type much faster.&lt;/p&gt;
&lt;p&gt;The idea is: &lt;strong&gt;if you look at the keyboard when you learn, you’ll develop a habit of looking at the keyboard when you type.&lt;/strong&gt; In that case, you won’t be touch-typing.&lt;/p&gt;
&lt;p&gt;So when I learned Dvorak, I left a picture of the Dvorak keyboard open on my screen. This helped me learn to touch-type without looking at my keyboard.&lt;/p&gt;
&lt;p&gt;Note: &lt;strong&gt;Not buying Dvorak stickers a critical decision that made my transition successful.&lt;/strong&gt; More on this later.&lt;/p&gt;
&lt;h2 id=&quot;how-i-learned-dvorak&quot;&gt;How I learned Dvorak&lt;/h2&gt;
&lt;p&gt;**I learned basic Dvorak through &lt;a href=&quot;https://learn.dvorak.nl/&quot;&gt;https://learn.dvorak.nl&lt;/a&gt;.**It splits Dvorak into &lt;em&gt;five levels&lt;/em&gt;. The first level is the starting position you use when you touch-type. Then, &lt;em&gt;each level increases in difficulty&lt;/em&gt; as more keys are added.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Home row, 8 keys (starting position)&lt;/li&gt;
&lt;li&gt;Home row, 10 keys&lt;/li&gt;
&lt;li&gt;Home row + C F K L M P R V&lt;/li&gt;
&lt;li&gt;Home row + B G J Q W X Y Z&lt;/li&gt;
&lt;li&gt;The entire Roman alphabet (A - Z)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While learning to touch-type with this system, I realized what the small protrusion underneath the F and J keys were for.&lt;/p&gt;
&lt;p&gt;They’re where you place your index fingers. Once you place your index fingers, the rest of your fingers fall into the starting position automatically. You can use these protrusions to help you get to the starting position.&lt;/p&gt;
&lt;h2 id=&quot;go-slow&quot;&gt;Go slow&lt;/h2&gt;
&lt;p&gt;You will want to speed through the exercises.&lt;/p&gt;
&lt;p&gt;But you can’t.&lt;/p&gt;
&lt;p&gt;When you try to speed through, your QWERTY muscle memory will kick in, and you’ll type QWERTY. If you want to type in Dvorak, &lt;strong&gt;you need to overwrite that QWERTY muscle memory with Dvorak&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This best way to overwrite your muscle memory is to go slow. &lt;em&gt;Type each letter on the Dvorak keyboard with intention&lt;/em&gt;. The slower you go, the easier it is for you to overwrite the muscle memory.&lt;/p&gt;
&lt;p&gt;Give yourself time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When I started, I practiced&lt;/strong&gt; typing in Dvorak with &lt;a href=&quot;https://learn.dvorak.nl/&quot;&gt;learn.dvorak.nl&lt;/a&gt; &lt;strong&gt;for 1/2 hour a day&lt;/strong&gt;. Once I complete the five levels, I tried to type Dvorak as I write.&lt;/p&gt;
&lt;p&gt;This is where it gets challenging.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;writing-in-dvorak&quot;&gt;Writing in Dvorak&lt;/h2&gt;
&lt;p&gt;When I thought of the words I wanted to type, &lt;strong&gt;my fingers moved towards QWERTY automatically&lt;/strong&gt; even though I was trying to type in Dvorak!&lt;/p&gt;
&lt;p&gt;Here’s why it happened.&lt;/p&gt;
&lt;p&gt;When you write, you do two things simultaneously:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Think of the words to type&lt;/li&gt;
&lt;li&gt;Move your fingers on the keyboard&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have been typing in QWERTY for a while, this process becomes automatic. Which means you &lt;strong&gt;need to overwrite muscle memory again.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To overwrite the muscle memory, you need to &lt;em&gt;go slow&lt;/em&gt;. Think of a word you want to type. Pause after thinking of the word. Then, type each letter of the word in Dvorak. This will train your fingers to respond with Dvorak.&lt;/p&gt;
&lt;p&gt;It will be painfully slow at the beginning. Trust the process. You’ll get faster.&lt;/p&gt;
&lt;p&gt;On the first few days, you’ll get frustrated with Dvorak very quickly. ** If you notice yourself getting frustrated, stop using Dvorak for the rest of the day**. Type in QWERTY instead. This will help reduce your resentment towards Dvorak. If you resent Dvorak, you won’t be able to learn it.&lt;/p&gt;
&lt;p&gt;Start typing in Dvorak again tomorrow.&lt;/p&gt;
&lt;p&gt;Do this every day.&lt;/p&gt;
&lt;p&gt;One day, a strange thing will happen. When you try to type in QWERTY, some Dvorak will appear. And you’ll get frustrated with typing QWERTY.&lt;/p&gt;
&lt;p&gt;This is the point where you ditch Qwerty and go full Dvorak. It’ll take some time before you become proficient, but the hard part is already over.&lt;/p&gt;
&lt;h2 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard shortcuts&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;It’s hard to change muscle memory for keyboard shortcuts.&lt;/strong&gt; This is because &lt;em&gt;most keyboard shortcuts are built for QWERTY users.&lt;/em&gt; They’re not built for Dvorak users.&lt;/p&gt;
&lt;p&gt;For example, Cut, Copy, and Paste use X, C, and V respectively. They’re next to each other on Qwerty. But in Dvorak, X, C and V keys are in different places. This is a combination I use so much that it’s hard to change.&lt;/p&gt;
&lt;p&gt;Plus, &lt;em&gt;different programs contain shortcuts&lt;/em&gt;. It’s going to be a pain to change muscle memory for every program I use.&lt;/p&gt;
&lt;p&gt;This problem almost made me want to go back to QWERTY again (after all the effort I spent!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I solved the keyboard shortcuts problem with the Dvorak-QWERTY ⌘ keyboard&lt;/strong&gt;. This is a Dvorak variation that exists in Mac OS by default.&lt;/p&gt;
&lt;p&gt;The Dvorak-QWERTY ⌘ means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keys are mapped to Dvorak normally&lt;/li&gt;
&lt;li&gt;Keys are mapped to QWERTY when the ⌘ key is held&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This meant I only have to change my muscle memory for shortcuts that don’t use the ⌘ key. It made the switch bearable.&lt;/p&gt;
&lt;h2 id=&quot;learning-dvorak-and-learning-skills&quot;&gt;Learning Dvorak and learning skills&lt;/h2&gt;
&lt;p&gt;My experience with the Dvorak learning process can be applied to learning any skill.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, you will always experience frustration.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best way to overcome frustration is to let yourself take a break. Let the frustration subside by itself and try learning again the next day.&lt;/p&gt;
&lt;p&gt;Little by little, you’ll learn the skill, and you’ll become proficient at it before you realize.&lt;/p&gt;
&lt;p&gt;**Second, start with the end in mind. **&lt;/p&gt;
&lt;p&gt;I knew I wanted to touch-type with Dvorak. To touch-type, I had to force myself to learn Dvorak without looking at Dvorak keys.&lt;/p&gt;
&lt;p&gt;If I didn’t start with this end-goal, I would have succumbed to the temptation to buy a Dvorak keyboard.&lt;/p&gt;
&lt;p&gt;If I bought a Dvorak keyboard, I wouldn’t have been able to learn to touch-type. I know this because I don’t touch-type the correct way with QWERTY. (I use my left hand more than my right hand). And I never managed to learn to touch-type with QWERTY even though I want to. Lots of excuses, no time, etc.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Learning skills takes time. Give yourself enough time to learn it.&lt;/p&gt;
&lt;p&gt;Don’t stress yourself up too much. If you get frustrated, take a break for the rest of the day. Try again tomorrow. You’ll get there.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to take a good break</title>
    <link href="https://zellwk.com/blog/break/"/>
    <updated>2018-10-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/break/</id>
    <content type="html">&lt;p&gt;When I wrote about my &lt;a href=&quot;https://zellwk.com/blog/becoming-more-productive-while-working-less/&quot; title=&quot;Becoming more productive while working less&quot;&gt;productive routine&lt;/a&gt; in a previous article, I said I’d work for 1.5 hours and take a break 30 minutes. And I’ll repeat this sequence four times a day.&lt;/p&gt;
&lt;p&gt;In my experiments, I reduced my work hours to 4.5 hours (3 x 1.5-hour slots) and managed to get 40% more work done.&lt;/p&gt;
&lt;p&gt;The key to this routine isn’t simply sitting at my desk for 1.5 hours each sprint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The key is 30-minute break.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I don’t rest properly, I’ll waste the next 1.5 hours of work because I’m not focused. When I’m not focused, I can’t get work done.&lt;/p&gt;
&lt;p&gt;So today, I want to share how I take a proper break.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-not-to-take-a-break&quot;&gt;How NOT to take a break&lt;/h2&gt;
&lt;p&gt;Here are some common ways people take breaks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go for a walk&lt;/li&gt;
&lt;li&gt;Take a shower&lt;/li&gt;
&lt;li&gt;Power nap&lt;/li&gt;
&lt;li&gt;Chat with friends&lt;/li&gt;
&lt;li&gt;Look at Social Media&lt;/li&gt;
&lt;li&gt;Surf internet&lt;/li&gt;
&lt;li&gt;Watch TV&lt;/li&gt;
&lt;li&gt;Eat food&lt;/li&gt;
&lt;li&gt;Stare into space&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s way more than this list. In fact, &lt;strong&gt;you can find hundreds of tips about how to relax to become more productive&lt;/strong&gt; online. A simple search gives you results like &lt;a href=&quot;https://lifehacker.com/50-ways-to-relax-without-spending-a-dime-1788301034&quot; title=&quot;50 Ways to Relax Without Spending a Dime&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://socialtriggers.com/why-you-need-to-take-more-breaks-and-how-to-do-it/&quot; title=&quot;WHY YOU NEED TO TAKE MORE BREAKS (AND HOW TO DO IT)&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://www.fastcompany.com/40475204/youre-taking-breaks-the-wrong-way-heres-how-to-fix-that&quot; title=&quot;You’re Taking Breaks The Wrong Way, Here’s How To Fix That&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Everyone has an opinion on how often you should take breaks and what to do during your breaks. But they say different things.&lt;/p&gt;
&lt;p&gt;Which is true?&lt;/p&gt;
&lt;p&gt;I’ve tried many ideas out there on the internet. Here are some ways I found useful:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep&lt;/li&gt;
&lt;li&gt;Staring into space with a cup of tea&lt;/li&gt;
&lt;li&gt;Meditate&lt;/li&gt;
&lt;li&gt;Listening to music that recharges me&lt;/li&gt;
&lt;li&gt;Doing 10 pushups&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;But these methods don’t work for me.&lt;/strong&gt; Even if they did, they would only work for &lt;em&gt;a day&lt;/em&gt; or &lt;em&gt;two&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, I can go for a walk on Monday. That’ll be an effective break. But on Tuesday, the walk wouldn’t work. I get stressed up on the walk.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Sometimes I can take a power nap. But on some days, I can’t sleep even if I desperately want to.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;What I realized was: &lt;strong&gt;It’s useless following what other people say about taking breaks.&lt;/strong&gt; You can’t pick “one thing” on the list and expect it to work forever.&lt;/p&gt;
&lt;h2 id=&quot;an-effective-break&quot;&gt;An effective break&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We use different energies for different things we do.&lt;/strong&gt; Generally, we can say that humans have three basic bodies. &lt;em&gt;When you use a body, you use up their corresponding fuel tank&lt;/em&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The physical body&lt;/li&gt;
&lt;li&gt;The emotional body&lt;/li&gt;
&lt;li&gt;The intellectual body.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you take a break, you need to &lt;strong&gt;stop consuming the same type of energy you were consuming&lt;/strong&gt;. Here’s an example:&lt;/p&gt;
&lt;p&gt;Let’s say you go for a run. When you run, you expend physical energy. Your legs get tired. You pant like crazy. When you want to rest, you stop running and walk instead.&lt;/p&gt;
&lt;p&gt;When you walk, you give your physical body a chance to recuperate.&lt;/p&gt;
&lt;p&gt;See how this works?&lt;/p&gt;
&lt;p&gt;If you code, you won’t get tired physically because typing into a keyboard doesn’t take a lot of physical energy. But you still get tired because you use your brain.&lt;/p&gt;
&lt;p&gt;When you use your brain, you deplete the intellectual body’s fuel tank. If you want to recover your mental energy, you need to rest your mind.&lt;/p&gt;
&lt;p&gt;And &lt;strong&gt;sometimes you expend more than one type of energy.&lt;/strong&gt; You need to recover them all when you take a break.&lt;/p&gt;
&lt;p&gt;For example, when I write articles, I consume &lt;em&gt;both emotional and mental energies&lt;/em&gt;. Mental energies because I need to think about what I want to convey. Emotional energy because I need to put myself in your shoes. I also need to overcome my fears and doubts when I write.&lt;/p&gt;
&lt;p&gt;So when I rest, &lt;em&gt;I need to recover both mental and emotional energies at the same time&lt;/em&gt;. I can’t, for example, chat with people to recover my energy because chatting with (most) people zaps both mental and emotional energy (for me).&lt;/p&gt;
&lt;p&gt;It’s not rocket science ya?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the reason why you can’t pick “one thing”&lt;/strong&gt; and expect to recharge yourself every time. This is also why you shouldn’t listen to anyone else’s opinions on taking a break.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your body knows best.&lt;/strong&gt; When you expend different types of energy (and in different quantities), you need to rest in a different way.&lt;/p&gt;
&lt;h2 id=&quot;an-effective-way-to-take-a-break&quot;&gt;An effective way to take a break&lt;/h2&gt;
&lt;p&gt;I found a way that works every time: &lt;strong&gt;Listen to your body and do exactly what they tell you&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, it means walking farther out to buy bubble tea 🍵 (even though it’s unhealthy).&lt;/p&gt;
&lt;p&gt;Sometimes, it means bitching about the problem 😈 to a friend .&lt;/p&gt;
&lt;p&gt;Sometimes, it means ditching work for the rest of today 😱.&lt;/p&gt;
&lt;p&gt;Sometimes, it means taking a walk 🚶 in the park 🌳.&lt;/p&gt;
&lt;p&gt;Sometimes, it means working on another project 🛠️.&lt;/p&gt;
&lt;p&gt;Sometimes, it means learning something else 📚.&lt;/p&gt;
&lt;p&gt;Sometimes, it means chatting with my wife 👱‍♀️.&lt;/p&gt;
&lt;p&gt;Sometimes, it means watching a movie 🎥.&lt;/p&gt;
&lt;p&gt;Sometimes, it means sleeping 😴.&lt;/p&gt;
&lt;p&gt;The point is, what you think you need isn’t always what you need. &lt;strong&gt;Pay attention to your body. It tells you what it needs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, it’s okay to indulge just a little bit.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;The best way to recharge is to listen to what your body wants. Have fun, relax, enjoy, have a good break, and get back to work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to review and edit a pull request</title>
    <link href="https://zellwk.com/blog/edit-pull-request/"/>
    <updated>2018-10-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/edit-pull-request/</id>
    <content type="html">&lt;p&gt;When you submit a pull request, a collaborator will have the right to review your pull request. They’ll decide whether to accept your pull request. If they accept your pull request, your code will be merged into the branch you requested for.&lt;/p&gt;
&lt;p&gt;You’re going to learn how a review process will look like from both points of view:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The person who’s reviewing the process&lt;/li&gt;
&lt;li&gt;The person who’s submitting the review&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;merging-the-pull-request&quot;&gt;Merging the pull request&lt;/h2&gt;
&lt;p&gt;For this lesson, I’ll use the following accounts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;zellwk&lt;/code&gt; as the reviewer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zellwk2&lt;/code&gt; as the person who submitted the pull request&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the reviewer, if you scroll down to the bottom of the page, you’ll see a green button that says merge pull request. You see this because you have write access to the repository.&lt;/p&gt;
&lt;p&gt;If you want to merge the pull request, you can click on the green button and you’re done.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/merge.png&quot; alt=&quot;The merge pull request button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you don’t have write access to the repository, you won’t see a button that says merge pull request.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/no-merge.png&quot; alt=&quot;Non-collaborators won&#39;t see the merge pull request button&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;reviewing-the-pull-request&quot;&gt;Reviewing the pull request&lt;/h2&gt;
&lt;p&gt;As a reviewer, you’ll want to click on the files changed tab. This tells you what files have changed.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/files-changed-tab.png&quot; alt=&quot;The files changed tab&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You’ll come to a page with two sets of code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The left set is the current code&lt;/li&gt;
&lt;li&gt;The right set is the proposed code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see what code is added or removed in this view. Green lines signify code that’s added. Red lines signify code that’s removed.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/diff.png&quot; alt=&quot;The diff view&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;commenting%2C-approving%2C-or-requesting-changes&quot;&gt;Commenting, approving, or requesting changes&lt;/h3&gt;
&lt;p&gt;The reviewer can comment, approve, or request for changes as they see fit. To do so, they can click on the review changes button on the top-right-hand corner.&lt;/p&gt;
&lt;p&gt;If you click on the review changes button, you’ll see three options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comment&lt;/li&gt;
&lt;li&gt;Approve&lt;/li&gt;
&lt;li&gt;Request changes&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/review-change-button.png&quot; alt=&quot;The review changes button&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;a-better-way-to-review&quot;&gt;A better way to review&lt;/h3&gt;
&lt;p&gt;A better way to review the code is to provide feedback on the line of code that requires feedback.&lt;/p&gt;
&lt;p&gt;You can do this by hovering over the line you want to provide feedback for. When you do so, you’ll see a blue &lt;code&gt;+&lt;/code&gt; button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/plus-button.png&quot; alt=&quot;The plus button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When you click on the blue &lt;code&gt;+&lt;/code&gt; button, you’ll see an editor. You can comment on the line of code here.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/the-editor.png&quot; alt=&quot;The editor shows up after you click the plus button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;There are two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a single comment&lt;/li&gt;
&lt;li&gt;Start a review&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you click on add single comment, the comment will be made immediately.&lt;/p&gt;
&lt;p&gt;If you click on start a review, you’ll have the chance to write more comments before sending them at once. To end the review, you need to click on the review changes button and select submit review.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/submit-review.png&quot; alt=&quot;Submitting the review&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The pull request will be updated with your changes after you submit your review:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/pr-updated.png&quot; alt=&quot;Pull request updated&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;working-on-the-pull-request&quot;&gt;Working on the pull request&lt;/h2&gt;
&lt;p&gt;The person who is submitting the pull request can also see the comments.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/pr-updated-2.png&quot; alt=&quot;Pull request from the submitter&#39;s view&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you’re working on the pull request, you have to make the necessary changes. To do so, you go back to your forked repository and update the same branch you used to submit the pull request.&lt;/p&gt;
&lt;p&gt;In this case, this will be the development branch. I went ahead and added the closing &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;index.html&lt;/code&gt; file. I also set the commit message to &lt;code&gt;closing &amp;lt;ul&amp;gt; appropriately&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/edit-pr.png&quot; alt=&quot;Writing a commit message that says closing &lt;ul&gt; appropriately&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Github will update the pull request with the new changes once the submitter pushes into the forked repository.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/edit-pr/pr-updated-after-edit.png&quot; alt=&quot;Pull request updated automatically after commits are pushed&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The reviewer can now merge the request by clicking on the merge pull request button.&lt;/p&gt;
&lt;h2 id=&quot;after-the-merge&quot;&gt;After the merge&lt;/h2&gt;
&lt;p&gt;You can delete the forked repository (or the branch you used for the pull request) after the code is merged into the main repository. They’re no longer needed.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You learned how to review and edit a pull request in this lesson.&lt;/p&gt;
&lt;p&gt;To edit a pull request, you push new changes into the same branch that was used for the pull request. Github will update everything else automatically.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting out of a productivity funk</title>
    <link href="https://zellwk.com/blog/get-out-of-productivity-funk/"/>
    <updated>2018-10-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/get-out-of-productivity-funk/</id>
    <content type="html">&lt;p&gt;It’s ironic. I became unproductive after releasing an article about &lt;a href=&quot;https://zellwk.com/blog/becoming-more-productive-while-working-less/&quot; title=&quot;Becoming more productive while working less&quot;&gt;increasing productivity while working less&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I got thrown into a situation where I couldn’t find space and time to work for about a month.&lt;/p&gt;
&lt;p&gt;I want to share with you what happened, how I handled the situation, and the lessons I learned. This article will help if you found yourself in a productivity funk.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;what-happened&quot;&gt;What happened&lt;/h2&gt;
&lt;p&gt;Here’s what happened in brief:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Week One:&lt;/strong&gt; I went on a one-week break to learn about healing. (Yeah, you read that right. I spend time to learn about stuff outside of programming. I’ll talk about this mindset and the details about what I learned in future articles).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Week two:&lt;/strong&gt; My grandfather got hospitalized the same day I returned from my break. His condition worsened throughout the week. We know he’s gonna go away, I spent most of the week at the hospital. I was also packing up for an inevitable renovation (see week 3 for details).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Week three&lt;/strong&gt;: My grandfather passed away on Monday morning. We held a funeral for him immediately after that lasts 5 days. I spent most of my waking hours at the wake.&lt;/p&gt;
&lt;p&gt;My house (specifically the toilets) was scheduled for renovations at the same time. The entire estate got forced into the renovations. Nobody wanted it. Since my house will be dusty and unfit for living, we wrapped up the house and left for my parents’ place.&lt;/p&gt;
&lt;p&gt;Here’s what it looked like:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2018/productivity-funk/wrapped.jpg&quot; alt=&quot;Everything got wrapped in plastic&quot;&gt;
  &lt;figcaption&gt;Everything got wrapped in plastic&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Week Four&lt;/strong&gt;: The renovations lasts ten days. On day 8, my baby girl tried to figure out the commands for “Hello World!”. She was born 18 hours later.&lt;/p&gt;
&lt;p&gt;It’s a happy occasion! But I had a problem: My house was still under renovations. I had to make the house suitable for a baby to live as soon as possible. Since Day 9 was a Friday, I was only able to get cleaning help the next week.&lt;/p&gt;
&lt;p&gt;Plus points this week: I worked for a few hours at Starbucks this week!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Week Five&lt;/strong&gt;: I spent Monday to cleanup my house with a helper. My wife and baby were also discharged on Monday, but because I was cleaning up, I couldn’t make it to the hospital. Luckily, a relative volunteered to help bring them home.&lt;/p&gt;
&lt;p&gt;We brought the baby for a checkup on Tuesday. She had serious jaundice and had to be admitted into the hospital. We spent the rest of the day at the hospital.&lt;/p&gt;
&lt;p&gt;On Wednesday and Thursday, I cleaned up my house further and moved my wife back home.&lt;/p&gt;
&lt;p&gt;Baby got discharged on Friday. We brought her home.&lt;/p&gt;
&lt;p&gt;(Didn’t get much work done because we’re moving things everywhere this week!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Week Six&lt;/strong&gt;: My renovations were completed, but my neighbours’ weren’t. Both my direct neighbours decided to revamp their houses. Even the neighbours downstairs decided to further renovate their house!&lt;/p&gt;
&lt;p&gt;(I live in an 12-storey apartment and only the neighbours closest to me decided to further renovate their houses. What are the odds? 😵)&lt;/p&gt;
&lt;p&gt;Noise was a standard when a house gets renovated. The noises from hammering of floors and drilling of walls were especially loud. Even as adults, we couldn’t stand the noise. How can a baby?&lt;/p&gt;
&lt;p&gt;(Baby got a shock from the drills one day. It was hard to calm her back down again. Poor baby!).&lt;/p&gt;
&lt;p&gt;So we become refugees. Wed had to flee the house when our neighbours were drilling and hammering away.&lt;/p&gt;
&lt;p&gt;Other than scurrying around like refugees, I had fun learning to be a parent. I learned when the baby wants milk, how to feed her, how to change her diapers, etc.&lt;/p&gt;
&lt;h2 id=&quot;the-lessons-i-learned&quot;&gt;The lessons I learned&lt;/h2&gt;
&lt;p&gt;It’s a dramatic sequence of back-to-back events. I never imagined my life could become so dramatic. I was able to learn three important lessons because these few weeks were especially tough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First: Plan and communicate early&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We were told the renovations will occur around July/August, and we’d be informed a month before the renovations.&lt;/p&gt;
&lt;p&gt;We didn’t receive any notification when August came around, so I went to the office to ask for updates. This time, they said the renovation for my unit will start in September 26. I couldn’t request for them to renovate my unit earlier because it was already too late to make changes&lt;/p&gt;
&lt;p&gt;Looking back, I should have informed the office that my baby was coming months before the actual renovation. I could have split up the unfortunate events if I did it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second: Respond to situations&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You have limited control over what happens in life. There’s no point blaming anyone (or even yourself) for things that are out of your control. What you can do is respond to situations as best as you can.&lt;/p&gt;
&lt;p&gt;In this situation, here the things I don’t have control over:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When my grandfather will pass away&lt;/li&gt;
&lt;li&gt;When my daughter will be born&lt;/li&gt;
&lt;li&gt;Whether my neighbours are going to renovate their house (and when the drilling and hammering will occur)&lt;/li&gt;
&lt;li&gt;When my daughter will cry for milk, or sleep, or the usual things babies do&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are things that I do have control over:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My behavior&lt;/li&gt;
&lt;li&gt;How I communicate with my family&lt;/li&gt;
&lt;li&gt;How I handle the ongoing renovations&lt;/li&gt;
&lt;li&gt;How I plan my time for work, accompanying my wife, and accompanying my daughter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many friends told me its impossible to get work done when your baby gets born. One of my self-employed friends said you can kiss 3 months of work goodbye.&lt;/p&gt;
&lt;p&gt;I was afraid it would come true.&lt;/p&gt;
&lt;p&gt;I want to be with my daughter, but I also want to write articles, make videos, and produce Learn JavaScript lessons. My work can’t stop.&lt;/p&gt;
&lt;p&gt;I threw away my productive routine because it couldn’t accommodate my life anymore. And I began to observe how I spend my time again.&lt;/p&gt;
&lt;p&gt;I discovered that I’m usually the one who wakes up in the middle of the night to feed the baby. My wife will be fast asleep. And I built my new routine on top of this pattern.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’d wake up at 3am (or when the baby cries)&lt;/li&gt;
&lt;li&gt;Feed the baby till 4am&lt;/li&gt;
&lt;li&gt;Work till 6am&lt;/li&gt;
&lt;li&gt;Exercise till 8am&lt;/li&gt;
&lt;li&gt;Have breakfast and sleep&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this routine, I get 1.5 to 2 hours of work done each day. There’s a bonus to working so early (or late, depending on how you see it): It’s quiet.&lt;/p&gt;
&lt;p&gt;Will this routine hold?&lt;/p&gt;
&lt;p&gt;I don’t know. Babies are unreliable creatures. I’m pretty sure the routine will break sooner or later, and I’d have to find create a new one.&lt;/p&gt;
&lt;p&gt;But I’m not afraid of it breaking because I’ll find another way to be productive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third: Enjoy!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of my key takeaways from my one-week break was to enjoy. If you can allow yourself to enjoy everything you do, things will turn out alright. Your instincts will kick in and tell you what you should do.&lt;/p&gt;
&lt;p&gt;I took this lesson home and I enjoyed being with my daughter the moment she was born. I enjoyed looking after my wife as she recovers from childbirth. I enjoyed finding a way out of the chaotic life that I have now. And lastly, I enjoy writing and teaching.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;When life throws chaos at you, take a step back and look at the chaos. You won’t like it at first, but you can find a way to enjoy it and work with it.&lt;/p&gt;
&lt;p&gt;Whatever circumstances you have, you won’t always stay in a productivity funk. Sometimes things may be harder. If you stick through it to the end, things will improve. They always do.&lt;/p&gt;
&lt;p&gt;Have faith.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to submit a pull request</title>
    <link href="https://zellwk.com/blog/submit-pull-request/"/>
    <updated>2018-10-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/submit-pull-request/</id>
    <content type="html">&lt;p&gt;Let’s say you wrote some code on the &lt;code&gt;develop&lt;/code&gt; branch. You’re done with what you were working on, and you want to merge it to the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;But you don’t know whether the code you’ve written is good enough. You want someone to review your code before you merge it into the master branch.&lt;/p&gt;
&lt;p&gt;You can do that with a pull request&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-is-a-pull-request%3F&quot;&gt;What is a pull request?&lt;/h2&gt;
&lt;p&gt;A pull request is short for “requesting for a Git Pull”.&lt;/p&gt;
&lt;p&gt;This can be confusing to understand, so we’re going to explain it with an analogy.&lt;/p&gt;
&lt;p&gt;Imagine you have a crate of bananas that you want to load onto a ship. The only way to load the bananas is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You get someone to throw down a rope&lt;/li&gt;
&lt;li&gt;You tie the rope to the crate&lt;/li&gt;
&lt;li&gt;They pull the crate up&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When they pull the crate up, they’ll want to check whether your bananas are good. If they spot a rotten banana, they might want to request you change that rotten banana for a good one.&lt;/p&gt;
&lt;p&gt;They might also think that all your bananas suck and decide to throw them away. (But let’s hope this doesn’t happen, shall we?)&lt;/p&gt;
&lt;p&gt;In this analogy, the crate of bananas is your code from the develop branch. The ship is the master branch. The sailor is here to check whether your code is good enough for the master branch.&lt;/p&gt;
&lt;p&gt;**That’s what a pull request is: You get someone to check your code before merging into another branch. **&lt;/p&gt;
&lt;p&gt;The only difference between our analogy we used and an actual pull-request is: You don’t ask someone to throw a rope down for you. You bring the rope yourself, you tie it to your bananas at the harbour, and you throw it onto the ship. The only thing the sailor needs to do is check the bananas.&lt;/p&gt;
&lt;p&gt;This is what we mean by submitting a pull request.&lt;/p&gt;
&lt;p&gt;There are two ways to submit a pull request. How you do it depends on whether you have write access to the repository.&lt;/p&gt;
&lt;h2 id=&quot;submitting-a-pull-request-when-you-have-write-access&quot;&gt;Submitting a pull request when you have write access&lt;/h2&gt;
&lt;p&gt;Before we submit a pull request, we need to make some changes, so we have something to merge. In this case, we’re going to add a heading to the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- The code we&#39;re using to submit the pull request --&amp;gt;
&amp;lt;h2&amp;gt;I&#39;m a heading&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to commit this code into the develop branch. Then, you need to push it to the git remote.&lt;/p&gt;
&lt;p&gt;f
It’ll appear in the section I highlighted in the image below.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/github-auto-pr.png&quot; alt=&quot;Highlighted a section between the description and repository tabs&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you see the message, great. Click on it. You’ll save a few steps.&lt;/p&gt;
&lt;p&gt;If you don’t see it, you can click on the pull request tab at the top of your Github repo.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-tab.png&quot; alt=&quot;The pull request tab&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Then, click on the green button that says “new pull request”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-new.png&quot; alt=&quot;The green pull request button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You’ll come to a page that says “Compare changes”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-compare.png&quot; alt=&quot;Choosing branches for the pull request&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To create a pull request, you want to set the base and compare branches to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt;: branch you want to merge to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compare&lt;/code&gt;: branch you want to merge from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, we want to merge to master, so we’ll set &lt;code&gt;base&lt;/code&gt; to &lt;code&gt;master&lt;/code&gt;. We’re merging from &lt;code&gt;develop&lt;/code&gt;, so we’ll set &lt;code&gt;compare&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you’ve selected your branches, Github will show you the list of commits that have been made. Here’ what you need to do is click on the “Create pull request button”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-compare-2.png&quot; alt=&quot;Setting base branch to master and compare branch to develop&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Github will show you a page that says “Open a pull request”.&lt;/p&gt;
&lt;p&gt;Note: This is the page you’ll arrive at if you saw the “Your branch has been updated X minutes ago” message I talked about earlier.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-open.png&quot; alt=&quot;Open a pull request page&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The title you write will be the title people see in the pull request tab. We’re going to set it to “Add a heading to the index”.&lt;/p&gt;
&lt;p&gt;For the comments, it’s going to be the first message people see when they clicked into the pull request. In this case, we’ll say “I’ve added a heading. Let me know if its good?”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-open-2.png&quot; alt=&quot;Setting title and comments fro the pull request&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you’ve added the title and message, you can click on the Create pull request button at the bottom of the page.&lt;/p&gt;
&lt;p&gt;Now, if you click on the pull request tab at the top, you’ll an open pull request that we’ve just submitted.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/pull-request-opened.png&quot; alt=&quot;Pull request opened&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This is how you create a pull request if you have write access to the repository.&lt;/p&gt;
&lt;p&gt;If you don’t have write access to a repository, you’ll have to create a Fork. Let’s pause and talk about what a Fork is.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-fork%3F&quot;&gt;What is a Fork?&lt;/h2&gt;
&lt;p&gt;A Fork is NOT the git client you’re using. Don’t get confused!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A fork in Git means a repository that is based off another repository.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You already learned about branches so far, and you know that a branch can be created from another branch. (Creating a &lt;code&gt;develop&lt;/code&gt; branch from &lt;code&gt;master&lt;/code&gt;, for example).&lt;/p&gt;
&lt;p&gt;On the same note, a repository can be created from another repository. The repository that was created from another repository is called a fork.&lt;/p&gt;
&lt;p&gt;The forked repository contains everything the main repository has (at the time it was forked). It includes all tags and branches.&lt;/p&gt;
&lt;p&gt;You own the forked repository (which gives you write access). This forked repository will still be tracked to the main repository. You’re going to make a pull request through this tracked link.&lt;/p&gt;
&lt;p&gt;Let’s see how it works in practice.&lt;/p&gt;
&lt;h2 id=&quot;submitting-a-pull-request-without-write-access&quot;&gt;Submitting a pull request without write access&lt;/h2&gt;
&lt;p&gt;Note: You cannot fork your own repository. What I’m going to do is use a dummy account to show you how it works. From this point on, take note of these two account names:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Main account: &lt;code&gt;zellwk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dummy account: &lt;code&gt;zellwk2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(I should have created a totally different name… but I think you’ll be able to follow along just fine).&lt;/p&gt;
&lt;p&gt;To fork a repository, you click on the fork button that’s on the top-right-hand corner of the repository.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-fork.png&quot; alt=&quot;Forking a repository&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once the fork is completed, you’ll see a repository that looks (almost) exactly like the repository you forked from. There is one difference though—if you look at the title of the project, you can see that the project is forked from another repository.&lt;/p&gt;
&lt;p&gt;You have write access to this forked repository.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-forked.png&quot; alt=&quot;The forked repository&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s what we do when we submit a pull request from a forked repository:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new branch&lt;/li&gt;
&lt;li&gt;Write code in that new branch&lt;/li&gt;
&lt;li&gt;Send a pull request from that new branch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But for this lesson, I’m not going to create the new branch because I’ll have to set up the dummy account on my Git client. (Which is a tedious process).&lt;/p&gt;
&lt;p&gt;So, for this lesson, we’re going to write in the &lt;code&gt;develop&lt;/code&gt; branch directly. Then, we’ll submit a pull request from the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;In this case, I’m adding a list with the following HTML in the &lt;code&gt;index.html&lt;/code&gt; file&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I left the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; tag opened in this example. We’ll pick this error up when we review this pull request in the next lesson.&lt;/p&gt;
&lt;p&gt;The commit message for this changes is: &lt;code&gt;Add list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if you go back to your forked repository, you should be able to see a button called “new pull request”. This button is beside the button that lets you switch branches.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-pr-button.png&quot; alt=&quot;The pull request button on a forked repository&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Click on this new pull request button to create a pull request.&lt;/p&gt;
&lt;p&gt;Github will bring you to a page that says “Open a new pull request”. This page looks like the “Open a new pull request” page you saw above.&lt;/p&gt;
&lt;p&gt;The difference is you need to set four things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The base fork&lt;/li&gt;
&lt;li&gt;The base branch&lt;/li&gt;
&lt;li&gt;The head fork&lt;/li&gt;
&lt;li&gt;The compare branch&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-compare.png&quot; alt=&quot;Comparing two repositories and two branches&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;From the above example, we know two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;base&lt;/code&gt; branch is branch you want to merge to&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;compare&lt;/code&gt; branch is the branch you want to merge from&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From the previous pull request example, we know the &lt;code&gt;base&lt;/code&gt; branch is the branch you want to merge into, and the &lt;code&gt;compare&lt;/code&gt; branch is the branch you want to merge from.&lt;/p&gt;
&lt;p&gt;This means we should set the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The base fork: &lt;code&gt;zellwk/project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The base branch: &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The head fork: &lt;code&gt;zellwk2/project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The compare branch: &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What you need to do next is write the pull request title, write the comment, and click on the New Pull Request button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-open.png&quot; alt=&quot;Writing the pull request title&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;And you have submitted a pull request from a forked repository.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/submit-pr/na-pr-opened.png&quot; alt=&quot;Pull request opened&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;When you submit a pull request, you ask someone to review your changes before merging them into a branch.&lt;/p&gt;
&lt;p&gt;There are two ways to create a pull request. How you do it depends on whether you have write access to the repository.&lt;/p&gt;
&lt;p&gt;If you have write access, you can create a pull request from the repository’s page.&lt;/p&gt;
&lt;p&gt;If you don’t have write access, you need to fork the repository to your own page. Then, you create a pull request from your forked repository.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a simple form with CSS Grid</title>
    <link href="https://zellwk.com/blog/simple-form-with-css-grid/"/>
    <updated>2018-10-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/simple-form-with-css-grid/</id>
    <content type="html">&lt;p&gt;You learned to create a simple form with Flexbox in the &lt;a href=&quot;https://zellwk.com/blog/simple-form-with-flexbox&quot; title=&quot;Creating a simple form with Flexbox&quot;&gt;previous article&lt;/a&gt;. Today, you’ll understand how to create the same thing with CSS Grid.&lt;/p&gt;
&lt;p&gt;Here’s what we’re building:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-css-grid/form.png&quot; alt=&quot;The simple form we&#39;re building consists of one email input and one submit button&quot;&gt;
&lt;/figure&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;building-the-form-with-css-grid&quot;&gt;Building the form with CSS Grid&lt;/h2&gt;
&lt;p&gt;From the picture above, we know the form contains two elements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An email field&lt;/li&gt;
&lt;li&gt;A submit button&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To build the form with CSS Grid, you need to set the parent’s &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;grid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;form {
  display: grid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you get:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-css-grid/grid1.png&quot; alt=&quot;Two rows of elements. The first row is the email input. The second row is the submit button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Why did we get two rows?&lt;/p&gt;
&lt;p&gt;We get two rows because we did not specify the number of columns for the grid. Browsers will always default to one column.&lt;/p&gt;
&lt;p&gt;For this form, we need to set two columns.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first column should expand to fill up any available space&lt;/li&gt;
&lt;li&gt;The second column should be sized according to its contents&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first column, we can use the &lt;code&gt;fr&lt;/code&gt; unit. For the second column, we can use &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;form {
  display: grid;
  grid-template-columns: 1fr auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, you have completed form’s layout. Here’s a Codepen for you to play:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;qMLErJ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Simple form with CSS Grid&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/qMLErJ/&quot;&gt;Simple form with CSS Grid&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;when-elements-are-of-unequal-height%E2%80%A6&quot;&gt;When elements are of unequal height…&lt;/h2&gt;
&lt;p&gt;We will simulate elements of unequal height by substituting the &lt;code&gt;button&lt;/code&gt;&#39;s text with an SVG. &lt;a href=&quot;https://zellwk.com/blog/simple-form-with-flexbox&quot; title=&quot;Building a simple form with Flexbox&quot;&gt;This is the same as what we’ve done in the previous article&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Enter your email&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;svg&amp;gt; &amp;lt;!-- a smiley icon --&amp;gt; &amp;lt;/svg&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-css-grid/smiley.png&quot; alt=&quot;Adding a smiley icon as the to the submit button&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Adding a smiley icon as the to the submit button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the &lt;code&gt;input&lt;/code&gt;&#39;s height increases to fit the large SVG icon too! Once again, we don’t have to write any extra code. This happens because grid items are stretched vertically to fill up any available space.&lt;/p&gt;
&lt;p&gt;If you want to change this behavior, you can change the &lt;code&gt;align-items&lt;/code&gt; property to either &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-css-grid/align-items.png&quot; alt=&quot;Items can be aligned differently if you set `align-items` to a different value&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Items can be aligned differently if you set `align-items` to a different value&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s a Codepen for you to play:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;jvXEzm&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Simple form with CSS Grid (with SVG Button)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/jvXEzm/&quot;&gt;Simple form with CSS Grid (with SVG Button)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;CSS Grid makes it easy to create layouts. It doesn’t have to be used for macro layout. It can also be used for micro layouts like the form example you’ve seen here.&lt;/p&gt;
&lt;p&gt;Have fun with CSS Grid!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use Git stashes as a temporary storage</title>
    <link href="https://zellwk.com/blog/git-stash/"/>
    <updated>2018-10-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/git-stash/</id>
    <content type="html">&lt;p&gt;Let’s say you’re coding on your development branch. And you get a notice that there’s a bug on the production branch.&lt;/p&gt;
&lt;p&gt;You want to check for the bug, but you don’t want to lose the work you’ve created on the development branch. You also don’t want to commit what you’ve written because they’re not done yet.&lt;/p&gt;
&lt;p&gt;What do you do? You can’t commit and you can’t switch branches. If you switch branches, things that aren’t committed will flow over to the branch you switched to.&lt;/p&gt;
&lt;p&gt;What you want to do is save the changes somewhere temporary while you switch over to another branch. **A Git stash is that temporary storage. **&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;using-a-stash-with-git-fork&quot;&gt;Using a Stash with Git Fork&lt;/h2&gt;
&lt;p&gt;To use a stash, you need to start with some uncommitted code. For this lesson, we’re going to use the following piece of code as the uncommitted changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Some uncommitted code in index.html --&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;p&amp;gt; A new paragraph&amp;lt;/p&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To stash this code, you can click on the stash button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-stash/stash-button.png&quot; alt=&quot;The stash button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you click on the stash button, Fork will ask you to leave a message. This message indicates what the stash is about.&lt;/p&gt;
&lt;p&gt;Since stashes are temporary, you can use whatever name you want. We’re going to call it “Temp storage”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-stash/stash-name.png&quot; alt=&quot;Naming the stash&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you create a new stash, you’ll find it in the Stashes section on the sidebar.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-stash/stash-sidebar.png&quot; alt=&quot;The stash can be found in the sidebar&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Note: You won’t be able to see the changes in this stash, but that’s not a problem because you won’t have to. What you want to do is switch your branch, finish what you need to do and switch back.&lt;/p&gt;
&lt;p&gt;In this case, we’re going to check out to the &lt;code&gt;master&lt;/code&gt; branch. When you do so, notice you don’t see the uncommitted code we wrote above in both the &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt; branches.&lt;/p&gt;
&lt;h2 id=&quot;applying-stashed-changes&quot;&gt;Applying stashed changes&lt;/h2&gt;
&lt;p&gt;You can go back to the branch you were at, then right-click on your stash and select Apply stash.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-stash/apply-stash.png&quot; alt=&quot;Applying a stash&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will ask you whether to delete the stash when you do so. I usually delete the stash because I don’t want to keep more than one stash at one time.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-stash/apply-stash-2.png&quot; alt=&quot;Deleting the applied stash&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you apply the stash, you’ll be able to see the changes you made.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- You&#39;ll see your uncommitted code again! --&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;p&amp;gt; A new paragraph&amp;lt;/p&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Stashes are temporary storages where you can store you code. When you’ve stored your code, you can move to other branches to do something else.&lt;/p&gt;
&lt;p&gt;When you’re done, you can put your code back from the stash.&lt;/p&gt;
&lt;p&gt;With Git Stash, you won’t have to worry about losing any uncommitted changes!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a simple form with Flexbox</title>
    <link href="https://zellwk.com/blog/simple-form-with-flexbox/"/>
    <updated>2018-10-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/simple-form-with-flexbox/</id>
    <content type="html">&lt;p&gt;The simplest form on the web contains an email field and a submit button. Sometimes, the email field and the submit button is placed on the same row, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/form.png&quot; alt=&quot;Email and submit button on the same row&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Email and submit button on the same row&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This UI looks simple! But it can be difficult to build if you’re using older methods like &lt;code&gt;inline-block&lt;/code&gt;. The hard part is getting the email field and button to align visually.&lt;/p&gt;
&lt;p&gt;The great news is: CSS Grid or Flexbox can help you build this form easily.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;making-the-form-with-flexbox&quot;&gt;Making the form with Flexbox&lt;/h2&gt;
&lt;p&gt;From the picture above, we know the form contains two elements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An email field&lt;/li&gt;
&lt;li&gt;A submit button&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Subscribe!&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you have when you write the HTML (after styling for appearance).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/before.png&quot; alt=&quot;Input and Button elements are both inline-block elements&quot;&gt;
  &lt;figcaption&gt;Input and Button elements are both inline-block elements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Both &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt; are &lt;code&gt;inline-block&lt;/code&gt; elements. When you place inline-block elements together, you’ll get a whitespace of about 3-4 px between them. (You’ll also get whitespace of 3-4px at the bottom of each &lt;code&gt;inline-block&lt;/code&gt; element).&lt;/p&gt;
&lt;p&gt;To fix this whitespace issue, you can change &lt;code&gt;input&lt;/code&gt;&#39;s and &lt;code&gt;button&lt;/code&gt;&#39;s display property. One way is to use Flexbox.&lt;/p&gt;
&lt;p&gt;If you use Flexbox, you want to set the parent element’s display property to &lt;code&gt;flex&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;form {
  display: flex;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what you get once you set the display to flex:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/flexboxed.png&quot; alt=&quot;Whitespace between elements disappeared we used Flexbox&quot;&gt;
  &lt;figcaption&gt;Whitespace between elements disappeared we changed to Flexbox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Next.&lt;/p&gt;
&lt;p&gt;You want to give a user as much space as possible to fill in their email address. We don’t have enough space in our example now.&lt;/p&gt;
&lt;p&gt;To increase whitespace, we can ask the &lt;code&gt;input&lt;/code&gt; element to grow so it takes up all extra space available. You can do this by setting &lt;code&gt;flex-grow&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input {
  flex-grow: 1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/form.png&quot; alt=&quot;Email field grew to take up any available spaces&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Email field grew to take up any available spaces&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s a Codepen to try this out:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;aaQerX&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Simple form with Flexbox&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/aaQerX/&quot;&gt;Simple form with Flexbox&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;when-elements-are-of-unequal-height%E2%80%A6&quot;&gt;When elements are of unequal height…&lt;/h2&gt;
&lt;p&gt;This technique helps a lot if your &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;button&lt;/code&gt; elements are of unequal height. We’ll simulate this by substituting the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; text with an SVG. We’ll also make this SVG bigger than the &lt;code&gt;input&lt;/code&gt; text.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; placeholder=&amp;quot;Enter your email&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;svg&amp;gt; &amp;lt;!-- a smiley icon --&amp;gt; &amp;lt;/svg&amp;gt;&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/smiley.png&quot; alt=&quot;Adding a smiley icon as the to the submit button&quot;&gt;
  &lt;figcaption&gt;Adding a smiley icon as the to the submit button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the &lt;code&gt;input&lt;/code&gt;&#39;s height increases to fit the large SVG icon. We didn’t have to write any extra code! This happens because all elements are stretched vertically to fill up any available space by default.&lt;/p&gt;
&lt;p&gt;If you want to change this behavior, you can change the &lt;code&gt;align-items&lt;/code&gt; property to either &lt;code&gt;flex-start&lt;/code&gt;, &lt;code&gt;flex-end&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/simple-form-flexbox/align-items.png&quot; alt=&quot;Items can be aligned differently if you set `align-itemns` to a different value&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Items can be aligned differently if you set `align-itemns` to a different value&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice there’s some extra space below the SVG icon. There’s an extra space because SVGs are &lt;code&gt;inline-block&lt;/code&gt; elements by default. And &lt;code&gt;inline-block&lt;/code&gt; elements have a 3-4px whitespace below them (mentioned above).&lt;/p&gt;
&lt;p&gt;To fix this space below the SVG icon, we can change the SVG’s &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;block&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a Codepen to try this out:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;JawPwX&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Simple form with Flexbox (with SVG Button)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/JawPwX/&quot;&gt;Simple form with Flexbox (with SVG Button)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Flexbox makes it easy to align elements with unequal height. CSS Grid does the same too! I’ll show you how to create the same form with CSS Grid in the next article. a&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I remember CSS Grid properties</title>
    <link href="https://zellwk.com/blog/remember-css-grid-properties/"/>
    <updated>2018-10-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/remember-css-grid-properties/</id>
    <content type="html">&lt;p&gt;The syntax for CSS Grid is foreign and hard to remember. But if you can’t remember CSS Grid’s syntax, you won’t be confident when you use CSS Grid.&lt;/p&gt;
&lt;p&gt;To wield CSS Grid effectively, you need to remember its properties and values.&lt;/p&gt;
&lt;p&gt;I want to share how I remember the most common CSS Grid properties today. This will help you use CSS Grid without googling like a maniac.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;groups-of-properties&quot;&gt;Groups of properties&lt;/h2&gt;
&lt;p&gt;I remember CSS Grid according to four groups of properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The explicit grid&lt;/li&gt;
&lt;li&gt;Gaps&lt;/li&gt;
&lt;li&gt;Aligning things&lt;/li&gt;
&lt;li&gt;The implicit grid&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-explicit-grid&quot;&gt;The explicit grid&lt;/h2&gt;
&lt;p&gt;Let’s say you want to make a grid with 4 columns and 3 rows. You say this 4 columns and 3 rows out loud. It’s explicit.&lt;/p&gt;
&lt;p&gt;If you declare the number of rows and columns in your grid, the grid is explicit.&lt;/p&gt;
&lt;p&gt;You can use two properties to make an explicit grid:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;grid-template-columns&lt;/code&gt; lets you define the number of columns.  &lt;code&gt;grid-template-rows&lt;/code&gt; lets you define the number of rows.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-rows: 3em 3em 3em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a grid with four columns and three rows.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;XPyGZp&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;XPyGZp&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/XPyGZp/&quot;&gt;XPyGZp&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;How do you know there are four columns and three rows?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-template-columns&lt;/code&gt; create a new column for each length value you add to it. In the &lt;code&gt;grid-template-columns&lt;/code&gt; declaration above, we have four &lt;code&gt;1fr&lt;/code&gt; values. This means four columns.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-template-rows&lt;/code&gt; work the same way. The grid above has three &lt;code&gt;3em&lt;/code&gt; values, which means it has 3 rows.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-template-columns&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt; can also take in values like &lt;code&gt;repeat&lt;/code&gt;, &lt;code&gt;autofill&lt;/code&gt;, &lt;code&gt;autofit&lt;/code&gt;, &lt;code&gt;minmax&lt;/code&gt;. We won’t go into these values in this article.&lt;/p&gt;
&lt;p&gt;What you need to know now is you can create an explicit grid with two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;: creates columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;: creates rows&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;positioning-items-in-your-grid&quot;&gt;Positioning items in your grid&lt;/h3&gt;
&lt;p&gt;You can control the position of items in a grid with two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two properties can only be used on a grid item.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-column&lt;/code&gt; lets you choose which column(s) you want to place your grid item. It is a shorthand for &lt;code&gt;grid-column-start&lt;/code&gt; and &lt;code&gt;grid-column-end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It works this way: &lt;code&gt;grid-column-start / grid-columns-end&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Using the longhand */
.grid-item {
  grid-column-start: 1;
  grid-column-end: 3;
}

/* Using the shorthand */
.grid-item {
  grid-column: 1 / 3;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: You can also use the &lt;code&gt;span&lt;/code&gt; keyword to tell CSS Grid how many columns you want your item to take up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Using the longhand */
.grid-item {
  grid-column-start: 1; /* Start at column one */
  grid-column-end: span 2; /* Width is two columns */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;dqQrmm&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Explicit Grid properties&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/dqQrmm/&quot;&gt;Explicit Grid properties&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;grid-row&lt;/code&gt; lets you choose which row(s) you want to place your grid item. It is a shorthand for &lt;code&gt;grid-row-start&lt;/code&gt; and &lt;code&gt;grid-row-end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It works this way: &lt;code&gt;grid-row-start / grid-row-end&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Using the longhand */
.grid-item {
  grid-row-start: 1;
  grid-row-end: span 2;
}

/* Using the shorthand */
.grid-item {
  grid-row: 1 / span 2;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;OoaqoG&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Positioning items (rows)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/OoaqoG/&quot;&gt;Positioning items (rows)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;positioning-items-in-named-areas&quot;&gt;Positioning items in named areas&lt;/h3&gt;
&lt;p&gt;You can name parts of your grid if you don’t like counting rows and columns. These named parts are called grid areas. To create a grid area, you use &lt;code&gt;grid-template-areas&lt;/code&gt; on the grid.&lt;/p&gt;
&lt;p&gt;Some notes on creating grid areas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You must name every grid area&lt;/li&gt;
&lt;li&gt;If you don’t want to name an area, use &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Each group separated by inverted commas (&lt;code&gt;&amp;quot;row1&amp;quot; &amp;quot;row2&amp;quot;&lt;/code&gt;) signifies a row&lt;/li&gt;
&lt;li&gt;Each value within inverted commas (&lt;code&gt;&amp;quot;area1 area2&amp;quot;&lt;/code&gt;) signifies an area&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The example below has three grid areas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt; on the first two and takes up 4 columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; on the second row and takes up the middle 2 columns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footer&lt;/code&gt; on the third row and takes up 4 columns&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  grid-template-areas: &amp;quot;header header header header&amp;quot;
                      &amp;quot;.      main   main   .     &amp;quot;
                      &amp;quot;footer footer footer footer&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To place items in a grid area, you use the &lt;code&gt;grid-area&lt;/code&gt; property on the grid item.&lt;/p&gt;
&lt;p&gt;To place items on a grid-area, you use &lt;code&gt;grid-area&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  display: grid;
  /* ... */
}

main {
  grid-area: main
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;PdxLyg&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Grid-template-area&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/PdxLyg/&quot;&gt;Grid-template-area&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;how-to-remember-these-properties&quot;&gt;How to remember these properties&lt;/h3&gt;
&lt;p&gt;You learned 6 properties so far:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-area&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some tips to remember these 6 properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;template&lt;/code&gt; keyword can only be used on the grid
&lt;ol&gt;
&lt;li&gt;They’re used to declare grids and named areas&lt;/li&gt;
&lt;li&gt;Properties with the &lt;code&gt;template&lt;/code&gt; keyword are plural&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Properties for grid items do not have the &lt;code&gt;template&lt;/code&gt; keyword
&lt;ol&gt;
&lt;li&gt;These properties are singular&lt;/li&gt;
&lt;li&gt;These properties affect positioning&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;gaps&quot;&gt;Gaps&lt;/h2&gt;
&lt;p&gt;When you create a grid, you can create spaces between columns and rows. These spaces are called gaps.&lt;/p&gt;
&lt;p&gt;There are three properties to remember:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;grid-column-gap&lt;/code&gt; determines the space between columns.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-row-gap&lt;/code&gt; determines the space between rows.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grid-gap&lt;/code&gt; is a shorthand for &lt;code&gt;grid-column-gap&lt;/code&gt; and &lt;code&gt;grid-row-gap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this shorthand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the &lt;code&gt;row&lt;/code&gt; value comes first: &lt;code&gt;row-gap column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you use a single number, both values will be that number.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Different values */
.grid {
  grid-column-gap: 1em;
  grid-row-gap: 2em;
}

.grid {
  grid-gap: 2em 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Same values */
.grid {
  grid-column-gap: 1em;
  grid-row-gap: 1em;
}

.grid {
  grid-gap: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;bxQZZG&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Explicit Grid with gap&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/bxQZZG/&quot;&gt;Explicit Grid with gap&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;aligning-things&quot;&gt;Aligning things&lt;/h2&gt;
&lt;p&gt;This is where many people get confused.&lt;/p&gt;
&lt;p&gt;There are six properties to align things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can see two groups of patterns here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first group is &lt;code&gt;justify&lt;/code&gt; vs &lt;code&gt;align&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The second group is &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;items&lt;/code&gt;, and &lt;code&gt;self&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two groups of properties tell you what you’re dealing with. If you understand the property keyword, you’ll know how to use them.&lt;/p&gt;
&lt;h3 id=&quot;justify-vs-align&quot;&gt;Justify vs align&lt;/h3&gt;
&lt;p&gt;Each CSS Grid has two axes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The inline-axis&lt;/li&gt;
&lt;li&gt;The block-axis&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you &lt;code&gt;justify&lt;/code&gt; something, you’re changing the alignment according to the &lt;em&gt;inline-axis&lt;/em&gt;. When you &lt;code&gt;align&lt;/code&gt; something, you’re changing the alignment according to the &lt;em&gt;block-axis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an easy way to identify the inline and block axes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the direction of the language&lt;/li&gt;
&lt;li&gt;Inline-axis is the way you read the language&lt;/li&gt;
&lt;li&gt;Block-axis is the way you read after you read the end of the first line.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s take English as an example. How do you read English?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Left to right&lt;/li&gt;
&lt;li&gt;Top to bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the inline and block axis is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inline: left to right&lt;/li&gt;
&lt;li&gt;Block: top to bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/remember-css-grid-properties/axes.png&quot; alt=&quot;Inline-axis reads left to right. Block-axis reads top to bottom&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Inline-axis reads left to right. Block-axis reads top to bottom&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note: the inline and block axes change if you change the language direction with &lt;code&gt;writing-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;content%2C-items%2C-and-self&quot;&gt;Content, items, and self&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-content&lt;/code&gt; lets you align the grid itself to the available space outside of the grid. You will only need these properties if your grid is smaller than its defined area. (Which is rare).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  justify-content: /* some value */;
  align-content: /* some value */;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can pick from seven values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: flush grid to the start of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;: flushed grid to the end of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;center&lt;/strong&gt;: align grid to the center of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stretch&lt;/strong&gt;: grid fills the axis (this is the default value)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;space-between&lt;/strong&gt;: spreads whitespace between grid items. No whitespace on at the ends&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;space-around&lt;/strong&gt;: spreads whitespace around each grid item&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;space-evenly&lt;/strong&gt;: spreads whitespace evenly around all grid items including the ends&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/remember-css-grid-properties/alignment-values.png&quot; alt=&quot;7 possible alignment values and what they do&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;7 possible alignment values and what they do&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The pictures above are taken from CSS Tricks’s &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot; title=&quot;A complete guide to grid&quot;&gt;A complete Guide to Grid&lt;/a&gt;. It explains what each value does in detail. You can read it for more information.&lt;/p&gt;
&lt;p&gt;Our focus here is remembering the properties and how to use them. Let’s get back on track with the next set of properties.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;justify-items&lt;/code&gt; and &lt;code&gt;align-items&lt;/code&gt; lets you align grid-items to any available whitespace in their respective cells. Most of the time, when you’re trying to align things, you’re looking for either &lt;code&gt;justify-items&lt;/code&gt; or &lt;code&gt;align-items&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  justify-items: /* some value */;
  align-items: /* some value */;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can pick from the same four values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: flush item to the start of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;end&lt;/strong&gt;: flushed item to the end of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;center&lt;/strong&gt;: align item to the center of the axis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stretch&lt;/strong&gt;: fills the axis (this is the default value)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/remember-css-grid-properties/alignment-values-2.png&quot; alt=&quot;4 possible alignment values and what they do&quot;&gt;
  &lt;figcaption&gt;4 possible alignment values and what they do&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;justify-self&lt;/code&gt; and &lt;code&gt;align-self&lt;/code&gt; does the same thing as &lt;code&gt;justify-items&lt;/code&gt; and &lt;code&gt;align-items&lt;/code&gt;. The difference is it lets you change the alignment for only one grid-item.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  justify-self: /* some value */;
  align-self: /* some value */;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;implicit-grid&quot;&gt;Implicit Grid&lt;/h2&gt;
&lt;p&gt;Let’s say you created a CSS Grid, but you don’t have enough rows. In this example below, I only created an explicit grid for three items. (3 columns, 1 row)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-row: 3em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I have six items!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you don’t have enough space in your explicit grid, CSS Grid will help you create additional grids automatically. By default, it’ll create more rows.&lt;/p&gt;
&lt;p&gt;If you want to switch the grid direction, you’ll set &lt;code&gt;grid-auto-flow&lt;/code&gt; to &lt;code&gt;row&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This automatically created parts are called the implicit grid.&lt;/p&gt;
&lt;p&gt;You can adjust the automatically created column(s) or row(s) with these two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 3em;
  grid-auto-rows: 6em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;yxQrJb&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Implicit grid&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/yxQrJb/&quot;&gt;Implicit grid&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;how-to-remember-the-implicit-grid&quot;&gt;How to remember the implicit grid&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt; is the keyword you want to watch out for.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; creates the explicit grid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt; creates the implicit grid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I use the implicit grid a lot. I’ll share how I use CSS Grid in another article.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s almost every CSS Grid property you need to know for 80% of your grids! Here’s a summary of the properties you learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating a grid
&lt;ol&gt;
&lt;li&gt;Explicit:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-rows&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Implicit:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Gaps
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Positioning items in a grid
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;grid-column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-row&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Aligning things
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope this helps you remember CSS Grid! All the best!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Semantic Versioning</title>
    <link href="https://zellwk.com/blog/semantic-versioning/"/>
    <updated>2018-09-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/semantic-versioning/</id>
    <content type="html">&lt;p&gt;We created numbers like &lt;code&gt;1.0.0&lt;/code&gt; and &lt;code&gt;1.0.1&lt;/code&gt; for releases and hotfixes when we worked on Git Flow. What do these numbers represent, and why do we use them?&lt;/p&gt;
&lt;p&gt;These numbers represent the version number of the product we put out in the world. We use them because we’re following a best practice called Semantic Versioning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When we use Semantic Versioning, developers will know whether a change will break their code.&lt;/strong&gt; The numbers give a clue to the kind of changes that have occurred.&lt;/p&gt;
&lt;p&gt;Many popular projects use Semantic Versioning. Examples are React and Vue.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;understanding-semantic-versioning&quot;&gt;Understanding Semantic Versioning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A semantic version has three numbers.&lt;/strong&gt; The rightmost number is a patch version.&lt;/p&gt;
&lt;h3 id=&quot;patch-versions&quot;&gt;Patch Versions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Patch versions are used for bugfixes.&lt;/strong&gt; There are no functionality changes. (That’s why we use a patch version when we released a hotfix in the &lt;a href=&quot;https://zellwk.com/blog/git-flow&quot; title=&quot;Git Flow&quot;&gt;previous lesson&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When you increase a new patch, &lt;strong&gt;you increase the rightmost number by 1.&lt;/strong&gt; From 1, you increase it to 2, then to 3, and so on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If your patch number is 9,&lt;/strong&gt; when you increase the patch version again, &lt;strong&gt;you increase it to 10,&lt;/strong&gt; then 11, then 12, and so on. (There are no limits to the numbers)&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/semantic-versioning/patch.png&quot; alt=&quot;A patch version is the rightmost number&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;minor-versions&quot;&gt;Minor versions&lt;/h3&gt;
&lt;p&gt;The second number is called the minor version number. It is &lt;strong&gt;used when you release new functionality&lt;/strong&gt; in your project.&lt;/p&gt;
&lt;p&gt;When you increase the minor version, you also increase it by one. But &lt;strong&gt;when you increase the minor version, you must reset the patch version to zero.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/semantic-versioning/minor.png&quot; alt=&quot;A minor version is the second number&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;major-versions&quot;&gt;Major versions&lt;/h3&gt;
&lt;p&gt;The leftmost number is a major version. When you increase the major version, you tell people that there are &lt;strong&gt;backward-incompatible changes&lt;/strong&gt;. People may experience breakage if they use the next version.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When you increase the major version number, you reset both patch version and minor versions.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/semantic-versioning/major.png&quot; alt=&quot;A major version is the leftmost number&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pre-releases&quot;&gt;Pre-releases&lt;/h2&gt;
&lt;p&gt;If you want to create a pre-release (like an alpha or beta version), you can add a &lt;code&gt;-&lt;/code&gt;, followed by the words &lt;code&gt;alpha&lt;/code&gt; or &lt;code&gt;beta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;no hard and fast rules for pre-releases&lt;/strong&gt;, so you can name them anything you want. Usually, we use alpha or beta, followed by a number, like &lt;code&gt;alpha1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;starting-a-project&quot;&gt;Starting a project&lt;/h2&gt;
&lt;p&gt;Most people start projects with &lt;code&gt;0.1.0&lt;/code&gt;. When you’re ready to release the project to the public, you increase the version to &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Becoming more productive while working less</title>
    <link href="https://zellwk.com/blog/becoming-more-productive-while-working-less/"/>
    <updated>2018-09-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/becoming-more-productive-while-working-less/</id>
    <content type="html">&lt;p&gt;I don’t have time to learn.&lt;/p&gt;
&lt;p&gt;Many people say that to themselves. I say that to myself too.&lt;/p&gt;
&lt;p&gt;I haven’t learned much this year because I was on a tight schedule to create content. I had to create one article and one video every week for the blog. I also had to create as many Learn JavaScript lessons as I can.&lt;/p&gt;
&lt;p&gt;And I was almost burned out. I was unhappy and depressed.&lt;/p&gt;
&lt;p&gt;Learning is important to me. When I don’t learn, I start to feel guilty.&lt;/p&gt;
&lt;p&gt;One day, I decided enough was enough. I had to change up my schedule to allow time for learning. I did some experiments over the next few weeks and found a way where &lt;strong&gt;I could give myself 1.5 hours to learn every day&lt;/strong&gt;. The best part is, I created even more content than I did before!&lt;/p&gt;
&lt;p&gt;I want to share with you my experiment and how I tweaked my schedule to allow time for learning. I hope it’ll help you find some time to learn as well.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;my-previous-schedule&quot;&gt;My previous schedule&lt;/h2&gt;
&lt;p&gt;I start work at 9am and end work at 6:30pm. Here’s a breakdown of how I spend my time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;9:00am to 10:30am: Work&lt;/li&gt;
&lt;li&gt;10:30am to 11:00am: Break&lt;/li&gt;
&lt;li&gt;1100am to 1230pm: Work&lt;/li&gt;
&lt;li&gt;1230pm to 2pm: Lunch break&lt;/li&gt;
&lt;li&gt;2pm to 3:30pm: Work&lt;/li&gt;
&lt;li&gt;3:30pm to 4:00pm: Break&lt;/li&gt;
&lt;li&gt;4:00pm to 5:30pm: Work&lt;/li&gt;
&lt;li&gt;5:30pm to 6:00pm: Break&lt;/li&gt;
&lt;li&gt;6:00pm to 6:30pm: Check emails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, I work for 1.5 hours, then rest for 30 minutes. And I repeat that for the entire day. I take some extra time off lunch too.&lt;/p&gt;
&lt;p&gt;Why 1.5 hours?&lt;/p&gt;
&lt;p&gt;I used to use the Pomodoro Technique to help me stay focused while working. In the Pomodoro technique, you focus for 25 minutes, rest for five minutes, and repeat for four cycles.&lt;/p&gt;
&lt;p&gt;Both the focused duration and the rest period were helpful. But I felt that 25 minutes of focused time was too short. I wanted to focus for a longer period of time.&lt;/p&gt;
&lt;p&gt;Through my tests, I found that I do my best work when I focus for 1.5 hours and rest for 30 minutes.&lt;/p&gt;
&lt;p&gt;With this schedule, I created about 4 pieces of content each week without fail. Generally, 1-2 articles, 1-2 videos and 1 Learn JavaScript lesson.&lt;/p&gt;
&lt;h2 id=&quot;the-interim-routine&quot;&gt;The Interim Routine&lt;/h2&gt;
&lt;p&gt;I wanted to find 30 minutes to read and 30 minutes to go through courses I bought. If I can &lt;strong&gt;find one extra hour a day to learn, and still continue to produce the same amount of content,&lt;/strong&gt; I’ll be a happy man.&lt;/p&gt;
&lt;p&gt;What I realized with my previous schedule was: I couldn’t stay focused for four work periods. I was a dead fish once I completed the third work period.&lt;/p&gt;
&lt;p&gt;In the fourth period, I would stare at my text editor, chat on Slack, check Twitter, look for food in the fridge, and do just about anything else than work.&lt;/p&gt;
&lt;p&gt;I couldn’t get much done in my exhausted state.&lt;/p&gt;
&lt;p&gt;It was hard, but &lt;strong&gt;I decided to cut my working hours to 3 periods&lt;/strong&gt; (or 4.5 hours). This thought ate at me for weeks. &lt;em&gt;I felt guilty for not working more&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;But I gave it a go anyway.&lt;/p&gt;
&lt;p&gt;My routine looked like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;9:00am to 10:30am: Learn&lt;/li&gt;
&lt;li&gt;10:30am to 11:00am: Break&lt;/li&gt;
&lt;li&gt;1100am to 1230pm: Work&lt;/li&gt;
&lt;li&gt;1230pm to 2pm: Lunch break&lt;/li&gt;
&lt;li&gt;2pm to 3:30pm: Work&lt;/li&gt;
&lt;li&gt;3:30pm to 4:00pm: Break&lt;/li&gt;
&lt;li&gt;4:00pm to 5:30pm: Work&lt;/li&gt;
&lt;li&gt;5:30pm to 6:00pm: Break&lt;/li&gt;
&lt;li&gt;6:00pm to 6:30pm: Check emails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, &lt;strong&gt;I spend the first work period learning&lt;/strong&gt;. I chose to learn during the first work period because &lt;strong&gt;I know I can’t learn after work&lt;/strong&gt;. Once I begin working, I’ll burn myself to the ground, and I’ll be too exhausted to learn.&lt;/p&gt;
&lt;p&gt;My hypothesis was spot on here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m happy I could learn for 1.5 hours each day.&lt;/strong&gt; And I was able to get the same amount of work done in 4.5 hours.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But I got even more stressed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t know if I can maintain the production speed for a prolonged period of time. Plus, 4 pieces of content per week was too little. I wanted to create more content.&lt;/p&gt;
&lt;p&gt;I wanted to create at least 2 articles, 2 videos, and 2 Learn JavaScript lessons each week. The extra article and video are there to build up a content buffer so I &lt;a href=&quot;https://zellwk.com/blog/becoming-more-productive-while-working-less/&quot;&gt;don’t have to work till 11pm when life shits on me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was still short by 2 pieces.&lt;/p&gt;
&lt;p&gt;I had to find ways to create these two pieces.&lt;/p&gt;
&lt;p&gt;Around this time, I took a break and a brilliant idea struck me. And &lt;strong&gt;I overhauled my routine again.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;my-current-schedule&quot;&gt;My current schedule&lt;/h2&gt;
&lt;p&gt;In my current schedule, &lt;strong&gt;the working hours remain the same&lt;/strong&gt;: 1.5 hours of learning and 4.5 hours of focused work. &lt;strong&gt;The difference is the type of work I did&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I realized that each content type requires different thought process and creation methods. How I create articles is different from how I create videos, and so on.&lt;/p&gt;
&lt;p&gt;I got stressed up because I switched between tasks too much. I couldn’t get into &lt;a href=&quot;https://zellwk.com/blog/becoming-more-productive-while-working-less/&quot;&gt;deep work&lt;/a&gt; mode. I worry about making videos when I write articles, and I worry about Learn JavaScript lessons when I make videos.&lt;/p&gt;
&lt;p&gt;It was messed up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The idea I had was to focus on one content type each week.&lt;/strong&gt; That means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 week of articles&lt;/li&gt;
&lt;li&gt;1 week of videos&lt;/li&gt;
&lt;li&gt;1 week of Learn JavaScript lessons&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the process repeats.&lt;/p&gt;
&lt;p&gt;With this new process, I realized &lt;em&gt;three&lt;/em&gt; big benefits.&lt;/p&gt;
&lt;p&gt;First, &lt;strong&gt;I could produce faster because I had more context.&lt;/strong&gt; I knew what the previous video was about, what the next video was about and what to say for the current video. (Same for articles and Learn JavaScript lessons).&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;I was able to get a sense of the time I need&lt;/strong&gt; to produce each type of content.&lt;/p&gt;
&lt;p&gt;For example, if a video takes 15 minutes to record, I know it twice the amount of time (30 minutes) to edit. And it’ll take three times the amount of time (45 minutes) to convert the video into an article.&lt;/p&gt;
&lt;p&gt;(I kid you not, I didn’t have concrete numbers like these previously. All my estimates were blind guesses).&lt;/p&gt;
&lt;p&gt;Third, &lt;strong&gt;I was able to improve my delivery&lt;/strong&gt; for each type of content.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For articles, I write smoother (and more like how I talk)&lt;/li&gt;
&lt;li&gt;For videos, I talk better (and more straight to the point)&lt;/li&gt;
&lt;li&gt;For Learn JavaScript lessons, I become more methodical in teaching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It was a win win win.&lt;/p&gt;
&lt;p&gt;For my first round of tests (which took three weeks), I produced the following pieces of content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Articles: 5&lt;/li&gt;
&lt;li&gt;Videos: 5&lt;/li&gt;
&lt;li&gt;Learn JavaScript lessons: 7&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s a big win! I’m producing almost &lt;strong&gt;40% more content compared to before&lt;/strong&gt; while &lt;em&gt;working the same amount of time&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;(Spoiler alert. This article you’re reading was created &lt;em&gt;five weeks ago&lt;/em&gt; 😛).&lt;/p&gt;
&lt;p&gt;Besides the improved capacity, each content type drove insights for other types. For example, when I created Learn JavaScript lessons, I found inspiration for articles where I can share about CSS (more to come in the next few weeks!).&lt;/p&gt;
&lt;p&gt;Everything became smoother. Much smoother.&lt;/p&gt;
&lt;h2 id=&quot;a-challenge&quot;&gt;A challenge&lt;/h2&gt;
&lt;p&gt;I saw first-hand that productivity isn’t about having more time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productivity is about managing your time and energy.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are you doing your &lt;em&gt;best work&lt;/em&gt; with the available time?&lt;/li&gt;
&lt;li&gt;Are you &lt;em&gt;focused&lt;/em&gt; when you work?&lt;/li&gt;
&lt;li&gt;Are you &lt;em&gt;happy&lt;/em&gt; with what you’re spending time on?&lt;/li&gt;
&lt;li&gt;Are you resting enough to &lt;em&gt;recharge&lt;/em&gt; yourself?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you answered no to any of the questions above, you can improve your schedule to fit more of what you want into your life. &lt;strong&gt;You can become more productive while working less.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Trust me, I didn’t believe I could fit another 1.5 hours of learning into my schedule. I thought I was maxed out already! But once I saw how it works, it completely blew my mind.&lt;/p&gt;
&lt;p&gt;Now, most people will read this article and go, “Good for Zell”, and go on with their daily lives. This defeats the purpose of this article.&lt;/p&gt;
&lt;p&gt;I wanted to share this article to help you &lt;strong&gt;rethink what you’re doing on a daily basis&lt;/strong&gt;. Take a closer look at your life. Are you happy with it?&lt;/p&gt;
&lt;p&gt;If not, maybe it’s time for a change?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So here’s a challenge. Write these down:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are you happy about?&lt;/li&gt;
&lt;li&gt;What are you unhappy about?&lt;/li&gt;
&lt;li&gt;What more do you want to do in your life?&lt;/li&gt;
&lt;li&gt;What less do you want to do in your life?&lt;/li&gt;
&lt;li&gt;What can you change to get a better life?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, I want you to &lt;strong&gt;share your thoughts with me&lt;/strong&gt; in the comments below. I’ll read every one of them. Also, @me on twitter and use the &lt;code&gt;#scheduleExperiment&lt;/code&gt; hashtag. Keep me updated about how’s it going.&lt;/p&gt;
&lt;p&gt;Remember, your new schedule doesn’t need to be perfect. You can always tweak it along the way.&lt;/p&gt;
&lt;p&gt;All the best!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Managing your Git branches with Git Flow</title>
    <link href="https://zellwk.com/blog/git-flow/"/>
    <updated>2018-09-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/git-flow/</id>
    <content type="html">&lt;p&gt;How do you manage your git branches if you have many of them? For this, we have a well-known method called the Git flow.&lt;/p&gt;
&lt;p&gt;It contains five types of branches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The production branch&lt;/li&gt;
&lt;li&gt;The develop branch&lt;/li&gt;
&lt;li&gt;Feature branches&lt;/li&gt;
&lt;li&gt;Release branches&lt;/li&gt;
&lt;li&gt;Hotfix branches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll go into what each type of branches do and how to create them in this lesson.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Let’s start by creating the Git flow.&lt;/p&gt;
&lt;h2 id=&quot;initializing-a-git-flow&quot;&gt;Initializing a Git Flow&lt;/h2&gt;
&lt;p&gt;To initialize the Git flow, you go to the left-hand sidebar in Fork and right-click one of your branches. You’ll see a menu called Git Flow. Under Git Flow, you’ll see initialize Git Flow.&lt;/p&gt;
&lt;p&gt;Click on it.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/git-flow-init.png&quot; alt=&quot;Initialize Git Flow&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will give you a menu. Here, you’ll see the five types of branches I mentioned above, with these settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Production branch: &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Develop branch: &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Feature prefix: &lt;code&gt;feature/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Release prefix: &lt;code&gt;release/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Hotfix prefix: &lt;code&gt;hotfix/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’ll also see a version tag prefix that’s empty.&lt;/p&gt;
&lt;p&gt;We’ll talk about what these prefixes are later. For now, let’s go with the defaults and initialize the Git Flow.&lt;/p&gt;
&lt;p&gt;When you initialized Git Flow, Fork will create the &lt;code&gt;develop&lt;/code&gt; branch for you.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/git-flow-inited.png&quot; alt=&quot;Develop branch created after Git Flow gets initialized&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;production-and-development-branches&quot;&gt;Production and Development branches&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch is used for production purposes. It contains code for the website or application that you show people.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;develop&lt;/code&gt; branch is where most of the development work occurs.&lt;/p&gt;
&lt;p&gt;We talked about the &lt;code&gt;master&lt;/code&gt; branch and the &lt;code&gt;develop&lt;/code&gt; branch in the &lt;a href=&quot;https://zellwk.com/blog/git-branch&quot; title=&quot;What is a branch in Git?&quot;&gt;Git branch lesson&lt;/a&gt;. You may want to revisit that lesson if you want don’t know what they’re for.&lt;/p&gt;
&lt;h2 id=&quot;feature-branches&quot;&gt;Feature branches&lt;/h2&gt;
&lt;p&gt;Let’s say you want to refactor your codebase.&lt;/p&gt;
&lt;p&gt;A refactor is a big process. You may be afraid to break the &lt;code&gt;develop&lt;/code&gt; branch if you code on it directly. And this causes panic.&lt;/p&gt;
&lt;p&gt;We don’t want to panic when we code, so we create a separate branch to handle the refatctor. In this case, the refactor is a  feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feature branches are almost anything you can think of.&lt;/strong&gt; If you need to write a chunk of code, you’ll use a feature branch. Examples include adding new things (like a comment system or a dashboard) to your project.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-feature&quot;&gt;Creating a feature&lt;/h3&gt;
&lt;p&gt;We start a &lt;code&gt;feature&lt;/code&gt; branch from the &lt;code&gt;develop&lt;/code&gt; branch. When the feature is completed, we merge it back into the &lt;code&gt;develop&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;To create a feature, you right-click on any of your branches in the left sidebar, select Git Flow, and select Start Feature.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-start.png&quot; alt=&quot;Starting a feature&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will start the feature from the &lt;code&gt;develop&lt;/code&gt; branch for you.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-start-2.png&quot; alt=&quot;Fork will start the feature from the develop branch. You can change it though&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You can name the feature anything you want. I’ll call the feature &lt;code&gt;nav&lt;/code&gt; in this example.&lt;/p&gt;
&lt;p&gt;Once you click on start feature, you’ll see a folder called &lt;code&gt;feature&lt;/code&gt; in the left sidebar. If you open the folder, you’ll see your feature.&lt;/p&gt;
&lt;p&gt;This means the &lt;strong&gt;prefixes help you organize your branches into folders.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-sidebar.png&quot; alt=&quot;Sidebar shows a feature folder and a nav branch&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you look at the Git History, you’ll also see a branch called &lt;code&gt;feature/nav&lt;/code&gt;. This tells you that &lt;code&gt;nav&lt;/code&gt; is a feature branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-log.png&quot; alt=&quot;Git history shows a feature/nav tag&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I’m going to add three links to the project for the &lt;code&gt;nav&lt;/code&gt; feature. I’ll set the &lt;code&gt;href&lt;/code&gt; for these links as &lt;code&gt;#&lt;/code&gt; on purpose.  We’ll fix them later with a hotfix.&lt;/p&gt;
&lt;p&gt;This code goes into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- In my index.html file --&amp;gt;
&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After making your changes, you need to commit them to the project. Go to the staging area, stage the files, and create a commit message. Review &lt;a href=&quot;https://zellwk.com/blog/your-first-commit&quot; title=&quot;How to write your first commit&quot;&gt;this lesson&lt;/a&gt; if you don’t know how to create a commit.&lt;/p&gt;
&lt;p&gt;In this example, I set my commit message to “add nav”. Here’s what the Git history looks like after I committed the code. You’ll see that &lt;code&gt;feature/nav&lt;/code&gt; is one commit ahead of everything else:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-log-2.png&quot; alt=&quot;Feature is one commit ahead of other branches&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;ending-the-feature&quot;&gt;Ending the feature&lt;/h3&gt;
&lt;p&gt;You want to merge features back into &lt;code&gt;develop&lt;/code&gt; when you’re done. And this is where it gets interesting.&lt;/p&gt;
&lt;p&gt;One way to end the feature is to imerge &lt;code&gt;nav&lt;/code&gt; into &lt;code&gt;develop&lt;/code&gt; ourselves with the method I showed you in the &lt;a href=&quot;https://zellwk.com/blog/git-branch&quot; title=&quot;What is a branch in Git?&quot;&gt;Git branch&lt;/a&gt; lesson.&lt;/p&gt;
&lt;p&gt;But if you initialized the feature with Git Flow, you can use Git Flow to merge the &lt;code&gt;feature&lt;/code&gt; back into &lt;code&gt;develop&lt;/code&gt; for you. To do this, you right-click on the feature you want to merge (&lt;code&gt;nav&lt;/code&gt; in this case), go under Git Flow, and click on the Finish feature option.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-finish.png&quot; alt=&quot;Finishing a feature&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will ask you whether you want to delete your branches. I check it because it helps me keep my branches clean.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-finish-2.png&quot; alt=&quot;Menu that pops up after you click on finish feature&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Click on finish and you’ll see the &lt;code&gt;develop&lt;/code&gt; branch is now on the &lt;code&gt;add nav&lt;/code&gt; commit.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/feature-finish-3.png&quot; alt=&quot;Feature completed. `develop` is now on the `add nav` commit&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;release-branches&quot;&gt;Release branches&lt;/h2&gt;
&lt;p&gt;When you decide on the features you want to release to your users, you want to fix the bugs for these features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you have a big team, you’ll want people to continue creating features as you fix bugs&lt;/strong&gt;. That’s when a release branch is useful.&lt;/p&gt;
&lt;p&gt;Once the bugs are fixed, you’ll merge the release branch into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-release&quot;&gt;Creating a release&lt;/h3&gt;
&lt;p&gt;Release branches can be created with Git Flow. To create a release branch, you right-click on any of the branches in the left sidebar, go to Git Flow and select Start Release.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-start.png&quot; alt=&quot;Starting a release&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The release branch will also start from &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For release branches, we usually use a version as the branch name.&lt;/strong&gt; This makes it easy for us to go back to an earlier version when we need to. It also makes it easy for users to choose specific versions of our product to use.&lt;/p&gt;
&lt;p&gt;Here, we’ll use a version of &lt;code&gt;1.0.0&lt;/code&gt;. I’ll talk about why we use such a version number in a later video.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-start-name.png&quot; alt=&quot;Naming the release 1.0.0&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you’ve decided on a version number, click on start release and Fork will create a branch for you. It will also create a &lt;code&gt;release&lt;/code&gt; folder on the sidebar. This is the same as what you see with a &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-sidebar.png&quot; alt=&quot;Sidebar contains the release folder and your release branch&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You’ll also see release branch in the Git History.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-history.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;ending-the-release&quot;&gt;Ending the release&lt;/h3&gt;
&lt;p&gt;To end the release, right-click on your release branch, go to Git Flow, and select finish release.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-end.png&quot; alt=&quot;Finishing a release&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will ask you whether you want to delete the branch and back-merge master to develop.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-end-2.png&quot; alt=&quot;Do you want to delete the branch and back merge it into master?&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Check both and click on Submit.&lt;/p&gt;
&lt;p&gt;You’ll see the Git history change, and it might be complicated. So let’s explain what’s happening.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/release-end-history.png&quot; alt=&quot;Git history when the release ends&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You’ll see a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;release/1.0.0&lt;/code&gt; is gone&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;1.0.0&lt;/code&gt; takes its place&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; is on the same commit as &lt;code&gt;1.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt; is on a commit that says &lt;code&gt;Merge tag 1.0.0 into develop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s what’s happened:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git Flow creates a tag called &lt;code&gt;1.0.0&lt;/code&gt; to replace the release branch. This keeps track of where the release branch was at before.&lt;/li&gt;
&lt;li&gt;It merges the &lt;code&gt;release/1.0.0&lt;/code&gt; branch into &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It deletes the &lt;code&gt;release/1.0.0&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;It merges &lt;code&gt;1.0.0&lt;/code&gt; into &lt;code&gt;develop&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Git history got complicated because we checked &lt;code&gt;back-merge master into develop&lt;/code&gt; when we finished the feature. We check this because we want the &lt;code&gt;develop&lt;/code&gt; branch to be updated with the latest bugfixes.&lt;/p&gt;
&lt;p&gt;This is just the way it goes. You’ll have to get used to it.&lt;/p&gt;
&lt;h3 id=&quot;an-easier-way-to-visualize-things-the-changes&quot;&gt;An easier way to visualize things the changes&lt;/h3&gt;
&lt;p&gt;Atlassian has a &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow&quot; title=&quot;Git flow&quot;&gt;good blog post&lt;/a&gt; on Git Flow. I’m going to steal their pictures to help explain what’s happening.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/atlassian-release.png&quot; alt=&quot;Picture of a release from Atlassian&#39;s blog post&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Let me explain what’s going on in this picture.&lt;/p&gt;
&lt;p&gt;The horizontal axis is the commit timeline. The earliest commit will be on the left-hand side, and the latest commit will be on the right-hand side.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The two turquoise-looking nodes on the second line are the release commits.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;release&lt;/code&gt; branch will start from the &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;You’ll create commits to fix any bugs&lt;/li&gt;
&lt;li&gt;When you’re ready, you push into &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You also push the changes back into &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This picture is much easier to understand compared to the Git History.&lt;/p&gt;
&lt;h2 id=&quot;hotfix-branches&quot;&gt;Hotfix branches&lt;/h2&gt;
&lt;p&gt;The hotfix branch is used when you have a bug on a master branch that you know you can fix quickly.&lt;/p&gt;
&lt;p&gt;What you do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a branch from &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix the bugs&lt;/li&gt;
&lt;li&gt;Merge in into &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge it into &lt;code&gt;develop&lt;/code&gt; at the same time&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the picture from Atlassian on hotfixes:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/atlassian-hotfix.png&quot; alt=&quot;Picture from Atlassian&#39;s blog on hotfixes&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;creating-a-hotfix&quot;&gt;Creating a hotfix&lt;/h3&gt;
&lt;p&gt;To create a hotfix, you go to the left-hand sidebar, right-click on any of your branches, go to Git Flow and select Start Hotfix.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-start.png&quot; alt=&quot;Starting a hotfix&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will ask you for the name of your hotfix.&lt;/p&gt;
&lt;p&gt;You also create a tag for hotfixes, so you’ll use a version number as well. In this case, I’ll use &lt;code&gt;1.0.1&lt;/code&gt; as the version number. Once again, we’ll talk about the version numbers in a later lesson.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-start-2.png&quot; alt=&quot;Naming the hotfix as 1.0.1&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Click on Start Hotfix, and Git will create a &lt;code&gt;hotfix/1.0.1&lt;/code&gt; branch. You’ll see this in both the Git history and in the sidebar.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-log.png&quot; alt=&quot;Hotfix/1.0.1 in the git history&quot;&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-sidebar.png&quot; alt=&quot;Hotfix folder and 1.0.1 branch in the sidebar&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;fixing-the-errors&quot;&gt;Fixing the errors&lt;/h3&gt;
&lt;p&gt;We’re going to fix the stupid &lt;code&gt;href=&amp;quot;#&amp;quot;&lt;/code&gt; error we made above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- In the index.html file --&amp;gt;
&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;https://zellwk.com/&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;https://zellwk.com/about&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;https://zellwk.com/contact&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you fixed the error, you have to commit the changes. I’m going to set the commit message to “fix links”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-log-2.png&quot; alt=&quot;Fixing the bugs&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;finishing-the-hotfix&quot;&gt;Finishing the hotfix&lt;/h3&gt;
&lt;p&gt;To finish the hotfix, you click on the hotfix branch, go to Git Flow, and select finish hotfix.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-finish.png&quot; alt=&quot;Finishing a hotfix&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Here, Fork can help you delete the &lt;code&gt;&#39;1.0.1&lt;/code&gt; branch as well. I’ll keep that check to keep my branches clean.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-finish-2.png&quot; alt=&quot;Menu that pops up after you click on finish hotfix&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When you finish the branch, the Git history will become a lot more confusing than before.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-flow/hotfix-finish-log.png&quot; alt=&quot;Git history after hotfix is finished&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s what has happened:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git flow creates a tag called &lt;code&gt;1.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It merges &lt;code&gt;hotfix/1.0.1&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;hotfix/1.0.1&lt;/code&gt; branch gets deleted&lt;/li&gt;
&lt;li&gt;It merges &lt;code&gt;1.0.1&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;do-you-need-to-use-git-flow%3F&quot;&gt;Do you need to use Git Flow?&lt;/h2&gt;
&lt;p&gt;Git Flow sounds complicated. Do you need to use it?&lt;/p&gt;
&lt;p&gt;My answer is no. &lt;strong&gt;I don’t use Git Flow in any of my projects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Git flow is useful if you have a big team&lt;/strong&gt;, and you need to run many branches concurrently. For smaller projects (and smaller teams), Git Flow can be an overkill.&lt;/p&gt;
&lt;p&gt;I usually use three types of branches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A production branch&lt;/li&gt;
&lt;li&gt;A develop branch&lt;/li&gt;
&lt;li&gt;Feature branches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;I create feature branches manually.&lt;/strong&gt; When feature branches are completed, I merge them into the &lt;code&gt;develop&lt;/code&gt; branch. Then, I fix bugs on the &lt;code&gt;develop&lt;/code&gt; branch. Afterward, I create a tag and merge &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I do them all manually without using the Git Flow system.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;A Git flow has five types of branches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The production branch&lt;/li&gt;
&lt;li&gt;The develop branch&lt;/li&gt;
&lt;li&gt;Feature branches&lt;/li&gt;
&lt;li&gt;Release branches&lt;/li&gt;
&lt;li&gt;Hotfix branches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Whether you use the Git Flow system is up to you. What matters most is you have a way to manage your branches.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>When will Learn JavaScript be completed?</title>
    <link href="https://zellwk.com/blog/learn-javascript-completion-date/"/>
    <updated>2018-09-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learn-javascript-completion-date/</id>
    <content type="html">&lt;p&gt;The most common question I get about Learn JavaScript is: “When will Learn JavaScript be complete?”&lt;/p&gt;
&lt;p&gt;If you don’t know, Learn JavaScript is my flagship JavaScript course. &lt;a href=&quot;https://learnjavascript.today/&quot; title=&quot;Learn JavaScript with Zell&quot;&gt;You can find out more about the course here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The best answer I could come up with was: “I don’t know”.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hated myself for saying that.&lt;/p&gt;
&lt;p&gt;I’ve been writing Learn JavaScript since last August. I promised myself a certain deadline twice. And I failed to hit the deadline twice. I feel ashamed for creating content so slowly.&lt;/p&gt;
&lt;p&gt;I came to a point where &lt;strong&gt;I’m scared to promise a deadline.&lt;/strong&gt; I don’t want to disappoint my students. I don’t want to disappoint myself either.&lt;/p&gt;
&lt;p&gt;But I realize that I can’t say “I don’t know” to students who already bought the course. They have a right to know. So today, I’m going to overcome my fear and provide you with a proper estimate.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Before I tell you the estimated completion date, let me tell you why my estimates have failed so far.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;why-my-estimates-have-failed&quot;&gt;Why my estimates have failed&lt;/h2&gt;
&lt;p&gt;When I launched Learn JavaScript last August, I made $10,000. I told myself that this number is a great success (for having no product)!&lt;/p&gt;
&lt;p&gt;I decided to focus on writing Learn JavaScript full time for the next 3 months. I was confident I’d be able to complete the entire course in 3 months.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That confidence was rooted in thin air.&lt;/strong&gt; I came up with a number I could live with and decided I’ll complete it then.&lt;/p&gt;
&lt;p&gt;And I ran into two problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I did not expect the amount of work to balloon.&lt;/li&gt;
&lt;li&gt;I did not expect to spend time on other activities&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;i-did-not-expect-work-to-balloon&quot;&gt;I did not expect work to balloon&lt;/h3&gt;
&lt;p&gt;I spent weeks outlining Learn JavaScript before I presold the course in August 2017. &lt;strong&gt;I thought my outline was complete.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But it wasn’t.&lt;/p&gt;
&lt;p&gt;My outline was shit.&lt;/p&gt;
&lt;p&gt;I realized &lt;strong&gt;I had to expand each chapter 3-5 times to explain JavaScript clearly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why 3-5 times?&lt;/p&gt;
&lt;p&gt;I didn’t know how much I knew about JavaScript. Everything I knew about JavaScript was already unconscious knowledge. I didn’t see this coming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When there’s more content, there’s more work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But I’m expanding the course anyway, without charging students an extra cent. I promised them they’ll learn JavaScript through the course. They will become successful at it.&lt;/p&gt;
&lt;p&gt;I’m going to live through this promise. Even if I had to do lots of extra work.&lt;/p&gt;
&lt;p&gt;I’ll never cut corners on my promises.&lt;/p&gt;
&lt;h3 id=&quot;i-did-not-expect-to-spend-time-on-other-activities&quot;&gt;I did not expect to spend time on other activities&lt;/h3&gt;
&lt;p&gt;When I started writing Learn JavaScript, &lt;strong&gt;I thought I’ll spend all my working hours on the course.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was foolish to think this way.&lt;/p&gt;
&lt;p&gt;2017 was a harsh year. I barely earned enough for a living with my books and courses. I needed money. I had to save up for a mortgage and a child in the next two years.&lt;/p&gt;
&lt;p&gt;During this period, I considered looking for a job and stopping my blog for good.&lt;/p&gt;
&lt;p&gt;So when I created Learn JavaScript, &lt;strong&gt;I was on the lookout for consulting opportunities&lt;/strong&gt; at the same time. It goes without saying that I’m not spending all my working hours producing Learn JavaScript lessons&lt;/p&gt;
&lt;p&gt;In 2018, I got a big break. I made enough from the second Learn JavaScript launch. I don’t have to worry about money for the entire year, so I decided to write again. Full time.&lt;/p&gt;
&lt;p&gt;But I forgot that &lt;strong&gt;I still had to blog. And I had to create videos.&lt;/strong&gt; The marketing has to go on! And I dedicated almost half my working hours to the blog and the video.&lt;/p&gt;
&lt;p&gt;These activities took time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It was stupid of me to assume that I could write Learn JavaScript lessons 100% of the time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So you’ve heard a short story about how I sucked at estimating work. And my stupidity about estimating time. You’re ready to hear the estimate.&lt;/p&gt;
&lt;h2 id=&quot;when-will-learn-javascript-be-completed%3F&quot;&gt;When will Learn JavaScript be completed?&lt;/h2&gt;
&lt;p&gt;Here’s what I know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I can create 1-2 lessons for Learn JavaScript each week.&lt;/li&gt;
&lt;li&gt;There’s still 100+ more lessons to write (if I use the current outline)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If I go at a rate of 2 lessons per week, I’ll be able to finish the course in approximately one year.&lt;/p&gt;
&lt;p&gt;But there are still two factors that I don’t know about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Will I have to expand on the outline again?&lt;/li&gt;
&lt;li&gt;Will my working cycles be disrupted by other reasons?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Regarding the outline, I know I’ll have to expand the outline for sure. I believe I’ll have to write about 150 lessons max. I can’t say for sure though.&lt;/p&gt;
&lt;p&gt;Regarding working cycles, my baby is coming in October. I’m happy to get a baby, but I’m worried that she’ll disrupt my working cycle. If she disrupts my working cycle heavily, I might be forced to delay the course completion date again.&lt;/p&gt;
&lt;p&gt;So, knowing what I know now, and knowing what else is to come, I estimate I’ll be done with Learn JavaScript in 1.5 years. This means &lt;strong&gt;Learn JavaScript should be fully completed by January 2020.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;😱.&lt;/p&gt;
&lt;h2 id=&quot;can-you-guarantee-that-learn-javascript-will-be-completed-by-january-2020%3F&quot;&gt;Can you guarantee that Learn JavaScript will be completed by January 2020?&lt;/h2&gt;
&lt;p&gt;I’ll be honest.&lt;/p&gt;
&lt;p&gt;I can’t guarantee that I will complete Learn JavaScript by 2020.&lt;/p&gt;
&lt;p&gt;But I promise I’m going to do my best to meet the deadline. I’m already trying ways and means to improve my production speed (with some success so far!). I’ll share my experiments with you in the next article.&lt;/p&gt;
&lt;p&gt;If you bought Learn JavaScript in July and decided that January 2020 is too long for you, please go ahead and ask for a refund.  You have the right to do so according to &lt;a href=&quot;https://zellwk.com/blog/changing-my-refund-policy&quot; title=&quot;Changing refund policies&quot;&gt;my new refund policy&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hate to say this. I feel guilty and ashamed for not completing Learn JavaScript &lt;em&gt;already&lt;/em&gt;. I promise to work as hard (and as fast) as I can over the next 1.5 years to complete it.&lt;/p&gt;
&lt;p&gt;To students who are already in Learn JavaScript: thanks for your patience. I’ll put the best JavaScript course you’ll ever see in your hands. If you have any JavaScript questions, please feel free to ask them in the community. I read and answer every  question.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What is a branch in Git?</title>
    <link href="https://zellwk.com/blog/git-branch/"/>
    <updated>2018-09-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/git-branch/</id>
    <content type="html">&lt;p&gt;Note: This the seventh video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Imagine there are parallel worlds. We have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A world where I have created this video, and you’re watching it.&lt;/li&gt;
&lt;li&gt;A world where I have created this video, but you’re not watching it.&lt;/li&gt;
&lt;li&gt;A world where I did not create this video.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this parallel world concept, a Git branch is a parallel world.&lt;/p&gt;
&lt;p&gt;You can have a branch that stays the same in one world. Then, you branch off into a different world. Once you finish your code, you can complete the initial world by merging the changes into it.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;how-to-create-a-branch&quot;&gt;How to create a branch&lt;/h2&gt;
&lt;p&gt;Open up your Git client. Look for the branch you want to branch from. Right click on it and select create new branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/create-new-branch.png&quot; alt=&quot;Cursor on the menu that says create new branch&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You can name your branch anything you want.&lt;/p&gt;
&lt;p&gt;Usually the first branch we as developers is the development branch.&lt;/p&gt;
&lt;p&gt;Once you name your branch, click on create and checkout. Checkout, in this case, means to move to the development branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/name-branch.png&quot; alt=&quot;Setting the branch name to development&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you create the development branch, you can see two branches in your branches section—master and development.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/sidebar.png&quot; alt=&quot;Sidebar contains all branches. In this case, it shows master and development&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;In the Git history, you can also see a new tag called &lt;code&gt;development&lt;/code&gt;. This &lt;code&gt;development&lt;/code&gt; tag is on the same commit as &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;origin/master&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history.png&quot; alt=&quot;Git history shows the `development` tag&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;why-create-a-development-branch%3F&quot;&gt;Why create a development branch?&lt;/h2&gt;
&lt;p&gt;Let’s say you have a website that’s ready for people to see. This website is on the master branch.&lt;/p&gt;
&lt;p&gt;If you commit code to the master branch, it means you change the website directly. If you introduce any bugs, other people can see your bug immediately.&lt;/p&gt;
&lt;p&gt;We’re humans. We make mistakes. We don’t want to show our mistakes to people.&lt;/p&gt;
&lt;p&gt;So we create a new branch and work off it. When we’re done, and when we’re sure that there are no more bugs (at least we try to!), we push the changes back to the master branch to update the website.&lt;/p&gt;
&lt;p&gt;That’s why we use a development branch.&lt;/p&gt;
&lt;p&gt;In this case, the master branch can also be called a production branch.&lt;/p&gt;
&lt;h2 id=&quot;how-to-code-on-a-new-branch&quot;&gt;How to code on a new branch&lt;/h2&gt;
&lt;p&gt;When you create a new branch, you can code directly on the branch itself. Any code you change will be reflected only on that branch.&lt;/p&gt;
&lt;p&gt;Let’s say we want to create a new file called &lt;code&gt;development.md&lt;/code&gt;. In this file, we say “Hello! This is committed from the development branch!”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# development.md
Hello! This is committed from the development branch!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you go back to your Git client, you can commit this change to the development branch.&lt;/p&gt;
&lt;p&gt;Make sure you’re on the development branch when you create the commit. In Fork, you can tell the branch your on by looking at the bolded branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/sidebar-2.png&quot; alt=&quot;Development is bold on the sidebar. This shows that the development branch is selected&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Commit your code to the development branch.&lt;/p&gt;
&lt;p&gt;Now, if you look at the Git history, you can see that the development branch is one commit ahead of the &lt;code&gt;origin/master&lt;/code&gt; branch and the local &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;This shows we can code as much as we like on the &lt;code&gt;development&lt;/code&gt; branch without affecting other branches.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history-2.png&quot; alt=&quot;`development` tag is ahead of `origin/master` and `master`&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pushing-the-development-branch-into-the-git-remote&quot;&gt;Pushing the development branch into the Git remote&lt;/h2&gt;
&lt;p&gt;You can push the development branch into the Git remote by clicking the push button. The steps will the &lt;a href=&quot;https://zellwk.com/blog/pushing-to-a-git-remote&quot;&gt;similar to the steps when you pushed the master branch for the first time&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the push is completed, you can see the &lt;code&gt;origin/development&lt;/code&gt; tag on the same commit as the &lt;code&gt;development&lt;/code&gt; tag.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history-3.png&quot; alt=&quot;`origin/development` tag on the same commit as the `development` tag.&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;switching-between-branches&quot;&gt;Switching between branches&lt;/h2&gt;
&lt;p&gt;To switch between branches, you can double-click the branch you want to go (on the sidebar). If you double-click on Master, you will checkout master.&lt;/p&gt;
&lt;p&gt;Checkout means to switch to the branch you chose.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/sidebar-3.png&quot; alt=&quot;Double-click the master branch to checkout the master branch&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you look at your project now, you will realize that the &lt;code&gt;development.md&lt;/code&gt; file is missing. This proves again that you can make as many commits on your &lt;code&gt;development&lt;/code&gt; branch without affecting other branches.&lt;/p&gt;
&lt;h2 id=&quot;merging-branches&quot;&gt;Merging branches&lt;/h2&gt;
&lt;p&gt;If you’re done with the development process, and you’re ready to merge the branch back into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To merge, you first checkout the branch you want to merge to. This should be &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, to merge the &lt;code&gt;development&lt;/code&gt; branch into the &lt;code&gt;master&lt;/code&gt; branch, you right-click the &lt;code&gt;development&lt;/code&gt; branch in your Git client and select merge into ‘master.’&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/merge-1.png&quot; alt=&quot;Cursor on menu item that says merge into &#39;master&#39;&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will ask you whether you want to create a merge commit. Some clients do this for you automatically.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/merge-2.png&quot; alt=&quot;Menu that asks whether you want to create a merge commit&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Select merge and the merge will be completed.&lt;/p&gt;
&lt;p&gt;If you look at the Git history now, you’ll see the &lt;code&gt;master&lt;/code&gt; branch is ahead of the &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;origin/development&lt;/code&gt; branches.&lt;/p&gt;
&lt;p&gt;This is because we have done a merge commit.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history-4.png&quot; alt=&quot;`master` branch is ahead of the `development` and `origin/development` branches&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;At the same time, &lt;code&gt;master&lt;/code&gt; is two commits ahead of the &lt;code&gt;origin/master&lt;/code&gt; branch. That’s why we see 2 up in the sidebar.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/sidebar-4.png&quot; alt=&quot;`master` is two commits ahead of the `origin/master` branch&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When you’re done merging, you can update the Git remote by clicking on the Push button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history-5.png&quot; alt=&quot;`origin/master` and `master` are now on the same commit&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;deleting-a-branch&quot;&gt;Deleting a branch&lt;/h2&gt;
&lt;p&gt;To delete a branch, you right-click the branch you want to delete and select delete ‘branch-name’.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/delete-1.png&quot; alt=&quot;Cursor on menu item that says delete development&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;In Fork, you can also choose to remove the branch from the remote as well.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/delete-2.png&quot; alt=&quot;Menu that asks if you want to remove the branch from the origin&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Click on Delete and Fork will delete both branches.&lt;/p&gt;
&lt;p&gt;Once the delete is done, you can take a look at the Git history. You’ll notice that the &lt;code&gt;origin/development&lt;/code&gt; and &lt;code&gt;development&lt;/code&gt; tags have both disappeared from the history.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-branch/history-6.png&quot; alt=&quot;`origin/development` and `development` tags have both disappeared from the history&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;A branch is like a parallel world where you can create commit without introducing bugs into production code. You can always fix the bugs before merging your branch into the production code.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Changing my refund policy</title>
    <link href="https://zellwk.com/blog/changing-my-refund-policy/"/>
    <updated>2018-09-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/changing-my-refund-policy/</id>
    <content type="html">&lt;p&gt;When I launched Learn JavaScript in July 2018, I used a refund policy that says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I’m happy to refund your money if you don’t manage to learn JavaScript through this course. Send me an email within 60 days, show me you did your homework and I’ll send your money back.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I want to let you know that I’m changing to a new refund policy. I want to tell you about the new policy, and why I’m changing it.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-new-refund-policy&quot;&gt;The new refund policy&lt;/h2&gt;
&lt;p&gt;Here’s what the new refund policy is going to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I confidently back all my courses with a 30-day money back guarantee. I want you to dive in deep and experience the course without inhibition. If you’re not satisfied with the course for any reason, let me know within 30 days and I’ll refund every cent of your investment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For students who have bought Learn JavaScript in July, I’m extending the trial period to 30th September, 2018&lt;/strong&gt;. If you don’t like the course for any reason, just let me know and I’ll send your money back.&lt;/p&gt;
&lt;h2 id=&quot;why-i%E2%80%99m-changing-refund-policies&quot;&gt;Why I’m changing refund policies&lt;/h2&gt;
&lt;p&gt;Juicy story time!&lt;/p&gt;
&lt;p&gt;When I launched Learn JavaScript in January 2018, I used a refund policy that says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t like the course for any reason, just let me know within 60 days and I’ll refund every cent of your investment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I changed it to the one you saw above in July 2018 because I received refund requests that I felt were unfair to me.&lt;/p&gt;
&lt;p&gt;By unfair, the reason for a refund had nothing to do with the course itself. I felt angry whenever I receive a refund of this sort. I felt that I shouldn’t be held responsible for their decisions.&lt;/p&gt;
&lt;p&gt;In my mind, I believe that we should consider their purchase decisions seriously. We need to make conscious decisions if we want to get better in life. Buying a course (or not) is one of such decisions. i&lt;/p&gt;
&lt;p&gt;I hated this feeling, so I changed my refund policy to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I’m happy to refund your money if you don’t manage to learn JavaScript through this course. Send me an email within 60 days, show me you did your homework and I’ll send your money back.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I hoped (and prayed) that nobody will ask for a refund with the same reason again.&lt;/p&gt;
&lt;p&gt;But another person did.&lt;/p&gt;
&lt;p&gt;(And here’s where the juicy story comes in).&lt;/p&gt;
&lt;h2 id=&quot;handling-the-refund-request&quot;&gt;Handling the refund request&lt;/h2&gt;
&lt;p&gt;The person, let’s call him O, decided to enroll in a boot camp after enrolling in Learn JavaScript. He said he didn’t have time to go through Learn JavaScript, so he wanted a refund.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;He didn’t produce any homework, so I rejected his refund.&lt;/strong&gt; I had the rights to do so since my refund policy said so.&lt;/p&gt;
&lt;p&gt;What happened next showed me a dark side of human nature. I saw a person lie to get a refund.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O reported my course to PayPal after I rejected his refund request.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He said two things (I summarized it here):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The website for the course implied a well-designed digital product, but the course was delivered via text. The course he bought was different from what was described.&lt;/li&gt;
&lt;li&gt;$500 is a lot of money to pay for unfinished work. It was not shared on the Learn JavaScript page that the course is not 100% ready.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Both accusations are false.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For point 1, I mentioned (twice!) that the course is a text-based course.&lt;/p&gt;
&lt;p&gt;For point 2, I mentioned (four times!) that the course is not complete. Anyone who’s buying the course will be buying a preorder of the course. They’ll receive the completed lessons immediately, and they’ll have to wait for me to create the rest of the lessons.&lt;/p&gt;
&lt;p&gt;So, O probably didn’t read clearly, or he was lying about the situation to get a refund. (I would love to show you screenshots of what he wrote, but I can’t. The case was resolved and I don’t have access to his messages anymore).&lt;/p&gt;
&lt;p&gt;I flew into a rage.&lt;/p&gt;
&lt;p&gt;Integrity (and thus, honesty) is my #1 value. I hate dishonest people, and I hate being labelled as a dishonest person, so I battled it out with O in PayPal. I provided screenshots against his claims and left PayPal to be the judge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PayPal eventually awarded the case in my favor.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/changing-refund-policy/win.png&quot; alt=&quot;Evidence that PayPal awarded the case in my favor&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;“Yay, serves O right!”, I thought. Good job, Zell. Right?&lt;/p&gt;
&lt;p&gt;Nope. I felt like shit.&lt;/p&gt;
&lt;p&gt;I thought about this incident and decided to return O his money after a few weeks. I’m gonna share my reason below.&lt;/p&gt;
&lt;h2 id=&quot;lessons-i-learned-from-the-refund-drama&quot;&gt;Lessons I learned from the refund drama&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I learned two lessons:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I got too attached to the results&lt;/li&gt;
&lt;li&gt;I wasn’t focusing on the right things&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;i-got-too-attached-to-the-results&quot;&gt;I got too attached to the results&lt;/h3&gt;
&lt;p&gt;I put a lot of work into writing (and selling) Learn JavaScript. I made the course (and the sales pitch) as best as I can.&lt;/p&gt;
&lt;p&gt;When a student enrolls in the course, I see it as a victory on two fronts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Yes! My marketing worked! I’ve got results!&lt;/li&gt;
&lt;li&gt;Yes! I get a chance to help one more person learn JavaScript!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I put so much work into Learn JavaScript, I refused to believe that people will ask for refunds. I reached out to everyone to make sure they’re progressing. I even answered all the questions the students asked in the community!&lt;/p&gt;
&lt;p&gt;I get upset when a student asks for a refund. I wondered if I’m doing something wrong. I also felt I lost the chance to help someone.&lt;/p&gt;
&lt;p&gt;(I’m talking about refunds I felt unfair about here. For people who felt the course wasn’t up to their expectations, I refunded them immediately without questions).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What I realized was refunds will always occur in every launch.&lt;/strong&gt; It might not be my fault when a student asks for a refund. They may have difficult reasons on their side.&lt;/p&gt;
&lt;p&gt;That’s one reason why I decided to give O a refund, even though the refund drama left a bad taste in my mouth.&lt;/p&gt;
&lt;h3 id=&quot;i-wasn%E2%80%99t-focusing-on-the-right-things&quot;&gt;I wasn’t focusing on the right things&lt;/h3&gt;
&lt;p&gt;When it comes to focus, I learned that I wasn’t focusing on two things that mattered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My students’ growth&lt;/li&gt;
&lt;li&gt;The right people&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;I was focused on my own success.&lt;/strong&gt; When I focused on my own success, I am not focusing on my students’ growth.&lt;/p&gt;
&lt;p&gt;I can only focus on one thing. I need to choose one, and I choose to focus on my students’ growth.&lt;/p&gt;
&lt;p&gt;My success doesn’t matter as much to me. What’s important is my students learn, and they get better at whatever they’re trying to learn (JavaScript in this case). If they become successful, I believe I’ll become successful as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I wasn’t focusing on the right people.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wasted a lot of energy and time trying to make sure I win the PayPal dispute. I spent 1 hour on the reply to PayPal, and I spent days agonizing over this drama. And I felt terrible.&lt;/p&gt;
&lt;p&gt;It’s not worth it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If I have time to spare, I’d rather give it to people who are actively learning from me.&lt;/strong&gt; I’d rather spend time in the community to answer questions and make sure my students learn.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;There you have it. That’s the reason why I changed my refund policies. I want to focus on the right people and on the right things.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Resolving Git conflicts</title>
    <link href="https://zellwk.com/blog/resolving-git-conflicts/"/>
    <updated>2018-09-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/resolving-git-conflicts/</id>
    <content type="html">&lt;p&gt;Note: This the sixth video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say a friend of made a change to your repository and pushed the changes to the Git remote. At the same time, you also made a change to the same line of code.&lt;/p&gt;
&lt;p&gt;When you pull their changes into your local repository, you’ll notice that there is a conflict.&lt;/p&gt;
&lt;p&gt;This happens because Git no idea whether their version is the updated version or your version is the updated version.&lt;/p&gt;
&lt;p&gt;This is what we call a Git conflict.&lt;/p&gt;
&lt;p&gt;You’ll learn how to resolve a Git conflict today.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;First, let’s produce a Git conflict so you see what happens.&lt;/p&gt;
&lt;h2 id=&quot;producing-a-conflict&quot;&gt;Producing a conflict&lt;/h2&gt;
&lt;p&gt;To produce a Git conflict, we need two sets of code. For the first set, we need someone to push code into the remote.&lt;/p&gt;
&lt;p&gt;In our case, we edit the files on Github to simulate a change.&lt;/p&gt;
&lt;p&gt;Let’s say we change the text in &lt;code&gt;README.md&lt;/code&gt; from “Hello world, this is my first Github repo” to “Hello world, this is my second Github repo”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/changing-readme.png&quot; alt=&quot;Changing the readme file&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;We’re also going make a commit message that says “Change first to second” to see the effects in our Git History later.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/changing-readme-commit.png&quot; alt=&quot;Making a commit on the remote&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;For the second set of code, you can change the same &lt;code&gt;README.md&lt;/code&gt; file on your local repository. Instead of “second Github repository”, we’re going to say “third Github repository”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello world! This is my third Github repo!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re going to commit this file and set the commit message to “changed first to third.”&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/commit-readme-local.png&quot; alt=&quot;Make another commit on the local&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You can check for an updated in your Git Client with the Fetch button. Once the fetch is completed, you can see that &lt;code&gt;origin/master&lt;/code&gt; is on a different fork compared to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This happens because there are changes on the Git remote and on our local repository at the same time.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/history-fork.png&quot; alt=&quot;There is a fork on the Git history&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If you look at the branch on the left, you can see that the master branch says one down one up. This tells us there is one commit in the Git remote that is ahead of our master. At the same time, our master branch has one commit ahead of the remote.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/sidebar.png&quot; alt=&quot;Master branch on the sidebar says one up and one down&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;We need to pull our changes onto our local branch to consolidate the changes. When you pull the changes, you’ll see an error message.&lt;/p&gt;
&lt;p&gt;This error message may be slightly different depending on the Git client you’re using. In Fork, it says “Merging branch &lt;code&gt;origin/master&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt;. Fix 1 conflict and then continue”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/conflict.png&quot; alt=&quot;The error message&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;What this means is you need to fix the conflict before you continue.&lt;/p&gt;
&lt;p&gt;To see the conflict, you can go back to the changes section. Here, you’ll see the files that contain conflicts. In this case, it is the &lt;code&gt;README.md&lt;/code&gt; file.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/readme-has-conflict.png&quot; alt=&quot;The readme file has a conflict&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;First, let’s talk about why you need to merge.&lt;/p&gt;
&lt;h2 id=&quot;why-merge%3F&quot;&gt;Why merge?&lt;/h2&gt;
&lt;p&gt;When you pull changes from the remote branch to the local branch, the change from the remote branch is merged into the local branch.&lt;/p&gt;
&lt;p&gt;Git helps us do the merge automatically if it knows what is changed first, and what is changed later, and there are no ambiguities.&lt;/p&gt;
&lt;p&gt;But when there is a conflict, Git doesn’t know which version is correct, so you have to merge the code yourself.&lt;/p&gt;
&lt;h2 id=&quot;resolving-conflicts&quot;&gt;Resolving Conflicts&lt;/h2&gt;
&lt;p&gt;The easiest way to resolve a conflict is to change the file on your computer. If you open &lt;code&gt;README.md&lt;/code&gt; now, you’ll see lines that say this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
Hello world! This is my third Github repo!

---

Hello world! This is my second Github repo!
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; snt2h1s3n4tnthd9au8d3324
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code between &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt; is the code in our local repository (our code).&lt;/p&gt;
&lt;p&gt;The cobe between &lt;code&gt;---&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; is the code from the remote repository (their code).&lt;/p&gt;
&lt;p&gt;This two lines of code conflicting. We need to choose between the “second Github repo” or the “third Github repo”.&lt;/p&gt;
&lt;p&gt;To fix the conflict, you choose what’s the correct line of code. Then, you delete everything else.&lt;/p&gt;
&lt;p&gt;In this case, let’s say “third” is the correct version. What you’ll do is delete everything else that’s incorrect.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello world! This is my third Github repo!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;committing-the-merge&quot;&gt;Committing the merge&lt;/h2&gt;
&lt;p&gt;When you head back to Fork, you’ll see that the changes are updated. In our case, the change is the one on our local, so we don’t see any files that need to be staged.&lt;/p&gt;
&lt;p&gt;If the change is different, you will need to stage the files.&lt;/p&gt;
&lt;p&gt;After staging, you need to commit the merge.&lt;/p&gt;
&lt;p&gt;If you look at the commit message area, you’ll see that Fork has filled in a commit message for you automatically. You can use the commit message directly.&lt;/p&gt;
&lt;p&gt;Click on commit to commit the changes.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/merge-commit.png&quot; alt=&quot;Making a merge commit&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When you commit the changes, you’ll see that the master branch in the sidebar says 2 up. This means our local branch is two commits ahead of the remote.&lt;/p&gt;
&lt;p&gt;If you look at the Git history, You can see that the remote master branch has a link back to the local master branch. This shows a merge.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/history-2.png&quot; alt=&quot;The fork from `origin/master` has merged back into `master`&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;What you need to do next is to push the changes up to the Git remote.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-conflicts/history-3.png&quot; alt=&quot;`origin/master` and `master` are on the same commit again&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;And this is how you resolve a Git conflict.&lt;/p&gt;
&lt;h2 id=&quot;preventing-conflicts-from-happening&quot;&gt;Preventing conflicts from happening&lt;/h2&gt;
&lt;p&gt;Conflicts happen when two or more people work on the same file at the same time.&lt;/p&gt;
&lt;p&gt;There are two ways to prevent conflicts.&lt;/p&gt;
&lt;p&gt;The first way is to reduce the size of your commits. That means you make a commit for every little thing you do. Commits are free, so just make more commits.&lt;/p&gt;
&lt;p&gt;This helps because it is easy to resolve a small conflict (like the one we just resolved). If you encounter a conflict is hundreds of lines long, it’ll be hard to resolve.&lt;/p&gt;
&lt;p&gt;The second way involves branches. Here, different people work on the code in different branches. They don’t interact with each other. They only merge the code into the main branch when they’re ready.&lt;/p&gt;
&lt;p&gt;Branches are slightly more advanced. We’ll talk about branches and how to use branches in the next video.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>:empty and :blank</title>
    <link href="https://zellwk.com/blog/empty-and-blank/"/>
    <updated>2018-09-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/empty-and-blank/</id>
    <content type="html">&lt;p&gt;I made a terrible mistake when I tweeted about &lt;code&gt;:empty&lt;/code&gt; and &lt;code&gt;:blank&lt;/code&gt; a month ago. I said that &lt;code&gt;:empty&lt;/code&gt; wasn’t useful, and &lt;code&gt;:blank&lt;/code&gt; is much more useful than &lt;code&gt;:empty&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-and-blank/tweet.png&quot; alt=&quot;Blank is not supported by any browser&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;I was wrong!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; is actually good enough. We don’t even need &lt;code&gt;:blank&lt;/code&gt;!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Okay, first off, what is &lt;code&gt;:empty&lt;/code&gt; and what is &lt;code&gt;:blank&lt;/code&gt;?&lt;/p&gt;
&lt;h2 id=&quot;%3Aempty-and-%3Ablank&quot;&gt;:empty and :blank&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; is a pseudo selector. It lets you select elements that are empty.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:empty {
  /* do something */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empty elements are elements that have nothing in them. It cannot even have a whitespace.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Example of an empty element --&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Empty elements can have comments though, as long as the comments fill up the entire element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Empty can have comments --&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;!-- this is a comment --&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;:blank&lt;/code&gt; is a powered-up form of &lt;code&gt;:empty&lt;/code&gt;. It lets you select elements that have whitespaces in them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Matched with :blank but not with :empty --&amp;gt;
&amp;lt;div&amp;gt; &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%3Aempty-and-%3Ablank-in-real-world-situations&quot;&gt;:empty and :blank in real world situations&lt;/h2&gt;
&lt;p&gt;Both &lt;code&gt;:empty&lt;/code&gt; and &lt;code&gt;:blank&lt;/code&gt; are useful if need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Style an empty element&lt;/li&gt;
&lt;li&gt;Create empty states&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;styling-an-empty-element&quot;&gt;Styling an empty element&lt;/h3&gt;
&lt;p&gt;Let’s say you have a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. You will only fill up this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with content when an error occurs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Without errors --&amp;gt;
&amp;lt;div class=&amp;quot;error&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;

&amp;lt;!-- With errors --&amp;gt;
&amp;lt;div class=&amp;quot;error&amp;quot;&amp;gt;Whoops! Something went wrong!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you need to style the &lt;code&gt;.error&lt;/code&gt; div. If you don’t use &lt;code&gt;:empty&lt;/code&gt;, you need to rely on a class or attribute. This feels redundant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- With errors --&amp;gt;
&amp;lt;div class=&amp;quot;error&amp;quot; data-state=&amp;quot;error&amp;quot;&amp;gt;Whoops! Something went wrong!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error {
  display: none;
  background-color: hsl(0, 20%, 50%);
  padding: 0.5em 0.75em;
}

.error[data-state=&amp;quot;error&amp;quot;] {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if you use &lt;code&gt;:empty&lt;/code&gt;, you don’t need the extra class or attribute. You can style the &lt;code&gt;.error&lt;/code&gt; directly. You don’t even need &lt;code&gt;display: none;&lt;/code&gt;!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error {
  background-color: hsl(0, 20%, 50%);
  padding: 0.5em 0.75em;
}

.error:empty {
  padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a codepen for you to play with. (P.S. Try removing the &lt;code&gt;padding: 0;&lt;/code&gt; from &lt;code&gt;.error:empty&lt;/code&gt;. You’ll see a red background 😉).&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;JaPgdN&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Empty demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/JaPgdN/&quot;&gt;Empty demo&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;creating-empty-states&quot;&gt;Creating empty states&lt;/h3&gt;
&lt;p&gt;Let’s say you want to create a todo-list. When your users see the todo-list for the first time, they will probably see zero todo items.&lt;/p&gt;
&lt;p&gt;What do you show when there are zero todos?&lt;/p&gt;
&lt;p&gt;This zero todo state is what we call an empty state.&lt;/p&gt;
&lt;p&gt;If you want to create an empty state for your todo-list, you can add an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; after your &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. When you do so, you can use a combination of &lt;code&gt;:empty&lt;/code&gt; and the &lt;code&gt;+&lt;/code&gt; (adjacent sibling) or &lt;code&gt;~&lt;/code&gt; (subsequent sibling) selector to style the empty state.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;quot;empty-state&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.empty-state {
  display: none;
}

ul:empty + .empty-state {
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I learned how to use &lt;code&gt;:empty&lt;/code&gt; this way from Heydon Pickering. Check out &lt;a href=&quot;https://inclusive-components.design/a-todo-list/&quot; title=&quot;A Todo List&quot;&gt;Heydon’s article&lt;/a&gt; on &lt;a href=&quot;https://inclusive-components.design/&quot; title=&quot;Inclusive components&quot;&gt;Inclusive Components&lt;/a&gt; if you want to see the todo-list example at work.&lt;/p&gt;
&lt;p&gt;Note: empty states are important. If you need some convincing, check out &lt;a href=&quot;https://www.invisionapp.com/blog/why-empty-states-deserve-more-design-time/&quot; title=&quot;Why empty states deserve more design time&quot;&gt;this article &lt;/a&gt; on Invision.&lt;/p&gt;
&lt;h2 id=&quot;why-is-%3Aempty-enough%3F&quot;&gt;Why is :empty enough?&lt;/h2&gt;
&lt;p&gt;I felt &lt;code&gt;:empty&lt;/code&gt; isn’t good enough because of two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Poor developer experience&lt;/li&gt;
&lt;li&gt;I’ll need to trim whitespaces manually with JavaScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first reason is valid, but it isn’t a big deal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second reason is not valid&lt;/strong&gt;. I assumed I had to trim whitespaces, but I don’t need to.&lt;/p&gt;
&lt;p&gt;EDIT: The second reason is valid too! I have no idea why my tests went haywire when writing this article. I found out about it thanks to Daniel and Konrud5 (below).&lt;/p&gt;
&lt;p&gt;I’ll walk you through both of them.&lt;/p&gt;
&lt;h3 id=&quot;poor-developer-experience&quot;&gt;Poor developer experience&lt;/h3&gt;
&lt;p&gt;Let’s go back to the todo-list example. Say we created a todo-list and we have this markup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 2&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Item 3&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;quot;empty-state&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How would you check if &lt;code&gt;:empty&lt;/code&gt; was working?&lt;/p&gt;
&lt;p&gt;Well, I would remove each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; with &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;x&lt;/code&gt;. This command cuts the entire line. When I removed all three &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, I’ll end up with this markup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, you’ll know the HTML above won’t trigger &lt;code&gt;:empty&lt;/code&gt;. &lt;code&gt;:empty&lt;/code&gt; only works when there are no whitespaces in the element.&lt;/p&gt;
&lt;p&gt;I had to remove the whitespaces for &lt;code&gt;:empty&lt;/code&gt; to work, which means a few more keystrokes. This was a chore I hope I didn’t have to go through.&lt;/p&gt;
&lt;p&gt;But then again, it’s a small problem for a big benefit.&lt;/p&gt;
&lt;h3 id=&quot;you-need-to-trim-whitespaces-manually-with-javascript&quot;&gt;You need to trim whitespaces manually with JavaScript&lt;/h3&gt;
&lt;p&gt;I say it again. &lt;strong&gt;You don’t need to trim whitespaces manually in JavaScript&lt;/strong&gt; if you use &lt;code&gt;:empty&lt;/code&gt;. I made a wrong assumption.&lt;/p&gt;
&lt;p&gt;You need to trim whitespace manually in JavaScript if you want to use &lt;code&gt;:empty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s go through an example and you’ll see what I mean. We’ll use the todo-list example one more time.&lt;/p&gt;
&lt;p&gt;Say we have this HTML right now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;Item 1&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;div class=&amp;quot;empty-state&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the empty state to work, we need to remove the final &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; item from &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;. If you use plain JavaScript, you can do this with &lt;code&gt;removeChild&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ul = document.querySelector(&#39;ul&#39;)
const li = ul.children[0]

ul.removeChild(li)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;removeChild&lt;/code&gt; will produce HTML that contains whitespaces in them (even though it might not show up in the inspector). You can check for text nodes (hence whitespaces) with the &lt;code&gt;childNodes&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;removeChild&lt;/code&gt; doesn’t strip whitespaces, you need to strip them by yourself. This is extra JavaScript.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ul = document.querySelector(&#39;ul&#39;)
const li = ul.children[0]

ul.removeChild(li)

if (ul.children.length === 0) {
  ul.innerHTML = &#39;&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the code for this example:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;ZMzgJp&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-pen-title=&quot;Empty demo with todolist&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/ZMzgJp/&quot;&gt;Empty demo with todolist&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;support-for-%3Aempty-and-%3Ablank&quot;&gt;Support for :empty and :blank&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; supported on all browsers, and &lt;code&gt;:blank&lt;/code&gt; has poor browser support. This gives you plenty of reason to use &lt;code&gt;:empty&lt;/code&gt; over &lt;code&gt;:blank&lt;/code&gt; today!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-and-blank/empty-browser-support.png&quot; alt=&quot;Empty supported by every browser&quot;&gt;
  &lt;figcaption&gt;:empty browser support&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/empty-and-blank/blank-browser-support.png&quot; alt=&quot;Blank is not supported by any browser&quot;&gt;
  &lt;figcaption&gt;:blank browser support (from CSS Tricks)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I hope that browser support for &lt;code&gt;:blank&lt;/code&gt; improves one day though.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; and &lt;code&gt;:blank&lt;/code&gt; let you style empty elements and produce empty states easily.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:blank&lt;/code&gt; is better than &lt;code&gt;:empty&lt;/code&gt; because it provides us with a better developer experience. But we can’t use &lt;code&gt;:blank&lt;/code&gt; because &lt;code&gt;:blank&lt;/code&gt; doesn’t have enough browser support,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:empty&lt;/code&gt; is often good enough. You can use it already. Use it all out want 😉!&lt;/p&gt;
&lt;p&gt;Give &lt;code&gt;:empty&lt;/code&gt; a go and let me know what you think!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Cloning a Git repository</title>
    <link href="https://zellwk.com/blog/cloning-a-git-repository/"/>
    <updated>2018-08-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/cloning-a-git-repository/</id>
    <content type="html">&lt;p&gt;Note: This the fifth video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say you want to work on a project together with a friend. The two of you will be creating commits on the same project.&lt;/p&gt;
&lt;p&gt;Let’s also say your friend has created the project. They initialized a repository on Github.&lt;/p&gt;
&lt;p&gt;What you need to do next is to copy the project from the remote to your computer.&lt;/p&gt;
&lt;p&gt;In Git, you can do this through a Git Clone.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-is-git-clone&quot;&gt;What is Git Clone&lt;/h2&gt;
&lt;p&gt;A git clone makes it easier to copy the project. It does three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initializing a local repository&lt;/li&gt;
&lt;li&gt;Add the remote URL to your local repository&lt;/li&gt;
&lt;li&gt;Pull the repository onto your computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: you can do these three steps manually if you want to.&lt;/p&gt;
&lt;h2 id=&quot;cloning-a-project&quot;&gt;Cloning a project&lt;/h2&gt;
&lt;p&gt;First, you need to go to the project you want to clone.&lt;/p&gt;
&lt;p&gt;Let’s say we want to clone &lt;a href=&quot;https://zellwk.com/blog/cloning-a-git-repository/&quot;&gt;Typi&lt;/a&gt;. Typi is a library I made to make Typography easy for you when you’re creating websites.&lt;/p&gt;
&lt;p&gt;To clone the project, you click on the big green button that says clone or download.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/clone.png&quot; alt=&quot;The clone button&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When you click on clone or download, you’ll see a URL.&lt;/p&gt;
&lt;p&gt;Copy this URL.&lt;/p&gt;
&lt;p&gt;Once again, make sure you clone with SSH. When you use SSH, you don’t have to enter your username and password every time you push to a remote or pull from a remote.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/git-url.png&quot; alt=&quot;The git URL&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Then, open up Fork.&lt;/p&gt;
&lt;p&gt;You can clone the repository by going into &lt;code&gt;File&lt;/code&gt;. Select &lt;code&gt;clone&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/fork-clone.png&quot; alt=&quot;The clone menu in Fork&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;The clone menu in Fork&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fork will automatically fill up the URL you copied into the repository URL field.&lt;/p&gt;
&lt;p&gt;The parent directory is the folder you want the repository you live in. This is Git in our case. If you want to change the directory, you can change it.&lt;/p&gt;
&lt;p&gt;Name will be the name of the project. This name defaults to the name of the project that is stated on the remote repository. You can change it if you want too, but we don’t change it usually.&lt;/p&gt;
&lt;p&gt;When you click Clone, Fork will get to work to download the project.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/cloned.png&quot; alt=&quot;Project cloned&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Project cloned&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;switching-between-projects&quot;&gt;Switching between projects&lt;/h2&gt;
&lt;p&gt;When you cloned the project, you will be able to see the project in your Git client of choice.&lt;/p&gt;
&lt;p&gt;In our case, you can click on the search icon that is on the top-left corner and you’ll see “Typi” and “Project”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/switch.png&quot; alt=&quot;Switching between projects&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Switching between projects&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;collaborator-rights&quot;&gt;Collaborator rights&lt;/h2&gt;
&lt;p&gt;You can commit to the local repository you cloned, but you will not be able to push your changes onto the remote repository.&lt;/p&gt;
&lt;p&gt;This is because you don’t have access to write onto the repository yet. It prevents unauthorized people from changing code that belongs to someone else.&lt;/p&gt;
&lt;p&gt;If you want to push to the repository, you need collaborator rights. Your friend can give you access to the repository by adding you as a collaborator.&lt;/p&gt;
&lt;p&gt;They can add you as a collaborator by going to the Github project. Then, click on settings, followed by collaborator. Next, they’ll need to enter your username into the text field and click on add collaborator&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-clone/collaborator.png&quot; alt=&quot;Adding a collaborator&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Git clone does three things at once:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initializing a local repository&lt;/li&gt;
&lt;li&gt;Add the remote URL to your local repository&lt;/li&gt;
&lt;li&gt;Pull the repository onto your computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to push to a remote repository, you need collaborator rights. Get your friend to give you access to the repo.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What makes a good frontend developer?</title>
    <link href="https://zellwk.com/blog/good-frontend-developer/"/>
    <updated>2018-08-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/good-frontend-developer/</id>
    <content type="html">&lt;p&gt;The frontend development industry is getting confusing nowadays. More people think that frontend developers are people with great JavaScript skills.&lt;/p&gt;
&lt;p&gt;But there’s more to frontend development than JavaScript.&lt;/p&gt;
&lt;p&gt;And as professional frontend developers, we need to understand what our jobs are.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-does-a-frontend-developer-do%3F&quot;&gt;What does a frontend developer do?&lt;/h2&gt;
&lt;p&gt;Frontend developers do one thing only.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We provide a great experience for our users who visit our sites (or apps).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We understand what our sites (or apps) should do. We craft them up (sometimes from scratch), and we polish them before sending them over to our users.&lt;/p&gt;
&lt;p&gt;We put hours of work into perfecting the sites we build. Only to hope that users will enjoy our sites. And if they enjoy our sites, we hope they’ll come back and visit us again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what does a great experience mean?&lt;/strong&gt; What skills do we need to provide a great experience to our users?&lt;/p&gt;
&lt;h2 id=&quot;skills-a-frontend-developer-needs&quot;&gt;Skills a frontend developer needs&lt;/h2&gt;
&lt;p&gt;I’ll argue that frontend developers need to master four different skills.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Empathy&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;empathy&quot;&gt;Empathy&lt;/h3&gt;
&lt;p&gt;What is a great experience?&lt;/p&gt;
&lt;p&gt;We won’t know unless we understand who are users are.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On the internet, we serve a huge variety of users.&lt;/strong&gt; And they’re different from us.&lt;/p&gt;
&lt;p&gt;People use different computers. Some people use a Mac with a 4k display, some use a Windows machine, and some others use old phones without good computing power.&lt;/p&gt;
&lt;p&gt;People use different browsers. Edge, Chrome, Safari, and Firefox are the four most common browsers out there in the world. But there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Usage_share_of_web_browsers&quot; title=&quot;Usage share of web browsers&quot;&gt;more browsers than that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;People have different abilities. Some people have perfect eyesight, some wear glasses, some are colour-blind, and some can’t see at all.&lt;/p&gt;
&lt;p&gt;People also have different preferences. Some people browse with the mouse, while others prefer the keyboard.&lt;/p&gt;
&lt;p&gt;The point is, everyone is different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And we’re here to provide an experience that everyone enjoys&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We need to understand that people are not like us. And even if they’re different from us, we still provide them with a great experience.&lt;/p&gt;
&lt;p&gt;“It doesn’t work on my computer” is not an excuse we can get away with. If it doesn’t work for someone else, we’ll dig deep and figure out what’s wrong, and we’ll fix it.&lt;/p&gt;
&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;We need to know HTML, CSS, and JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes. All three languages. &lt;em&gt;HTML, CSS and JavaScript are our tools.&lt;/em&gt; How can we be good frontend developers if we don’t know our tools?&lt;/p&gt;
&lt;p&gt;But when we talk about code, many developers focus on the wrong thing. They focus on code quality.&lt;/p&gt;
&lt;p&gt;I’d argue it’s not about the code. If the experience sucks, it doesn’t matter if the code is clean and well maintained. Heck, if you want to write the cleanest code of all, don’t write any code. Serve an HTML file with no CSS and no JavaScript. I promise it’ll be clean.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code quality matters, but the experience we provide matters more&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we’ve given everyone a good experience, we can turn our attention inwards and clean up our code.&lt;/p&gt;
&lt;p&gt;Experienced developers may be able to write clean code while crafting the site. That’s a skill they learned through experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Younger developers should focus on the experience they can provide first&lt;/strong&gt;. Once they’ve nailed down the experience, they can learn to polish their code. And we get the best of both worlds.&lt;/p&gt;
&lt;h3 id=&quot;design&quot;&gt;Design&lt;/h3&gt;
&lt;p&gt;Design is important.&lt;/p&gt;
&lt;p&gt;When I talk about design, I mean both visual design and interaction design.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We’re the best person to work on design because we know how the web works&lt;/strong&gt;. We know what can be done and what cannot be done. We also know how people use the web. And we care enough to keep ourselves updated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We are not here to take over a designer’s job&lt;/strong&gt;. They have their skill set, and we have ours. We augment each other.&lt;/p&gt;
&lt;p&gt;We can critique a designer’s ideas.&lt;/p&gt;
&lt;p&gt;This brings me to the final skill.&lt;/p&gt;
&lt;h3 id=&quot;communication&quot;&gt;Communication&lt;/h3&gt;
&lt;p&gt;Developers have a reputation to be anti-social freaks. We prefer sitting behind our computers and type code all day. If we can, we don’t even want to talk to anyone.&lt;/p&gt;
&lt;p&gt;It’s okay if we don’t want to talk to anyone.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But if the need arises, we must be able to communicate.&lt;/strong&gt; Here are some reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you work with a designer, &lt;em&gt;how can you critique their designs (or point things out)&lt;/em&gt; if you don’t know how to talk to them?&lt;/li&gt;
&lt;li&gt;If you work with other developers, &lt;em&gt;how do you split work&lt;/em&gt;? How do you decide what practices you’re gonna use for the project?&lt;/li&gt;
&lt;li&gt;If you work with a project manager, &lt;em&gt;how do you explain why a specific feature is taking so long&lt;/em&gt;, or why certain features cannot be done? How do you convince them?&lt;/li&gt;
&lt;li&gt;If you talk to a user, &lt;em&gt;how do you find out the problems they’re having&lt;/em&gt; with your sites?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The points above are just some possible reasons. I’m sure you can think of more.&lt;/p&gt;
&lt;p&gt;The point is, we need to know how to talk to people if we want to get buy-in from them. &lt;strong&gt;If we can’t communicate well with anyone, how can we produce our best work?&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;It’s pretty hard to become good at frontend development. We need to wear different hats depending on the situation, and we need to be pretty good with all these hats.&lt;/p&gt;
&lt;p&gt;It may be hard, but it isn’t impossible. Frontend development is a skill that takes time to master.&lt;/p&gt;
&lt;p&gt;I’m not even close to mastering everything in the frontend world right now. I’m still working towards it.&lt;/p&gt;
&lt;p&gt;I’m proud to call myself a frontend developer. I hope I’m a good one.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pulling from a Git remote</title>
    <link href="https://zellwk.com/blog/pulling-from-a-git-remote/"/>
    <updated>2018-08-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/pulling-from-a-git-remote/</id>
    <content type="html">&lt;p&gt;Note: This the fourth video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you make a change to a local repository, you can push a change to a Git remote. Likewise, when the remote gets changed, you can pull the changes back to your local repository.&lt;/p&gt;
&lt;p&gt;Today, you’ll learn how to do the pull from the remote back to your repository.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;making-a-change-to-the-remote&quot;&gt;Making a change to the remote&lt;/h2&gt;
&lt;p&gt;Usually, a change to the remote is made by another person who’s working on the same project. They change the code on their computer, and they push it to the remote repository.&lt;/p&gt;
&lt;p&gt;Once the remote repository changes, you can pull it back to your local repository to get the updated version.&lt;/p&gt;
&lt;p&gt;That’s the standard workflow.&lt;/p&gt;
&lt;p&gt;But, since I’m working on the project alone, I’m going to show you how to change the remote repository directly on Github. Once we’re done, we’ll pull from there.&lt;/p&gt;
&lt;h2 id=&quot;changing-the-github-repository-directly&quot;&gt;Changing the Github repository directly&lt;/h2&gt;
&lt;p&gt;Let’s say we want to change the &lt;code&gt;README.md&lt;/code&gt; text.&lt;/p&gt;
&lt;p&gt;To do so, you can click on the pencil icon beside the Readme file. This brings you to an editor where you can change the text.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/edit-readme.png&quot; alt=&quot;A text editor shows up after you click the pencil icon&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Github&#39;s editor&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once you’re done. Scroll down to the bottom and write a commit message. You can click on the green button to commit the changes directly on Github.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/edit-readme-commit.png&quot; alt=&quot;Committing the changes&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Committing the changes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The project will be updated.&lt;/p&gt;
&lt;h2 id=&quot;fetching-changes&quot;&gt;Fetching changes&lt;/h2&gt;
&lt;p&gt;Fork and other Git clients can show you the changes to a remote repository. They do it through a command called Git Fetch.&lt;/p&gt;
&lt;p&gt;You can do a Fetch yourself by clicking on the empty arrow that points downwards. It’s the leftmost arrow button on the top left-hand corner&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/fetch.png&quot; alt=&quot;the fetch button&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;The fetch button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fetch checks the remote repository for any changes. It’s like an email client that says you have three emails to read.&lt;/p&gt;
&lt;p&gt;Once the Fetch is completed, you can see in the Git history that &lt;code&gt;origin/master&lt;/code&gt; is on the &lt;code&gt;update README.md&lt;/code&gt; commit, and the &lt;code&gt;update README.md&lt;/code&gt; commit is one commit ahead of our local master branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/history-1.png&quot; alt=&quot;`origin/master` tag is one commit ahead of the `master` tag. &quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;`origin/master` tag is one commit ahead of the `master` tag.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On the sidebar, you can see the number 1 beside our master branch, and an arrow that points downwards. This tells us our branch is one commit behind the remote.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/branch&quot; alt=&quot;Sidebar shows a number 1 and a downwards arrow&quot;&gt;
  &lt;figcaption&gt;The master branch on the side tells us the same information—our master branch is one commit behind the remote.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pulling-changes&quot;&gt;Pulling changes&lt;/h2&gt;
&lt;p&gt;To update your local branch, you can click on the pull button. The pull button is the filled downwards arrow at the top left-hand corner. It’s the one between Fetch and Push.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/pull.png&quot; alt=&quot;The pull button&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;The pull button&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you click on Pull, you’ll be able to select the branch you want to pull. Since we have tracked it previously, you can pull the master branch directly by clicking pull again.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/pull-menu&quot; alt=&quot;Menu that opens up after clicking pull.&quot;&gt;
  &lt;figcaption&gt;Click on pull again to pull changes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you pull the branch from the remote to your local repository, you’ll see that &lt;code&gt;master&lt;/code&gt; moves up to the same commit as &lt;code&gt;origin/master&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-pull/history-2.png&quot; alt=&quot;`master` and `origin/master` are on the same commit again&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;`master` and `origin/master` are on the same commit again.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Fetch checks if there are any changes in the remote repository.&lt;/p&gt;
&lt;p&gt;Pull brings the changes from the remote repository to your local repository.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Stop using big words and industry jargons (and what to do instead)</title>
    <link href="https://zellwk.com/blog/big-words/"/>
    <updated>2018-08-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/big-words/</id>
    <content type="html">&lt;p&gt;Let’s say you want to teach a person something. Why does the person not understand what you’re saying?&lt;/p&gt;
&lt;p&gt;One of the main reasons is because we like to use big words and industry jargons. These jargons may mean something to us, but they mean nothing to the people we’re trying to teach.&lt;/p&gt;
&lt;p&gt;The next time you try to teach programming, watch out for the words you use.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;three-types-of-big-words&quot;&gt;Three types of big words&lt;/h2&gt;
&lt;p&gt;Jargons can be divided into three categories:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Those that can be explained in a few words&lt;/li&gt;
&lt;li&gt;Those that cannot be explained with simple words&lt;/li&gt;
&lt;li&gt;Those that can mean different things in different contexts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you teach, you should always watch out for these three types of words.&lt;/p&gt;
&lt;h2 id=&quot;jargons-that-can-be-explained-in-a-few-words.&quot;&gt;Jargons that can be explained in a few words.&lt;/h2&gt;
&lt;p&gt;If the jargon can be explained in a few words, you want to &lt;strong&gt;use those words instead of the jargon.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interoperability is one example of a such a word.&lt;/p&gt;
&lt;p&gt;It sounds scary and complicated, but it can be explained in a few simple words.&lt;/p&gt;
&lt;p&gt;If you searched for the meaning of interoperability, you’ll come across definitions like these:&lt;/p&gt;
&lt;p&gt;From Wikipedia: “&lt;em&gt;Interoperability is a characteristic of a product or system, whose interfaces are completely understood, to work with other products or systems, at present or in the future, in either implementation or access, without any restrictions.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;From Dictionary.com: “&lt;em&gt;Interoperability is the ability to share data between different computer systems, especially on different machines.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;If we put it in simple terms, “interoperability” means the “ability to share data”.&lt;/p&gt;
&lt;p&gt;See how it makes the language barrier much lower?&lt;/p&gt;
&lt;p&gt;If you can replace such jargons with simple words, why do you stick to the difficult word?&lt;/p&gt;
&lt;h2 id=&quot;jargons-that-mean-different-things-in-different-contexts&quot;&gt;Jargons that mean different things in different contexts&lt;/h2&gt;
&lt;p&gt;Some jargons have different meanings when they’re used in different contexts.&lt;/p&gt;
&lt;p&gt;One example of such a jargon is encapsulation.&lt;/p&gt;
&lt;p&gt;To encapsulate something means to enclose that thing with something else. If you wrap a potato with a cloth, you can say the cloth encapsulates the potato.&lt;/p&gt;
&lt;p&gt;Developers love the word encapsulation. They use it all the time.&lt;/p&gt;
&lt;p&gt;The first way is to wrap variables and other code inside a function. In this case, the function encapsulates the code within.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function someFunction () {
  const variableName = &#39;I am a variable!&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second way is to contain an object’s individuality. For example, if you have a Human object, and you create two humans from the human object, these two humans should not be the same.&lt;/p&gt;
&lt;p&gt;In this case, each object encapsulates its own data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Human (name) {
  this.name = name
}

const zell = new Human(&#39;Zell&#39;)
const vincy = new Human(&#39;Vincy&#39;)

zell.name === vincy.name // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third way is for information hiding. In JavaScript, we can create private variables. These private variables are enclosed by the object.&lt;/p&gt;
&lt;p&gt;In this case, the object encapsulates the private variable. You cannot access the private variable. In this case, encapsulation is used to mean something slightly different from the second case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Human () {
  const privateVariable = &#39;private&#39;
  this.publicVariable = &#39;public&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what do you understand by Encapsulation?&lt;/p&gt;
&lt;p&gt;You can’t be sure.&lt;/p&gt;
&lt;p&gt;There should be no ambiguity when you communicate. If there is ambiguity, communication breaks down, and students don’t learn.&lt;/p&gt;
&lt;p&gt;It is best to &lt;strong&gt;ditch the jargon if the jargon means different things in different contexts.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;jargons-that-cannot-be-explained-with-simple-words&quot;&gt;Jargons that cannot be explained with simple words&lt;/h2&gt;
&lt;p&gt;Some jargons cannot be explained with simple words. These jargons are often used to talk about abstract concepts, which is why simple words may not be enough.&lt;/p&gt;
&lt;p&gt;One example of such a word is “mutation”.&lt;/p&gt;
&lt;p&gt;Mutation comes from the word mutate. To mutate means to change in form or nature. In JavaScript, mutation happens underneath the hood without you noticing.&lt;/p&gt;
&lt;p&gt;In this case, change is not enough to explain mutation. It lacks depth and detail. Plus, change is still too abstract.&lt;/p&gt;
&lt;p&gt;You feel that a concept is abstract because you cannot imagine it. You cannot see, hear, feel, touch, or taste it. To make an abstract concrete, we need to appeal to a human’s five senses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To explain an abstract concept, you can use analogies.&lt;/strong&gt;  When you use analogies, you can describe an object or a scenario in a way where people can see, hear, or feel what you mean.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https://alistapart.com/article/why-mutation-can-be-scary&quot;&gt;I used X-men as my analogy when I explained mutation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I asked students to imagine a friend growing fur and turning blue in front of their eyes. Anyone can imagine what it means to grow fur and turn blue, even if they don’t know who Beast is.&lt;/p&gt;
&lt;p&gt;If you want to expand the analogy to cater to more people, you can appeal to more senses. For example, to get blind people to imagine mutation, you can also tell them to imagine their friend growled like a beast.&lt;/p&gt;
&lt;p&gt;The key here is a change that goes undetected. Nobody knows whether a person is a mutant until they show their powers. On the same front, nobody knows that a JavaScript object has changed until it, well, changed.&lt;/p&gt;
&lt;p&gt;I emphasized this point to draw a link back to mutation in JavaScript.&lt;/p&gt;
&lt;p&gt;Mutation becomes a concrete once the link gets established. When I say mutation, students who read the article can picture their friend turning blue, growing fur, and growling like a beast.&lt;/p&gt;
&lt;p&gt;Once you turn an abstract jargon into a concrete concept, you can use the jargon as normal. Students will understand what you mean.&lt;/p&gt;
&lt;p&gt;I wrote an article about &lt;a href=&quot;https://zellwk.com/blog/creating-good-analogies&quot;&gt;creating good analogies&lt;/a&gt; if you’re interested in learning this skill.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Pay attention to the words you use when you teach programming. If you use difficult words that don’t mean anything to your student, they won’t be able to get what you mean.&lt;/p&gt;
&lt;p&gt;Replace difficult words with words that are simpler and easier to understand if you can.&lt;/p&gt;
&lt;p&gt;Avoid using jargons that can mean different things in different contexts. These jargons make things ambiguous and confusing.&lt;/p&gt;
&lt;p&gt;Finally, use analogies to turn abstract concepts into concrete concepts.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pushing to a Git remote</title>
    <link href="https://zellwk.com/blog/pushing-to-a-git-remote/"/>
    <updated>2018-08-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/pushing-to-a-git-remote/</id>
    <content type="html">&lt;p&gt;Note: This the third video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Git terminology, we call the Git repository on your computer a local repository.&lt;/p&gt;
&lt;p&gt;A Git remote is the same repository stored somewhere else on the internet. It can serve as a backup. If your computer crashes, you can always get the latest version from the remote back onto your computer.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;Before we talk about Git remotes, we have to talk about different services that provide you with Git remotes. Example of such services include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gitlab.com/&quot;&gt;Gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;differences-between-git-services&quot;&gt;Differences between Git services&lt;/h2&gt;
&lt;p&gt;There are no differences between these three services when Git itself is concerned.&lt;/p&gt;
&lt;p&gt;The only differences between the services are their popularity, their web interface, and their pricing.&lt;/p&gt;
&lt;p&gt;Many people like to use Github because Github is the most popular one out of the three. This is also why most open source projects are hosted on Github. (Note: open source projects can also be hosted on Bitbucket and Gitlab as well).&lt;/p&gt;
&lt;p&gt;Sometimes you may want to create private repositories. A private repository is a Git repository that can only be read by you and people you give permission to.&lt;/p&gt;
&lt;p&gt;If you want to create private repositories, you might want to consider Bitbucket or Gitlab because they let you create private repositories for free.&lt;/p&gt;
&lt;p&gt;If you want to create a private repository on Github, you need to pay $7 a month.&lt;/p&gt;
&lt;p&gt;This article shows you how to set up a remote on Github. The other services follow the same instructions.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-repository-on-github&quot;&gt;Creating a repository on Github&lt;/h2&gt;
&lt;p&gt;Sign in to Github. Create an account if you don’t have one already.&lt;/p&gt;
&lt;p&gt;Once you sign in, you’ll see a plus (+) button on the right-hand corner of the page. Click on this plus button and select new repository.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/create-repo-1.png&quot; alt=&quot;Menu that shows up after clicking the plus button on the top right hand corner. There is a option that says create repository&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To create a new repository, you need to give your repository a name.&lt;/p&gt;
&lt;p&gt;The description is for you to describe your project in a line so other people can understand what your project is about. It is optional. You can leave it out for now.&lt;/p&gt;
&lt;p&gt;Set the project to public or private, depending on what you want.&lt;/p&gt;
&lt;p&gt;Then, ignore the rest and click on the create repository button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/create-repo-2.png&quot; alt=&quot;Example of creating a repo&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you click on create repository, you’ll come to a page with some Git instructions.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/git-instructions.png&quot; alt=&quot;Instructions after creating repo&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Ignore these instructions for now. This knowledge requires you to use the Git command line. You’re going to learn how to do them in a few lessons.&lt;/p&gt;
&lt;p&gt;For now, we want to link up our local repository in Fork to the remote repository we just created.&lt;/p&gt;
&lt;h2 id=&quot;linking-the-local-repository-to-the-remote-repository&quot;&gt;Linking the local repository to the remote repository&lt;/h2&gt;
&lt;p&gt;Copy the url you see on the page.&lt;/p&gt;
&lt;p&gt;Make sure you select SSH (not HTTPS!).&lt;/p&gt;
&lt;p&gt;SSH lets you push (put things into the remote repository) and pull (copy the remote back to your local) without entering your Github username and password every time. It makes things a lot easier.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/git-url.png&quot; alt=&quot;Select the URL. Make sure SSH is checked&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Next, open the project in Fork and click the Push button.&lt;/p&gt;
&lt;p&gt;It is the fourth button from the left. It looks like an arrow that goes upwards.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/push.png&quot; alt=&quot;The push button is a button that looks like an up arrow&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you click on the push button, Fork will ask you to select a branch and a remote to push to.&lt;/p&gt;
&lt;p&gt;In this case, our branch will be master (because we only have one branch).&lt;/p&gt;
&lt;p&gt;We need to add the remote we just created. To add the remote, click on the select box and select add remote.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/add-remote.png&quot; alt=&quot;Adding a remote&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Next, you need to name your remote.&lt;/p&gt;
&lt;p&gt;The default name for most remotes will be origin. If you have multiple remotes, you will want to rename the remote according to where they are from (like Github, Heroku, and Bitbucket).&lt;/p&gt;
&lt;p&gt;The repository URL should be the URL you copied from Github.&lt;/p&gt;
&lt;p&gt;Select Add new remote when you’re done.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/remote-name.png&quot; alt=&quot;The remote name and url&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;pushing-to-the-remote-for-the-first-time&quot;&gt;Pushing to the remote for the first time&lt;/h2&gt;
&lt;p&gt;When you push your files onto the remote for the first time, make sure the create tracking reference checkbox is checked.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/tracking-ref.png&quot; alt=&quot;Make sure tracking reference is checked&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;A tracking reference tells Git to track the current branch (master in this case) and to push or pull to the same branch on the remote.&lt;/p&gt;
&lt;p&gt;If you don’t create a tracking reference, you will need to specify which branch to push to (or pull from) every time.&lt;/p&gt;
&lt;p&gt;Note: if branching sounds foreign to you right now, don’t worry about it. We’ll talk about branching in a later lesson. For now, just remember you need to create a tracking reference.&lt;/p&gt;
&lt;p&gt;Once that is checked, you can click push and Fork will push your project onto Github.&lt;/p&gt;
&lt;p&gt;Once it is pushed, you can look at the All Commits section. (In other Git clients, that will be Git History).&lt;/p&gt;
&lt;p&gt;In all commits, you’ll see two tags. One is called &lt;code&gt;master&lt;/code&gt; (the master branch on our computer). And the other is called &lt;code&gt;origin/master&lt;/code&gt; (the master branch on the remote named origin). In this case, our origin is Github, so &lt;code&gt;origin/master&lt;/code&gt; refers to the master branch on Github.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/history-1.png&quot; alt=&quot;Git History shows `master` and `origin/master` on the same commit&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When these two tags are on the same commit, it means the files we have on our local master branch is the same as the files we have on Github’s master branch.&lt;/p&gt;
&lt;p&gt;You can verify this is true if you go back to the page where you got the Git remote URL from. Refresh this page and you’ll see what you’ll usually see on Github (a project page).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/git-repo-1.png&quot; alt=&quot;Git repository page updated with the files you pushed&quot;&gt;
  &lt;figcaption&gt;Git repository page updated with the files you pushed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you look at the files, you’ll notice that the files are exactly the same as the files you have on your computer.&lt;/p&gt;
&lt;h2 id=&quot;pushing-for-the-second-time&quot;&gt;Pushing for the second time&lt;/h2&gt;
&lt;p&gt;Subsequent pushes are much easier.&lt;/p&gt;
&lt;p&gt;Let’s say we make a change to our repository. This time, we want to create a &lt;code&gt;README.md&lt;/code&gt; file. A &lt;code&gt;README.md&lt;/code&gt; file shows up the Git project page and helps people understand what the project is about.&lt;/p&gt;
&lt;p&gt;You want to create a &lt;code&gt;README.md&lt;/code&gt; file for every repository you create.&lt;/p&gt;
&lt;p&gt;Once we have created the file, we’ll see the changes in Fork if we click on the changes tab.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zellwk.com/blog/your-first-commit&quot;&gt;As before&lt;/a&gt;, we want to stage the file, and commit the file. In this case, the commit message can be “Create Readme.md”.&lt;/p&gt;
&lt;p&gt;When you create a new commit, take a look at the sidebar on the left. You’ll see a number, one, and an arrow that points upwards beside the master branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/branch.png&quot; alt=&quot;Right of master branch contains 1 and an up arrow&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This tells us our master branch is one commit ahead of the remote branch. This means our master branch is more up to date compared to the remote branch.&lt;/p&gt;
&lt;p&gt;If you look at the Git history, you can the “Create readme.md” commit is on the local branch, but this commit did not make it to the remote yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/history-2.png&quot; alt=&quot;Git history updated with local commits&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To push the new commit onto the remote, you need to click on the push button again.&lt;/p&gt;
&lt;p&gt;Then, click push once more.&lt;/p&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/pushing-again.png&quot; alt=&quot;Menu to push again becomes simpler. You just need to click push.&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once the commit is pushed to the remote branch, you can see that the &lt;code&gt;origin/master&lt;/code&gt; tag gets moved to the same commit as the &lt;code&gt;master&lt;/code&gt; tag.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/git-push/history-3.png&quot; alt=&quot;Git history updated. `origin/master` is also on the &#39;Create Readme.md&#39; commit&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To prove that this is working, you can refresh the Github repository page and you’ll be able to see your new &lt;code&gt;README.md&lt;/code&gt; file!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;A Git remote is kind of like a backup that is stored on someone else’s computer. To create a Git remote, you can use one of the popular services like Github, Bitbucket, and Gitlab.&lt;/p&gt;
&lt;p&gt;Create a remote repository, then link your local repository to the remote repository. When you link them up, you can push to the remote repository.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating good analogies</title>
    <link href="https://zellwk.com/blog/creating-good-analogies/"/>
    <updated>2018-08-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/creating-good-analogies/</id>
    <content type="html">&lt;p&gt;Many beginners believe they cannot understand JavaScript because JavaScript is abstract.&lt;/p&gt;
&lt;p&gt;But JavaScript isn’t abstract. Programming isn’t abstract either.&lt;/p&gt;
&lt;p&gt;People feel that programming is abstract because they don’t have a proper hook to understand it yet. Programming can become real and relatable once a proper hook is installed.&lt;/p&gt;
&lt;p&gt;This hook comes in the form of analogies.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;There are three steps to writing good analogies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick an understandable analogy&lt;/li&gt;
&lt;li&gt;Expand on the analogy&lt;/li&gt;
&lt;li&gt;Link the analogy back to the concept&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;pick-an-understandable-analogy&quot;&gt;Pick an understandable analogy&lt;/h2&gt;
&lt;p&gt;Your first step is to pick an analogy that your student will understand. This should be something they have experienced before.&lt;/p&gt;
&lt;p&gt;Think about your student. What do they experience in their daily lives? Which experiences can you use as analogies for the concept you’re trying to explain?&lt;/p&gt;
&lt;p&gt;Open a document and write down every possible experience you can use for your analogy. Don’t filter yourself. Write everything down.&lt;/p&gt;
&lt;p&gt;Then, pick one analogy.&lt;/p&gt;
&lt;p&gt;Just one.&lt;/p&gt;
&lt;p&gt;And expand on the analogy.&lt;/p&gt;
&lt;h2 id=&quot;expand-on-the-analogy&quot;&gt;Expand on the analogy&lt;/h2&gt;
&lt;p&gt;Some people will understand your analogy intuitively.&lt;/p&gt;
&lt;p&gt;But not everyone will.&lt;/p&gt;
&lt;p&gt;You need to explain your analogy so everyone gets it. This is especially important if you cannot get instant feedback from your student. And on the web, we can’t get instant feedback.&lt;/p&gt;
&lt;p&gt;This also means the analogy you pick needs to be simple to explain. Don’t pick something that requires the student to understand of a lot of rules (like soccer).&lt;/p&gt;
&lt;p&gt;Here are some analogies I used in the past:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When taught functions, I talked about &lt;a href=&quot;https://zellwk.com/blog/js-functions/&quot;&gt;drawing water from a well&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When I taught objects, I related objects to &lt;a href=&quot;https://scotch.io/tutorials/getting-started-with-javascript-object&quot;&gt;real-life objects&lt;/a&gt; like a computer.&lt;/li&gt;
&lt;li&gt;When I taught scope, I shared about a &lt;a href=&quot;https://css-tricks.com/javascript-scope-closures/&quot;&gt;one-way glass&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When I taught Git, I talked about &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;save-points in a game&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you expand on your analogy, try to make the student imagine the things you’re talking about. Make it vivid. The more vivid you make your analogies, the longer it’ll stick to in their head.&lt;/p&gt;
&lt;p&gt;Here’s an example on how I created the draw water analogy for functions. Notice how you can imagine yourself picking up a pail and walking to the middle of the village. You can also imagine the pain of explaining this process to someone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine you live in a village without tap water. To get water, you need to take an empty bucket, head to the well in the middle of the village, draw water from the well and head back home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to draw water from this well multiple times a day. It’s a hassle to say “I’m going to take an empty bucket, go to the well, draw water and bring back home” every time you explain what you’re doing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To shorten it, you can say you’re going to “draw water”.&lt;/p&gt;
&lt;p&gt;And my friend, you’ve created a function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you have explained your analogy, you need to link it back to the concept.&lt;/p&gt;
&lt;h2 id=&quot;link-the-analogy-back-to-the-concept&quot;&gt;Link the analogy back to the concept&lt;/h2&gt;
&lt;p&gt;Linking the analogy back to the concept is critical. If you miss this step, your students will wonder why you brought out the analogy.&lt;/p&gt;
&lt;p&gt;To link the analogy back to the concept, you talk about the similarities between the analogy and the concept.&lt;/p&gt;
&lt;p&gt;Here’s how I linked the draw water analogy back to functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A function is a block of code that executes tasks in a specific order, like take the empty bucket, go to well, draw water, head back home.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you link the analogy back to the concept, you make the concept concrete and real for your student. The analogy’s job is done.&lt;/p&gt;
&lt;p&gt;What’s next is to explain the details they need to know about the concept.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;There are three steps to creating great analogies.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pick an understandable analogy&lt;/li&gt;
&lt;li&gt;Expand on the analogy&lt;/li&gt;
&lt;li&gt;Link the analogy back to the concept&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Analogies can be hard to create at the start. You may feel that your analogy is not good enough.&lt;/p&gt;
&lt;p&gt;And that’s okay. You can always improve your analogy game over time.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Your first Git commit</title>
    <link href="https://zellwk.com/blog/your-first-git-commit/"/>
    <updated>2018-08-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/your-first-git-commit/</id>
    <content type="html">&lt;p&gt;Note: This the second video in the Git for beginners series. &lt;a href=&quot;https://zellwk.com/blog/setting-up-git&quot;&gt;Watch the first video here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today we’re going to talk about how to make your first Git commit.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;If you open up Fork from where we left off previously, you’ll see the project screen. If you click on changes, the screen will split into two parts.&lt;/p&gt;
&lt;p&gt;On the left of the screen, you’ll see a section that says unstaged files. Below this section, you’ll see another another section that says staged files.&lt;/p&gt;
&lt;p&gt;To the right, you’ll see a placeholder that shows Fork’s icon. At the bottom, you’ll see a few fields:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A commit message field&lt;/li&gt;
&lt;li&gt;A description field&lt;/li&gt;
&lt;li&gt;An ammend checkbox&lt;/li&gt;
&lt;li&gt;A commit button&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This place is called the &lt;strong&gt;staging area&lt;/strong&gt;. This is where you decide what files you want to save into Git.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/staging-area.png&quot; alt=&quot;The staging area&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;The staging area&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;staging-a-file&quot;&gt;Staging a file&lt;/h2&gt;
&lt;p&gt;Before you save anything, you need to make a change in the Git repository.&lt;/p&gt;
&lt;p&gt;Open up your Git project in a text editor like VS Code. Create a file called &lt;code&gt;index.html&lt;/code&gt; and give it some HTML to start with.&lt;/p&gt;
&lt;p&gt;Once you save this file, you’ll see this file in the staging area. It should appear in the unstaged files section of the staging area.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/unstaged-file.png&quot; alt=&quot;Files that have been changed will appear in the unstaged area&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Files that have been changed will appear in the unstaged area&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;An unstaged file is a file that has been changed since you last committed into the Git repository.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to commit a file (in this case, the &lt;code&gt;index.html&lt;/code&gt; file), you can click on the file and click on stage. This file will be moved from the unstaged files section into the staged files section.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/staged-file.png&quot; alt=&quot;Files that have been staged will appear in the staged area&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Files that have been staged will appear in the staged area&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;When you have a file in the staged file section&lt;/strong&gt;, what you’re saying is &lt;strong&gt;you want to save that file when you make a commit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you click on the file, you’ll see the lines of code (in green) that will be saved into the repository.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-commit&quot;&gt;Creating a commit&lt;/h2&gt;
&lt;p&gt;To create a commit, you write your commit message at the bottom right corner, then click the “create commit” button.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/creating-a-commit.png&quot; alt=&quot;Creating a commit&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Creating a commit&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once you click on the commit button, the staged files will disappear from the staging area. This is because the files are saved; there are no more new changes for the file in the repository.&lt;/p&gt;
&lt;h2 id=&quot;committing-more-than-one-file&quot;&gt;Committing more than one file&lt;/h2&gt;
&lt;p&gt;You can commit many files at the same time. To do so, you need to change many files.&lt;/p&gt;
&lt;p&gt;In this example, I added a CSS file and a JavaScript file to the repository. I also added code to the &lt;code&gt;index.html&lt;/code&gt; file to point to the CSS and JavaScript files.&lt;/p&gt;
&lt;p&gt;If you go back into Fork now, you should see the folders and files that are changed.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/staging-area-multiple.png&quot; alt=&quot;Files and folders that are changed in the staging area. This shows a CSS folder, a styles.css file, a JS folder, a main.js file and an index.html file. &quot;&gt;
  &lt;figcaption&gt;You can see all files and folders that are changed in the staging area&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To commit all three files at once, you select the files and click the stage button. Then, you write your commit message and commit the files.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/your-first-commit/commit-multi.png&quot; alt=&quot;Committing multiple files at once&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Committing multiple files at once&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;checking-the-git-history&quot;&gt;Checking the Git History&lt;/h2&gt;
&lt;p&gt;If you click on All Commits in the sidebar, you’ll see the commits you have made so far. In some Git clients, this is called Git History.&lt;/p&gt;
&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Try to make a few commits into your Git repository with Fork. In the next video, I’ll show you how to push to a git remote and how to pull from a git remote.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to write a good coding article</title>
    <link href="https://zellwk.com/blog/writing-good-coding-articles/"/>
    <updated>2018-08-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/writing-good-coding-articles/</id>
    <content type="html">&lt;p&gt;A good article shows a student how to think through a problem. The student will go “oooohhhhh!” as they read through the article. They’ll understand the concept they’re trying to learn, and they’ll stop searching the web for the same topic.&lt;/p&gt;
&lt;p&gt;Lousy articles do the opposite. Students get more confused as they read through the article. They may even wonder if they have what it takes to learn programming.&lt;/p&gt;
&lt;p&gt;It doesn’t take much to turn a bad article into a good one. The content can remain the same. You only need to get five factors right.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;the-five-factors&quot;&gt;The five factors&lt;/h2&gt;
&lt;p&gt;The five factors are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The purpose of your article&lt;/li&gt;
&lt;li&gt;Who’s the student&lt;/li&gt;
&lt;li&gt;The examples and analogies used&lt;/li&gt;
&lt;li&gt;The language used&lt;/li&gt;
&lt;li&gt;The ease of reading&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-purpose-of-your-article&quot;&gt;The purpose of your article&lt;/h2&gt;
&lt;p&gt;Imagine you’re in a maze. You’re walking down along a path and you see a fork in the road.&lt;/p&gt;
&lt;p&gt;Should you go left, or should you go right?&lt;/p&gt;
&lt;p&gt;You won’t know the answer. That’s because you don’t know the way out.&lt;/p&gt;
&lt;p&gt;Students who’re searching for articles are equally lost. they don’t have answers, which is why they’re searching in the first place.&lt;/p&gt;
&lt;p&gt;It is your article’s job to point them in the correct direction. This means every article you write should have an end-point. This end-point is the purpose of your article.&lt;/p&gt;
&lt;p&gt;For example, in this article, I want to show you the five factors to watch out for so you can avoid writing bad articles. Every article you create will be at least decent (and hopefully good!).&lt;/p&gt;
&lt;p&gt;To point students in the correct path, you have to understand who they are and what are their skill levels.&lt;/p&gt;
&lt;h2 id=&quot;who%E2%80%99s-the-student%3F&quot;&gt;Who’s the student?&lt;/h2&gt;
&lt;p&gt;Is your student a beginner, intermediate or expert?&lt;/p&gt;
&lt;p&gt;Beginners, intermediate students, and experts have different skill levels. Once you consider their skill levels, you’ll be able to write better articles for them.&lt;/p&gt;
&lt;p&gt;For example, you won’t teach beginners to build complicated applications. You won’t start your article with “npm install these packages”.&lt;/p&gt;
&lt;p&gt;This is because there’s a high chance that beginners don’t know what npm is. They may also not know about the packages you’re getting them to install.&lt;/p&gt;
&lt;p&gt;And they get lost.&lt;/p&gt;
&lt;p&gt;Also, your content changes when you consider the skill level of your students. For beginners, you’ll create articles that contain smaller chunks of information. For experts, you can combine many different skills together in one article.&lt;/p&gt;
&lt;p&gt;For this article, my ideal student is someone who wants to write good programming articles. They have written less than twenty articles.&lt;/p&gt;
&lt;p&gt;Once you consider the purpose and the student, it’s time to look at the examples and analogies you use.&lt;/p&gt;
&lt;h2 id=&quot;the-examples-and-analogies-used&quot;&gt;The examples and analogies used&lt;/h2&gt;
&lt;p&gt;Programming is not abstract. Programming can be explained in ways that are real and close to the heart. It feels abstract because teachers use meaningless variables like &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; 😑.&lt;/p&gt;
&lt;p&gt;So the first rule of thumb is never to use &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;bar&lt;/code&gt;. Always try to use an example that students can relate to.&lt;/p&gt;
&lt;p&gt;Think about your student.&lt;/p&gt;
&lt;p&gt;What do they experience in their daily lives? Which experiences can you use as analogies for the concept you’re trying to explain?&lt;/p&gt;
&lt;p&gt;Decide on an analogy, then explain it such that students who don’t get the analogy intuitively will still get what you mean.&lt;/p&gt;
&lt;p&gt;For example, I used a one-way glass analogy to explain JavaScript scopes. Read &lt;a href=&quot;https://css-tricks.com/javascript-scope-closures/&quot;&gt;this article&lt;/a&gt; to find out how I explained it.&lt;/p&gt;
&lt;p&gt;Next comes your language.&lt;/p&gt;
&lt;h2 id=&quot;the-language-used&quot;&gt;The language used&lt;/h2&gt;
&lt;p&gt;Words have the ability to elicit strong emotions. When used wrongly, they have the ability to make students feel like idiots.&lt;/p&gt;
&lt;p&gt;See what I did there?&lt;/p&gt;
&lt;p&gt;That one sentence may have triggered some feelings of apprehension, uselessness or guilt, and those feelings are not constructive for most articles.&lt;/p&gt;
&lt;p&gt;Grasping emotions may be difficult if you’re a beginner at writing articles. Don’t let that stop you from writing though.&lt;/p&gt;
&lt;p&gt;For now, I want you to focus on two things. When you get more experienced, we can dive how you can insert and withdraw emotions from your articles 😉.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One, make sure you explain every jargon you use&lt;/strong&gt;. Jargons make concepts obscure. They feel like Pandora’s boxes that cannot be explained. But, if you can’t explain a jargon, how can you expect someone to get what you mean?&lt;/p&gt;
&lt;p&gt;That’s why the first thing you need to do is to learn to explain jargons in simple-to-understand language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, watch out for words like&lt;/strong&gt; &lt;em&gt;obviously&lt;/em&gt;, &lt;em&gt;simply&lt;/em&gt;, and &lt;em&gt;just&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, you’d want to smooth out your writing with some edits.&lt;/p&gt;
&lt;h2 id=&quot;edit-for-smooth-reading&quot;&gt;Edit for smooth reading&lt;/h2&gt;
&lt;p&gt;Your article’s job is to help students understand the concept you’re teaching. You want to do your best to aid their understanding.&lt;/p&gt;
&lt;p&gt;One way to improve their understanding is to use short and simple sentences. Always remember that clarity is more important than cleverness. This is a craft that can take a while to improve. You can speed up the process if you use an app like &lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;Hemingway&lt;/a&gt;. It tells you which of your sentences need reworking.&lt;/p&gt;
&lt;p&gt;Another way to improve understanding is to rid your article of grammatical errors. Here, you can use an app like &lt;a href=&quot;https://www.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt; to check for grammatical errors.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;To write a good article, you need to consider five factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The purpose of your article&lt;/li&gt;
&lt;li&gt;Your students’ skill levels&lt;/li&gt;
&lt;li&gt;The examples and analogies you use&lt;/li&gt;
&lt;li&gt;The language you use&lt;/li&gt;
&lt;li&gt;Editing for smooth reading&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a lot more tips and techniques you can use to write good articles. These five factors are the basic ones.&lt;/p&gt;
&lt;p&gt;Now enjoy and go write some articles :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up a Git Client</title>
    <link href="https://zellwk.com/blog/setting-up-git/"/>
    <updated>2018-08-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/setting-up-git/</id>
    <content type="html">&lt;p&gt;Today we’re going to talk about Git. You’re going to learn what is Git and how to setup a Git client on your computer.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;what-is-git%3F&quot;&gt;What is Git?&lt;/h2&gt;
&lt;p&gt;Imagine you’re playing a game. In this game, you can create save points. When you die in the game, you will need to load your game and continue from your save point.&lt;/p&gt;
&lt;p&gt;If you didn’t create a save point, you will start all the way at the beginning of the game again. That’s not a fun experience, so its always a good idea to save your game.&lt;/p&gt;
&lt;p&gt;Git is like a save point system for your work. You can create save points. In Git we call each save point a commit.&lt;/p&gt;
&lt;p&gt;When you create a commit in Git, you can load your work from that commit. If you create five commits, you can load your work from any of these commits.&lt;/p&gt;
&lt;p&gt;That’s what Git is for. We call it a version control system because you can save and load your work from any commit.&lt;/p&gt;
&lt;h2 id=&quot;choosing-a-git-client&quot;&gt;Choosing a Git Client&lt;/h2&gt;
&lt;p&gt;Many people teach you how to use Git with a command line, but that can be scary for beginners.&lt;/p&gt;
&lt;p&gt;We’re going to throw away the command line and use applications to help you get started with Git. These applications are also known as Git clients.&lt;/p&gt;
&lt;p&gt;My favorite Git Client is &lt;a href=&quot;https://git-tower.com/&quot;&gt;Tower&lt;/a&gt;. It is extremely powerful. The only downside to Tower is it costs $55.20 each year. If you’re new to programming, you might not want to start with Tower. You might want to try a free application instead.&lt;/p&gt;
&lt;p&gt;Here are some good free apps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sourcetreeapp.com/&quot;&gt;Sourcetree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git-fork.com/&quot;&gt;Fork&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sourcetree is probably the best free app out there. It is good and has features on par with Tower. But Sourcetree can be buggy, and you might not be able to resolve the errors yourself. (I tried, and I couldn’t).&lt;/p&gt;
&lt;p&gt;GitKraken is another popular app that many people like. I believe GitKraken is too fancy and focuses on the wrong things though.&lt;/p&gt;
&lt;p&gt;Fork looks clean and simple, and is pretty good to get started with. It’s in beta right now, so its free, but you might need to pay for it later.&lt;/p&gt;
&lt;p&gt;I’m going to show you how to setup Fork.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-fork&quot;&gt;Setting up Fork&lt;/h2&gt;
&lt;p&gt;Here’s the Welcome screen when you open up Fork for the first time:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/setting-up-a-git-client/fork-welcome-screen.png&quot; alt=&quot;Welcome screen from Fork&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Welcome screen from Fork&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It will ask you for your user name and your email address. These are used for identification purposes for advanced uses when there are multiple people working on the same project.&lt;/p&gt;
&lt;p&gt;“User name” is a bit misleading because this should be your name, not an actual username.&lt;/p&gt;
&lt;h3 id=&quot;the-default-source-directory&quot;&gt;The default source directory&lt;/h3&gt;
&lt;p&gt;Once thing I like about Fork is it asks you to set a default source directory.&lt;/p&gt;
&lt;p&gt;This means the projects you copy (or clone) with Git will automatically go into the specified folder, which makes it easy to find.&lt;/p&gt;
&lt;h2 id=&quot;initializing-a-git-repository&quot;&gt;Initializing a Git repository&lt;/h2&gt;
&lt;p&gt;There are two ways to create a Git repository.&lt;/p&gt;
&lt;p&gt;Before you create a Git repository, you’ll want to create a project folder in your source directory. Once you have a folder in your source directory, you can click on &lt;code&gt;File&lt;/code&gt; then  &lt;code&gt;Create new repository&lt;/code&gt; in Fork to create your Git directory.&lt;/p&gt;
&lt;p&gt;To check whether the Git repository is created, you can open up the project folder and check for a &lt;code&gt;.git&lt;/code&gt; folder. This &lt;code&gt;.git&lt;/code&gt; folder is a hidden folder. You need to &lt;a href=&quot;https://ianlunn.co.uk/articles/quickly-showhide-hidden-files-mac-os-x-mavericks/&quot;&gt;show your hidden files&lt;/a&gt; to see it.&lt;/p&gt;
&lt;p&gt;The second way to initialize a Git repository is through the command line.&lt;/p&gt;
&lt;p&gt;To do so, you’d first want to create your project folder in your source directory. Then, you drag your project folder into the Terminal app. This will automatically navigate you to the project folder in the Terminal.&lt;/p&gt;
&lt;p&gt;If you want to learn more about the Terminal, I recommend starting with my article on &lt;a href=&quot;https://zellwk.com/fear-of-command-line/&quot;&gt;overcoming your fear of the command line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have navigated yourself to the project folder in the terminal, you can type &lt;code&gt;git init&lt;/code&gt; to initialize the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Git is like a save-point system in games. You can use Git to save and load your work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The key to teaching</title>
    <link href="https://zellwk.com/blog/key-to-teaching/"/>
    <updated>2018-08-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/key-to-teaching/</id>
    <content type="html">&lt;p&gt;A good teacher has many skills.&lt;/p&gt;
&lt;p&gt;They know how to communicate well, They know how to explain things, they know how to tell if students are confused. They also know how to tease questions out of students.&lt;/p&gt;
&lt;p&gt;There’s a never-ending list of things to get good at if you want to teach well.&lt;/p&gt;
&lt;p&gt;But there’s just one thing that holds them together. If you get this one thing right, everything follows.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;your-posture&quot;&gt;Your posture&lt;/h2&gt;
&lt;p&gt;A good teacher cares.&lt;/p&gt;
&lt;p&gt;They place their students before themselves.&lt;/p&gt;
&lt;p&gt;They do everything they can to help their students learn.&lt;/p&gt;
&lt;p&gt;That includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Listening to their questions patiently.&lt;/li&gt;
&lt;li&gt;Explaining things over and over, using a different manner each time, until they get it.&lt;/li&gt;
&lt;li&gt;Providing encouragement and hope.&lt;/li&gt;
&lt;li&gt;Asking guiding questions so students find answers to their own questions.&lt;/li&gt;
&lt;li&gt;Giving exercises&lt;/li&gt;
&lt;li&gt;Being strict with homework.&lt;/li&gt;
&lt;li&gt;Segmenting lessons so students can digest information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They put themselves into their students’ shoes to be able to do the above.&lt;/p&gt;
&lt;h2 id=&quot;the-teacher%E2%80%99s-responsibility&quot;&gt;The teacher’s responsibility&lt;/h2&gt;
&lt;p&gt;A teacher is responsible to help students learn.&lt;/p&gt;
&lt;p&gt;If students don’t learn, the teacher is at fault.&lt;/p&gt;
&lt;p&gt;The question is, do you care enough to do better the next time? It’s okay if you can’t teach well right now. It’s okay if you can’t even teach yourself well.&lt;/p&gt;
&lt;p&gt;If you care, you’ll find a way to improve.&lt;/p&gt;
&lt;h2 id=&quot;there-aren%E2%80%99t-many-good-teachers-out-there&quot;&gt;There aren’t many good teachers out there&lt;/h2&gt;
&lt;p&gt;Few people want to teach. They don’t teach because they want to help students. They teach because they want to help themselves.&lt;/p&gt;
&lt;p&gt;Sometimes they teach because it’s their “job” to teach. But teaching is not a profession. It’s an attitude.&lt;/p&gt;
&lt;p&gt;The question isn’t whether you can teach.&lt;/p&gt;
&lt;p&gt;You can.&lt;/p&gt;
&lt;p&gt;Anyone can.&lt;/p&gt;
&lt;p&gt;The real question is: do you care enough to teach?&lt;/p&gt;
&lt;p&gt;You can make a big difference if you step out and start teaching. You might not know it now, but you’ll see it paying off in 5 years.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Starting a podcast</title>
    <link href="https://zellwk.com/blog/starting-a-podcast/"/>
    <updated>2018-07-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/starting-a-podcast/</id>
    <content type="html">&lt;p&gt;I’m going to start a podcast.&lt;/p&gt;
&lt;p&gt;But why am I starting a podcast when I’m already doing video every Friday?&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I wanted to start a podcast before starting a video because podcasts seem to be way less intimidating compared to videos.&lt;/p&gt;
&lt;p&gt;But I also wanted to teach code, and podcasts wouldn’t be a very good medium for it.&lt;/p&gt;
&lt;p&gt;Overtime, I realized that most of the videos I put out only contain audio, so you don’t have to watch me on screen. That is true for the past 10-15 videos.&lt;/p&gt;
&lt;p&gt;It’ll be boring if you watch nothing but me talk to you for 5-10 minutes. You can’t do anything else. You need to have your Youtube tab or Youtube app open.&lt;/p&gt;
&lt;p&gt;I only realized that my content is suitable for podcasts when one of my students in Learn JavaScript brought it up to me. She asked why I didn’t start a podcast instead. So I thought, why not do both of them at once?&lt;/p&gt;
&lt;p&gt;That’s why I’m starting a podcast.&lt;/p&gt;
&lt;h2 id=&quot;everything-is-still-raw&quot;&gt;Everything is still raw&lt;/h2&gt;
&lt;p&gt;I don’t even know whether the process I have to put this video into Itunes will work well. I’m testing things out.&lt;/p&gt;
&lt;p&gt;If this podcast works, you’ll find a link to the &lt;a href=&quot;https://zellwk.com/blog/starting-a-podcast/&quot;&gt;podcast episode&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;few-more-things&quot;&gt;Few more things&lt;/h2&gt;
&lt;p&gt;The podcast will be called Fridays with Zell. This is the same name as the video you’re watching every Friday. This also means the video won’t change much.&lt;/p&gt;
&lt;p&gt;I will include a link to the podcast in the video description and I will also include a link from the podcast to the video for you to switch between modes easily.&lt;/p&gt;
&lt;p&gt;The only change is this: Sometimes I might create content that requires you to look at the screen. If I do, I’ll tell you about it.&lt;/p&gt;
&lt;h2 id=&quot;experimenting-again!&quot;&gt;Experimenting again!&lt;/h2&gt;
&lt;p&gt;This episode is very raw. Things are all over the place now, and I don’t have an idea whether this is going to work.&lt;/p&gt;
&lt;p&gt;But I want to let you know because things are changing. I’m sure that things will get polished overtime.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Where to find people to teach</title>
    <link href="https://zellwk.com/blog/finding-students/"/>
    <updated>2018-07-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/finding-students/</id>
    <content type="html">&lt;p&gt;You can teach anyone who wants to learn what you already know.&lt;/p&gt;
&lt;p&gt;You can find these students in many places, both online and offline. Here are a few strategies you can try.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;finding-students-offline&quot;&gt;Finding students offline&lt;/h2&gt;
&lt;p&gt;If you’re new to teaching, I recommend you &lt;strong&gt;start teaching offline first&lt;/strong&gt;. When I say offline, I mean teaching people face-to-face.&lt;/p&gt;
&lt;p&gt;It’s always better to teach offline first because you get immediate feedback from your students. You’ll know something is wrong if they go “huh?”.&lt;/p&gt;
&lt;p&gt;Try to teach for free when you start out. It’s much easier to find students when you’re not charging. Here are three ways:&lt;/p&gt;
&lt;h3 id=&quot;1.-give-a-talk-at-a-meetup&quot;&gt;1. Give a talk at a meetup&lt;/h3&gt;
&lt;p&gt;Meetup organizers are always looking for volunteers to give talks or hold workshops. You can volunteer yourself. Most meetups will be happy to have you.&lt;/p&gt;
&lt;p&gt;For example, go find &lt;a href=&quot;https://singaporecss.github.io/&quot;&gt;Singapore CSS&lt;/a&gt; or &lt;a href=&quot;https://www.meetup.com/Singapore-JS/&quot;&gt;Singapore JavaScript&lt;/a&gt; if you’d like to give a talk about CSS or JavaScript in Singapore. They’ll be happy to welcome you.&lt;/p&gt;
&lt;p&gt;Don’t be afraid to stand in front of a crowd to teach. Don’t let your imposter syndrome stop you from teaching.&lt;/p&gt;
&lt;p&gt;You can teach anyone who wants to learn what you already learned. It’s even better if you just learned the subject because you know how it feels to go through the process. &lt;a href=&quot;https://zellwk.com/blog/why-you-learn-when-you-teach&quot;&gt;You can spot the crumbling footholds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, Shirlaine and Grace give a talk at Singapore CSS right after they learned how to use CSS Grid. They gave the same talk again at Junior Developers Singapore. &lt;a href=&quot;https://engineers.sg/video/css-grids-for-noobs-by-noobs-junior-developers-singapore--2317&quot;&gt;Here’s a video of their talk&lt;/a&gt;. It was very well received.&lt;/p&gt;
&lt;p&gt;You can give a talk too.&lt;/p&gt;
&lt;h3 id=&quot;2.-create-or-join-a-study-group&quot;&gt;2. Create or join a study group&lt;/h3&gt;
&lt;p&gt;Studies group are great because you get to teach and learn from peers. There are many study groups worldwide. For example, there are &lt;a href=&quot;https://study-group-directory.freecodecamp.org/&quot;&gt;freeCodeCamp&lt;/a&gt;’s study groups all around the world. You can join one if you want to. You can create one too.&lt;/p&gt;
&lt;p&gt;If you want to study another topic, you can create your own study group too. If you do so, go ahead and invite people to join you at meetups. They’ll be happy to share your study group if its free.&lt;/p&gt;
&lt;h3 id=&quot;3.-volunteer-to-be-a-mentor&quot;&gt;3. Volunteer to be a mentor&lt;/h3&gt;
&lt;p&gt;You can teach anyone who wants to learn what you learned. Try teaching your friends or your colleagues if you have them.&lt;/p&gt;
&lt;p&gt;If you don’t have friends or colleagues, you can also try volunteering at organizations that help people learn to code. One example of such an organization is &lt;a href=&quot;http://www.techladies.co/&quot;&gt;Tech Ladies&lt;/a&gt; in Singapore.&lt;/p&gt;
&lt;h2 id=&quot;finding-students-online&quot;&gt;Finding students online&lt;/h2&gt;
&lt;p&gt;There are two ways to teach online:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Through articles&lt;/li&gt;
&lt;li&gt;Through videos&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can start with either medium. I started teaching through articles when I started learning to code.&lt;/p&gt;
&lt;p&gt;Bear in mind that &lt;strong&gt;it is harder to teach online&lt;/strong&gt; because of these three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You don’t get immediate feedback because you can’t see your students&lt;/li&gt;
&lt;li&gt;You need to direct people to your article or video, and that can be pretty tough&lt;/li&gt;
&lt;li&gt;It’s harder to come up with topics to teach when nobody asks you a question&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s why &lt;strong&gt;I recommend you start teaching by offline.&lt;/strong&gt; You’ll know how to teach if you’ve taught a few people before.&lt;/p&gt;
&lt;p&gt;But you can always start by teaching online if you wish to. I started that way myself. Just bear in mind you’ll see results slower.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You can teach anyone who wants to learn what you already know. You can teach both online and offline.&lt;/p&gt;
&lt;p&gt;Now go teach.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visual Studio Live Share</title>
    <link href="https://zellwk.com/blog/vs-live-share/"/>
    <updated>2018-07-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/vs-live-share/</id>
    <content type="html">&lt;p&gt;Today I’m going to share with you an awesome plugin that lets you live code with other people. It is called VS Live Share.&lt;/p&gt;
&lt;p&gt;What we’re going to do today is to setup VS Live Share. I’ll also show you how to start a collaboration session and join a collaboration session.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;installing-vs-live-share&quot;&gt;Installing VS Live Share&lt;/h2&gt;
&lt;p&gt;What you want to do is to install the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&quot;&gt;VS Live Share&lt;/a&gt; extension. The VS Live share extension can be found in Visual Studio Code’s extension marketplace.&lt;/p&gt;
&lt;p&gt;Type VS Live Share into the search box and you’ll be able to find it.&lt;/p&gt;
&lt;p&gt;Then, click on install to install the extension.&lt;/p&gt;
&lt;p&gt;Then, click on reload.&lt;/p&gt;
&lt;h2 id=&quot;signing-in-the-vs-live-share&quot;&gt;Signing in the VS Live Share&lt;/h2&gt;
&lt;p&gt;You will see a “Sign in” button at the bottom left corner of Visual Studio code, on the status bar. Click on the “Sign in” and a window will pop up to ask you to sign in.&lt;/p&gt;
&lt;p&gt;You can sign in with a Microsoft account or a Github account. In my case, I use Github.&lt;/p&gt;
&lt;p&gt;Now, you’re ready to collaborate.&lt;/p&gt;
&lt;p&gt;What happens next depends on whether you’re starting a session or joining a session.&lt;/p&gt;
&lt;h2 id=&quot;starting&quot;&gt;Starting&lt;/h2&gt;
&lt;p&gt;If you are starting the session, you can click on your name at the bottom left corner, and select start collaboration session. Alternatively, you can simply click on “Share” to start the session.&lt;/p&gt;
&lt;p&gt;Once you started the session, VS Code will show you a notice on the bottom right hand corner. It’ll say a link has been copied to your clipboard.&lt;/p&gt;
&lt;p&gt;You can click on “Copy again” to make sure the link is copied onto your clipboard.&lt;/p&gt;
&lt;p&gt;This link looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://insiders.liveshare.vsengsaas.visualstudio.com/join?0EUI09T34IISNETHUI09435
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll pass this link to your parter for them to join your session.&lt;/p&gt;
&lt;h2 id=&quot;joining-a-session&quot;&gt;Joining a session&lt;/h2&gt;
&lt;p&gt;To join a session, you click on your name on the bottom left hand corner, then click “Join collaboration session” and paste the link your parter gave you.&lt;/p&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
&lt;h2 id=&quot;making-it-better&quot;&gt;Making it better&lt;/h2&gt;
&lt;p&gt;You might want to use a video chatroom application like &lt;a href=&quot;https://zoom.us/&quot;&gt;Zoom&lt;/a&gt; or &lt;a href=&quot;https://appear.in/&quot;&gt;appear.in&lt;/a&gt; to chat and type code at the same time.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What to do when life shits on you</title>
    <link href="https://zellwk.com/blog/what-to-do-when-life-shits-on-you/"/>
    <updated>2018-07-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/what-to-do-when-life-shits-on-you/</id>
    <content type="html">&lt;p&gt;My wife got hospitalized today.&lt;/p&gt;
&lt;p&gt;We never expected this to happen. Last night, we came back happily from eating a Wagyu beef buffet. It was great. My wife left the restaurant smiling from eye to eye. She was completely satisfied with the meal.&lt;/p&gt;
&lt;p&gt;But this morning, she felt breathless. She didn’t have the strength to move around, and she felt her heart was beating so strongly that it almost beat out of her chest.&lt;/p&gt;
&lt;p&gt;So she went to the neighborhood clinic…&lt;/p&gt;
&lt;p&gt;And the doctor told her to go to the hospital.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I dropped what I was doing immediately and went to the hospital with her. It was 12 pm when we arrived at the hospital.&lt;/p&gt;
&lt;p&gt;The hospital was packed. We got split up pretty quickly because my wife was wheeled into the “critical care” section in the accident and emergency department. I had to do the registration.&lt;/p&gt;
&lt;p&gt;It was already 5 pm when the doctors are done with their initial assessment. They wanted to keep my wife in the hospital for further assessment.&lt;/p&gt;
&lt;p&gt;We agreed.&lt;/p&gt;
&lt;p&gt;And we waited…&lt;/p&gt;
&lt;p&gt;It was 9 pm when she was finally sent to the ward.&lt;/p&gt;
&lt;p&gt;There goes my day.&lt;/p&gt;
&lt;h2 id=&quot;but-the-show-has-to-go-on&quot;&gt;But the show has to go on&lt;/h2&gt;
&lt;p&gt;If you’ve been with me for a while, you would know that I release one article every Wednesday and one video every Friday.&lt;/p&gt;
&lt;p&gt;This is a commitment I made publicly since January 2018, and I intend to keep this commitment. The show must go on regardless of what happens.&lt;/p&gt;
&lt;p&gt;So here I am writing an article at 11:30 pm at night.&lt;/p&gt;
&lt;p&gt;I want to share three things about this experience.&lt;/p&gt;
&lt;h2 id=&quot;nobody-stops-for-you&quot;&gt;Nobody stops for you&lt;/h2&gt;
&lt;p&gt;Life goes on. People still go to work. The sun still rises from the east and sets in the west. Nobody is going to take the time to stop for you when life shits in your face.&lt;/p&gt;
&lt;p&gt;We can whine that shit has happened, and it caused us to lapse from our commitments and promises. Or we can make sure the work gets done regardless.&lt;/p&gt;
&lt;p&gt;Like I said earlier, the show must go on.&lt;/p&gt;
&lt;p&gt;I contacted my wife’s manager so her work can be passed on smoothly. And for me, I had to work on this article late at night because there was no one else to take care of it for me.&lt;/p&gt;
&lt;p&gt;What needs to be done needs to be done.&lt;/p&gt;
&lt;p&gt;It doesn’t matter what happens. It doesn’t matter how tired we are.&lt;/p&gt;
&lt;p&gt;That brings me to my second point.&lt;/p&gt;
&lt;h2 id=&quot;rest-well&quot;&gt;Rest well&lt;/h2&gt;
&lt;p&gt;It sounds ironic to hear me talking about rest when I’m working overtime right now! But there’s a reason why I’m talking about rest.&lt;/p&gt;
&lt;p&gt;Today is Monday. (It will be Wednesday when you read this article). Coincidentally, I slept for almost 18 hours on Sunday. I rested up. Or I wouldn’t have the energy to spare today.&lt;/p&gt;
&lt;p&gt;I wouldn’t be able to stay present when my wife needed me. I wouldn’t have been able to work on this article and provide support to my students either.&lt;/p&gt;
&lt;p&gt;Make sure you dedicate time for rest.&lt;/p&gt;
&lt;p&gt;Make sure you recharge properly so you can handle the things you need to.&lt;/p&gt;
&lt;p&gt;And this brings me to my third point&lt;/p&gt;
&lt;h2 id=&quot;structure-your-life&quot;&gt;Structure your life&lt;/h2&gt;
&lt;p&gt;I tried to carve a life where I can spend time with my family as much as I can. If I had to drop everything to be with them, I will.&lt;/p&gt;
&lt;p&gt;That was what happened today—I dropped everything so I could be with my wife.&lt;/p&gt;
&lt;p&gt;We only have one life.&lt;/p&gt;
&lt;p&gt;I don’t want to regret anything when I lie on my deathbed. I don’t think you want to either.&lt;/p&gt;
&lt;p&gt;What we need is to structure our lives. We need to prioritize the things that matter to us. Our families, our dreams.&lt;/p&gt;
&lt;p&gt;It WILL be hard to create the life you want. But wouldn’t it be worth it?&lt;/p&gt;
&lt;p&gt;(I think my wife is fine. She’s not in any danger. I expect her to be discharged in a few days. I’ll spend the next few days working from the hospital so I can be with her).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Finding mentors</title>
    <link href="https://zellwk.com/blog/finding-mentors/"/>
    <updated>2018-06-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/finding-mentors/</id>
    <content type="html">&lt;p&gt;We usually think of people when we think of mentors.&lt;/p&gt;
&lt;p&gt;But that’s a mistake.&lt;/p&gt;
&lt;p&gt;Because mentors don’t have to be people.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-best-mentors-when-you%E2%80%99re-starting-out&quot;&gt;The best mentors when you’re starting out&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The best mentors when you’re starting out are books and courses.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why? Because people their pour time and energy into making books and courses. And you can get a lot more from reading their books and courses than from talking to the person who made the book or course.&lt;/p&gt;
&lt;p&gt;You always want to begin with a book or a course.&lt;/p&gt;
&lt;p&gt;Free articles can help. You can use them. But the downside of using free articles is you need to know what to learn first and what to learn next. You need to map out your own journey.&lt;/p&gt;
&lt;p&gt;As you get more advanced, when you have questions that books, courses and even online articles don’t answer, you want to ask people.&lt;/p&gt;
&lt;h2 id=&quot;finding-people-to-help-you-out&quot;&gt;Finding people to help you out&lt;/h2&gt;
&lt;p&gt;There are many ways to find people to answer your questions.&lt;/p&gt;
&lt;h3 id=&quot;join-a-community-around-the-book-or-course-you-bought&quot;&gt;Join a community around the book or course you bought&lt;/h3&gt;
&lt;p&gt;The first way I would recommend is to see if there is a community around the book or course you bought.&lt;/p&gt;
&lt;p&gt;This community will be the best place for you to ask questions since they people in the community are learning the same things as you are learning. There is more context, and there is a high chance of getting a quality answer.&lt;/p&gt;
&lt;p&gt;People who create courses may also hang out in the community to answer questions.&lt;/p&gt;
&lt;p&gt;Shameless plug: When I created Learn JavaScript, I created a community to go with the course. I hang out in the community to answer questions.&lt;/p&gt;
&lt;p&gt;If you have a question about JavaScript, you almost be guaranteed that the question will be answered by one of the students, or by me.&lt;/p&gt;
&lt;p&gt;If you want to learn JavaScript, you can go to https://learnjavascript.today to find out more about the course.&lt;/p&gt;
&lt;h3 id=&quot;go-to-events-near-you&quot;&gt;Go to events near you&lt;/h3&gt;
&lt;p&gt;The second way to find people to help is to go to events in your area. When I say events, I mean meetups and conferences.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;find link-minded people&lt;/strong&gt; and you can become friends with them. It doesn’t matter if these people are higher level or lower level compared to you. You can still become friends with them.&lt;/p&gt;
&lt;p&gt;It’s important to &lt;strong&gt;treat these people as friends and mentors&lt;/strong&gt;. I’ll talk about why its important in a second.&lt;/p&gt;
&lt;h3 id=&quot;talk-to-people-you-respect&quot;&gt;Talk to people you respect&lt;/h3&gt;
&lt;p&gt;The third way is to talk to people you respect.&lt;/p&gt;
&lt;p&gt;Usually, you can find these people in their blogs. You can subscribe to their email newsletters and communicate with them through email.&lt;/p&gt;
&lt;p&gt;Sometimes you can talk to them through twitter or other social media platforms they’re on.&lt;/p&gt;
&lt;p&gt;Again treat these people like friends and mentors.&lt;/p&gt;
&lt;h3 id=&quot;ask-your-question-on-social-media&quot;&gt;Ask your question on Social Media&lt;/h3&gt;
&lt;p&gt;The fourth way is to post your questions on social media.&lt;/p&gt;
&lt;p&gt;Hopefully, someone will answer, but that’ll depend on how many followers you have, and whether you’re lucky enough.&lt;/p&gt;
&lt;h2 id=&quot;why-you-should-treat-people-as-friends-and-mentors&quot;&gt;Why you should treat people as friends and mentors&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you treat people as only mentors, you put them on a pedestal.&lt;/strong&gt; It will be difficult for you to become friends with them because you feel they’re always at a higher level compared to you. You feel that you have nothing to add.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you treat people as both friends and mentors, you don’t have to worry about expertise.&lt;/strong&gt; Friends are of different levels anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you treat people only as friends, you may believe there is nothing to learn from them.&lt;/strong&gt; And as a result, you don’t learn from them.&lt;/p&gt;
&lt;p&gt;But you do learn from people who are at a higher level and people who are at a lower level compared to you. You can learn a lot of things. Its up to you to figure out what you can learn.&lt;/p&gt;
&lt;h2 id=&quot;don%E2%80%99t-go-around-around-asking-for-free-mentorship&quot;&gt;Don’t go around around asking for free mentorship&lt;/h2&gt;
&lt;p&gt;They may be societies where you can get free mentorship, but they’re limited. You might not be able to get in.&lt;/p&gt;
&lt;p&gt;Free mentorship doesn’t work because people value their own time. &lt;strong&gt;People need to be rewarded for spending their time with you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sometimes, this reward means money&lt;/strong&gt;. In that case, you can pay people for a consultation. If you pay them, you’re respecting their expertise, time and energy.&lt;/p&gt;
&lt;p&gt;Getting a consultation is almost always worth it because you learn so much more than the money you paid for it. Obviously, before you get onto a consultation call, make sure you go through books and courses first.&lt;/p&gt;
&lt;p&gt;The reward isn’t always money. &lt;strong&gt;Sometimes it can be the relationship you built with them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Friends don’t talk money. We simply help each other out. If you have more friends, there’s a higher probability that you can ask a question and people will help you out for free.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to get CSS values in JavaScript</title>
    <link href="https://zellwk.com/blog/css-values-in-js/"/>
    <updated>2018-06-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-values-in-js/</id>
    <content type="html">&lt;p&gt;CSS alone is not enough sometimes. You might need to control your CSS values with JavaScript. But how do you get CSS values in JavaScript?&lt;/p&gt;
&lt;p&gt;Turns out, there are two possible ways, depending on whether you’re trying to get inline styles or computed styles.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;getting-inline-styles&quot;&gt;Getting inline styles&lt;/h2&gt;
&lt;p&gt;Inline styles are styles that are present in the HTML in the &lt;code&gt;style&lt;/code&gt; attribute.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;element&amp;quot; style=&amp;quot;font-size: 2em; color: red;&amp;quot;&amp;gt;Red hot chili pepper!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get inline styles, you can use the &lt;code&gt;style&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const element = document.querySelector(&#39;.element&#39;)

const fontSize = element.style.fontSize
console.log(fontSize) // 2em

const color = element.style.color
console.log(color) // red
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;getting-computed-styles&quot;&gt;Getting computed styles&lt;/h2&gt;
&lt;p&gt;If your styles are written in the CSS file, you need to get the computed style. To do so, you can use &lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It takes in two values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const style = getComputedStyle(Element, pseudoElement);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Element&lt;/code&gt; here refers to the element you’ve selected with &lt;code&gt;querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pseudoElement&lt;/code&gt; here refers to the string of the pseudo element you’re trying to get (if any). You can omit this value if you’re not selecting a pseudo element.&lt;/p&gt;
&lt;p&gt;Let’s walk through an example to help make sense of things. Say you have the following HTML and CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;element&amp;quot;&amp;gt; This is my element &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.element { background-color: red }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, you need to select the element with &lt;code&gt;querySelector&lt;/code&gt;. Then, you use &lt;code&gt;getComputedStyle&lt;/code&gt; to get the element’s styles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const element = document.querySelector(&#39;.element&#39;)
const style = getComputedStyle(element)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you log &lt;code&gt;style&lt;/code&gt;, you should see an object that contains every CSS property and their respective values.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/get-css/all-properties.png&quot; alt=&quot;`getComputedStyle` returns an object that contains every CSS property and their respective values&quot;&gt;
  &lt;figcaption&gt;`getComputedStyle` returns an object that contains every CSS property and their respective values&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can also see this object in Chrome’s and Firefox’s dev tools.&lt;/p&gt;
&lt;p&gt;For Firefox dev tools, look under “Inspector”, “Computed”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/get-css/firefox.png&quot; alt=&quot;Firefox dev tools computed tab&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Firefox dev tools computed tab&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For Chrome dev tools, look under “Elements”. If the dev tools window is large, you can see the computed styles on the right panel. If the dev tools window is small, you can look under the “Computed” tab.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/get-css/chrome.png&quot; alt=&quot;Chrome dev tools computed tab&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Chrome dev tools computed tab&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To get the value of a CSS property, you write the property in camel case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const style = getComputedStyle(element)

const backgroundColor = style.backgroundColor
console.log(backgroundColor) // rgb(0, 0, 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;code&gt;getComputedStyle&lt;/code&gt; is read-only. You cannot set a CSS value with &lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note2: &lt;code&gt;getComputedStyle&lt;/code&gt; gets the computed CSS values. You’ll get &lt;code&gt;px&lt;/code&gt; from &lt;code&gt;getComputedStyle&lt;/code&gt;, not relative units like &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;getting-styles-from-pseudo-elements&quot;&gt;Getting styles from pseudo elements&lt;/h2&gt;
&lt;p&gt;To get styles from pseudo elements, you need to pass in a string of the pseudo element as the second argument to &lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;element&amp;quot;&amp;gt; This is my element &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.element { background-color: red }
.element::before { content: &amp;quot;Before pseudo element&amp;quot;; }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const element = document.querySelector(&#39;.element&#39;)
pseudoElementStyle = getComputedStyle(element, &#39;::before&#39;)

console.log(pseudoElementStyle.content) // Before pseudo element
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You can get CSS values in JavaScript through two methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;style&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;style&lt;/code&gt; property only retrieves inlined CSS values while &lt;code&gt;getComputedStyle&lt;/code&gt; style retrieves computed CSS values.&lt;/p&gt;
&lt;p&gt;If this lesson has helped you, might enjoy &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;, where you’ll learn how to build anything you want from scratch. Enrollment for Learn JavaScript opens in July 2018 (next week!).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Finding motivation</title>
    <link href="https://zellwk.com/blog/finding-motivation/"/>
    <updated>2018-06-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/finding-motivation/</id>
    <content type="html">&lt;p&gt;Many people rather relax than work.&lt;/p&gt;
&lt;p&gt;They say they don’t feel motivated to work. They need to feel motivated.&lt;/p&gt;
&lt;p&gt;Sounds familiar?&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;you-don%E2%80%99t-need-motivation&quot;&gt;You don’t need motivation&lt;/h2&gt;
&lt;p&gt;You already have the motivation. That’s why you want to work in the first place. That’s why you feel guilty if you don’t work.&lt;/p&gt;
&lt;p&gt;You don’t lack motivation.&lt;/p&gt;
&lt;p&gt;The problem isn’t with motivation.&lt;/p&gt;
&lt;p&gt;The problem is you didn’t act on your motivation.&lt;/p&gt;
&lt;p&gt;You let your resistances stop you.&lt;/p&gt;
&lt;h2 id=&quot;you-need-a-system&quot;&gt;You need a system&lt;/h2&gt;
&lt;p&gt;In Turning Pro, Steven Pressfield talks about how professionals show up and do the work every day.&lt;/p&gt;
&lt;p&gt;They show up when they don’t feel like it. They still show up when they’re tired.&lt;/p&gt;
&lt;p&gt;They start work at the same time every day. And they don’t stop until they accomplished what they set out for.&lt;/p&gt;
&lt;p&gt;You need a system like that.&lt;/p&gt;
&lt;p&gt;You need to create an environment where you can work. Set a start time. Set an end time. Don’t let anything distract you between the times.&lt;/p&gt;
&lt;p&gt;Keep doing it and you’ll form a habit. When you form the habit, it becomes much easier for you to maintain the system.&lt;/p&gt;
&lt;h2 id=&quot;decide-what-you%E2%80%99re-going-to-do-in-advance&quot;&gt;Decide what you’re going to do in advance&lt;/h2&gt;
&lt;p&gt;If you want to learn JavaScript, you don’t put “I want to learn JavaScript” as the task because JavaScript is too broad.&lt;/p&gt;
&lt;p&gt;You can narrow things down and say “I’m going to focus on functions today”. The next day, you can say “I want to learn For loops”, and so on.&lt;/p&gt;
&lt;p&gt;Break the large tasks into small tasks the night before (or the week before).&lt;/p&gt;
&lt;h2 id=&quot;recharge-before-your-session&quot;&gt;Recharge before your session&lt;/h2&gt;
&lt;p&gt;Work requires energy.&lt;/p&gt;
&lt;p&gt;You owe it to yourself to recharge.&lt;/p&gt;
&lt;p&gt;Different people recharge differently. I usually meditate, take a nap, or shower.&lt;/p&gt;
&lt;p&gt;Find out what works for you and do it before your session.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Looping through objects in JavaScript</title>
    <link href="https://zellwk.com/blog/looping-through-js-objects/"/>
    <updated>2018-06-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/looping-through-js-objects/</id>
    <content type="html">&lt;p&gt;Once in a while, you may need to loop through Objects in JavaScript. The only way to do so before ES6 is with a &lt;code&gt;for...in&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;The problem with a &lt;code&gt;for...in&lt;/code&gt; loop is that it iterates through properties in the Prototype chain. When you loop through an object with the &lt;code&gt;for...in&lt;/code&gt; loop, you need to check if the property belongs to the object. You can do this with &lt;code&gt;hasOwnProperty&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (var property in object) {
  if (object.hasOwnProperty(property)) {
    // Do things here
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We no longer have to rely on &lt;code&gt;for...in&lt;/code&gt; and &lt;code&gt;hasOwnProperty&lt;/code&gt; now. There’s a better way.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;a-better-way-to-loop-through-objects&quot;&gt;A better way to loop through objects&lt;/h2&gt;
&lt;p&gt;The better way to loop through objects is &lt;strong&gt;first to convert the object into an array. Then, you loop through the array.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can convert an object into an array with three methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.values&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;object.keys&quot;&gt;Object.keys&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.keys&lt;/code&gt; creates an array that contains the properties of an object. Here’s an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruits = {
  apple: 28,
  orange: 17,
  pear: 54,
}

const keys = Object.keys(fruits)
console.log(keys) // [apple, orange, pear]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;object.values&quot;&gt;Object.values&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.values&lt;/code&gt; creates an array that contains the values of every property in an object. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruits = {
  apple: 28,
  orange: 17,
  pear: 54,
}

const values = Object.values(fruits)
console.log(values) // [28, 17, 54]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;object.entries&quot;&gt;Object.entries&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.entries&lt;/code&gt; creates an array of arrays. Each inner array has two item. The first item is the property; the second item is the value.&lt;/p&gt;
&lt;p&gt;Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruits = {
  apple: 28,
  orange: 17,
  pear: 54,
}

const entries = Object.entries(fruits)
console.log(entries)
// [
//   [apple, 28],
//   [orange, 17],
//   [pear, 54]
// ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My favorite of the three is &lt;code&gt;Object.entries&lt;/code&gt; because you get both the key and property values.&lt;/p&gt;
&lt;h2 id=&quot;looping-through-the-array&quot;&gt;Looping through the array&lt;/h2&gt;
&lt;p&gt;Once you’ve converted the object into an array with &lt;code&gt;Object.keys&lt;/code&gt;, &lt;code&gt;Object.values&lt;/code&gt;, or &lt;code&gt;Object.entries&lt;/code&gt;, you can loop through it as if it was a normal array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Looping through arrays created from Object.keys
const keys = Object.keys(fruits)
for (const key of keys) {
  console.log(key)
}

// Results:
// apple
// orange
// pear
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use &lt;code&gt;Object.entries&lt;/code&gt; you might want to &lt;a href=&quot;https://zellwk.com/blog/es6&quot;&gt;destructure&lt;/a&gt; the array into its key and property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (const [fruit, count] of entries) {
  console.log(`There are ${count} ${fruit}s`)
}

// Result
// There are 28 apples
// There are 17 oranges
// There are 54 pears
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;The better way to loop through objects is first convert it into an array with one of these three methods.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.values&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, you loop through the results like a normal array.&lt;/p&gt;
&lt;p&gt;If this lesson has helped you, might enjoy &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;, where you’ll learn how to build anything you want from scratch. Enrollment for Learn JavaScript opens in July 2018 (in two weeks!).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Finding the right materials to learn</title>
    <link href="https://zellwk.com/blog/finding-materials-to-learn/"/>
    <updated>2018-06-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/finding-materials-to-learn/</id>
    <content type="html">&lt;p&gt;Today we’re going to talk about finding the right materials to learn to code.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;google-is-usually-good-enough&quot;&gt;Google is usually good enough&lt;/h2&gt;
&lt;p&gt;One thing I realized over the years is that you can find almost anything you want in the first three pages of Google.&lt;/p&gt;
&lt;p&gt;If you cannot find it, it can mean four different possibilities:&lt;/p&gt;
&lt;h3 id=&quot;1.-the-answer-is-already-there&quot;&gt;1. The answer is already there&lt;/h3&gt;
&lt;p&gt;The answer can be in the first three pages, but you’re not aware of it.&lt;/p&gt;
&lt;p&gt;You need to go back and re-read the articles and books you found. Pay more attention as you read through them again.&lt;/p&gt;
&lt;p&gt;Read slowly.&lt;/p&gt;
&lt;p&gt;Maybe you need to try things to get a deeper understanding.&lt;/p&gt;
&lt;h3 id=&quot;2.-you-don%E2%80%99t-have-enough-knowledge-to-understand-the-answer-yet&quot;&gt;2. You don’t have enough knowledge to understand the answer yet&lt;/h3&gt;
&lt;p&gt;For example, if you want to learn React, but you don’t know any JavaScript, you’re not going to go very far.&lt;/p&gt;
&lt;p&gt;You might not be able to catch the answer even if it shows up in front of you since you’re not ready for it.&lt;/p&gt;
&lt;p&gt;Go and learn some fundamentals before trying again.&lt;/p&gt;
&lt;h3 id=&quot;3.-you-don%E2%80%99t-know-what-to-search-for&quot;&gt;3. You don’t know what to search for&lt;/h3&gt;
&lt;p&gt;If you’re new to the industry, and you don’t know what to search for, you won’t be able to find what you want.&lt;/p&gt;
&lt;p&gt;What you should do is grab a beginners book. Start reading it. Learn the keywords. Learn how to Google&lt;/p&gt;
&lt;h3 id=&quot;4.-the-answer-might-not-be-on-google&quot;&gt;4. The answer might not be on google&lt;/h3&gt;
&lt;p&gt;You might not be able to find answers you’re searching for new or unpopular things. What you can do then, is to figure things out yourself. Alternatively, you can ask someone you know personally.&lt;/p&gt;
&lt;p&gt;No amount of Googling can help here.&lt;/p&gt;
&lt;h2 id=&quot;here-are-two-tips&quot;&gt;Here are two tips&lt;/h2&gt;
&lt;h3 id=&quot;the-first-tip&quot;&gt;The first tip&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Few people explain things well. When you find these people, follow them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I follow these people:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rachel Andrew and Jen Simmons for CSS Grid&lt;/li&gt;
&lt;li&gt;Sarah Drasner for Vue&lt;/li&gt;
&lt;li&gt;Heydon Pickering for accessibility&lt;/li&gt;
&lt;li&gt;Seth Godin for marketing&lt;/li&gt;
&lt;li&gt;Sean McCabe for business&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key is to build your own list of favorite people to follow.&lt;/p&gt;
&lt;p&gt;Keep track of what they do. Watch them work their magic. Buy their books and courses.&lt;/p&gt;
&lt;h3 id=&quot;the-second-tip&quot;&gt;The second tip&lt;/h3&gt;
&lt;p&gt;One useful tip is to narrow your search to the site you want to search from. To do this, you can write&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site:sitename search-term
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to google for something on my site, you can use &lt;code&gt;site:zellwk.com functions&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why you shouldn&#39;t reassign values in JavaScript</title>
    <link href="https://zellwk.com/blog/dont-reassign/"/>
    <updated>2018-06-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dont-reassign/</id>
    <content type="html">&lt;p&gt;In JavaScript, you can reassign values to variables you declared with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I used to reassign values a lot. But as I got better with JavaScript, I realized you shouldn’t reassign values if you can. This is because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may change external state by accident when you reassign values&lt;/li&gt;
&lt;li&gt;You create more complex code when you reassign values&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;you-may-change-external-state-by-accident-when-you-reassign-values&quot;&gt;You may change external state by accident when you reassign values&lt;/h2&gt;
&lt;p&gt;When you assign a new value to a variable, you write the variable name, followed by &lt;code&gt;=&lt;/code&gt;, followed by your new value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Declaring a variable
let name = &#39;Zell&#39;

// Reassigning a variable
name = &#39;Vincy&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It seems okay to reassign values at first glance, but it isn’t. The problem arises when you look at scopes.&lt;/p&gt;
&lt;p&gt;Let’s say you have a variable called &lt;code&gt;name&lt;/code&gt; in the global context.&lt;/p&gt;
&lt;p&gt;Let’s also say you created a function called &lt;code&gt;sayName&lt;/code&gt;. &lt;code&gt;sayName&lt;/code&gt; logs the argument you passed into it. But before you log the argument, you change the &lt;code&gt;name&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let name = &#39;Zell&#39;

function sayName (arg) {
  name = arg
  console.log(name)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you call &lt;code&gt;sayName&lt;/code&gt;, you change the value of &lt;code&gt;name&lt;/code&gt; forever. It changed the state outside of the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sayName(&#39;Vincy&#39;) // Vincy
console.log(name) // Vincy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you may think that this example sounds stupid, and you’ll never write silly code like this.&lt;/p&gt;
&lt;p&gt;The question is, can you guarantee that you’ll never make this mistake, even when you’re in the thick of things?&lt;/p&gt;
&lt;p&gt;I can’t.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make it a habit not to reassign variables.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I recommend always create variables with the &lt;code&gt;const&lt;/code&gt; keyword. This is because variables created with a &lt;code&gt;const&lt;/code&gt; keyword cannot be reassigned. You’ll get an error if you try to assign a new value to them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const name = &#39;Zell&#39;

function sayName (arg) {
  name = arg
  console.log(name)
}

sayName(&#39;Vincy&#39;) // TypeError: invalid assignment to const `name&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;you-create-complex-code-when-you-reassign-values&quot;&gt;You create complex code when you reassign values&lt;/h2&gt;
&lt;p&gt;Imagine a colleague of your changes her hairstyle every day. She comes into the office with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bangs on Monday&lt;/li&gt;
&lt;li&gt;Braids on Tuesday&lt;/li&gt;
&lt;li&gt;Short hair on Wednesday&lt;/li&gt;
&lt;li&gt;Long hair on Thursday&lt;/li&gt;
&lt;li&gt;Bright pink hair on Friday&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’ll be hard for you to recognize her.&lt;/p&gt;
&lt;p&gt;When you create a variable with &lt;code&gt;let&lt;/code&gt;, your brain knows the variable is going to change. It exerts more energy to keep track of the changes down the road.&lt;/p&gt;
&lt;p&gt;Let’s go through an example and you’ll see how this works.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let hair

if (today === &#39;Monday&#39;) {
  hair = &#39;bangs&#39;
} else {
  hair = &#39;something else&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, your brain goes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There’s a variable called &lt;code&gt;hair&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;hair&lt;/code&gt; is going to change later. I don’t know its value now. (This is uncomfortable).&lt;/li&gt;
&lt;li&gt;Later…&lt;/li&gt;
&lt;li&gt;&lt;code&gt;today&lt;/code&gt; is Monday.&lt;/li&gt;
&lt;li&gt;Hair is going to be &lt;code&gt;bangs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now compare this thought process with one where you use ternary operators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hair = today === &#39;Monday&#39;
  ? &#39;bangs&#39;
  : &#39;something else&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, your brain goes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There’s a variable called hair.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;today&lt;/code&gt; is Monday.&lt;/li&gt;
&lt;li&gt;Hair is going to be &lt;code&gt;bangs&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s no “wait and see” moments with the ternary operator code. Your brain does lesser work since doesn’t need to “wait and see”.&lt;/p&gt;
&lt;p&gt;It’s kind of like deciding what you’re going to have for lunch. You won’t waste energy thinking about what to eat if you’ve decided beforehand.&lt;/p&gt;
&lt;h3 id=&quot;working-with-many-branches&quot;&gt;Working with many branches&lt;/h3&gt;
&lt;p&gt;Ternary operators only work if you have simple &lt;code&gt;if/else&lt;/code&gt; statements. What if you need more branches?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let hair

if (today === &#39;Monday&#39;) {
  hair = &#39;bangs&#39;
} else if (today === &#39;Tuesday&#39;) {
  hair = &#39;braids&#39;
} else if (today === &#39;Wednesday&#39;) {
  hair = &#39;short hair&#39;
} else if (today === &#39;Thursday&#39;) {
  hair = &#39;long hair&#39;
} else if (today === &#39;Friday&#39;) {
  hair = &#39;bright pink hair&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The best way to handle many &lt;code&gt;if/else&lt;/code&gt; statements (or even a &lt;code&gt;switch&lt;/code&gt; statement) is to contain the &lt;code&gt;if/else&lt;/code&gt; logic in a function.&lt;/p&gt;
&lt;p&gt;Here’s a start (where we simply wrap a function around the above code):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getHairType (today) {
  let hair

  if (today === &#39;Monday&#39;) {
    hair = &#39;bangs&#39;
  } else if (today === &#39;Tuesday&#39;) {
    hair = &#39;braids&#39;
  } else if (today === &#39;Wednesday&#39;) {
    hair = &#39;short hair&#39;
  } else if (today === &#39;Thursday&#39;) {
    hair = &#39;long hair&#39;
  } else if (today === &#39;Friday&#39;) {
    hair = &#39;bright pink hair&#39;
  }

  return hair
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you call &lt;code&gt;getHairType&lt;/code&gt;, you don’t really care how it works. All you care about is the value you’ll get back from &lt;code&gt;getHairType&lt;/code&gt;. This makes it easier for you to understand how your code executes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Using the function
const hair = getHairType(&#39;Wednesday&#39;) // short hair
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step will be to improve &lt;code&gt;getHairType&lt;/code&gt;. Here, you can use an &lt;strong&gt;early return&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An early return means you return a value before the function completes execution. When you do this, you don’t even need to create a &lt;code&gt;hair&lt;/code&gt; variable. You can return the value of &lt;code&gt;hair&lt;/code&gt; directly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function getHairType (today) {
  if (today === &#39;Monday&#39;) return &#39;bangs&#39;
  if (today === &#39;Tuesday&#39;) return &#39;braids&#39;
  if (today === &#39;Wednesday&#39;) return &#39;short hair&#39;
  if (today === &#39;Thursday&#39;) return &#39;long hair&#39;
  if (today === &#39;Friday&#39;) return &#39;bright pink hair&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much easier to read now, isn’t it?&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You want to avoid reassigning values to variables because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may change external state by accident when you reassign values&lt;/li&gt;
&lt;li&gt;You create more complex code when you reassign values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of reassigning values, try using ternary operators and early returns. They can make your code terser and easier to read.&lt;/p&gt;
&lt;p&gt;If this lesson has helped you, might enjoy &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;, where you’ll learn how to build anything you want from scratch. Enrollment for Learn JavaScript opens in July 2018 (in three weeks!).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with overwhelm</title>
    <link href="https://zellwk.com/blog/dealing-with-overwhelm/"/>
    <updated>2018-06-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dealing-with-overwhelm/</id>
    <content type="html">&lt;p&gt;It’s easy to feel overwhelm as developer. We have so many things to learn.&lt;/p&gt;
&lt;p&gt;We need to learn HTML, CSS, JavaScript, accessibility, animations, frameworks, dev tooling, and new things that pop up every now and then.&lt;/p&gt;
&lt;p&gt;I wouldn’t be surprised if you’re overwhelmed. I feel overwhelmed too. Every single day.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-you-feel-overwhelmed&quot;&gt;Why you feel overwhelmed&lt;/h2&gt;
&lt;p&gt;It’s easy to understand why. There are only two factors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One. You take on too much.&lt;/strong&gt; Too much to do, too much to research, too much to learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two. You don’t have enough resources&lt;/strong&gt;. You don’t have enough time, money, manpower, skills, etc.&lt;/p&gt;
&lt;p&gt;Removing overwhelm is an easy process if you can reduce the amount the work you do.&lt;/p&gt;
&lt;p&gt;It is also easy if you can increase your resources. The easiest way to increase resources is to gain more manpower. But to hire people, you need money. You may lack money and you may choose to do it yourself. If you do it yourself, you need time and skills. That brings us into an spiral of feeling overwhelmed.&lt;/p&gt;
&lt;p&gt;But there’s something you can do to stop feeling overwhelmed.&lt;/p&gt;
&lt;h2 id=&quot;what-do-to-stop-feeling-overwhelmed&quot;&gt;What do to stop feeling overwhelmed&lt;/h2&gt;
&lt;p&gt;You can do two things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, extend the deadline you gave yourself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take more time. Go slower. Have more space to work and learn. Don’t stress yourself up too much. When you don’t stress yourself, you free yourself up and let the creative energies flow.&lt;/p&gt;
&lt;p&gt;That’s what I did with &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;. I wanted to finish the course in three months when I started creating it.&lt;/p&gt;
&lt;p&gt;Obviously, I failed to meet the deadline.&lt;/p&gt;
&lt;p&gt;I’ve been working on Learn JavaScript for more than six months now. What I learned to do is to let go of the deadline. If I have the deadline, I couldn’t make it the course I wanted it to be. The deadline was arbitrary. It’s what I want, but not what was required.&lt;/p&gt;
&lt;p&gt;Once I let go of the deadline, I create faster than before.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, work regardless of what you’re feeling&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You set a time to work everyday. You can do it for half an hour, one hour, or even longer than that.&lt;/p&gt;
&lt;p&gt;Start working at the time you set. You also stop working at the time you set.&lt;/p&gt;
&lt;p&gt;You will not allow any form of distraction during this time. You will not use Facebook, Twitter, or Youtube. You won’t surf the internet.&lt;/p&gt;
&lt;p&gt;What’s more important is you also won’t listen to the voice that says you’re not good enough, you have too much to do, you don’t have enough time. Tone down the negative chatter. Shut it off.&lt;/p&gt;
&lt;p&gt;Stop working when the time is up. Don’t work overtime because you’ll build up resentment against the next sprint.&lt;/p&gt;
&lt;p&gt;Do it everyday. Build up a momentum. Sooner or later you won’t feel overwhelmed. You’ll just get to work.&lt;/p&gt;
&lt;h2 id=&quot;one-last-message&quot;&gt;One last message&lt;/h2&gt;
&lt;p&gt;Rome wasn’t built in a day.&lt;/p&gt;
&lt;p&gt;Your work, your learning, will probably not be completed in a day too.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why you learn when you teach</title>
    <link href="https://zellwk.com/blog/why-you-learn-when-you-teach/"/>
    <updated>2018-06-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/why-you-learn-when-you-teach/</id>
    <content type="html">&lt;p&gt;The best way to learn is to teach.&lt;/p&gt;
&lt;p&gt;You’ve heard many people say this. But is it true?&lt;/p&gt;
&lt;p&gt;I knew teaching had benefits. For example, if you teach, people will know you exist. People may be able to learn from your experience. But learn? I was skeptical.&lt;/p&gt;
&lt;p&gt;But I realized the statement is true. You learn best when you teach. I can vouch for it after teaching frontend development for many years.&lt;/p&gt;
&lt;p&gt;This article explains my thoughts on why teaching others help you learn.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;p&gt;To understand why teaching helps you learn, we have to first talk about learning. You can teach something when you haven’t learned it.&lt;/p&gt;
&lt;h2 id=&quot;the-learning-process&quot;&gt;The learning process&lt;/h2&gt;
&lt;p&gt;Let’s say you want to learn JavaScript. All you know is you’re on one side of a cliff. The endpoint is on the other side of the cliff.&lt;/p&gt;
&lt;p&gt;You don’t know how to cross the gap (yet).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic1.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When I tried to learn JavaScript, I read through countless books and tutorials. I even looked at source code to see how people coded. I also searched for best practices.&lt;/p&gt;
&lt;p&gt;Each material I come across acts as a tiny foothold for me to get to the other side. Some materials are easy to understand; some are hard.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic2.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes the footholds were too wide apart. I miss my step, I fall into the valley, and I try again.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic3.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes I hit a wall. I don’t understand articles I read. I fall into the valley, and I try again.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic4.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;After trying enough (and losing enough lives), I toned up my leg muscles. I can jump a little farther and higher than before. I try the articles I couldn’t understand again.&lt;/p&gt;
&lt;p&gt;And sometimes I succeed in getting past the stage I was stuck at.&lt;/p&gt;
&lt;p&gt;And I get to the other side.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic5.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Only to realize there’s more to go…&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic6.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;But that’s okay. There’s always more to go. That’s what makes learning fun.&lt;/p&gt;
&lt;h2 id=&quot;teaching-helps-you-gain-perspective&quot;&gt;Teaching helps you gain perspective&lt;/h2&gt;
&lt;p&gt;I didn’t know how far I’ve gone until I started teaching JavaScript. I thought I knew very little. Not enough to be “an expert” yet anyway.&lt;/p&gt;
&lt;p&gt;But it turned out that I knew a lot. Enough to even make a &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;super comprehensive course on JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So here’s a side benefit to teaching.&lt;/p&gt;
&lt;p&gt;When you learn, you focus on moving from cliff to cliff. You have no idea how far you’ve gone because you don’t stop to think.&lt;/p&gt;
&lt;p&gt;But when you teach, you stop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You pause, you look backward, and you realize how far you came. You gain perspective, and this perspective gives you a confidence in your abilities.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You know more than you give yourself credit for.&lt;/p&gt;
&lt;h2 id=&quot;the-teaching-process&quot;&gt;The teaching process&lt;/h2&gt;
&lt;p&gt;When you teach, you try to help someone cross the cliff you crossed.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic7.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;One way to teach is to direct people to resources you went through. They will face the same difficulties you face. They’ll hit walls; they’ll miss their steps. Hopefully, they’ll gain enough strength to move past the obstacles themselves.&lt;/p&gt;
&lt;p&gt;But this isn’t teaching. This is simply… pointing people to the resources you used. You can help shorten their learning curve, but you’re not teaching. Not yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic8.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;To teach, you walk backwards. You stand beside the student and help them through the gap.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can point them to a tutorial while you wait for their questions. Sooner or later, they’ll ask questions that surprise you, like “Why this and not that?”.&lt;/p&gt;
&lt;p&gt;Sometimes, one is better than the other. Sometimes, both ways are possible. And you learn there’s another way to cross the cliff.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic9.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes, you think of a better example to help them cross the chasm easier. When you do this, you build another foothold for yourself.&lt;/p&gt;
&lt;p&gt;That’s why you learn when you teach—&lt;strong&gt;you build more footholds.&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic10.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Maybe one day, when you’ve answered enough questions, you build so many footholds that you fill the gap.&lt;/p&gt;
&lt;p&gt;That’s when your knowledge is rock solid.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic11.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;There’s no need for footholds anymore. You can simply walk across. Students you teach can walk across too.&lt;/p&gt;
&lt;h2 id=&quot;who-can-you-teach%3F&quot;&gt;Who can you teach?&lt;/h2&gt;
&lt;p&gt;You don’t need to be an expert to teach. &lt;strong&gt;You can teach anyone who wants to cross the cliff you crossed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s best to help immediately because you know how it feels to go past the cliff. You know danger spots where students need to be aware of.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic12.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes people will ask you questions and you go, “I don’t know”.&lt;/p&gt;
&lt;p&gt;That’s okay. You may not be able to fill up all the gaps yet. But you know you’re missing a piece. You can fill it up later by doing more research.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/teaching/comic13.jpg&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Sometimes you won’t be able to fill up the gap immediately. There are too many things you don’t know about.&lt;/p&gt;
&lt;p&gt;That’s okay too. Maybe you’ll find the block of stone you need as you progress to another cliff. It’ll be plain as sight.&lt;/p&gt;
&lt;p&gt;When you see it, you can go back and fill it up.&lt;/p&gt;
&lt;p&gt;That’s another reason why you learn when you teach—&lt;strong&gt;you see gaps in your knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;want-to-learn-to-teach-better%3F&quot;&gt;Want to learn to teach better?&lt;/h2&gt;
&lt;p&gt;Some developers are horrible at teaching. They’ll throw resources your way and ask you to figure it out yourself. Others talk in alien FOOBAR language that you’ll have a hard time understanding.&lt;/p&gt;
&lt;p&gt;Don’t blame them. They’re doing the best they can. Maybe they’re not interested in teaching. And that’s okay.&lt;/p&gt;
&lt;p&gt;You can teach well if you want to.&lt;/p&gt;
&lt;p&gt;I know a thing or two about teaching after writing tutorials for years. I want to share these things with you.&lt;/p&gt;
&lt;p&gt;Will you be interested? If yes, I’d love to hear:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why you want to teach&lt;/li&gt;
&lt;li&gt;What are your greatest obstacles to teaching&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Can’t wait to hear from you in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with confusion</title>
    <link href="https://zellwk.com/blog/dealing-with-confusion/"/>
    <updated>2018-06-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dealing-with-confusion/</id>
    <content type="html">&lt;p&gt;It’s normal to feel confused when you’re trying to learn something new.&lt;/p&gt;
&lt;p&gt;Some people hate this feeling. I know I do. But it’s important to feel this confusion.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Let’s say you want to visit tokyo. And you’ve never been to Tokyo before. For some reason, you found yourself in Tokyo one day.&lt;/p&gt;
&lt;p&gt;You’re bound to be confused at this point. You haven’t done your research on Tokyo. You don’t know where to stay, you don’t know what to eat. Worse, you don’t even know Japanese.&lt;/p&gt;
&lt;p&gt;What will you do? You have two choices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can freeze up and hope that someone will bring you around Tokyo&lt;/li&gt;
&lt;li&gt;You can explore Tokyo regardless of your feelings—even if you’re afraid or confused or overwhelmed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;many-people-freeze-up&quot;&gt;Many people freeze up&lt;/h2&gt;
&lt;p&gt;You can freeze up if you want to. That’s what many people do when they learn programming.&lt;/p&gt;
&lt;p&gt;They say: “This is too much. I don’t know. I’m not good at this.” and they give up.&lt;/p&gt;
&lt;h2 id=&quot;but-you-can-choose-differently&quot;&gt;But you can choose differently&lt;/h2&gt;
&lt;p&gt;You can choose to explore Tokyo regardless of what you’re feeling.&lt;/p&gt;
&lt;p&gt;You can walk the streets. Sooner or later the streets will become familiar to you.&lt;/p&gt;
&lt;p&gt;You can learn Japanese. You can talk to the locals. Sooner or later, Japanese will become more and more familiar to you.&lt;/p&gt;
&lt;p&gt;You won’t feel so confused or overwhelmed about the city anymore. You can figure out where the tourist spots are, you can figure out where the best cafes are, you can figure out anything you want.&lt;/p&gt;
&lt;p&gt;You just need time and persistence to push past the confusion. But you need to embrace the confusion before you can push past it.&lt;/p&gt;
&lt;h2 id=&quot;embrace-the-confusion&quot;&gt;Embrace the confusion&lt;/h2&gt;
&lt;p&gt;You may feel confused about CSS or JavaScript or some new features, or frameworks that you haven’t learned yet. That is because you don’t know it well enough. It’s froeign to you. That’s why you’re confused.&lt;/p&gt;
&lt;p&gt;Give it some time. Explore it. You’ll come to understand it.&lt;/p&gt;
&lt;h2 id=&quot;tips-for-overcoming-confusion&quot;&gt;Tips for overcoming confusion&lt;/h2&gt;
&lt;p&gt;Here are some tips to help you overcome confusion slightly faster.&lt;/p&gt;
&lt;h3 id=&quot;1.-establish-what-you-know&quot;&gt;1. Establish what you know&lt;/h3&gt;
&lt;p&gt;You want to establish what you know and what you don’t know. You need to know what you don’t know before you can explore.&lt;/p&gt;
&lt;p&gt;This is the first step.&lt;/p&gt;
&lt;h3 id=&quot;2.-figure-out-the-cause-and-effect&quot;&gt;2. Figure out the cause and effect&lt;/h3&gt;
&lt;p&gt;Things always happen for a reason. If you know the cause and effect, and if you can reproduce it, you’ll feel less stressed.&lt;/p&gt;
&lt;p&gt;Let’s say for example you have an error message. You know you did something wrong but you don’t know what caused the error. What you can do is to look for the cause. When you find the cause, you can fix the error. In future, when you chance upon the same error, you’ll know what caused the error, and you can go back to fix it.&lt;/p&gt;
&lt;h3 id=&quot;3.-slow-down&quot;&gt;3. Slow down&lt;/h3&gt;
&lt;p&gt;You need to give yourself time to absorb things before they become familiar.&lt;/p&gt;
&lt;p&gt;If you don’t give yourself the time to learn, you don’t give yourself the chance to learn.&lt;/p&gt;
&lt;p&gt;You may read stuff, but you won’t be able to remember them.&lt;/p&gt;
&lt;p&gt;Slow down and make sure you understand what you’re trying to learn.&lt;/p&gt;
&lt;h3 id=&quot;4.-ask-questions&quot;&gt;4. Ask questions&lt;/h3&gt;
&lt;p&gt;People who walked the path before you have the answers you seek. They can point you in the right direction. Ask them.&lt;/p&gt;
&lt;p&gt;You may look like an idiot for a second.&lt;/p&gt;
&lt;p&gt;The good news is, you’ll only look like an idiot for that one second. If you find an answer, you will no longer be the same idiot you were a second ago. It’s worth it.&lt;/p&gt;
&lt;p&gt;If you don’t ask, then you’ll remain an idiot for longer than one second.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>5 things I learned from Infinity Wars</title>
    <link href="https://zellwk.com/blog/things-i-learned-from-infinity-wars/"/>
    <updated>2018-05-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/things-i-learned-from-infinity-wars/</id>
    <content type="html">&lt;p&gt;Infinity Wars was amazing. I recommend you watch it—even if you think the plot, the cast, or even the ending sounds silly.&lt;/p&gt;
&lt;p&gt;I learned five things from the movie. I want to share these things with you (and talk about how they relate back to life, coding, and learning).&lt;/p&gt;
&lt;p&gt;Note: there’s going to be spoilers.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;lesson-%231.-try-to-understand-people%E2%80%99s-world-views&quot;&gt;Lesson #1. Try to understand people’s world views&lt;/h2&gt;
&lt;p&gt;Before I watched Infinity Wars, I thought Thanos (the bad guy) wanted to destroy planets because he wanted power or immortality.&lt;/p&gt;
&lt;p&gt;But Thanos didn’t want power or immortality. He wanted peace.&lt;/p&gt;
&lt;p&gt;What’s surprising was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;He thought destroying half the universe will bring about peace.&lt;/li&gt;
&lt;li&gt;His conviction to his thoughts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Way back in history, Thanos experienced famine due to overpopulation on his planet. People fought over food. Nobody could think of a good solution to end the famine.&lt;/p&gt;
&lt;p&gt;Thanos thought up a possible solution—to kill half the population so nobody will go hungry again.&lt;/p&gt;
&lt;p&gt;Everyone thought Thanos was insane. Everyone except Thanos.&lt;/p&gt;
&lt;p&gt;They didn’t listen to Thanos. They didn’t even try to understand his perspective. They assumed Thanos was crazy. Now, if they tried to understand Thanos, they could, for example, convince him to go for therapy. If they succeeded, the whole Infinity war could be avoided.&lt;/p&gt;
&lt;p&gt;On the flipside, if Thanos listened to other people, he might be able to find another solution. A solution that’s way better than killing other people.&lt;/p&gt;
&lt;p&gt;This kind of “infinity war” happen around us every day.&lt;/p&gt;
&lt;p&gt;Designers and developers don’t bother to understand each other. Clients and project managers refuse to understand designers and developers. Heck, even developers don’t bother to talk to each other. 😓&lt;/p&gt;
&lt;p&gt;What if we tried to understand each other better? Can we resolve our differences and have happy working relationships?&lt;/p&gt;
&lt;p&gt;Can we treat each other &lt;a href=&quot;https://youtu.be/XnDGJrvEzJg&quot;&gt;as humans&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;We can. It’s up to us to make a difference.&lt;/p&gt;
&lt;h2 id=&quot;lesson-%232.-if-you-want-something-to-happen%2C-you-need-to-have-the-will-and-ability-to-see-it-through&quot;&gt;Lesson #2. If you want something to happen, you need to have the will and ability to see it through&lt;/h2&gt;
&lt;p&gt;Thanos made the entire universe his enemy on his quest to kill half the universe. He faced warriors from everywhere—including the Avengers—to secure the 6 infinity gemstones.&lt;/p&gt;
&lt;p&gt;You think it’s easy?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;But Thanos secured all 6 infinity gemstones anyway.&lt;/p&gt;
&lt;p&gt;Like Thanos, you will face obstacles in life. The question is, do you have the will and ability to overcome these obstacles?&lt;/p&gt;
&lt;p&gt;If you want to learn JavaScript, can you overcome the fear, confusion, and overwhelm that’s stopping you? Can you &lt;a href=&quot;https://zellwk.com/blog/finding-time-to-learn&quot;&gt;find the time to learn&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;What obstacles are standing between you and your dreams? Can you get the will and ability to realize your dreams?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How hard will you push yourself to make your dreams a reality?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;lesson-3.-get-your-priorities-right&quot;&gt;Lesson 3. Get your priorities right&lt;/h2&gt;
&lt;p&gt;Thanos faced a huge obstacle when he tried to get the Soul stone on Boromir. This obstacle was so huge that I would have faltered.&lt;/p&gt;
&lt;p&gt;To get the Soul stone, Thanos had to sacrifice a person dear to him. He loved Gamora. He cried. But he sacrificed Gamora anyway.&lt;/p&gt;
&lt;p&gt;This shows that Thanos prioritized his dream over his love for Gamora. He even prioritized his dream over Gamora’s life.&lt;/p&gt;
&lt;p&gt;Sometimes you will have to make tough choices between things that are dear to you. How will you choose?&lt;/p&gt;
&lt;p&gt;You can only choose when your priorities are clear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There shouldn’t be two things that are equally important. Something is ranked higher. Know what you want and prioritize accordingly.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;lesson-4.-don%E2%80%99t-lose-control-of-your-emotions&quot;&gt;Lesson 4. Don’t lose control of your emotions&lt;/h2&gt;
&lt;p&gt;Dr. Strange went to the future before the Avengers ambushed Thanos on Titan (Thanos’s home planet). He wanted to find a way to win.&lt;/p&gt;
&lt;p&gt;He found one success in 14 million tries.&lt;/p&gt;
&lt;p&gt;They had a plan.&lt;/p&gt;
&lt;p&gt;The plan was to make Thanos sleep with Mantis’s ability. The team will remove Thanos’s Infinity Gauntlet when he’s asleep.&lt;/p&gt;
&lt;p&gt;They almost succeeded.&lt;/p&gt;
&lt;p&gt;But Star Lord (Peter Quill) fucked things up.&lt;/p&gt;
&lt;p&gt;Peter lost control of his emotions when discovered Thanos killed Gamora. He punched Thanos’s face in anger while he was supposed to help the team remove Thanos’s gauntlet. The punches woke Thanos, and Thanos annihilated the team.&lt;/p&gt;
&lt;p&gt;Thanks, Star Lord. Half the universe died because of you.&lt;/p&gt;
&lt;p&gt;There’s an important lesson to take away here.&lt;/p&gt;
&lt;p&gt;Don’t ever lose control of your emotions. Keep them in check. Do what you’re supposed to do, especially when you’re in a pinch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you lose control, you may suffer consequences you’ll regret.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;lesson-5.-move-on&quot;&gt;Lesson 5. Move on&lt;/h2&gt;
&lt;p&gt;Strange told Iron Man that he’d prioritize the Time stone over Iron Man’s life. But Strange gave up the Time stone to save Iron Man’s life in the end.&lt;/p&gt;
&lt;p&gt;When Iron Man asked why, Strange said: “that’s the only way”.&lt;/p&gt;
&lt;p&gt;A lesson came to me at this moment. &lt;strong&gt;There is no use crying over things that have happened. Accept reality, do damage control, and move on.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few days later, I also realized that “that’s the only way” could mean that giving up the Time stone was the only way they could defeat Thanos… But well, we won’t know for sure until the next movie comes around!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Infinity Wars is a great movie. It contained many plot twists I wasn’t expecting. I’m glad I watched it, and I’m glad I could take away some life lessons from the movie.&lt;/p&gt;
&lt;p&gt;Did you enjoy the movie? Did you learn anything from the movie? I’d love to hear your thoughts. Share them with me in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Which JavaScript framework should you learn?</title>
    <link href="https://zellwk.com/blog/which-framework-to-learn/"/>
    <updated>2018-05-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/which-framework-to-learn/</id>
    <content type="html">&lt;p&gt;There are so many frameworks out there. How do you know which one to choose to learn?&lt;/p&gt;
&lt;p&gt;This video helps you answer that question.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;We’re going to do things differently in this video.&lt;/p&gt;
&lt;p&gt;I want to walk you through a few questions. For each question, I want you to pause the video and write down your answer to the question on a piece of paper. Do it before you listen to the next question.&lt;/p&gt;
&lt;p&gt;If you answer the questions, you will be able to figure out which framework you should learn, and how to start learning it.&lt;/p&gt;
&lt;h2 id=&quot;the-first-question&quot;&gt;The first question&lt;/h2&gt;
&lt;p&gt;What’s your goal? Why are you trying to learn a framework?&lt;/p&gt;
&lt;p&gt;Be honest with yourself with this answer. Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;the-second-question&quot;&gt;The second question&lt;/h2&gt;
&lt;p&gt;Which framework will help you get to your goal?&lt;/p&gt;
&lt;p&gt;List every framework that comes to mind.&lt;/p&gt;
&lt;p&gt;List any other solutions besides frameworks that come to your mind.&lt;/p&gt;
&lt;p&gt;Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;the-third-question&quot;&gt;The third question&lt;/h2&gt;
&lt;p&gt;Which framework will or solution do you want to try out the most?&lt;/p&gt;
&lt;p&gt;Pick one. Just one.&lt;/p&gt;
&lt;p&gt;List your reasons.&lt;/p&gt;
&lt;p&gt;Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;the-fourth-question&quot;&gt;The fourth question&lt;/h2&gt;
&lt;p&gt;What is stopping you from learning that framework?&lt;/p&gt;
&lt;p&gt;List everything you can think of.&lt;/p&gt;
&lt;p&gt;Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;the-fifth-question&quot;&gt;The fifth question&lt;/h2&gt;
&lt;p&gt;What’s the worst that can happen if you learn that framework?&lt;/p&gt;
&lt;p&gt;What will you do if that worst case scenario happens?&lt;/p&gt;
&lt;p&gt;Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;the-sixth-question&quot;&gt;The sixth question&lt;/h2&gt;
&lt;p&gt;What’s the smallest possible step you can do to reach the goal?&lt;/p&gt;
&lt;p&gt;Once you’re done, list five more steps.&lt;/p&gt;
&lt;p&gt;Pause the video and answer the question.&lt;/p&gt;
&lt;h2 id=&quot;that%E2%80%99s-the-end-of-all-questions.&quot;&gt;That’s the end of all questions.&lt;/h2&gt;
&lt;p&gt;At the end of the day, it doesn’t matter which framework you pick. What’s important is you fulfill the goal you’re trying to reach.&lt;/p&gt;
&lt;p&gt;Frameworks are just tools. You can use any tool you want. They don’t matter. Decide on one and move on.&lt;/p&gt;
&lt;h2 id=&quot;what-are-your-answers-to-the-questions%3F&quot;&gt;What are your answers to the questions?&lt;/h2&gt;
&lt;p&gt;I’d love to hear your answers to the questions above. If you like to, please share them with me in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Finding time to learn</title>
    <link href="https://zellwk.com/blog/finding-time-to-learn/"/>
    <updated>2018-05-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/finding-time-to-learn/</id>
    <content type="html">&lt;p&gt;You know learning is important. You want to do it, but you can’t seem to find the time.&lt;/p&gt;
&lt;p&gt;You’re drained after work. All you want to do is relax on the couch. On weekends, you want to spend time with friends and family.&lt;/p&gt;
&lt;p&gt;How do you find time to learn?&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;where-do-you-spend-your-time%3F&quot;&gt;Where do you spend your time?&lt;/h2&gt;
&lt;p&gt;The lack of time is often cited as the main obstacle to learning. But time isn’t the problem. &lt;strong&gt;Everyone has 24 hours. What matters is how you spend it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are four kinds of things you can spend time on:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/finding-time/quadrants.jpg&quot; alt=&quot;The four quadrants&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Quadrant 1 contains things that are important and urgent. These can be work-related things with a deadline. They can things that throw you into a crisis mode.&lt;/p&gt;
&lt;p&gt;Quadrant 2 contains things that are important, but not urgent. You don’t have a need to do these things immediately, but if you do them, your life can get significantly better. Learning is often in the second quadrant.&lt;/p&gt;
&lt;p&gt;Quadrant 3 contains things that are not important but urgent. They don’t affect your life much if you don’t do them. You want to reduce activities in Quadrant 3. One example is keeping up with Twitter.&lt;/p&gt;
&lt;p&gt;Quadrant 4 contains things that are not important and not urgent. You don’t want to do these things if possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inspect yourself. Where do you spend most of your time?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally, you want to spend most of your time in Quadrants 1 or 2. If you don’t, ask yourself why. Why are you spending so much time in Quadrants 3 and 4?&lt;/p&gt;
&lt;h2 id=&quot;what-are-your-priorities%3F&quot;&gt;What are your priorities?&lt;/h2&gt;
&lt;p&gt;How do you want your life to go?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important work is work that directs your life towards the direction you want to go. Everything else is a distraction.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t hang out with people that sap your energy. That’s time in Quadrant 4. Spend time with people who recharge you so you can find the energy to do Quadrant 1 or 2 stuff.&lt;/p&gt;
&lt;p&gt;Don’t work overtime at a job you hate. That’s time in Quadrant 3 because the work doesn’t help you get to where you want to be.&lt;/p&gt;
&lt;p&gt;Don’t work overtime for a job you love. That might be in Quadrant 1, you might love your job, but you might get burned out. &lt;a href=&quot;https://blog.usejournal.com/just-leave-no-job-is-worth-burning-out-for-33b5644942d7&quot;&gt;No job is worth burning out for&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audit your life and make sure you spend time on things that are important to you.&lt;/strong&gt; If you don’t have enough time, you need to cut back. You might even need to cut down on work. Grace, a student who enrolled in Learn JavaScript, took a pay cut to learn. Read why she &lt;a href=&quot;https://medium.com/@graceaesnow/why-ive-taken-a-massive-pay-cut-to-study-front-end-design-development-91fd663a0dc6&quot;&gt;did that here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: read &lt;a href=&quot;https://www.amazon.com/Habits-Highly-Effective-People-Powerful-ebook/dp/B01069X4H0/ref=mt_kindle?_encoding=UTF8&amp;amp;me=&quot;&gt;the 7 habits of highly effective people&lt;/a&gt; to find out more about the four quadrants.&lt;/p&gt;
&lt;h2 id=&quot;finding-time-despite-important-commitments&quot;&gt;Finding time despite important commitments&lt;/h2&gt;
&lt;p&gt;If you have more commitments, you have less time for yourself. But these commitments do not have to prevent you from learning.&lt;/p&gt;
&lt;p&gt;You can find time despite your commitments.&lt;/p&gt;
&lt;p&gt;How? Two ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Focus on what’s most important&lt;/li&gt;
&lt;li&gt;Block out time for learning&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;focus-on-what%E2%80%99s-important&quot;&gt;Focus on what’s important&lt;/h3&gt;
&lt;p&gt;You don’t have to learn everything at once. You don’t need to have the latest information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learn what is important to get you to the next stage. Other things can wait.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, I want to learn Vue. I also want to learn to draw. But I don’t spend time on Vue or drawing because they’re not important to me right now.&lt;/p&gt;
&lt;p&gt;I spend time on marketing, writing, and developing quality courses instead.&lt;/p&gt;
&lt;h3 id=&quot;block-out-time-for-learning&quot;&gt;Block out time for learning&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Set aside a time for learning. Let no one distract you. Not even yourself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Communicate with your spouse (or family members) if they disagree with you. You need their support. You need them to leave you alone while you learn.&lt;/p&gt;
&lt;p&gt;If you don’t have their support yet, you need to spend time with them until you have their support. Sean McCabe explains how you can do it in &lt;a href=&quot;http://overlapbook.com/&quot;&gt;Overlap&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;How you navigate yourself through life depends on the knowledge you have in your brain. They’re your weapons.&lt;/p&gt;
&lt;p&gt;Learn something every day.&lt;/p&gt;
&lt;p&gt;You can find time to learn by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cutting time from activities that aren’t important&lt;/li&gt;
&lt;li&gt;Focus on learning what’s important&lt;/li&gt;
&lt;li&gt;Blocking out time for learning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How are you going to find time to learn? I’d love to hear your thoughts. Let me know in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Which should you learn first? Frameworks or JavaScript?</title>
    <link href="https://zellwk.com/blog/frameworks-vs-javascript/"/>
    <updated>2018-05-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/frameworks-vs-javascript/</id>
    <content type="html">&lt;p&gt;One question you may have when thinking about learning JavaScript is whether you should learn JavaScript first or frameworks first.&lt;/p&gt;
&lt;p&gt;You may have heard both sides of the argument.&lt;/p&gt;
&lt;p&gt;If you learn JavaScript first, you’ll learn the basics, but it might bit slower, and it might be abit more painful before you can build components.&lt;/p&gt;
&lt;p&gt;If you learn frameworks first, you’ll be able to use frameworks, and you’ll be able to build things quicker compared to using JavaScript.&lt;/p&gt;
&lt;p&gt;Which one should you choose?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;From a learning perspective, &lt;strong&gt;it doesn’t matter whether what you choose. You can learn JavaScript first or you can learn frameworks first. What matters is you want to learn it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you want to learn something, you’ll get curious and you’ll want to try things out. When you try things out, you’ll figure out what things work and what doesn’t. That’s the learning process.&lt;/p&gt;
&lt;h2 id=&quot;is-one-better-than-the-other%3F&quot;&gt;Is one better than the other?&lt;/h2&gt;
&lt;p&gt;Yes. It’s better to learn JavaScript first.&lt;/p&gt;
&lt;p&gt;Frameworks are built on top of JavaScript. When people write tutorials and articles for frameworks, they usually assume you have some JavaScript knowledge. If you don’t have the required knowledge, you won’t understand the articles.&lt;/p&gt;
&lt;p&gt;Even if you can get what they say, you won’t be able to reproduce what they are saying because your foundation isn’t strong enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No amonut of googling for “better articles” will help you bridge the gap. The only thing you can do is increase your fundamentals knowledge&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;That means you need to learn JavaScript sooner or later.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;It doesn’t matter whether you want to learn frameworks first or JavaScript first. If you want to become a frontend developer who knows JavaScript and frameworks, you will need to learn JavaScript sooner or later.&lt;/p&gt;
&lt;p&gt;Don’t beat yourself up if you cannot understand documentation or articles about frameworks. It means your fundamentals aren’t strong enough yet. Go improve your fundamentals and try again.&lt;/p&gt;
&lt;p&gt;If you need help with JavaScript, I have a course that can help. It’s called Learn JavaScript. You can check it out at &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;learnjavascript.today&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Results of the restructure</title>
    <link href="https://zellwk.com/blog/restructure-results/"/>
    <updated>2018-05-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/restructure-results/</id>
    <content type="html">&lt;p&gt;A month ago I told you I made a major decision for Learn JavaScript—to restructure the course materials I created—and I’m here to update you on the results!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;
&lt;p&gt;The results were excellent. It was worth spending a more than a month to restructure the contents I had. I cleaned up the modules (made them more concise) and placed them in an order that beginners can understand easily.&lt;/p&gt;
&lt;p&gt;Here’s what the current structure looks like.&lt;/p&gt;
&lt;p&gt;First of all, we go through JavaScript and it’s ecosystem to help beginners understand what JavaScript is and the different terminologies that are used. We get a big overview here.&lt;/p&gt;
&lt;p&gt;Then, we dive into the basics, even to the point where we link the JavaScript file to the HTML file.&lt;/p&gt;
&lt;p&gt;Then, we build some components.&lt;/p&gt;
&lt;p&gt;Then, we go into more advanced basics, then build components; learn more basics, build more components; and so on.&lt;/p&gt;
&lt;p&gt;This process works out really well.&lt;/p&gt;
&lt;p&gt;Before the restructure, One student, Thomas, said that module 2 contained too much theory. He could understand the concepts but can’t see how a specific concept was useful.&lt;/p&gt;
&lt;p&gt;After the restructure, he felt the knowledge was smooth. He was able to complete components without looking at the source code. He even started to experiment with different code blocks. This is a good sign because it shows Thomas is really learning JavaScript through the course materials.&lt;/p&gt;
&lt;p&gt;Another student, Damian, said that every module in this course is a gem; and they have done wonders for his knowledge and confidence.&lt;/p&gt;
&lt;p&gt;These are two feedback from students who have taken Learn JavaScript, and this is why I feel the restructure has gone well.&lt;/p&gt;
&lt;h2 id=&quot;a-lesson-to-share-with-you&quot;&gt;A lesson to share with you&lt;/h2&gt;
&lt;p&gt;When you make a decision, you always have a reason.&lt;/p&gt;
&lt;p&gt;When you look back at this decision, you know you chose correctly if the results align with your reason.&lt;/p&gt;
&lt;p&gt;This reason doesn’t need to be countable or tangible, like money. It can be a gut feeling too. For Learn JavaScript, what was important for me was to ensure every student learns JavaScript without getting overwhelmed by the process.&lt;/p&gt;
&lt;p&gt;Getting the structure down right is the most important part of all—even more important than completing the course.&lt;/p&gt;
&lt;p&gt;That’s why I went back to restructure the course, and since students felt the new structure was helpful, I felt the time spent restructuring was worth it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I&#39;m going to teach authentication</title>
    <link href="https://zellwk.com/blog/authentication-in-learn-js/"/>
    <updated>2018-05-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/authentication-in-learn-js/</id>
    <content type="html">&lt;p&gt;This article is a response to &lt;a href=&quot;https://zellwk.com/blog/should-i-teach-authentication-in-learn-javascript&quot;&gt;a question I asked last week&lt;/a&gt;. I wanted to know if I should teach authentication in Learn JavaScript. Since I’m building Learn JavaScript for students like you, I wanted to hear your opinions.&lt;/p&gt;
&lt;p&gt;I read through a hundred responses.  I gave myself a week to think through it. And I came to a conclusion.&lt;/p&gt;
&lt;p&gt;I’m going to teach authentication in a separate course.&lt;/p&gt;
&lt;p&gt;I want to share why I made this conclusion.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;why-i%E2%80%99m-teaching-authentication-in-a-separate-course&quot;&gt;Why I’m teaching authentication in a separate course&lt;/h2&gt;
&lt;p&gt;To teach authentication, I need to teach students how to create servers. This means I’ll move students away from learning JavaScript to learning about servers.&lt;/p&gt;
&lt;p&gt;Anything that moves students away from the product’s promise—to help you get so good JavaScript that you’ll be able to build things from scratch—is a no go.&lt;/p&gt;
&lt;p&gt;Here’s why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students may get overwhelmed&lt;/li&gt;
&lt;li&gt;Students need to learn fundamentals&lt;/li&gt;
&lt;li&gt;There’s a lot to teach already&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;students-may-get-overwhelmed&quot;&gt;Students may get overwhelmed&lt;/h2&gt;
&lt;p&gt;Many students who enroll in Learn JavaScript are new to JavaScript. They don’t know how to even use JavaScript. Most of them aren’t ready to learn about servers yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/cory.png&quot; alt=&quot;Reply from Cory&quot;&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/abbey.png&quot; alt=&quot;Reply from Abbey&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;I don’t want to overwhelm students by adding things they don’t need right now.&lt;/strong&gt; I want them to focus on JavaScript. I want them to be great at JavaScript. Other things can wait.&lt;/p&gt;
&lt;p&gt;Some people responded with opinions that match my thoughts. For example, Nick said that I shouldn’t distract learners. I should reduce complexity.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/nick.png&quot; alt=&quot;Reply from Nick&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Another example. Klaus said his enemy to learning is picking up too many subjects.&lt;/p&gt;
&lt;p&gt;As a teacher, I’m here to help reduce complexity and increase focus so you can learn things well. I shouldn’t be adding complexity unless necessary.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/klaus.png&quot; alt=&quot;Reply from Klaus&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;It’s important to teach the right things, in the right order, at the right time.&lt;/strong&gt; If I teach the right things in the right order at the right time, people learn.&lt;/p&gt;
&lt;p&gt;I can teach authentication in Learn JavaScript, but I’ll be teaching it at the wrong time.&lt;/p&gt;
&lt;h2 id=&quot;students-need-to-learn-fundamentals&quot;&gt;Students need to learn fundamentals&lt;/h2&gt;
&lt;p&gt;Some people said I can create a server, then teach students to use the server I made. This way, I can teach authentication without diving deep into servers.&lt;/p&gt;
&lt;p&gt;I disagree.&lt;/p&gt;
&lt;p&gt;It’s not enough to teach students to use a server I made. They need to learn about the server environment. They need to learn to create their own servers. Students need to learn fundamentals, not abstractions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If they learn abstractions, they won’t understand what’s goes beneath the hood. When they don’t understand what goes beneath the hood, they think it’s magic. When they think it’s magic, they’ll get locked in. They’ll be afraid to leave it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve seen this over and over with students who learn Bootstrap before CSS. They’ll use Bootstrap for every project, even if they shouldn’t use it. They cannot live without a CSS framework.&lt;/p&gt;
&lt;p&gt;But students who learn CSS fundamentals can do without frameworks. They’re confident in their abilities. They can use a framework if they need to, but they’re not locked in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I want my students to feel confident in their abilities.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is why I focus on fundamentals. Shahar echoes my thoughts. He’s a student who went enrolled in Learn JavaScript.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/shahar.png&quot; alt=&quot;Reply from Shahar&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This is also why I’m not going to make a server for my students. If I teach servers, I’ll teach students to create their servers (which is a huge topic).&lt;/p&gt;
&lt;h2 id=&quot;we-have-a-lot-to-cover-already.&quot;&gt;We have a lot to cover already.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;To learn Ajax, we need to learn about XHR and Fetch.&lt;/strong&gt; These two technologies let us perform Ajax operations.&lt;/p&gt;
&lt;p&gt;To use XHR, we need to know about &lt;a href=&quot;https://zellwk.com/blog/callbacks&quot;&gt;callbacks&lt;/a&gt;. To use Fetch, we need to know about &lt;a href=&quot;https://zellwk.com/blog/js-promises&quot;&gt;JavaScript Promises&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also want to teach Async/await. There are nuances in async/await that are not immediately obvious. I want to dedicate enough lessons to uncover these nuances.&lt;/p&gt;
&lt;p&gt;We already have five topics to dive into here—XHR, Fetch, Callbacks, Promises, and Async/await. And we’re not done. There’s more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We need to know how to read API documentation&lt;/strong&gt;. If we know how to read documentation, we can make any request we want.&lt;/p&gt;
&lt;p&gt;To read documentation, we need to understand requests and responses. We need to know what makes up a request. We also need to know what makes up a response.&lt;/p&gt;
&lt;p&gt;We need to be able to set the correct method, the correct headers. We also need to know how to format the request body. We also need to understand &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;CURL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We need to know how to handle Ajax errors&lt;/strong&gt;. I hope I don’t need to explain why. Error handling is important. We don’t want to tell our users “something went wrong” and leave them in the lurch.&lt;/p&gt;
&lt;p&gt;To handle errors, we need to know when errors happen. We also need to know how to deal with them when we use XHR and Fetch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We need to know how to handle complicated requests&lt;/strong&gt;. What if we need three different resources at once? What if we receive a paginated resource? I want to teach students how to work through these real-world situations.&lt;/p&gt;
&lt;p&gt;Here’s an outline on what I’m teaching on Ajax. There’s so many things to talk about that I had to break it into two modules!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/how-im-teaching-authentication/ajax.png&quot; alt=&quot;2 modules, 20+ lessons on Ajax&quot;&gt;
  &lt;figcaption&gt;2 modules, 20+ lessons on Ajax&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, there’s already a lot to learn about Ajax even if I exclude authentication.&lt;/p&gt;
&lt;p&gt;But since authentication is important, I’ll also cover some authentication.&lt;/p&gt;
&lt;h2 id=&quot;what-i%E2%80%99m-covering-about-authentication&quot;&gt;What I’m covering about Authentication&lt;/h2&gt;
&lt;p&gt;You’ll learn how to perform basic authentication with XHR and Fetch. You’ll also learn how to perform OAuth authentication if you have an access token.&lt;/p&gt;
&lt;p&gt;These are the fundamentals you need to know. They’re part of JavaScript.&lt;/p&gt;
&lt;p&gt;You’ll also learn JSONP to use APIs that don’t support XHR and Fetch. JSONP is an older technology, but it’s an important one to understand if you don’t have access to a server.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I want my students to learn. That means I need to teach the right things in the right order at the right time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I can teach authentication in Learn JavaScript if I force it. But it’ll be in the wrong order. It’ll also be at the wrong time.&lt;/strong&gt; That’s why I’m going to create a separate course.&lt;/p&gt;
&lt;p&gt;I’ll tell you more about the authentication course when I complete Learn JavaScript.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>New CSS features that are changing web design</title>
    <link href="https://zellwk.com/blog/https:/www.smashingmagazine.com/2018/05/future-of-web-design/"/>
    <updated>2018-05-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.smashingmagazine.com/2018/05/future-of-web-design/</id>
    <content type="html">&lt;p&gt;There was a time when web design got monotonous. Designers and developers built the same kinds of websites over and over again, so much so that we were mocked by people in our own industry for creating only two kinds of websites:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://res.cloudinary.com/indysigner/image/upload/v1525708189/which-one-of-the-two-possible-websites-are-you-currently-designing_hxjfnc.png&quot; alt=&quot;A tweet by Jon Gold asking: “which one of the two possible websites are you currently designing?”&quot;&gt;
  &lt;figcaption&gt;On Twitter, Jon Gold is asking: “which one of the two possible websites are you currently designing?”&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Is this the limit of what our “creative” minds can achieve? This thought sent an incontrollable pang of sadness into my heart.&lt;/p&gt;
&lt;p&gt;I don’t want to admit it, but maybe that was the best we could accomplish back then. Maybe we didn’t have suitable tools to make creative designs. The demands of the web were evolving quickly, but we were stuck with ancient techniques like floats and tables.&lt;/p&gt;
&lt;p&gt;Today, the design landscape has changed completely. We’re equipped with new and powerful tools — CSS Grid, CSS custom properties, CSS shapes and CSS writing-mode, to name a few — that we can use to exercise our creativity.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Is your code good enough?</title>
    <link href="https://zellwk.com/blog/code-quality/"/>
    <updated>2018-05-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/code-quality/</id>
    <content type="html">&lt;p&gt;Do you worry about the quality of your code? Are you afraid of writing bad code? If someone reads your code and they say it sucks, how would it make you feel?&lt;/p&gt;
&lt;p&gt;Would you feel like shit?&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;stop-tying-your-self-worth-to-your-code&quot;&gt;Stop tying your self-worth to your code&lt;/h2&gt;
&lt;p&gt;If you feel like shit, it’s proof that you’re tying your self-worth to the quality of your code.&lt;/p&gt;
&lt;p&gt;Self worth and code quality are two different things. Don’t mix them up. Don’t let your self worth be governed by the quality of your code.&lt;/p&gt;
&lt;p&gt;Learn to have fun and take things lightly. You do better work when you’re having fun.&lt;/p&gt;
&lt;p&gt;If you code sucks, that’s fine, because you can get better overtime.&lt;/p&gt;
&lt;h2 id=&quot;there-is-no-perfect-code&quot;&gt;There is no perfect code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Messy code that works is better than clean code that doesn’t work.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Focus on making your code work first. Don’t worry about the final outcome. Have fun getting your hands dirty, creating things, and figuring things out.&lt;/p&gt;
&lt;p&gt;You start the cleanup process only when the code works exactly like what you wanted to. This is called refactoring. It’s a process of organizing code.&lt;/p&gt;
&lt;p&gt;Creation and organization are different processes. You don’t have the answers when you create, so it’s always going to be messy. Learn to live with the mess. Learn to have fun with the mess.&lt;/p&gt;
&lt;p&gt;In organization mode (refactoring), we clean code up. We make it easy to read, easy to maintain, easy to make changes; we even want to make it pretty!&lt;/p&gt;
&lt;p&gt;When you start out, don’t create and organize at the same time. You’ll get stuck. Always focus on creation first. Refactor only when you’re done creating.&lt;/p&gt;
&lt;p&gt;When you get better, you might be able to do creation and organization together. But that takes a lot of work.&lt;/p&gt;
&lt;h2 id=&quot;trust-the-process&quot;&gt;Trust the process&lt;/h2&gt;
&lt;p&gt;Create first. Then organize.&lt;/p&gt;
&lt;p&gt;Focus on making things work. Don’t worry about the perfect code; you can always clean up later. Have fun. You’ll get better overtime.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Should I teach authentication in Learn JavaScript?</title>
    <link href="https://zellwk.com/blog/should-i-teach-authentication-in-learn-javascript/"/>
    <updated>2018-05-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/should-i-teach-authentication-in-learn-javascript/</id>
    <content type="html">&lt;p&gt;I ran into a problem while writing Learn JavaScript. This problem is about teaching Ajax.&lt;/p&gt;
&lt;p&gt;I’m deciding between three possible solutions right now. Since I am making Learn JavaScript for people like you, I want to hear your thoughts before I decide.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;what%E2%80%99s-the-problem-with-teaching-ajax%3F&quot;&gt;What’s the problem with teaching Ajax?&lt;/h2&gt;
&lt;p&gt;Let’s iron out some technical terms so we’re on the same page.&lt;/p&gt;
&lt;p&gt;Ajax stands for asynchronous JavaScript and XML. It is a term often used to say:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get (or send) some data to the server&lt;/li&gt;
&lt;li&gt;Wait for the server to send something back&lt;/li&gt;
&lt;li&gt;Update the page without refreshing it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The data you send over to a server is called a &lt;strong&gt;request&lt;/strong&gt;. The data you get back from a server is called a &lt;strong&gt;response&lt;/strong&gt;. The action (sending a request and getting a response) is called a &lt;strong&gt;fetch&lt;/strong&gt;. The thing you want to fetch is called a &lt;strong&gt;resource&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We fetch resources through APIs. An API stands for application programming interface. It defines a set of rules for your program to talk to theirs.&lt;/p&gt;
&lt;p&gt;Here’s an example. Let’s say we want to create an app that searches Twitter for a keyword. To do so, we need to connect to Twitter and get a list of tweets that match the search.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here’s the problem—to connect to Twitter, we need to authenticate ourselves via OAuth.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;Authentication is a process to verify you are who you claim to be. There are two main forms of authentication—basic authentication and OAuth.&lt;/p&gt;
&lt;p&gt;Basic authentication is simple. The server checks if your username and password you supplied are correct. If the credentials (username and password) are correct, it gives you access to the API.&lt;/p&gt;
&lt;p&gt;OAuth is more complicated. When we work with OAuth, we send our username and password to the server first. The server then checks if our credentials are correct. If our credentials are correct, they issue us an access token. We will use this access token to login.&lt;/p&gt;
&lt;p&gt;To visualize how OAuth works, imagine you work at a company that issues identity passes. You can use these passes to get through security checkpoints. The access token is akin to the identity pass.&lt;/p&gt;
&lt;h2 id=&quot;why-is-authentication-cumbersome%3F&quot;&gt;Why is authentication cumbersome?&lt;/h2&gt;
&lt;p&gt;There is a problem with JavaScript—it is not secure. Anyone who visits your website can see the JavaScript you write.&lt;/p&gt;
&lt;p&gt;If you authenticate yourself with JavaScript, anyone can steal your credentials. This is bad. &lt;strong&gt;We don’t want anyone to steal our credentials.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If someone gets their hands on our credentials, they can cause damage beyond what we can imagine. For example, I received a $60,000 bill because my friend leaked my Amazon access token. 😱😱😱!&lt;/p&gt;
&lt;p&gt;Lucky for me, I didn’t have to pay. Amazon was kind enough to waive off the charges.&lt;/p&gt;
&lt;p&gt;The moral of the story is: protect your credentials. Don’t let anyone steal it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To protect our credentials, we need to authenticate ourselves through our own server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Therein lies the problem.&lt;/p&gt;
&lt;h2 id=&quot;should-i-show-you-how-to-create-a-server-in-learn-javascript%3F&quot;&gt;Should I show you how to create a server in Learn JavaScript?&lt;/h2&gt;
&lt;p&gt;I made Learn JavaScript to help students become confident with JavaScript. When they complete the course, they will be able to build components from scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If I talked about authentication (and servers), I move students away from the core of the course—JavaScript—to security.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Security, servers, and JavaScript. These are three different beasts.&lt;/p&gt;
&lt;p&gt;I tried drafting out an outline on authentication and APIs. It contained topics like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setting up a server&lt;/li&gt;
&lt;li&gt;Authenticating with basic authentication&lt;/li&gt;
&lt;li&gt;Authenticating with OAuth&lt;/li&gt;
&lt;li&gt;Creating applications that can sign in with third-party services with OAuth (like “sign in with twitter”).&lt;/li&gt;
&lt;li&gt;Protecting passwords&lt;/li&gt;
&lt;li&gt;REST APIs&lt;/li&gt;
&lt;li&gt;Graph APIs&lt;/li&gt;
&lt;li&gt;CORS&lt;/li&gt;
&lt;li&gt;JSON Web Tokens&lt;/li&gt;
&lt;li&gt;Session-based authentication&lt;/li&gt;
&lt;li&gt;Persistent authentication&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since authentication is about security, should I still teach authentication in Learn JavaScript?&lt;/p&gt;
&lt;p&gt;I see three possible choices.&lt;/p&gt;
&lt;h2 id=&quot;three-possible-choices&quot;&gt;Three possible choices&lt;/h2&gt;
&lt;p&gt;The three choices are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Skip authentication&lt;/li&gt;
&lt;li&gt;Teach authentication regardless&lt;/li&gt;
&lt;li&gt;Teach authentication in a separate course&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;option-1%3A-skip-authentication&quot;&gt;Option 1: skip authentication&lt;/h3&gt;
&lt;p&gt;With Option 1, we will skip the authentication process completely. We will talk about what is required for proper authentication, but we won’t dive into details or code.&lt;/p&gt;
&lt;p&gt;The pros are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students can focus on JavaScript&lt;/li&gt;
&lt;li&gt;Students can use APIs that do not require authentication&lt;/li&gt;
&lt;li&gt;Students can use APIs that use JSONP&lt;/li&gt;
&lt;li&gt;Students will understand authentication requires server-side skills&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cons are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students will not understand authentication completely&lt;/li&gt;
&lt;li&gt;Students will not understand CORS completely&lt;/li&gt;
&lt;li&gt;Students cannot use APIs that require OAuth. Examples of such APIs include Twitter, Pinterest, and Dribbble.&lt;/li&gt;
&lt;li&gt;Students cannot setup their own servers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;option-2%3A-teach-authentication-regardless&quot;&gt;Option 2: Teach authentication regardless&lt;/h3&gt;
&lt;p&gt;With Option 2, we will cover authentication in Learn JavaScript. This means everything I mentioned above in the current curriculum.&lt;/p&gt;
&lt;p&gt;The pros are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students will have a firm grasp of Ajax and CORS&lt;/li&gt;
&lt;li&gt;Students will be able to authenticate with any API they desire&lt;/li&gt;
&lt;li&gt;Students will be able to setup their own servers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cons are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students will be forced to learn server-related code, even if they are not ready for it. This will create overwhelm.&lt;/li&gt;
&lt;li&gt;Students get veered off track to another topic—servers and authentication—in the middle of the course.&lt;/li&gt;
&lt;li&gt;The completion date for Learn JavaScript will be pushed back.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;option-3%3A-teach-authentication-in-a-separate-course&quot;&gt;Option 3: Teach authentication in a separate course&lt;/h3&gt;
&lt;p&gt;With the third option, we will cover the things I mentioned—authentication, creating servers, securing passwords, signing in with third-party services—in a separate course.&lt;/p&gt;
&lt;p&gt;The pros are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Students can dedicate themselves to learning JavaScript&lt;/li&gt;
&lt;li&gt;Students will not be forced to learn about servers.&lt;/li&gt;
&lt;li&gt;Students can opt-in into another course if they’re ready for servers, and want to learn about authentication.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cons are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enrolling in another course means students will need to invest another sum of money.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-should-i-choose%3F&quot;&gt;What should I choose?&lt;/h2&gt;
&lt;p&gt;I have my opinions, but I want to hear from you before I decide.&lt;/p&gt;
&lt;p&gt;If you are a Learn JavaScript student. Please let me know your thoughts through our Slack group. If you are not a Learn JavaScript student, please &lt;a href=&quot;https://zellwk.com/contact&quot;&gt;send me an email&lt;/a&gt; or leave your comment in the comments section below.&lt;/p&gt;
&lt;p&gt;Waiting to hear back from you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Are you a real developer?</title>
    <link href="https://zellwk.com/blog/real-dev/"/>
    <updated>2018-04-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/real-dev/</id>
    <content type="html">&lt;p&gt;Has anyone asked you whether you are a real developer?&lt;/p&gt;
&lt;p&gt;Has anyone ever told you in your face that you’re not a real developer?&lt;/p&gt;
&lt;p&gt;The important part is not what they think. It’s what you think.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;do-you-feel-like-a-real-developer%3F&quot;&gt;Do you feel like a real developer?&lt;/h2&gt;
&lt;p&gt;If you don’t, do you let that feeling stop you from becoming more “real”, whatever real may mean to you.&lt;/p&gt;
&lt;p&gt;Do you try to get better? Or do you back off?&lt;/p&gt;
&lt;p&gt;What you choose determines your path. Choose wisely.&lt;/p&gt;
&lt;p&gt;Are you going to learn more and become better? Or give up?&lt;/p&gt;
&lt;h2 id=&quot;my-thoughts-on-this-question&quot;&gt;My thoughts on this question&lt;/h2&gt;
&lt;p&gt;You are a real developer if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can code&lt;/li&gt;
&lt;li&gt;You put something out onto the web&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;You may not be a very good developer yet, but that doesn’t mean you’re not real.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ability and attitude are different things.&lt;/p&gt;
&lt;p&gt;If you lack the ability, if you don’t know enough CSS or JavaScript, you can learn them.&lt;/p&gt;
&lt;p&gt;But if you get defeated mentally because someone else says you’re not real, it will be difficult for you to stay in this field. That’s because nobody knows everything. We’re all frauds. We keep learning.&lt;/p&gt;
&lt;p&gt;A frontend developer that doesn’t know backend doesn’t make him any less a developer. Likewise for a backend developer who doesn’t know enough CSS; she’s still a developer too. We’re all real.&lt;/p&gt;
&lt;p&gt;If you’re not good enough yet, work on your craft. Learn the fundamentals. Learn CSS; learn JavaScript; learn HTML; learn accessibility; learn UX; learn whatever you need to learn to make what you want.&lt;/p&gt;
&lt;p&gt;If you’re already good enough, continue learning, because learning doesn’t end. Build better things. Contribute back to the society in your own way—through building things, through teaching, or other means.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Avengers, Star Wars, and learning code</title>
    <link href="https://zellwk.com/blog/avengers-and-learning/"/>
    <updated>2018-04-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/avengers-and-learning/</id>
    <content type="html">&lt;p&gt;I’m a weirdo. I’m always working (either coding or teaching you how to code). I code on during work, at night, and even on weekends. I can’t seem to separate myself from work.&lt;/p&gt;
&lt;p&gt;Recently, I learned to relax. I discovered that one of my favorite activities is to watch movies. I only watch some of them though. For example, I chase after every movie in the Marvel universe (for Avengers), but I don’t watch anything related to Star Wars.&lt;/p&gt;
&lt;p&gt;But why? Are Marvel movies better made than Star Wars? Do they contain more compelling stories? Do they have better actions and effects?&lt;/p&gt;
&lt;p&gt;Not exactly.&lt;/p&gt;
&lt;p&gt;I wanted to know why I watched some movies and not others, so I dug into my own psychology (like I said, I’m a weirdo; forgive me for doing weird things). I found a surprising reason. I can even use this reason to explain how I learned to code 😂.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-i-watch-avengers&quot;&gt;Why I watch Avengers&lt;/h2&gt;
&lt;p&gt;I watch Avengers because it is complicated 😅.&lt;/p&gt;
&lt;p&gt;I wanted to see how stories that seem irrelevant (at least to me) can come together to form a mega-story. If you don’t follow the Avengers series, the mega-story has something to do with infinity stones—superheroes from everywhere band together to protect the galaxy from the ultimate evil. (Something like that).&lt;/p&gt;
&lt;p&gt;This interest drove me to watch every movie in the Marvel universe. I watched Dr. Strange, Wonder Woman, Guardians of the Galaxy, Iron Man, Spiderman, and even Batman vs. Superman.&lt;/p&gt;
&lt;p&gt;Some movies were awesome. Others were crap, but I didn’t regret spending time (nor money) on the crappy movies. Even though they’re crap, they gave me a data point to help me piece the puzzle I wanted to solve.&lt;/p&gt;
&lt;h2 id=&quot;why-i-don%E2%80%99t-watch-star-wars&quot;&gt;Why I don’t watch Star Wars&lt;/h2&gt;
&lt;p&gt;Star Wars, revolving around Luke Skywalker and his hero’s journey didn’t appeal to me. They story seems straightforward. I could pretty much tell what’s going to happen—Luke would fail, then succeed in every movie. (Did I predict wrongly?).&lt;/p&gt;
&lt;p&gt;At this point, if you are a Star Wars fan, you may want to jump in and correct the sweeping statement I made about Star Wars.&lt;/p&gt;
&lt;p&gt;You don’t have to. I’m sure Star Wars has an interesting story too. I may enjoy it if I find time to appreciate its beauty. (Except, I’m not interested).&lt;/p&gt;
&lt;p&gt;What we’re talking about today isn’t why Avengers is better than Star Wars or the other way around. It isn’t about convincing you to watch Avengers, or me to watch Star Wars. It’s about learning.&lt;/p&gt;
&lt;h2 id=&quot;avengers-and-learning&quot;&gt;Avengers and learning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Learning becomes much easier when you’re curious about a topic.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, you won’t care if the topic is large and nebulous. You’ll find ways to chip away at it until you finally understand what it is about. You won’t care how long it takes. That’s why I try to watch every Avengers related movie whenever I can—I want to understand how everything comes together.&lt;/p&gt;
&lt;p&gt;Code is complicated too. To master CSS, you need to know over 200 CSS properties by heart. You need to know how to combine them to produce anything you want. You also need to be able to write CSS that’s maintainable and scalable.&lt;/p&gt;
&lt;p&gt;To master JavaScript, you need to know how to work with vanilla JavaScript. You need to understand DOM and Web APIs. You need to know the difference between frameworks, tools, and libraries. You need to know how to use the libraries too.&lt;/p&gt;
&lt;p&gt;If you’re a web developer, you need to know HTML, CSS, JavaScript, and Accessibility (at a minimum). You may even need to understand Node and databases if you want to make your own apps.&lt;/p&gt;
&lt;p&gt;Its hard. Let’s not kid ourselves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But it’s possible to learn these technologies. It’s possible to get good at them all. You can learn if you’re interested in them.&lt;/strong&gt; You can chip away at one small aspect every day until you’re good enough.&lt;/p&gt;
&lt;p&gt;I’m still learning every day, by the way. I’m still not an expert in all fields. I have much to learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When you are interested in a topic, you will find ways and means to get your hands on the topic.&lt;/strong&gt; For example, I missed out on Black Panther when it hit the cinemas in Singapore. I was too busy then, but I’m going to watch a DVD to help myself catch up.&lt;/p&gt;
&lt;p&gt;When I learned JavaScript, I tried to cram everything I could find into my brain. This process leaves me with a headache every time 😂, but I persisted because I wanted to understand it.&lt;/p&gt;
&lt;p&gt;CSS was simpler for me. I could understand it without too many problems, probably because I’m a visual person to begin with.&lt;/p&gt;
&lt;p&gt;Accessibility is hard. I have never tried browsing through websites without my mouse. I always need it. But I still try my best to pick it up. It may take time. But I know I can become good at accessibility. I’ll do whatever it takes to get good at it.&lt;/p&gt;
&lt;h2 id=&quot;everything-worth-learning-requires-work&quot;&gt;Everything worth learning requires work&lt;/h2&gt;
&lt;p&gt;As humans, we want to chill. If given the choice, we will all prefer to sit to watch Game of Thrones. We won’t want to reward ourselves headaches while we try to solve problems.&lt;/p&gt;
&lt;p&gt;But everything that’s worth learning requires work. When you learned to cycle, you had to practice cycling for a period of time. When you learned to swim, you also had to practice swimming for a period of time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to be good at coding, you don’t have a choice. You need to spend time coding.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;getting-mixed-up&quot;&gt;Getting mixed up&lt;/h2&gt;
&lt;p&gt;It’s okay to get things mixed up. It’s okay to get confused. I mix things up all the time.&lt;/p&gt;
&lt;p&gt;For example, some kind folks have pointed out to me that Wonder Woman, Batman, and Superman aren’t from the Marvel Universe. They’re from DC.&lt;/p&gt;
&lt;p&gt;I didn’t know that! I was expecting them to show up in Avengers somehow. But the good news is, now I know! Another mystery solved.&lt;/p&gt;
&lt;p&gt;If you don’t know something, ask. Someone may respond with the right answer. You learn.&lt;/p&gt;
&lt;p&gt;If you think you know something, talk about it. If you’re wrong, kind folks will point it out to you. You learn.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;It can be a difficult process to learn anything—especially code. But you can enjoy it if you’re interested in it.&lt;/p&gt;
&lt;p&gt;It takes time to learn. It takes work; maybe a lot of work. But you can do it. You can improve a tiny bit every day until you get good at the topic you care about.&lt;/p&gt;
&lt;p&gt;If you’re not interested in code. I suggest you stop trying to learn to code. Find something else you like instead. You’ll have an easier time there.&lt;/p&gt;
&lt;p&gt;I enjoy Avengers, coding, and business. What about you?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I switched from Sublime Text to Visual Studio Code</title>
    <link href="https://zellwk.com/blog/sublime-to-vscode/"/>
    <updated>2018-04-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/sublime-to-vscode/</id>
    <content type="html">&lt;p&gt;A student asked why I switched over from Sublime Text to Visual Studio Code, and he’s wondering whether he should switch too.&lt;/p&gt;
&lt;p&gt;Here’s a quick answer to that question.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-i-switched&quot;&gt;Why I switched&lt;/h2&gt;
&lt;p&gt;I switched from Sublime Text to Visual Studio Code because of two reasons.&lt;/p&gt;
&lt;p&gt;The first reason is because I can mouse over a function to see the parameters it requires. It gives me an insight to what the function does if I forget about it.&lt;/p&gt;
&lt;p&gt;If I want to check the source code for the function, I can click on the function while holding the &lt;code&gt;opt&lt;/code&gt; key (on a Mac), and I’ll get directed to the code itself. It helps a lot with debugging.&lt;/p&gt;
&lt;p&gt;This feature also works for variables; if I mouse over the variable &lt;code&gt;calculator&lt;/code&gt; in the example shown in the video, I see &lt;code&gt;Element&lt;/code&gt;. I can also click on the variable while holding the &lt;code&gt;opt&lt;/code&gt; key to get directed to the code as well.&lt;/p&gt;
&lt;p&gt;The second reason is because I wanted to teach people to setup a text editor that will help them learn JavaScript. Sublime Text was too much of a pain to setup for a beginner.&lt;/p&gt;
&lt;p&gt;I chanced upon Visual Studio Code while exploring, and I fell in love with how easy it is to setup. That’s why I switched. I created a &lt;a href=&quot;https://zellwk.com/blog/sublime-to-vscode/&quot;&gt;series of videos&lt;/a&gt; for you to follow along with the switch if you wish to do so.&lt;/p&gt;
&lt;p&gt;If I didn’t want to teach people JavaScript, I wouldn’t have explored Visual Studio Code, and I wouldn’t have switched. I would still be using Sublime Text.&lt;/p&gt;
&lt;h2 id=&quot;should-you-switch%3F&quot;&gt;Should you switch?&lt;/h2&gt;
&lt;p&gt;Whether you want to switch is up to you.&lt;/p&gt;
&lt;p&gt;I think a text editor is simply a tool. It doesn’t matter whether you choose Sublime Text or Visual Studio Code. What matters is it works for you.&lt;/p&gt;
&lt;p&gt;Don’t switch if you’re already happy with Sublime Text. Switch only if you’re unhappy with it.&lt;/p&gt;
&lt;p&gt;Time is limited. Spend it wisely. Spend it on things that are important.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>My experience at CSS Conf China</title>
    <link href="https://zellwk.com/blog/css-conf-china/"/>
    <updated>2018-04-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-conf-china/</id>
    <content type="html">&lt;p&gt;I had an exciting experience three weeks ago—I gave my first Chinese talk at the 4th CSS Conference in China, in Xiamen, on March 31st.&lt;/p&gt;
&lt;p&gt;I learned a lot from this experience—both about myself and about the chinese development scene—and I want share my learnings with you.&lt;/p&gt;
&lt;p&gt;Let me begin by introducing the organizer duo.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-organizers&quot;&gt;The organizers&lt;/h2&gt;
&lt;p&gt;The organizers (&lt;a href=&quot;https://twitter.com/lovevfp&quot;&gt;Yu Bo&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/gzlinyi&quot;&gt;Lin Yi&lt;/a&gt;) are a “cute” duo. “Cute” for the lack of a better word because I don’t really know how to describe them; if I excel at writing fiction, I would have done a better job. You have to live with “cute” for now.&lt;/p&gt;
&lt;p&gt;If you hung out with conference organizers before, you’ll know that organizing a conference is hard work. Many organizers stop work entirely to organize a great conference.&lt;/p&gt;
&lt;p&gt;But not these two dudes.&lt;/p&gt;
&lt;p&gt;They hold their day job—which is challenging on its own—and still manage to organize multiple conferences in China every year. In 2018 alone, they’re going to organize two more—&lt;a href=&quot;https://vue.w3ctech.com/&quot;&gt;Vue Conf&lt;/a&gt; and React Conf.&lt;/p&gt;
&lt;p&gt;This means they organize conferences in their free time. They even stay up late (till the wee hours of the night) to book flights and stuff.&lt;/p&gt;
&lt;p&gt;I’m mentioning them because I’m inspired by them. They’re older than me, but they are able to keep their energy levels high throughout the day (even late into the night). Then, they wake up early on the second day and are still filled with energy. How do they do that? On the contrary, why do I get tired so easily? (The question remains unanswered, but I’m actively searching for answers.)&lt;/p&gt;
&lt;p&gt;Another thing. They redefined what hospitality meant for me. I’ll share more about this later and why its important.&lt;/p&gt;
&lt;p&gt;But for now, on to the conference itself!&lt;/p&gt;
&lt;h2 id=&quot;the-venue&quot;&gt;The venue&lt;/h2&gt;
&lt;p&gt;The conference is held in a cinema. (Yes, the kind you watch movies at).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/cssconfchina/venue.jpg&quot; alt=&quot;Conference venue&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;The conference is held in a cinema&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I was shocked when I entered the venue. I never thought anyone would hold a conference in a cinema because films are usually shown from the control room at the back. If speakers were to give talks, their laptops need to be in the control room (or at least at the last row). How will we be able to speak without our laptops? What about live-coding, if any?&lt;/p&gt;
&lt;p&gt;The organizer duo had a creative solution. They hooked us to the control room through an Apple TV, with a router to speed up the wireless sync. As a result, we had our laptops right at the front, but we don’t have internet access. Better than not having a laptop, I guess!&lt;/p&gt;
&lt;p&gt;Um, I’m just super impressed at how they come up with creative solutions to customize the environment to their needs. My buddy, Hui Jing, improvise extremely well on the spot too. She calls it “anyhowly”. I think &lt;strong&gt;anyhowly is an awesome skill that needs to be mastered.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;my-talk&quot;&gt;My talk&lt;/h2&gt;
&lt;p&gt;It was my first Chinese talk. Naturally, I was nervous beyond hope, even though I spoke Chinese at home.&lt;/p&gt;
&lt;p&gt;My greatest worry was the translation of industry-related terms. How on earth do you translate words like components, relative units, maintainable, scalable, or even media queries?&lt;/p&gt;
&lt;p&gt;I was so nervous I sent out this tweet to help calm my nerves 😂.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;- 🛫 to China tomorrow&lt;br&gt;- 👷‍♂️ google translate like mad (from English to Chinese) on Friday&lt;br&gt;- 😱 give a talk in Chinese on Saturday&lt;br&gt;&lt;br&gt;Wish me luck! 😄&lt;/p&gt;&amp;mdash; Zell Liew 🤗 (@zellwk) &lt;a href=&quot;https://twitter.com/zellwk/status/979008645038944256?ref_src=twsrc%5Etfw&quot;&gt;March 28, 2018&lt;/a&gt;&lt;/blockquote&gt; &lt;script defer=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Luckily, there were expert translators in the speaking group. Two, in fact. Both helped to translate Vue docs from English to Chinese. They told me what words to translate and what not to. Apparently, you should not translate “media query” into chinese, because nobody would know what they mean!&lt;/p&gt;
&lt;p&gt;They even gave me a list of words to translate. (I added these words into my slides so I won’t forget about them 😂).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/cssconfchina/words.jpg&quot; alt=&quot;A list of words translated from English to Chinese&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;A list of words translated from English to Chinese&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/cssconfchina/slides.jpg&quot; alt=&quot;Slides contain both english and chinese words&quot;&gt;
  &lt;figcaption&gt;Inserting translated words into my slides to joy my memory&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Thanks to these two gentlemen, &lt;a href=&quot;https://twitter.com/zhaojinjiang&quot;&gt;勾三股四&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/_justineo&quot;&gt;justineo&lt;/a&gt; (their nicknames; chinese people have a thing with nicknames), I was able to give my talk successfully without breaking down in tears. To be precise, I felt so relieved that I was able to help another speaker with their talk! 😂&lt;/p&gt;
&lt;p&gt;How did my talk go?&lt;/p&gt;
&lt;p&gt;Well, I spoke in a mixbag of Chinese and English. Mostly chinese; I said words I couldn’t translate on the spot in English. It was an amazing experience.&lt;/p&gt;
&lt;p&gt;I learned (once again) that you don’t have to be perfect. You just need to be good enough to deliver a message you care about. Whether the &lt;a href=&quot;https://www.youtube.com/watch?v=XnDGJrvEzJg&quot;&gt;audience resonates with it is out of your hands&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hospitality-redefined&quot;&gt;Hospitality redefined&lt;/h2&gt;
&lt;p&gt;I flew in to Xiamen on Thursday; the conference talk was on a Saturday; and I flew out on Monday. If you do the calculations, you’ll realize I was given two extra days in Xiamen—Thursday and Sunday. The organizers gave it to me, no questions asked.&lt;/p&gt;
&lt;p&gt;These extra days were important to me. I asked to fly in on Thursday because I was nervous about my talk. I wanted to give myself enough time to work on it because I know I wouldn’t be able to focus on it back in Singapore. I asked to fly out on Monday because I wanted to take a day off to enjoy a city I’ve never been to.&lt;/p&gt;
&lt;p&gt;When the organizers booked the flight and hotels without asking any questions, I felt there wanted to help their guests feel at ease, which is important. I’ll elaborate in a short while.&lt;/p&gt;
&lt;p&gt;In addition to giving me two extra days to chill, they showed me around Xiamen on Sunday. I don’t know if I’m weird, but this act mattered a lot. When I visit a new city, I’m not interested in tourist attractions. What I am interested in, is people. I like to hang out with locals—organizers, volunteers, and even local developers.&lt;/p&gt;
&lt;p&gt;The hospitality they showed me made me think about the hospitality I’m showing you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you haven’t bought my books or courses, did I create enough content to help you become a better developer? If not, what else can I do?&lt;/li&gt;
&lt;li&gt;If you bought my books or courses, did I help you overcome your barriers to learning so you successfully learn the skills taught? What else can I do for you?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I struggle with these questions every day, and I always make it a point to serve you as best as I can (although I have to admit I lapse on occassions).&lt;/p&gt;
&lt;p&gt;If you have any questions, if you haves on how I can help you more, please feel free to &lt;a href=&quot;https://zellwk.com/blog/css-conf-china/&quot;&gt;let me know&lt;/a&gt; and I’ll see what I can do!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I go to a conference for two things—content and people. I’m inspired by both the content and people at CSS Conf China. The content was as amazing as any other CSS Conference elsewhere, and I’m glad I made some wonderful friends in my short trip to China.&lt;/p&gt;
&lt;p&gt;I also had an unexpected reward—kicking myself in the butt about how tired I feel everyday, and being present to how important it is to make guests (you) feel at home.&lt;/p&gt;
&lt;p&gt;It was a great trip.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/cssconfchina/group-photo.jpg&quot; alt=&quot;Group photo&quot;&gt;
  &lt;figcaption&gt;Can you spot where I am? 😁&lt;/figcaption&gt;
&lt;/figure&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I restructured Learn JavaScript</title>
    <link href="https://zellwk.com/blog/restructured-learn-javascript/"/>
    <updated>2018-04-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/restructured-learn-javascript/</id>
    <content type="html">&lt;p&gt;Hey, it’s Zell. Today I want to tell you about an update to Learn JavaScript and a big decision I made.&lt;/p&gt;
&lt;p&gt;I made a decision to restructure Learn JavaScript. That means I took whatever I wrote—about 9 chapters (and 60+ lessons)—and rewrote them in a different format.&lt;/p&gt;
&lt;p&gt;This was a difficult decision because I wanted to complete and release Learn JavaScript by July 2018. If I did the restructure I won’t be able to complete the course.&lt;/p&gt;
&lt;p&gt;Second, I’m afraid I’ll portray the image that I don’t complete projects by the deadlines I set, which in my mind, means people who invested in the preorders don’t get the products in time. I’m afraid that you’ll think badly of me if I do the restructure.&lt;/p&gt;
&lt;p&gt;But I still went ahead with it. The question is why.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;To understand why I went ahead with the restructure, we have to talk about what the previous structure was.&lt;/p&gt;
&lt;h2 id=&quot;the-previous-structure&quot;&gt;The previous structure&lt;/h2&gt;
&lt;p&gt;I created Learn JavaScript to help developers, who had problems learning JavaScript, learn JavaScript once and for all.&lt;/p&gt;
&lt;p&gt;The problem I noticed with most courses out there are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They assume some sort of knowledge which you might not have, which is why things go over your head&lt;/li&gt;
&lt;li&gt;Most courses cover only theory and not enough practical, which is why people don’t really know how to think like developers; they forget what they learned; and they don’t know how to apply what they learned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My solution is to teach you how to build twenty components, step by step. To build these twenty components, you need strong JavaScript fundamentals. That’s why I made it a point to cover every fundamental you need to know.&lt;/p&gt;
&lt;p&gt;Originally, I thought it would be able 20 to 30 fundamental lessons, and I could slot in practical lessons relatively easily. But when I started writing, I discovered that there were more fundamental lessons—it eventually ballooned to over 50 lessons, just JavaScript basics alone. I only start teaching how to make components after these 50 lessons.&lt;/p&gt;
&lt;p&gt;You can already see how this is a big problem, even if you’re enrolled in the course—50 lessons is a lot; it will overwhelm any student who has not touched JavaScript basics.&lt;/p&gt;
&lt;p&gt;I didn’t foresee this problem earlier because haven’t started writing the course yet. I discovered the problem when I was talking to the students who took the course. Once I discovered the problem, I knew I had to restructure, even if I can’t meet the July 2018 deadline.&lt;/p&gt;
&lt;h2 id=&quot;why-i-had-to-restructure&quot;&gt;Why I had to restructure&lt;/h2&gt;
&lt;p&gt;The decision was easy for me to make at this point because I promised my students that I will teach them JavaScript. I’m here to do everything I can to smoothen the learning curve. It doesn’t help them if I overwhelm them with basic JavaScript knowledge.&lt;/p&gt;
&lt;p&gt;That’s why I restructured. That’s why I broke the 9 modules I wrote into simpler modules, shifted the practical lessons earlier, and rewrote the practical lessons so you can learn new things as you go along.&lt;/p&gt;
&lt;h2 id=&quot;the-lesson-from-this-restructure-process&quot;&gt;The lesson from this restructure process&lt;/h2&gt;
&lt;p&gt;If you run into a difficult decision, think about why the decision is difficult for you. For me, it’s a struggle between how people think of me and my gains versus how my students’ learning process.&lt;/p&gt;
&lt;p&gt;Once you identify the struggles you face, identify the path that aligns with your intention. For this project, my intention is to help students learn JavaScript. Making money is a secondary thing. Once this intention is clarified, the decision to restructure becomes a no-brainer. I had to make it even if it means I need to delay the complete launch to a later date, even if it hurts sales in the process.&lt;/p&gt;
&lt;h2 id=&quot;will-enrollment-still-open-in-july-2018%3F&quot;&gt;Will enrollment still open in July 2018?&lt;/h2&gt;
&lt;p&gt;I will still open up Learn JavaScript in July 2018 like I promised. (I might not have completed the entire course yet though.) When you join, you’ll have access to the materials that are already created, and you’ll get updates to new lessons as I create them. I welcome you to join Learn JavaScript if you’re okay with this.&lt;/p&gt;
&lt;p&gt;If you want to wait until the entire course gets completed before joining, you’ll have to wait till the following launch, which might be in 2019.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope this video gives you a better understanding of what I’m doing with Learn JavaScript and how I operate as a course creator and teacher.&lt;/p&gt;
&lt;p&gt;I also hope this video gives you a guide on how to reason out your difficult decisions.&lt;/p&gt;
&lt;p&gt;If you’re interested in Learn JavaScript, you can find out more about it at https://learnjavascript.today.&lt;/p&gt;
&lt;p&gt;If you like this video, I hope you hit the subscribe button below and I’ll send you a video like this one every Friday. Or better yet, subscribe to my blog at https://zellwk.com; if you do this, I can send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;That’s it for today. Happy friday and I’ll see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Traversing the DOM with JavaScript</title>
    <link href="https://zellwk.com/blog/dom-traversals/"/>
    <updated>2018-04-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dom-traversals/</id>
    <content type="html">&lt;p&gt;A good JavaScript developer needs to know how to traverse the DOM—it’s the act of selecting an element from another element.&lt;/p&gt;
&lt;p&gt;But why do we need to learn to traverse the DOM? Isn’t &lt;code&gt;document.querySelector&lt;/code&gt; enough for most of our needs?&lt;/p&gt;
&lt;p&gt;In this article, I’m going to show you why traversing is better that &lt;code&gt;document.querySelector&lt;/code&gt;, and how to traverse like a pro. So sit back, relax, and enjoy the article!&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before we move on, note that this article is a sample lesson from Learn JavaScript—a course I built to help you learn JavaScript once and for all (even if you tried and failed previously). You can find out more about Learn JavaScript through &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-we-traverse&quot;&gt;Why we traverse&lt;/h2&gt;
&lt;p&gt;Let’s say you want to go to your neighbor’s house. What’s the fastest and most efficient way to get there?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move from your house to their house (since you already know their address)&lt;/li&gt;
&lt;li&gt;Lookup their address on Google maps, then walk according to the directions Google gives you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you move directly from your house to their house, you’re doing the equivalent of traversing the DOM—selecting one element from a neighboring element.&lt;/p&gt;
&lt;p&gt;If you lookup their address on Google, you’re doing the equivalent of &lt;code&gt;document.querySelector&lt;/code&gt; to find elements.&lt;/p&gt;
&lt;p&gt;Can you guess which method is more efficient?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;neighborhood&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;your-house&amp;quot;&amp;gt;😎&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;neighbor-house&amp;quot;&amp;gt;🎉&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You probably know the answer—it’s always easier to move from an element to another (compared do doing a full search). That’s why we traverse the DOM.&lt;/p&gt;
&lt;p&gt;You can traverse in three directions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Downwards&lt;/li&gt;
&lt;li&gt;Sideways&lt;/li&gt;
&lt;li&gt;Upwards&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Note: there’s a second reason—it’s more reliable—but that’s an advanced topic for another day.)&lt;/p&gt;
&lt;h2 id=&quot;traversing-downwards&quot;&gt;Traversing downwards&lt;/h2&gt;
&lt;p&gt;There are two methods to traverse downwards:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;querySelector&lt;/code&gt; or &lt;code&gt;querySelectorAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;children&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;queryselector-or-queryselectorall&quot;&gt;querySelector or querySelectorAll&lt;/h3&gt;
&lt;p&gt;To traverse downwards from a specific element, you can use &lt;code&gt;element.querySelector&lt;/code&gt; or &lt;code&gt;element.querySelectorAll&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we put &lt;code&gt;element.querySelector&lt;/code&gt; into the house analogy, we search for a specific room in your house. It’s faster than searching for the same room from outer space (the document).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;component&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;component__title&amp;quot;&amp;gt;Component title&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const component = document.querySelector(&#39;.component&#39;)
const title = component.querySelector(&#39;.component__title&#39;)

console.log(title) // &amp;lt;h2 class=&amp;quot;component__title&amp;quot;&amp;gt; ... &amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;children&quot;&gt;children&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;children&lt;/code&gt; is a property that lets you select direct descendants (elements that are immediately nested in another element). It returns a HTML Collection that updates when children elements are changed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const list = document.querySelector(&#39;.list&#39;)
const listItems = list.children

console.log(listItems)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/traversal/children.png&quot; alt=&quot;Selecting all list items with the children property&quot;&gt;
  &lt;figcaption&gt;Selecting all list items with the children property&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A HTML Collection is similar to a NodeList (that &lt;code&gt;querySelectorAll&lt;/code&gt; returns). There are subtle differences that don’t really matter for the context of this article.&lt;/p&gt;
&lt;p&gt;What matters is—a HTML collection is an array-like object. If you want to loop over it with &lt;code&gt;Array.prototype.forEach&lt;/code&gt;, you need to convert it into an array with &lt;code&gt;Array.from&lt;/code&gt; first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const array = Array.from(HTMLCollection)
array.forEach(el =&amp;gt; { /* do whatever you want */})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;selecting-a-specific-child&quot;&gt;Selecting a specific child&lt;/h3&gt;
&lt;p&gt;You can select the nth-item in the list from both NodeLists (result from &lt;code&gt;querySelectorAll&lt;/code&gt;) and HTML Collections (result from &lt;code&gt;children&lt;/code&gt;). To do so, you use the index of the element, just like how you select a specific item from an Array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const listItems = document.querySelectorAll(&#39;li&#39;)

const firstItem = listItems[0]
const secondItem = listItems[1]
const thirdItem = listItems[2]
const fourthItem = listItems[3]
const fifthItem = listItems[4]

console.log(firstItem)
console.log(secondItem)
console.log(thirdItem)
console.log(fourthItem)
console.log(fifthItem)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/traversal/specific-child.png&quot; alt=&quot;Select a specific child with [index]&quot;&gt;
  &lt;figcaption&gt;Select a specific child with [index]&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Try the above code with a HTML Collection. You’ll get the same result.&lt;/p&gt;
&lt;h2 id=&quot;traversing-upwards&quot;&gt;Traversing upwards&lt;/h2&gt;
&lt;p&gt;There are two methods to traverse upwards:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;parentElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closest&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;parentelement&quot;&gt;parentElement&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;parentELement&lt;/code&gt; is a property that lets you select the parent element. The parent element is the element that encloses the current element.&lt;/p&gt;
&lt;p&gt;In the following HTML, &lt;code&gt;.list&lt;/code&gt; is the parent element of all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; is the parent element of their respective &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstListItem = document.querySelector(&#39;li&#39;)
const list = firstListItem.parentElement

console.log(list)
// &amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;...&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;closest&quot;&gt;closest&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;parentElement&lt;/code&gt; is great for selecting one level upwards. To find an element that can be multiple levels above the current element, you use the &lt;code&gt;closest&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closest&lt;/code&gt; lets you select the closest ancestor element that matches a selector. Here’s the syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const closestAncestor = Element.closest(selector)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you may suspect, &lt;code&gt;selector&lt;/code&gt; is the same &lt;code&gt;selector&lt;/code&gt; you pass to &lt;code&gt;querySelector&lt;/code&gt; and &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the following HTML, you can select &lt;code&gt;.list&lt;/code&gt; from the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; effortlessly with &lt;code&gt;Element.closest&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstLink = document.querySelector(&#39;a&#39;)
const list = firstLink.closest(&#39;.list&#39;)

console.log(list)
// &amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt; ... &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;code&gt;closest&lt;/code&gt; &lt;strong&gt;starts searching from the current element&lt;/strong&gt;, then proceeds upwards until it reaches the &lt;code&gt;document&lt;/code&gt;. It stops returns the first element it finds.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstLink = document.querySelector(&#39;a&#39;)
const firstLinkThroughClosest = firstLink.closest(&#39;a&#39;)

console.log(firstLinkThroughClosest)
// &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;closest&lt;/code&gt; is pretty new. It doesn’t work on IE Edge 14 and below. It doesn’t work on Opera mini too. If you need to support older browsers, you may want to use a &lt;a href=&quot;https://github.com/jonathantneal/closest&quot;&gt;polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;traversing-sideways&quot;&gt;Traversing sideways&lt;/h2&gt;
&lt;p&gt;There are three methods to traverse sideways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;nextElementSibling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;previousElementSibling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Combining &lt;code&gt;parentElement&lt;/code&gt;, &lt;code&gt;children&lt;/code&gt;, and &lt;code&gt;index&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;nextelementsibling&quot;&gt;nextElementSibling&lt;/h3&gt;
&lt;p&gt;You can select the next element with &lt;code&gt;nextElementSibling&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const nextElem = Node.nextElementSibling
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstListItem = document.querySelector(&#39;li&#39;)
const secondListItem = firstListItem.nextElementSibling

console.log(secondListItem)
// &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;previouselementsibling&quot;&gt;previousElementSibling&lt;/h3&gt;
&lt;p&gt;Likewise, you can select the previous element with &lt;code&gt;previousElementSibling&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const secondListItem = document.querySelectorAll(&#39;li&#39;)[1]
const firstListItem = secondListItem.previousElementSibling

console.log(firstListItem)
// &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;combining-parentelement%2C-children%2C-and-index&quot;&gt;Combining parentElement, children, and index&lt;/h3&gt;
&lt;p&gt;This method lets you select a specific sibling. It’s easier to explain how it works with an example, so let’s do that. Say you want to select the fourth item from the first item in this HTML.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you already have the first item:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstItem = document.querySelector(&#39;li&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To select the fourth item, you can use &lt;code&gt;firstItem.parentElement&lt;/code&gt; to get the list, then &lt;code&gt;list.children&lt;/code&gt; to get a HTML Collection. Once you have the HTML Collection, you can find the fourth item by using a index of 3. (Remember, zero-based index!).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstItem = document.querySelector(&#39;li&#39;)
const list = firstItem.parentElement
const allItems = list.children
const fourthItem = allItems[3]

console.log(fourthItem)
// &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting everything together in one step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstItem = document.querySelector(&#39;li&#39;)
const fourthItem = firstITem.parentElement.children[3]

console.log(fourthItem)
// &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;/h2&gt;
&lt;p&gt;Practice traversing the DOM with the methods taught in this lesson. With the HTML given below, do these tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select &lt;code&gt;.characters&lt;/code&gt; with &lt;code&gt;document.querySelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;.humans&lt;/code&gt; from &lt;code&gt;.characters&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select all humans with &lt;code&gt;querySelectorAll&lt;/code&gt;, starting from &lt;code&gt;.humans&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select all hobbits with &lt;code&gt;children&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the Merry (the hobbit)&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;.enemies&lt;/code&gt; from Sauron&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;.characters&lt;/code&gt; div from Nazgûl&lt;/li&gt;
&lt;li&gt;Select Elrond from Glorfindel&lt;/li&gt;
&lt;li&gt;Select Legolas from Glorfindel&lt;/li&gt;
&lt;li&gt;Select Arwen from Glorfindel&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;characters&amp;quot;&amp;gt;
  &amp;lt;ul class=&amp;quot;hobbits&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;Frodo Baggins&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Samwise &amp;quot;Sam&amp;quot; Gamgee&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Meriadoc &amp;quot;Merry&amp;quot; Brandybuck&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Peregrin &amp;quot;Pippin&amp;quot; Took&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Bilbo Baggins&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul class=&amp;quot;humans&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;Gandalf&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Saruman&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Aragorn&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Boromir&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Faramir&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul class=&amp;quot;elves&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;Legolas&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Glorfindel&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Elrond&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Arwen Evenstar&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;ul class=&amp;quot;enemies&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt;Sauron&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Nazgûl&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You learned how to traverse the DOM in three directions—downwards, upwards, and sideways—in this lesson. Here’s a quick bullet point to summarize the methods you learned:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Traversing downwards
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;element.querySelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.querySelectorAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.children&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Traversing upwards
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;element.parentElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.closest&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Traversing sideways
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;element.nextElementSibling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.previousElementSibling&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Combine &lt;code&gt;parentElement&lt;/code&gt;, &lt;code&gt;children&lt;/code&gt;, and &lt;code&gt;index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope this lesson helps clarify why we traverse the DOM and how you can do it. If this lesson has helped you, might enjoy &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;, where share more JavaScript lessons—basics, intermediate, and even advanced lessons—in a step by step manner.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to handle the &quot;bad experience&quot; question</title>
    <link href="https://zellwk.com/blog/bad-experience/"/>
    <updated>2018-04-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/bad-experience/</id>
    <content type="html">&lt;p&gt;Hey, it’s Zell. Today, we have a question from a student from prefers to remain anonymous. I’m going to call this student May.&lt;/p&gt;
&lt;p&gt;Here’s her question:&lt;/p&gt;
&lt;p&gt;May freaks out whenever a recruiter asks her to talk about a bad experience in an interview. She had a complicated situation; she didn’t want to blame the company she was at, and she didn’t want to say she lacked experience (and therefore sucked).&lt;/p&gt;
&lt;p&gt;She tried to answer the question, didn’t get positive results from her answers, and she’s now considering lying about the bad experience to find a job.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I love this question because there is a lot to unpack for this situation. We need to talk about May’s experience in order to fully understand the situation. So here’s what happened.&lt;/p&gt;
&lt;p&gt;May had got a job, but was fired within three months. That job was her first job.&lt;/p&gt;
&lt;p&gt;Why did she get fired? Well, she couldn’t complete the tasks she was tasked to do. She tried to ask for help, but nobody had the time to help her (or nobody was willing to help her). Her boss even said “I know you’re asking for me to help you, but I don’t have the time to train you”.&lt;/p&gt;
&lt;p&gt;Now, the last point echos what I said in my &lt;a href=&quot;https://zellwk.com/blog/bad-experience/&quot;&gt;job search protip video&lt;/a&gt;. Check it out; it may just change how you think about finding a job.&lt;/p&gt;
&lt;p&gt;Let’s come back to May and her experience.&lt;/p&gt;
&lt;h2 id=&quot;this-is-a-traumatic-experience%2C-but-it%E2%80%99s-a-good-experience&quot;&gt;This is a traumatic experience, but it’s a good experience&lt;/h2&gt;
&lt;p&gt;First of all, I’m sorry to hear to hear you got fired from the job. It’s pretty traumatic to get fired within the first three months; it seems to say you’re not good enough. It’s tough to get back on your feet, but it’s a great experience to have because it sets you up for success in future—the way you think about learning and working will change completely going forward.&lt;/p&gt;
&lt;p&gt;Don’t write this experience off and hope that it didn’t exist. This is really good experience if you look back at it in hindsight, maybe 2-3 years in future.&lt;/p&gt;
&lt;p&gt;Next, this experience is the perfect experience to talk about in the job interview.&lt;/p&gt;
&lt;p&gt;Think about it, why do employers ask you about a bad experience you had? Standing from an employer’s point of view, they want to know your character and how you deal with challenges in a pinch. They want to see how you respond as a person at your core.&lt;/p&gt;
&lt;h2 id=&quot;how-to-answer-the-bad-experience-question&quot;&gt;How to answer the bad experience question&lt;/h2&gt;
&lt;p&gt;To answer the question, you need to be honest—people can smell bullshit from a mile away. Don’t try to fake it because people will feel uneasy about you.&lt;/p&gt;
&lt;p&gt;Next, you need to reflect on the experience. Ask yourself these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why did it happen?&lt;/li&gt;
&lt;li&gt;Why did you become inefficient in your work?&lt;/li&gt;
&lt;li&gt;Why can’t you perform?&lt;/li&gt;
&lt;li&gt;What’s the difference between the project in this job versus your projects in school?&lt;/li&gt;
&lt;li&gt;What were you worried or afraid of?&lt;/li&gt;
&lt;li&gt;What were your expectations about the job/project?&lt;/li&gt;
&lt;li&gt;How was reality different from your expectations?&lt;/li&gt;
&lt;li&gt;What lessons did you learn?&lt;/li&gt;
&lt;li&gt;How will you ensure something like this never happens again?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You need to sit down and find thees answers yourself because nobody can find the answers for you. Only you know know what has happened; only you know what you learned.&lt;/p&gt;
&lt;p&gt;Craft your answers into a script if you can. When the recruiter pops the question, you tell your story.&lt;/p&gt;
&lt;h2 id=&quot;the-script&quot;&gt;The script&lt;/h2&gt;
&lt;p&gt;Tell your story truthfully. Start with the fact that you got fired because of this experience. Be honest. Honesty is important.&lt;/p&gt;
&lt;p&gt;If your employer knows you’re honest, they’ll be open to hearing you out. They’ll also be more honest about their company and their situation; you’ll get more info about the job—it’s a win win situation for both of you.&lt;/p&gt;
&lt;p&gt;If your employer doesn’t want to hear honest stories, you’re probably going to have a hard time working for them in future. You’ll want to think twice about accepting a job with them.&lt;/p&gt;
&lt;p&gt;Remember, you’re interviewing them as they interview you.&lt;/p&gt;
&lt;p&gt;Next, talk about what happens. Talk about your expectations. Talk about your worries. Talk about how your expectations were different from reality. Talk about how you asked for help, but was rejected. Talk about what you learned and how you’ll prevent it from happening again.&lt;/p&gt;
&lt;p&gt;The most important part of the experience is how you grew from it—we’re all humans; we screw up from time to time. It’s normal to screw up.&lt;/p&gt;
&lt;p&gt;It might be helpful to see how I talked about my &lt;a href=&quot;https://zellwk.com/blog/bad-experience/&quot;&gt;project from hell experience&lt;/a&gt;. It was really bad. I stopped freelancing for one year because if it. Check out how I talked about publicly in the article. Watch how I looked at the situation; Watch how I talked about it and how I concluded the situation.&lt;/p&gt;
&lt;p&gt;It may seem that I’m blaming someone else, but am I really blaming someone else? Or am I being objective about what happened?&lt;/p&gt;
&lt;p&gt;Next, craft your story after reading the article. Email me if you want to and I’ll see how I can help.&lt;/p&gt;
&lt;p&gt;Then talk about it when an employer asks about it.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Don’t feel bad about your bad experience. Don’t write it off, because every experience is a learning experience.&lt;/p&gt;
&lt;p&gt;That’s it for this video, I hope you learned something. All the best for your job search.&lt;/p&gt;
&lt;p&gt;If you have any questions about frontend development, leave a comment below with your questions. I read every response and I’ll try my best to answer them over video.&lt;/p&gt;
&lt;p&gt;If you like this video, I hope you hit the subscribe button below so I can send you a video like this every Friday.&lt;/p&gt;
&lt;p&gt;Or better yet, head over to my blog at https://zellwk.com and subscribe there. If you do that, I’ll send you an article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;That’s it, I hope this video has been useful. Happy Friday, and I hope to see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to build a calculator—part 3</title>
    <link href="https://zellwk.com/blog/calculator-part-3/"/>
    <updated>2018-04-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/calculator-part-3/</id>
    <content type="html">&lt;p&gt;You learned how to build a robust calculator in the previous two lessons. Unfortunately, the code we created together confusing. If you tried to read the code again, you’ll definitely get lost.&lt;/p&gt;
&lt;p&gt;That’s why we need to refactor. In this lesson, you’ll learn how to refactor the calculator with some JavaScript best practices.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before you start this lesson, please make sure you have completed the first two lessons. Their links are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/calculator-part-1&quot;&gt;Part 1—happy path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/calculator-part-2&quot;&gt;Part 2—edge cases&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You also need to know some semi-advanced Javascript practices:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.timoxley.com/post/47041269194/avoid-else-return-early&quot;&gt;Early returns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;Ternary operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c&quot;&gt;Pure functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/es6#destructuring&quot;&gt;ES6 Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that, let’s begin!&lt;/p&gt;
&lt;h2 id=&quot;refactoring-the-calculator&quot;&gt;Refactoring the calculator&lt;/h2&gt;
&lt;p&gt;When you refactor, you’ll often start with the most obvious improvements. In this case, let’s start with the &lt;code&gt;calculate&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;refactoring-the-calculate-function&quot;&gt;Refactoring the calculate function&lt;/h2&gt;
&lt;p&gt;Here’s what we have so far.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  let result = &#39;&#39;
  if (operator === &#39;add&#39;) {
    result = parseFloat(n1) + parseFloat(n2)
  } else if (operator === &#39;subtract&#39;) {
    result = parseFloat(n1) - parseFloat(n2)
  } else if (operator === &#39;multiply&#39;) {
    result = parseFloat(n1) * parseFloat(n2)
  } else if (operator === &#39;divide&#39;) {
    result = parseFloat(n1) / parseFloat(n2)
  }

  return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You learned that we should reduce reassignments as much as possible. Here, we can remove assignments if we return the result of the calculation within the &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt; statements:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  if (operator === &#39;add&#39;) {
    return firstNum + parseFloat(n2)
  } else if (operator === &#39;subtract&#39;) {
    return parseFloat(n1) - parseFloat(n2)
  } else if (operator === &#39;multiply&#39;) {
    return parseFloat(n1) * parseFloat(n2)
  } else if (operator === &#39;divide&#39;) {
    return parseFloat(n1) / parseFloat(n2)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we return all values, we can use &lt;strong&gt;early returns&lt;/strong&gt;. If we do so, there’s no need for any &lt;code&gt;else if&lt;/code&gt; conditions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  if (operator === &#39;add&#39;) {
    return firstNum + parseFloat(n2)
  }

  if (operator === &#39;subtract&#39;) {
    return parseFloat(n1) - parseFloat(n2)
  }

  if (operator === &#39;multiply&#39;) {
    return parseFloat(n1) * parseFloat(n2)
  }

  if (operator === &#39;divide&#39;) {
    return parseFloat(n1) / parseFloat(n2)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And since we have one statement per &lt;code&gt;if&lt;/code&gt; condition, we can remove the brackets. (Note: some developers swear by curly brackets though). Here’s what the code would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  if (operator === &#39;add&#39;) return parseFloat(n1) + parseFloat(n2)
  if (operator === &#39;subtract&#39;) return parseFloat(n1) - parseFloat(n2)
  if (operator === &#39;multiply&#39;) return parseFloat(n1) * parseFloat(n2)
  if (operator === &#39;divide&#39;) return parseFloat(n1) / parseFloat(n2)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we called &lt;code&gt;parseFloat&lt;/code&gt; eight times in the function. We can simplify it by creating two variables to contain float values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  const firstNum = parseFloat(n1)
  const secondNum = parseFloat(n2)
  if (operator === &#39;add&#39;) return firstNum + secondNum
  if (operator === &#39;subtract&#39;) return firstNum - secondNum
  if (operator === &#39;multiply&#39;) return firstNum * secondNum
  if (operator === &#39;divide&#39;) return firstNum / secondNum
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with &lt;code&gt;calculate&lt;/code&gt; now. Don’t you think it’s easier to read compared to before?&lt;/p&gt;
&lt;h2 id=&quot;refactoring-the-event-listener&quot;&gt;Refactoring the event listener&lt;/h2&gt;
&lt;p&gt;The code we created for the event listener is huge. Here’s what we have at the moment:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) {

    if (!action) { /* ... */ }

    if (action === &#39;add&#39; ||
      action === &#39;subtract&#39; ||
      action === &#39;multiply&#39; ||
      action === &#39;divide&#39;) {
      /* ... */
    }

    if (action === &#39;clear&#39;) { /* ... */ }
    if (action !==  &#39;clear&#39;) { /* ... */ }
    if (action === &#39;calculate&#39;) { /* ... */ }
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How do you begin refactoring this piece of code? If you don’t know any programming best practices, you may be tempted to refactor by splitting up each kind of action into a smaller function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Don&#39;t do this!
const handleNumberKeys = (/* ... */) =&amp;gt; {/* ... */}
const handleOperatorKeys = (/* ... */) =&amp;gt; {/* ... */}
const handleDecimalKey = (/* ... */) =&amp;gt; {/* ... */}
const handleClearKey = (/* ... */) =&amp;gt; {/* ... */}
const handleCalculateKey = (/* ... */) =&amp;gt; {/* ... */}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t do this. It doesn’t help because you’re merely splitting up blocks of code. When you do so, the function gets harder to read.&lt;/p&gt;
&lt;p&gt;A better way is to split the code into pure and impure functions. If you do so, you’ll get code that look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  // Pure function
  const resultString = createResultString(/* ... */)

  // Impure stuff
  display.textContent = resultString
  updateCalculatorState(/* ... */)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;createResultString&lt;/code&gt; is a pure function that returns what needs to be displayed on the calculator. &lt;code&gt;updateCalculatorState&lt;/code&gt; is an impure function that changes the calculator’s visual appearance and custom attributes.&lt;/p&gt;
&lt;h2 id=&quot;making-createresultstring&quot;&gt;Making createResultString&lt;/h2&gt;
&lt;p&gt;As mentioned before, &lt;code&gt;createResultString&lt;/code&gt; should return the value that needs to be displayed on the calculator.
You can get these values through parts of the code that says &lt;code&gt;display.textContent = &#39;some value&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;display.textContent = &#39;some value&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of &lt;code&gt;display.textContent = &#39;some value&#39;&lt;/code&gt;, we want to return each value so we can use it later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// replace the above with this
return &#39;some value&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through this together, step by step, starting with number keys.&lt;/p&gt;
&lt;h3 id=&quot;making-result-string-for-number-keys&quot;&gt;Making result string for number keys&lt;/h3&gt;
&lt;p&gt;Here’s the code we have for number keys:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  if (
    displayedNum === &#39;0&#39; ||
    previousKeyType === &#39;operator&#39; ||
    previousKeyType === &#39;calculate&#39;
  ) {
    display.textContent = keyContent
  } else {
    display.textContent = displayedNum + keyContent
  }
  calculator.dataset.previousKeyType = &#39;number&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first step is to copy parts that say &lt;code&gt;display.textContent = &#39;some value&#39;&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;. When you do this, make sure you change &lt;code&gt;display.textContent =&lt;/code&gt; into &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  if (!action) {
    if (
      displayedNum === &#39;0&#39; ||
      previousKeyType === &#39;operator&#39; ||
      previousKeyType === &#39;calculate&#39;
    ) {
      return keyContent
    } else {
      return displayedNum + keyContent
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can convert the  &lt;code&gt;if/else&lt;/code&gt; statement to a ternary operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  if (action!) {
    return displayedNum === &#39;0&#39; ||
      previousKeyType === &#39;operator&#39; ||
      previousKeyType === &#39;calculate&#39;
      ? keyContent
      : displayedNum + keyContent
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you refactor, remember to keep note down a list of variables you need. We’ll come back to the list later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // Variables required are:
  // 1. keyContent
  // 2. displayedNum
  // 3. previousKeyType
  // 4. action

  if (action!) {
    return displayedNum === &#39;0&#39; ||
      previousKeyType === &#39;operator&#39; ||
      previousKeyType === &#39;calculate&#39;
      ? keyContent
      : displayedNum + keyContent
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-result-string-for-the-decimal-key&quot;&gt;Making result string for the decimal key&lt;/h3&gt;
&lt;p&gt;Here’s the code we have for the decimal key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;decimal&#39;) {
  if (!displayedNum.includes(&#39;.&#39;)) {
    display.textContent = displayedNum + &#39;.&#39;
  } else if (
    previousKeyType === &#39;operator&#39; ||
    previousKeyType === &#39;calculate&#39;
  ) {
    display.textContent = &#39;0.&#39;
  }

  calculator.dataset.previousKeyType = &#39;decimal&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, we want to move anything that changes &lt;code&gt;display.textContent&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;decimal&#39;) {
    if (!displayedNum.includes(&#39;.&#39;)) {
      return = displayedNum + &#39;.&#39;
    } else if (previousKeyType === &#39;operator&#39; || previousKeyType === &#39;calculate&#39;) {
      return = &#39;0.&#39;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we want to return all values, we can convert &lt;code&gt;else if&lt;/code&gt; statements into early returns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;decimal&#39;) {
    if (!displayedNum.includes(&#39;.&#39;)) return displayedNum + &#39;.&#39;
    if (previousKeyType === &#39;operator&#39; || previousKeyType === &#39;calculate&#39;) return &#39;0.&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A common mistake here is to forget to return the currently displayed number when neither conditions are matched. We need this because we will replace the &lt;code&gt;display.textContent&lt;/code&gt; with the value returned from &lt;code&gt;createResultString&lt;/code&gt;. If we missed it, &lt;code&gt;createResultString&lt;/code&gt; will return &lt;code&gt;undefined&lt;/code&gt;, which is not what we desire.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;decimal&#39;) {
    if (!displayedNum.includes(&#39;.&#39;)) return displayedNum + &#39;.&#39;
    if (previousKeyType === &#39;operator&#39; || previousKeyType === &#39;calculate&#39;) return &#39;0.&#39;
    return displayedNum
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As always, take note of the variables that are required. At this point, the required variables remain the same as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // Variables required are:
  // 1. keyContent
  // 2. displayedNum
  // 3. previousKeyType
  // 4. action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-result-string-for-operator-keys&quot;&gt;Making result string for operator keys&lt;/h3&gt;
&lt;p&gt;Here’s the code we wrote for operator keys.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  const firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  if (
    firstValue &amp;amp;&amp;amp;
    operator &amp;amp;&amp;amp;
    previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
    previousKeyType !==  &#39;calculate&#39;
  ) {
    const calcValue = calculate(firstValue, operator, secondValue)
    display.textContent = calcValue
    calculator.dataset.firstValue = calcValue
  } else {
    calculator.dataset.firstValue = displayedNum
  }

  key.classList.add(&#39;is-depressed&#39;)
  calculator.dataset.previousKeyType = &#39;operator&#39;
  calculator.dataset.operator = action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You know the drill by now; we want to move everything that changes &lt;code&gt;display.textContent&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;. Here’s what needs to be moved:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...
  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    const secondValue = displayedNum

    if (
      firstValue &amp;amp;&amp;amp;
      operator &amp;amp;&amp;amp;
      previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
      previousKeyType !==  &#39;calculate&#39;
    ) {
      return calculate(firstValue, operator, secondValue)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, &lt;code&gt;createResultString&lt;/code&gt; needs to return the value to be displayed on the calculator. If the &lt;code&gt;if&lt;/code&gt; condition did not match, we still want to return the displayed number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...
  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    const secondValue = displayedNum

    if (
      firstValue &amp;amp;&amp;amp;
      operator &amp;amp;&amp;amp;
      previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
      previousKeyType !==  &#39;calculate&#39;
    ) {
      return calculate(firstValue, operator, secondValue)
    } else {
      return displayedNum
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then refactor the &lt;code&gt;if/else&lt;/code&gt; statement into a ternary operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...
  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    const secondValue = displayedNum

    return firstValue &amp;amp;&amp;amp;
      operator &amp;amp;&amp;amp;
      previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
      previousKeyType !==  &#39;calculate&#39;
      ? calculate(firstValue, operator, secondValue)
      : displayedNum
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look closely, you’ll realize that there’s no need to store a &lt;code&gt;secondValue&lt;/code&gt; variable. We can use &lt;code&gt;displayedNum&lt;/code&gt; directly in the &lt;code&gt;calculate&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...
  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator

    return firstValue &amp;amp;&amp;amp;
      operator &amp;amp;&amp;amp;
      previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
      previousKeyType !==  &#39;calculate&#39;
      ? calculate(firstValue, operator, displayedNum)
      : displayedNum
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, take note of the variables and properties required. This time, we need &lt;code&gt;calculator.dataset.firstValue&lt;/code&gt; and &lt;code&gt;calculator.dataset.operator&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // Variables &amp;amp; properties required are:
  // 1. keyContent
  // 2. displayedNum
  // 3. previousKeyType
  // 4. action
  // 5. calculator.dataset.firstValue
  // 6. calculator.dataset.operator
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-result-string-for-the-clear-key&quot;&gt;Making result string for the clear key&lt;/h3&gt;
&lt;p&gt;We wrote the following code to handle the &lt;code&gt;clear&lt;/code&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;clear&#39;) {
  if (key.textContent === &#39;AC&#39;) {
    calculator.dataset.firstValue = &#39;&#39;
    calculator.dataset.modValue = &#39;&#39;
    calculator.dataset.operator = &#39;&#39;
    calculator.dataset.previousKeyType = &#39;&#39;
  } else {
    key.textContent = &#39;AC&#39;
  }

  display.textContent = 0
  calculator.dataset.previousKeyType = &#39;clear&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As above, want to move everything that changes &lt;code&gt;display.textContent&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...
  if (action === &#39;clear&#39;) return 0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-result-string-for-the-equal-key&quot;&gt;Making result string for the equal key&lt;/h3&gt;
&lt;p&gt;Here’s the code we wrote for the equal key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  let secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      firstValue = displayedNum
      secondValue = calculator.dataset.modValue
    }

    display.textContent = calculate(firstValue, operator, secondValue)
  }

  calculator.dataset.modValue = secondValue
  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As above, we want to copy everything that changes &lt;code&gt;display.textContent&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;. Here’s what needs to be copied:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  let secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      firstValue = displayedNum
      secondValue = calculator.dataset.modValue
    }
    display.textContent = calculate(firstValue, operator, secondValue)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When copying the code into &lt;code&gt;createResultString&lt;/code&gt;, make sure you return values for every possible scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;calculate&#39;) {
    let firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    let secondValue = displayedNum

    if (firstValue) {
      if (previousKeyType === &#39;calculate&#39;) {
        firstValue = displayedNum
        secondValue = calculator.dataset.modValue
      }
      return calculate(firstValue, operator, secondValue)
    } else {
      return displayedNum
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we want to reduce reassignments. We can do so by passing in the correct values into &lt;code&gt;calculate&lt;/code&gt; through a ternary operator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;calculate&#39;) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    const modValue = calculator.dataset.modValue

    if (firstValue) {
      return previousKeyType === &#39;calculate&#39;
        ? calculate(displayedNum, operator, modValue)
        : calculate(firstValue, operator, displayedNum)
    } else {
      return displayedNum
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can further simplify the above code with another ternary operator if you feel comfortable with it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // ...

  if (action === &#39;calculate&#39;) {
    const firstValue = calculator.dataset.firstValue
    const operator = calculator.dataset.operator
    const modValue = calculator.dataset.modValue

    return firstValue
      ? previousKeyType === &#39;calculate&#39;
        ? calculate(displayedNum, operator, modValue)
        : calculate(firstValue, operator, displayedNum)
      : displayedNum
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, we want to take note of the properties and variables required again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = () =&amp;gt; {
  // Variables &amp;amp; properties required are:
  // 1. keyContent
  // 2. displayedNum
  // 3. previousKeyType
  // 4. action
  // 5. calculator.dataset.firstValue
  // 6. calculator.dataset.operator
  // 7. calculator.dataset.modValue
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;passing-in-necessary-variables&quot;&gt;Passing in necessary variables&lt;/h3&gt;
&lt;p&gt;We need seven properties/variables in &lt;code&gt;createResultString&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;keyContent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;displayedNum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;previousKeyType&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;action&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can get &lt;code&gt;keyContent&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; from &lt;code&gt;key&lt;/code&gt;. We can also get &lt;code&gt;firstValue&lt;/code&gt;, &lt;code&gt;modValue&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt; and &lt;code&gt;previousKeyType&lt;/code&gt; from &lt;code&gt;calculator.dataset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That means the &lt;code&gt;createResultString&lt;/code&gt; function needs three variables—&lt;code&gt;key&lt;/code&gt;, &lt;code&gt;displayedNum&lt;/code&gt; and &lt;code&gt;calculator.dataset&lt;/code&gt;. Since &lt;code&gt;calculator.dataset&lt;/code&gt; represents the state of the calculator, let’s use a variable called &lt;code&gt;state&lt;/code&gt; instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = (key, displayedNum, state) =&amp;gt; {
  const keyContent = key.textContent
  const action = key.dataset.action
  const firstValue = state.firstValue
  const modValue = state.modValue
  const operator = state.operator
  const previousKeyType = state.previousKeyType
  // ... Refactor as necessary
}

// Using createResultString
keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) return
  const displayedNum = display.textContent
  const resultString = createResultString(e.target, displayedNum, calculator.dataset)

  // ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Feel free to destructure variables if you desire:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = (key, displayedNum, state) =&amp;gt; {
  const keyContent = key.textContent
  const { action } = key.dataset
  const {
    firstValue,
    modValue,
    operator,
    previousKeyType
  } = state

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consistency-within-if-statements&quot;&gt;Consistency within if statements&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;createResultString&lt;/code&gt;, we used the following conditions to test for the type of keys that was clicked:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// If key is number
if (!action) { /* ... */ }

// If key is decimal
if (action === &#39;decimal&#39;) { /* ... */ }

// If key is operator
if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) { /* ... */}

// If key is clear
if (action === &#39;clear&#39;) { /* ... */ }

// If key is calculate
if (action === &#39;calculate&#39;) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They’re not consistent, so they’re hard to read. If possible, we want to make them consistent so we can write something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (keyType === &#39;number&#39;) { /* ... */ }
if (keyType === &#39;decimal&#39;) { /* ... */ }
if (keyType === &#39;operator&#39;) { /* ... */}
if (keyType === &#39;clear&#39;) { /* ... */ }
if (keyType === &#39;calculate&#39;) { /* ... */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do so, we can create a function called &lt;code&gt;getKeyType&lt;/code&gt;. This function should return the type of key that was clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const getKeyType = (key) =&amp;gt; {
  const { action } = key.dataset
  if (!action) return &#39;number&#39;
  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) return &#39;operator&#39;
  // For everything else, return the action
  return action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s how you’d use the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const createResultString = (key, displayedNum, state) =&amp;gt; {
  const keyType = getKeyType(key)

  if (keyType === &#39;number&#39;) { /* ... */ }
  if (keyType === &#39;decimal&#39;) { /* ... */ }
  if (keyType === &#39;operator&#39;) { /* ... */}
  if (keyType === &#39;clear&#39;) { /* ... */ }
  if (keyType === &#39;calculate&#39;) { /* ... */ }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with &lt;code&gt;createResultString&lt;/code&gt;. Let’s move on to &lt;code&gt;updateCalculatorState&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;making-updatecalculatorstate&quot;&gt;Making updateCalculatorState&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;updateCalculatorState&lt;/code&gt; is a function that changes the calculator’s visual appearance and custom attributes.&lt;/p&gt;
&lt;p&gt;As with &lt;code&gt;createResultString&lt;/code&gt;, we need to check the type of key that was clicked. Here, we can reuse &lt;code&gt;getKeyType&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key) =&amp;gt; {
  const keyType = getKeyType(key)

  if (keyType === &#39;number&#39;) { /* ... */ }
  if (keyType === &#39;decimal&#39;) { /* ... */ }
  if (keyType === &#39;operator&#39;) { /* ... */}
  if (keyType === &#39;clear&#39;) { /* ... */ }
  if (keyType === &#39;calculate&#39;) { /* ... */ }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at the leftover code, you may notice we change &lt;code&gt;data-previous-key-type&lt;/code&gt; for every type of key. Here’s what the code looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator) =&amp;gt; {
  const keyType = getKeyType(key)

  if (!action) {
    // ...
    calculator.dataset.previousKeyType = &#39;number&#39;
  }

  if (action === &#39;decimal&#39;) {
    // ...
    calculator.dataset.previousKeyType = &#39;decimal&#39;
  }

  if (
    action === &#39;add&#39; ||
    action === &#39;subtract&#39; ||
    action === &#39;multiply&#39; ||
    action === &#39;divide&#39;
  ) {
    // ...
    calculator.dataset.previousKeyType = &#39;operator&#39;
  }

  if (action === &#39;clear&#39;) {
    // ...
    calculator.dataset.previousKeyType = &#39;clear&#39;
  }

  if (action === &#39;calculate&#39;) {
    calculator.dataset.previousKeyType = &#39;calculate&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is redundant because we already know the key type with &lt;code&gt;getKeyType&lt;/code&gt;. We can refactor the above to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator) =&amp;gt; {
  const keyType = getKeyType(key)
  calculator.dataset.previousKeyType = keyType

  if (keyType === &#39;number&#39;) { /* ... */ }
  if (keyType === &#39;decimal&#39;) { /* ... */ }
  if (keyType === &#39;operator&#39;) { /* ... */}
  if (keyType === &#39;clear&#39;) { /* ... */ }
  if (keyType === &#39;calculate&#39;) { /* ... */ }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-updatecalculatorstate-for-operator-keys&quot;&gt;Making &lt;code&gt;updateCalculatorState&lt;/code&gt; for operator keys&lt;/h3&gt;
&lt;p&gt;Visually, we need to make sure all keys release their depressed state. Here, we can copy and paste the code we had before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator) =&amp;gt; {
  const keyType = getKeyType(key)
  calculator.dataset.previousKeyType = keyType

  Array.from(key.parentNode.children).forEach(k =&amp;gt; k.classList.remove(&#39;is-depressed&#39;))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what’s left from what we’ve written for operator keys, after moving pieces related to &lt;code&gt;display.textContent&lt;/code&gt; into &lt;code&gt;createResultString&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (keyType === &#39;operator&#39;) {
  if (firstValue &amp;amp;&amp;amp;
      operator &amp;amp;&amp;amp;
      previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
      previousKeyType !==  &#39;calculate&#39;
  ) {
    calculator.dataset.firstValue = calculatedValue
  } else {
    calculator.dataset.firstValue = displayedNum
  }

  key.classList.add(&#39;is-depressed&#39;)
  calculator.dataset.operator = key.dataset.action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may notice that we can shorten the code with a ternary operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (keyType === &#39;operator&#39;) {
  key.classList.add(&#39;is-depressed&#39;)
  calculator.dataset.operator = key.dataset.action
  calculator.dataset.firstValue = firstValue &amp;amp;&amp;amp;
    operator &amp;amp;&amp;amp;
    previousKeyType !==  &#39;operator&#39; &amp;amp;&amp;amp;
    previousKeyType !==  &#39;calculate&#39;
    ? calculatedValue
    : displayedNum
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, take note of the variables and properties you need. Here, we need &lt;code&gt;calculatedValue&lt;/code&gt; and &lt;code&gt;displayedNum&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator) =&amp;gt; {
  // Variables and properties needed
  // 1. key
  // 2. calculator
  // 3. calculatedValue
  // 4. displayedNum
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;making-updatecalculatorstate-for-the-clear-key&quot;&gt;Making &lt;code&gt;updateCalculatorState&lt;/code&gt; for the clear key&lt;/h3&gt;
&lt;p&gt;Here’s the leftover code for the clear key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;clear&#39;) {
  if (key.textContent === &#39;AC&#39;) {
    calculator.dataset.firstValue = &#39;&#39;
    calculator.dataset.modValue = &#39;&#39;
    calculator.dataset.operator = &#39;&#39;
    calculator.dataset.previousKeyType = &#39;&#39;
  } else {
    key.textContent = &#39;AC&#39;
  }
}

if (action !==  &#39;clear&#39;) {
  const clearButton = calculator.querySelector(&#39;[data-action=clear]&#39;)
  clearButton.textContent = &#39;CE&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s nothing much we can refactor here; feel free to copy/paste everything into &lt;code&gt;updateCalculatorState&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;making-updatecalculatorstate-for-the-equal-key&quot;&gt;Making &lt;code&gt;updateCalculatorState&lt;/code&gt; for the equal key&lt;/h3&gt;
&lt;p&gt;Here’s the code we wrote for the equal key:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  let secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      firstValue = displayedNum
      secondValue = calculator.dataset.modValue
    }

    display.textContent = calculate(firstValue, operator, secondValue)
  }

  calculator.dataset.modValue = secondValue
  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s what we’re left with if we remove everything that concerns &lt;code&gt;display.textContent&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      secondValue = calculator.dataset.modValue
    }
  }

  calculator.dataset.modValue = secondValue
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can refactor this into the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (keyType === &#39;calculate&#39;) {
  calculator.dataset.modValue = firstValue &amp;amp;&amp;amp; previousKeyType === &#39;calculate&#39;
    ? modValue
    : displayedNum
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As always, take note of the properties and variables used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator) =&amp;gt; {
  // Variables and properties needed
  // 1. key
  // 2. calculator
  // 3. calculatedValue
  // 4. displayedNum
  // 5. modValue
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;passing-in-necessary-variables-2&quot;&gt;Passing in necessary variables&lt;/h3&gt;
&lt;p&gt;We know we need five variables/properties for &lt;code&gt;updateCalculatorState&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;calculatedValue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;displayedNum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modValue&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since &lt;code&gt;modValue&lt;/code&gt; can be retrieved from &lt;code&gt;calculator.dataset&lt;/code&gt;, we only need to pass in four values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateCalculatorState = (key, calculator, calculatedValue, displayedNum) =&amp;gt; {
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) return

  const key = e.target
  const displayedNum = display.textContent
  const resultString = createResultString(key, displayedNum, calculator.dataset)

  display.textContent = resultString

  // Pass in necessary values
  updateCalculatorState(key, calculator, resultString, displayedNum)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;refactoring-updatecalculatorstate-again&quot;&gt;Refactoring updateCalculatorState again&lt;/h2&gt;
&lt;p&gt;We changed three kinds of values in &lt;code&gt;updateCalculatorState&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;calculator.dataset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The class for pressing/depressing operators&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AC&lt;/code&gt; vs &lt;code&gt;CE&lt;/code&gt; text&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to make it cleaner, you can split (2) and (3) into another function—&lt;code&gt;updateVisualState&lt;/code&gt;. Here’s what &lt;code&gt;updateVisualState&lt;/code&gt; can look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateVisualState = (key, calculator) =&amp;gt; {
  const keyType = getKeyType(key)
  Array.from(key.parentNode.children).forEach(k =&amp;gt; k.classList.remove(&#39;is-depressed&#39;))

  if (keyType === &#39;operator&#39;) key.classList.add(&#39;is-depressed&#39;)

  if (keyType === &#39;clear&#39; &amp;amp;&amp;amp; key.textContent !==  &#39;AC&#39;) {
    key.textContent = &#39;AC&#39;
  }

  if (keyType !==  &#39;clear&#39;) {
    const clearButton = calculator.querySelector(&#39;[data-action=clear]&#39;)
    clearButton.textContent = &#39;CE&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;The code become much cleaner after the refactor. If you look into the event listener you’ll know what each function does.&lt;/p&gt;
&lt;p&gt;Here’s what the event listener looks like at the end:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) return
  const key = e.target
  const displayedNum = display.textContent

  // Pure functions
  const resultString = createResultString(key, displayedNum, calculator.dataset)

  // Update states
  display.textContent = resultString
  updateCalculatorState(key, calculator, resultString, displayedNum)
  updateVisualState(key, calculator)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For your homework, go through the refactoring exercise on your own and see if you can get it to work without viewing the lesson.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article. If you did, you’ll want to check out &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;—a course to help you learn JavaScript once and for all.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Job search protip—don&#39;t look for a junior position</title>
    <link href="https://zellwk.com/blog/dont-look-for-a-junior-position/"/>
    <updated>2018-03-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dont-look-for-a-junior-position/</id>
    <content type="html">&lt;p&gt;Today, I want to share a disturbing truth about finding a job. This may just change the way you think about how you find a job, especially if you are starting out.&lt;/p&gt;
&lt;p&gt;You ready? Here it goes.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;Don’t aim to get hired for a junior position. Aim to get hired for an intermediate position.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you are looking for a frontend developer role, don’t look for a junior role. Look for a normal frontend developer job.&lt;/p&gt;
&lt;p&gt;This advice may sound counterintuitive. How can you become a frontend developer if you didn’t get enough experience as a junior first?&lt;/p&gt;
&lt;p&gt;To answer this question, you want to consider what you want and what the company want when you look for a job.&lt;/p&gt;
&lt;h2 id=&quot;what-you-want-vs-what-companies-what.&quot;&gt;What you want vs what companies what.&lt;/h2&gt;
&lt;p&gt;When you look for a junior role, what you want is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn something&lt;/li&gt;
&lt;li&gt;Build your skills&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe in 2-3 years, when you’ve learned enough, you want to find a better job.&lt;/p&gt;
&lt;p&gt;This thinking blows away your chance to get a job because &lt;strong&gt;companies don’t do charity. They don’t want to hire you just to train you. They want to hire you to work for them.&lt;/strong&gt; That doesn’t change even if they are looking for a junior developer.&lt;/p&gt;
&lt;p&gt;See the difference between what you want and what they want?&lt;/p&gt;
&lt;p&gt;I’m not saying that every company is unwilling to hire and train junior developers. I’m saying they’re rare.&lt;/p&gt;
&lt;p&gt;The question is, do you want to leave your job search to luck? To finding one company that helps you and trains you and grooms you?&lt;/p&gt;
&lt;p&gt;Or, do you want to decide your own fate, and what job you get?&lt;/p&gt;
&lt;p&gt;If you want to decide your own fate. You cannot rely on finding one good company. They’re rare. You need to wait for someone to pick you.&lt;/p&gt;
&lt;p&gt;To be able to find a job anywhere you want to, you need to stop thinknig like a junior developer and start nthinking like a professional. That means you need to train yourself up. You cannot wait for anyone to train you.&lt;/p&gt;
&lt;p&gt;You need to learn the fundamentals. You need to learn CSS. You need to learn JavaScript. You need to have the confidence to build anything you can think of. You might not have built them before, but you have the confidence to build them when you need to—whenever someone ask you to build something, you can say “just give me X number of days and I’ll get it done”.&lt;/p&gt;
&lt;p&gt;If you can, ask why you build want to build this? Why this not that? These questions are you have, and that’s the attitude you adopt when you are a professional. When you can do these, I don’t think you’ll have a problem finding any job.&lt;/p&gt;
&lt;h2 id=&quot;learning&quot;&gt;Learning&lt;/h2&gt;
&lt;p&gt;You need to be able to learn by yourself as much as you can. There are lots of resources, both free and paid resources. You can learn from either, it really doesn’t matter.&lt;/p&gt;
&lt;p&gt;What’s important is you learn how to learn, because 90% of a developer’s job isn’t to code something they already know. It is to solve problems. When you solve problems, you will uncover things you don’t know. When you uncover things you don’t know, you have to learn and implement the new thing.&lt;/p&gt;
&lt;p&gt;So you’re in trouble if you don’t know how to learn. That’s true even if you are in a junior role—you still need to learn and implement stuff.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s how I think about employment.&lt;/p&gt;
&lt;p&gt;Like I said, you’re not going to love the message today. It’s disturbing. But I believe it’s something you need to hear.&lt;/p&gt;
&lt;p&gt;That’s it from me. I hope this video gives you a new perspective to your job search. Good luck with it.&lt;/p&gt;
&lt;p&gt;If you need help with JavaScript, consider joining Learn JavaScript, which is a course I’m writing to help you become a good enough JavaSccript developer—it brings you from 0 knowledge to an intermediate/expert level, where you can build components by yourself without copy/pasting other people’s code.&lt;/p&gt;
&lt;p&gt;Thanks for watching. I hope this video has been helpful.&lt;/p&gt;
&lt;p&gt;If you have any questions, feel free to leave them in the comments below and I will try to get back to them as soon as possible.&lt;/p&gt;
&lt;p&gt;If you like this video, please hit the subscribe button below so I can send you more videos like this one every Friday. Or better yet, subscribe over at my blog at zellwk.com and I’ll send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;That’s it from me. Have a good weekend and see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to build a calculator—part 2</title>
    <link href="https://zellwk.com/blog/calculator-part-2/"/>
    <updated>2018-03-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/calculator-part-2/</id>
    <content type="html">&lt;p&gt;This is the second part of a three-part lesson about building a calculator. By the end of these three lessons, you should get a calculator that functions exactly like an iPhone calculator (without the &lt;code&gt;+/-&lt;/code&gt; and percentage functionalities).&lt;/p&gt;
&lt;p&gt;Note: please make sure you finish the &lt;a href=&quot;https://zellwk.com/blog/calculator-part-1&quot;&gt;first part&lt;/a&gt; before starting this article.&lt;/p&gt;
&lt;p&gt;You’re going to learn to code for edge cases to make your calculator resilient to weird input patterns in this lesson.&lt;/p&gt;
&lt;p&gt;To do so, you have to imagine a troublemaker who tries to break your calculator by hitting keys in the wrong order. Let’s call this troublemaker Tim.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Tim can hit these keys in any order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A number key (0-9)&lt;/li&gt;
&lt;li&gt;An operator key (+, -, ×, ÷)&lt;/li&gt;
&lt;li&gt;The decimal key&lt;/li&gt;
&lt;li&gt;The equal key&lt;/li&gt;
&lt;li&gt;The clear key&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-happens-if-tim-hits-the-decimal-key&quot;&gt;What happens if Tim hits the decimal key&lt;/h2&gt;
&lt;p&gt;If Tim hits a decimal key when the display already shows a decimal point, nothing should happen.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/decimal-multiple.gif&quot; alt=&quot;Nothing happens when a user hits the decimal key when the display already shows a decimal point&quot;&gt;
  &lt;figcaption&gt;Nothing happens when a user hits the decimal key when the display already shows a decimal point&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/decimal-multiple-2.gif&quot; alt=&quot;Nothing should happen even if the previous key isn&#39;t the decimal key&quot;&gt;
  &lt;figcaption&gt;Nothing should happen even if the previous key isn&#39;t the decimal key&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here, we can check the displayed number contains a &lt;code&gt;.&lt;/code&gt; with the &lt;code&gt;includes&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;includes&lt;/code&gt; checks strings for a given match. If a string is found, it returns &lt;code&gt;true&lt;/code&gt;; if not, it returns &lt;code&gt;false&lt;/code&gt;. Note: &lt;code&gt;includes&lt;/code&gt; is case sensitive&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Example of how includes work.
const string = &#39;The hamburgers taste pretty good!&#39;
const hasExclaimation = string.includes(&#39;!&#39;)

console.log(hasExclaimation) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Do nothing if string has a dot
if (!displayedNum.includes(&#39;.&#39;)) {
  display.textContent = displayedNum + &#39;.&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, if Tim hits the decimal key after hitting an operator key, the display should show &lt;code&gt;0.&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/decimal-after-operator.gif&quot; alt=&quot;Display should show &#39;0.&#39; if a user hits a decimal key after an operator key&quot;&gt;
  &lt;figcaption&gt;Display should show &quot;0.&quot; if a user hits a decimal key after an operator key&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here we need to know if the previous key is an operator. We can tell by checking the the custom attribute, &lt;code&gt;data-previous-key-type&lt;/code&gt;, we set in the previous lesson.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data-previous-key-type&lt;/code&gt; is not complete yet. To correctly identify if &lt;code&gt;previousKeyType&lt;/code&gt; is an operator, we need to update &lt;code&gt;previousKeyType&lt;/code&gt; for each clicked key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  // ...
  calculator.dataset.previousKeyType = &#39;number&#39;
}

if (action === &#39;decimal&#39;) {
  // ...
  calculator.dataset.previousKeyType = &#39;decimal&#39;
}

if (action === &#39;clear&#39;) {
  // ...
  calculator.dataset.previousKeyType = &#39;clear&#39;
}

if (action === &#39;calculate&#39;) {
 // ...
  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the correct &lt;code&gt;previousKeyType&lt;/code&gt;, we can use it to check if the previous key is an operator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;decimal&#39;) {
  if (!displayedNum.includes(&#39;.&#39;)) {
    display.textContent = displayedNum + &#39;.&#39;
  } else if (previousKeyType === &#39;operator&#39;) {
    display.textContent = &#39;0.&#39;
  }

  calculator.dataset.previousKeyType = &#39;decimal&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what-happens-if-tim-hits-an-operator-key&quot;&gt;What happens if Tim hits an operator key&lt;/h2&gt;
&lt;p&gt;First, if Tim hits an operator key first, the operator key should light up. (We’ve already covered for this edge case, but how? See if you can identify what we did).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-first.gif&quot; alt=&quot;Operator key should light up if it&#39;s the first key.&quot;&gt;
  &lt;figcaption&gt;Operator key should light up if it&#39;s the first key.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Second, nothing should happen if Tim hits the same operator key multiple times. (We’ve already covered for this edge case as well).&lt;/p&gt;
&lt;p&gt;Note: if you want to provide better UX, you can show the operator getting clicked on again and again with some CSS changes. We didn’t do it here because I took recorded all the GIFs before I could fix that.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-multiple.gif&quot; alt=&quot;Operator key remains depressed if clicked on multiple times&quot;&gt;
  &lt;figcaption&gt;Operator key remains depressed if clicked on multiple times&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Third, if Tim hits another operator key after hitting the first operator key, the first operator key should be released; the second operator key should be depressed. (We covered for this edge case too; but how?).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-switch.gif&quot; alt=&quot;The new operator key should be depressed&quot;&gt;
  &lt;figcaption&gt;The new operator key should be depressed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fourth, if Tim hits a number, an operator, a number and another operator, in that order, the display should be updated to a calculated value.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-calc.gif&quot; alt=&quot;Clicking on the operator when numbers are stored in the calculator results in a calculation&quot;&gt;
  &lt;figcaption&gt;Clicking on the operator when numbers are stored in the calculator results in a calculation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This means we need to use the &lt;code&gt;calculate&lt;/code&gt; function when &lt;code&gt;firstValue&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt; and &lt;code&gt;secondValue&lt;/code&gt; exists.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  const firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  // Note: It&#39;s sufficient to check for firstValue and operator because secondValue always exists
  if (firstValue &amp;amp;&amp;amp; operator) {
    display.textContent = calculate(firstValue, operator, secondValue)
  }

  key.classList.add(&#39;is-depressed&#39;)
  calculator.dataset.previousKeyType = &#39;operator&#39;
  calculator.dataset.firstValue = displayedNum
  calculator.dataset.operator = action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although we can calculate a value when the operator key is clicked for a second time, we have also introduced a bug at this point—additional clicks on the operator key calculates a value when it shouldn’t.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/bug-operator-immed-calc.gif&quot; alt=&quot;Bug: subsequent clicks on the operator performs a calculation when it shouldn&#39;t&quot;&gt;
  &lt;figcaption&gt;Bug: subsequent clicks on the operator performs a calculation when it shouldn&#39;t&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To prevent the calculator from performing calculation on subsequent clicks on the operator key, we need to check if the &lt;code&gt;previousKeyType&lt;/code&gt; is an operator; if it is, we don’t perform a calculation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  firstValue &amp;amp;&amp;amp;
  operator &amp;amp;&amp;amp;
  previousKeyType !== &#39;operator&#39;
) {
  display.textContent = calculate(firstValue, operator, secondValue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fifth, after the operator key calculates a number, if Tim hits on a number, followed by another operator, the operator should continue with the calculation, like this: &lt;code&gt;8 - 1 = 7&lt;/code&gt;, &lt;code&gt;7 - 2 = 5&lt;/code&gt;, &lt;code&gt;5 - 3 = 2&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-consec-calc.gif&quot; alt=&quot;Calculator should be able to continue calculation when a user clicks on numbers, followed by operators, followed by numbers, followed by operators, and so on.&quot;&gt;
  &lt;figcaption&gt;Calculator should be able to continue calculation when a user clicks on numbers, followed by operators, followed by numbers, followed by operators, and so on.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Right now, our calculator cannot make consecutive calculations. The second calculated value is wrong. Here’s what we have: &lt;code&gt;99 - 1 = 98&lt;/code&gt;, &lt;code&gt;98 - 1 = 0&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/operator-consec-calc-bug.gif&quot; alt=&quot;Calculated values are wrong. Second calculated value should be 97 instead of 0&quot;&gt;
  &lt;figcaption&gt;Calculated values are wrong. Second calculated value should be 97 instead of 0&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The second value is calculated wrongly because we fed the wrong values into the &lt;code&gt;calculate&lt;/code&gt; function. Let’s go through a few pictures to understand what our code does.&lt;/p&gt;
&lt;h3 id=&quot;understanding-our-calculate-function&quot;&gt;Understanding our calculate function&lt;/h3&gt;
&lt;p&gt;First, let’s say a user clicks on a number, 99. At this point, nothing is registered in the calculator yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-1.png&quot; alt=&quot;When a user hits numbers, the calculator doesn&#39;t register `firstValue` or `operator`&quot;&gt;
  &lt;figcaption&gt;When a user hits numbers, the calculator doesn&#39;t register `firstValue` or `operator`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Second, let’s say the user clicks the subtract operator. After they click the subtract operator, we set &lt;code&gt;firstValue&lt;/code&gt; to 99. We set also &lt;code&gt;operator&lt;/code&gt; to subtract.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-2.png&quot; alt=&quot;`firstValue` and `operator` are set after the operator button is clicked&quot;&gt;
  &lt;figcaption&gt;`firstValue` and `operator` are set after the operator button is clicked&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Third, let’s say the user clicks on a second value; this time, it’s 1. At this point, the displayed number gets updated to 1, but our &lt;code&gt;firstValue&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt; and &lt;code&gt;secondValue&lt;/code&gt; remains unchanged.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-3.png&quot; alt=&quot;Display updates to 1, but `firstValue` and `operator` remains at `99` and `subtract`&quot;&gt;
  &lt;figcaption&gt;Display updates to 1, but `firstValue` and `operator` remains at `99` and `subtract`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fourth, the user clicks on subtract again. Right after they click subtract, before we calculate the result, we set  &lt;code&gt;secondValue&lt;/code&gt; as the displayed number.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-4.png&quot; alt=&quot;We set `secondValue` to 1&quot;&gt;
  &lt;figcaption&gt;We set `secondValue` to 1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fifth, we perform the calculation with &lt;code&gt;firstValue&lt;/code&gt; 99, &lt;code&gt;operator&lt;/code&gt; subtract, and &lt;code&gt;secondValue&lt;/code&gt; 1. The result is 98.&lt;/p&gt;
&lt;p&gt;Once the result is calculated, we set the display to the result. Then, we set &lt;code&gt;operator&lt;/code&gt; to subtract, and &lt;code&gt;firstValue&lt;/code&gt; to the previous displayed number.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-5.png&quot; alt=&quot;After calculation, firstValue is set to `displayedNum`&quot;&gt;
  &lt;figcaption&gt;After calculation, firstValue is set to `displayedNum`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Well, that’s terribly wrong! If we want to continue with the calculation, we need to update &lt;code&gt;firstValue&lt;/code&gt; with the calculated value.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-6.png&quot; alt=&quot;updates calculated value as `firstValue`&quot;&gt;
  &lt;figcaption&gt;updates calculated value as `firstValue`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstValue = calculator.dataset.firstValue
const operator = calculator.dataset.operator
const secondValue = displayedNum

if (
  firstValue &amp;amp;&amp;amp;
  operator &amp;amp;&amp;amp;
  previousKeyType !== &#39;operator&#39;
) {
  const calcValue = calculate(firstValue, operator, secondValue)
  display.textContent = calcValue

  // Update calculated value as firstValue
  calculator.dataset.firstValue = calcValue
} else {
  // If there are no calculations, set displayedNum as the firstValue
  calculator.dataset.firstValue = displayedNum
}

key.classList.add(&#39;is-depressed&#39;)
calculator.dataset.previousKeyType = &#39;operator&#39;
calculator.dataset.operator = action
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this fix, consecutive calculations done by operator keys should now be correct.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-consec-calc-fixed.gif&quot; alt=&quot;Consecutive calculations done with the operator key is now correct&quot;&gt;
  &lt;figcaption&gt;Consecutive calculations done with the operator key is now correct&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;what-happens-if-tim-hits-the-equal-key%3F&quot;&gt;What happens if Tim hits the equal key?&lt;/h2&gt;
&lt;p&gt;First, nothing should happen if Tim hits the equal key before any operator keys,&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/equal-first.gif&quot; alt=&quot;Calculator should show zero if equal key is hit first&quot;&gt;
  &lt;figcaption&gt;Calculator should show zero if equal key is hit first&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/equal-after-num.gif&quot; alt=&quot;When no calculation is required, display remains the same&quot;&gt;
  &lt;figcaption&gt;When no calculation is required, display remains the same&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We know that operator keys have not been clicked yet if &lt;code&gt;firstValue&lt;/code&gt; is not set to a number. We can use this knowledge to prevent the equal from calculating.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  const firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  if (firstValue) {
    display.textContent = calculate(firstValue, operator, secondValue)
  }

  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, if Tim hits a number, followed by an operator, followed by a equal, the calculator should calculate the result such that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;2 + =&lt;/code&gt; —&amp;gt; &lt;code&gt;2 + 2 = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 - =&lt;/code&gt; —&amp;gt; &lt;code&gt;2 - 2 = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 × =&lt;/code&gt; —&amp;gt; &lt;code&gt;2 × 2 = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 ÷ =&lt;/code&gt; —&amp;gt; &lt;code&gt;2 ÷ 2 = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/num-op-equal.gif&quot; alt=&quot;The calculator should treat first and second values as the same numbers if it&#39;s missing a value&quot;&gt;
  &lt;figcaption&gt;The calculator should treat first and second values as the same numbers if it&#39;s missing a value&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We have already taken this weird input into account. Can you understand why? :)&lt;/p&gt;
&lt;p&gt;Third, if Tim hits the equal key after a calculation is completed, another calculation should be performed again. Here’s how the calculation should read:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tim hits key 5 - 1&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;5 - 1 = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;4 - 1 = 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;3 - 1 = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;2 - 1 = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;1 - 1 = 0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-click-fixed.gif&quot; alt=&quot;When a user hits the equal key multiple times, the calculator should continue to calculate&quot;&gt;
  &lt;figcaption&gt;When a user hits the equal key multiple times, the calculator should continue to calculate&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Unfortunately, our calculator messes this calculation up. Here’s what our calculator shows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tim hits key 5 - 1&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tim hits equal. Calculated value is &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-wrong.gif&quot; alt=&quot;Equal key consecutive calculation gives a wrong result&quot;&gt;
  &lt;figcaption&gt;Equal key consecutive calculation gives a wrong result&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;correcting-the-calculation&quot;&gt;Correcting the calculation&lt;/h3&gt;
&lt;p&gt;First, let’s say our user we clicks 5. At this point, nothing is registered in the calculator yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-1.png&quot; alt=&quot;When a user clicked on the first number the calculator doesn&#39;t register `firstValue` or `operator`&quot;&gt;
  &lt;figcaption&gt;When a user clicked on the first number the calculator doesn&#39;t register `firstValue` or `operator`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Second, let’s say the user clicks the subtract operator. After they click the subtract operator, we set &lt;code&gt;firstValue&lt;/code&gt; to 5. We set also &lt;code&gt;operator&lt;/code&gt; to subtract.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-2.png&quot; alt=&quot;`firstValue` and `operator` are set after the operator button is clicked&quot;&gt;
  &lt;figcaption&gt;`firstValue` and `operator` are set after the operator button is clicked&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Third, the user clicks on a second value. Let’s say it’s 1. At this point, the displayed number gets updated to 1, but our &lt;code&gt;firstValue&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt; and &lt;code&gt;secondValue&lt;/code&gt; remains unchanged.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-3.png&quot; alt=&quot;Display updates to 1, but `firstValue` and `operator` remains at `5` and `subtract`&quot;&gt;
  &lt;figcaption&gt;Display updates to 1, but `firstValue` and `operator` remains at `5` and `subtract`&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fourth, the user clicks the equal key. Right after they click equal, but before the calculation, we set &lt;code&gt;secondValue&lt;/code&gt; as &lt;code&gt;displayedNum&lt;/code&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-4.png&quot; alt=&quot;`displayedNum` is set as `secondValue`&quot;&gt;
  &lt;figcaption&gt;We set `secondValue` as `displayedNum` &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Fifth, the calculator calculates the result of &lt;code&gt;5 - 1&lt;/code&gt; and gives &lt;code&gt;4&lt;/code&gt;. The result gets updated to the display. &lt;code&gt;firstValue&lt;/code&gt; and &lt;code&gt;operator&lt;/code&gt; gets carried forward to the next calculation since we did not update them.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-5.png&quot; alt=&quot;`firstValue` and `operator` are used for the next operation&quot;&gt;
  &lt;figcaption&gt;`firstValue` and `operator` are used for the next operation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Sixth, when the user hits equal again, we set &lt;code&gt;secondValue&lt;/code&gt; to &lt;code&gt;displayedNum&lt;/code&gt; before the calculation.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-calc-6.png&quot; alt=&quot;Once again, displayed num is set as the `secondValue` before the calculation&quot;&gt;
  &lt;figcaption&gt;Once again, displayed num is set as the `secondValue` before the calculation&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can tell what’s wrong here.&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;secondValue&lt;/code&gt;, we want the set &lt;code&gt;firstValue&lt;/code&gt; to the displayed number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      firstValue = displayedNum
    }

    display.textContent = calculate(firstValue, operator, secondValue)
  }

  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also want to carry forward the previous &lt;code&gt;secondValue&lt;/code&gt; into the new calculation. For &lt;code&gt;secondValue&lt;/code&gt; to persist to the next calculation, we need to store it in another custom attribute. Let’s call this custom attribute &lt;code&gt;modValue&lt;/code&gt; (stands for modifier value).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  let firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  if (firstValue) {
    if (previousKeyType === &#39;calculate&#39;) {
      firstValue = displayedNum
    }

    display.textContent = calculate(firstValue, operator, secondValue)
  }

  // Set modValue attribute
  calculator.dataset.modValue = secondValue
  calculator.dataset.previousKeyType = &#39;calculate&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;previousKeyType&lt;/code&gt; is &lt;code&gt;calculate&lt;/code&gt;, we know we can use &lt;code&gt;calculator.dataset.modValue&lt;/code&gt; as &lt;code&gt;secondValue&lt;/code&gt;. Once we know this, we can perform the calculation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (firstValue) {
  if (previousKeyType === &#39;calculate&#39;) {
    firstValue = displayedNum
    secondValue = calculator.dataset.modValue
  }

  display.textContent = calculate(firstValue, operator, secondValue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, we have the correct calculation when the equal key is clicked consecutively.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/eq-consec-click-fixed.gif&quot; alt=&quot;Consecutive calculations made by the equal key is now fixed&quot;&gt;
  &lt;figcaption&gt;Consecutive calculations made by the equal key is now fixed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;back-to-the-equal-key&quot;&gt;Back to the equal key&lt;/h3&gt;
&lt;p&gt;Fourth, if Tim hits a decimal key or a number key after the calculator key, the display should be replaced with &lt;code&gt;0.&lt;/code&gt; or the new number respectively.&lt;/p&gt;
&lt;p&gt;Here, instead of just checking if the &lt;code&gt;previousKeyType&lt;/code&gt; is &lt;code&gt;operator&lt;/code&gt;, we also need to check if it’s &lt;code&gt;calculate&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  if (
    displayedNum === &#39;0&#39; ||
    previousKeyType === &#39;operator&#39; ||
    previousKeyType === &#39;calculate&#39;
  ) {
    display.textContent = keyContent
  } else {
    display.textContent = displayedNum + keyContent
  }
  calculator.dataset.previousKeyType = &#39;number&#39;
}

if (action === &#39;decimal&#39;) {
  if (!displayedNum.includes(&#39;.&#39;)) {
    display.textContent = displayedNum + &#39;.&#39;
  } else if (
    previousKeyType === &#39;operator&#39; ||
    previousKeyType === &#39;calculate&#39;
  ) {
    display.textContent = &#39;0.&#39;
  }

  calculator.dataset.previousKeyType = &#39;decimal&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fifth, if Tim hits an operator key right after the equal key, calculator should NOT calculate.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/op-after-eq.gif&quot; alt=&quot;Operator keys should not perform calculations if they&#39;re clicked after the equal key&quot;&gt;
  &lt;figcaption&gt;Operator keys should not perform calculations if they&#39;re clicked after the equal key&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To do this, we check if the &lt;code&gt;previousKeyType&lt;/code&gt; is &lt;code&gt;calculate&lt;/code&gt; before performing calculations with operator keys.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  // ...

  if (
    firstValue &amp;amp;&amp;amp;
    operator &amp;amp;&amp;amp;
    previousKeyType !== &#39;operator&#39; &amp;amp;&amp;amp;
    previousKeyType !== &#39;calculate&#39;
  ) {
    const calcValue = calculate(firstValue, operator, secondValue)
    display.textContent = calcValue
    calculator.dataset.firstValue = calcValue
  } else {
    calculator.dataset.firstValue = displayedNum
  }

  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;what-happens-if-tim-hits-the-clear-key%3F&quot;&gt;What happens if Tim hits the clear key?&lt;/h2&gt;
&lt;p&gt;The clear key has two uses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All Clear (denoted by &lt;code&gt;AC&lt;/code&gt;) clears everything and resets the calculator to its initial state.&lt;/li&gt;
&lt;li&gt;Clear entry (denoted by &lt;code&gt;CE&lt;/code&gt;) clears the current entry. It keeps previous numbers in memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the calculator is in its default state, &lt;code&gt;AC&lt;/code&gt; should be shown.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/default.png&quot; alt=&quot;AC should be shown in the initial state&quot;&gt;
  &lt;figcaption&gt;AC should be shown in the initial state&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;First, if Tim hits a key (any key except clear), &lt;code&gt;AC&lt;/code&gt; should be changed to &lt;code&gt;CE&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/decimal-first.gif&quot; alt=&quot;AC changes to CE when a key (except clear) gets hit&quot;&gt;
  &lt;figcaption&gt;AC changes to CE when a key (except clear) gets hit&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We do this by checking if the &lt;code&gt;data-action&lt;/code&gt; is &lt;code&gt;clear&lt;/code&gt;. If it’s not &lt;code&gt;clear&lt;/code&gt;, we look for the clear button and change its &lt;code&gt;textContent&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action !== &#39;clear&#39;) {
  const clearButton = calculator.querySelector(&#39;[data-action=clear]&#39;)
  clearButton.textContent = &#39;CE&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, if Tim hits &lt;code&gt;CE&lt;/code&gt;, the display should read 0. At the same time, &lt;code&gt;CE&lt;/code&gt; should be reverted to &lt;code&gt;AC&lt;/code&gt; so Tim can reset the calculator to its initial state.**&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-2/clear.gif&quot; alt=&quot;If CE is clicked, AC should show&quot;&gt;
  &lt;figcaption&gt;If CE is clicked, AC should show&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;clear&#39;) {
  display.textContent = 0
  key.textContent = &#39;AC&#39;
  calculator.dataset.previousKeyType = &#39;clear&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Third, if Tim hits &lt;code&gt;AC&lt;/code&gt;, reset the calculator to its initial state.&lt;/p&gt;
&lt;p&gt;To reset the calculator to its initial state, we need to clear all custom attributes we’ve set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;clear&#39;) {
  if (key.textContent === &#39;AC&#39;) {
    calculator.dataset.firstValue = &#39;&#39;
    calculator.dataset.modValue = &#39;&#39;
    calculator.dataset.operator = &#39;&#39;
    calculator.dataset.previousKeyType = &#39;&#39;
  } else {
    key.textContent = &#39;AC&#39;
  }

  display.textContent = 0
  calculator.dataset.previousKeyType = &#39;clear&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s it! Building a calculator is hard, don’t berate yourself if you cannot build a calculator without making mistakes.&lt;/p&gt;
&lt;p&gt;For homework, write down all the edge cases mentioned above on a piece of paper, then proceed to build the calculator again from scratch. See if you can get the calculator up. Take your time, clear away your bugs one by one and you’ll get your calculator up eventually.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article. If you did, you’ll want to check out &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;—a course to help you learn JavaScript once and for all.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;https://zellwk.com/blog/calculator-part-3&quot;&gt;next lesson&lt;/a&gt;, you’ll learn to refactor the calculator with best practices.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Are you too old to learn to code?</title>
    <link href="https://zellwk.com/blog/too-old/"/>
    <updated>2018-03-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/too-old/</id>
    <content type="html">&lt;p&gt;Hey, it’s Zell. Today, we a question from two students, Mark and Todd. They’re in their forties and are getting started in web development, and they are worried that they’re too old. Too old to learn or too old to get a job.&lt;/p&gt;
&lt;p&gt;It’s funny I get this question because I felt too old to learn to code when I was 19 years old. It took me six years to before I started to code. When I started, I was 25.&lt;/p&gt;
&lt;p&gt;Thinking logically, if I’m too old to learn when I was 19, I should be even more afraid when I was 25. But I wasn’t. I wasn’t afraid because I burned my bridges. I decided I don’t want to work in a bank and decided to learn to design and code. It was a do or die. I couldn’t worry because I had to learn enough to find a job within a year.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;p&gt;Back to you. You’re older than me, you have more risk, you may have more mouths to feed. It’s normal if you say you cannot make a rash decision, to stop everything and learn to code.&lt;/p&gt;
&lt;p&gt;Here’s what I would say for your situation. I hope it helps.&lt;/p&gt;
&lt;p&gt;I think we can break your worries into three questions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is it too late for you to learn to code?&lt;/li&gt;
&lt;li&gt;Can you get a job because you are too old?&lt;/li&gt;
&lt;li&gt;Can you afford to fail?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;is-it-too-late-for-you-to-learn-to-code%3F&quot;&gt;Is it too late for you to learn to code?&lt;/h2&gt;
&lt;p&gt;I would say it’s never too late to learn to code. Age doesn’t matter. I know of students who are 70 years old and they’re trying to learn too.&lt;/p&gt;
&lt;p&gt;From my perspective, most people worry about being late because they’re worried they cannot with others. They’re worried they cannot fulfill their potential in life. I suspect you may be feeling this too.&lt;/p&gt;
&lt;p&gt;That was what I felt when I was 19. It was too late because other people got into it way in advance. I didn’t have the knowledge and means, and because I didn’t study programming.&lt;/p&gt;
&lt;p&gt;What helped me was this message. I cannot remember where it came from, but here goes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don’t live once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I say that again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don’t live once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’re afraid we cannot compete with others when we start out late. The premise for this thought is we only live once in our lives. From 0 to 80, and that’s it. If we are too late, we are too late.&lt;/p&gt;
&lt;p&gt;But you don’t have to think of all 80 years as one big chunk. You can break in down into small chunks. You can think of ten year increments. Each ten year increment is a new life. If you have 60 years to life, you have 6 lives ahead of you.&lt;/p&gt;
&lt;p&gt;This works because you can do a lot of things in ten years. You can get good and become an expert in any field. I’m only in the development field for about five years, and I still have a long way to go.&lt;/p&gt;
&lt;p&gt;In 5 years, I can already do a lot of things, and I probably don’t need to be worried about finding a job.&lt;/p&gt;
&lt;p&gt;Here’s the question. If you are starting a new life tomorrow, would it still be too late for you to code? If you have ten years ahead, would it still be too late?&lt;/p&gt;
&lt;h2 id=&quot;can-you-get-a-job-if-you-are-too-old%3F&quot;&gt;Can you get a job if you are too old?&lt;/h2&gt;
&lt;p&gt;You can, but I’m going to be honest with you.&lt;/p&gt;
&lt;p&gt;People are going to judge you. They’re going to talk about your age. They’re going to think that you’re too old.&lt;/p&gt;
&lt;p&gt;But like it or not, they’re going to talk about you anyway. They’re going to talk about your race, your gender, your nationality, and everything under the sun.&lt;/p&gt;
&lt;p&gt;I hope putting this statement helps you clarify that fear and makes it less scary. The judgment is going to come no matter what. You can’t run away from it. You can only accept that people will judge you.&lt;/p&gt;
&lt;p&gt;When you accept that judgment, you don’t have much to worry anymore. Do whatever you need and whatever you want.&lt;/p&gt;
&lt;p&gt;One good news is, when you are older, you know things younger people don’t know. THere’s so much more to a job that’s just coding. Go ahead and show them what you learned. There are things people will find valuable.&lt;/p&gt;
&lt;h2 id=&quot;can-you-afford-to-fail%3F&quot;&gt;Can you afford to fail?&lt;/h2&gt;
&lt;p&gt;You would probably say no. You have mouths to feed. You need a decent income. You cannot quit your job and join a bootcamp like the younger people do. You also cannot pray that a job falls into your hand miraculously. You have to fight for it.&lt;/p&gt;
&lt;p&gt;You need to be able to feed yourself and your family. Minimally, you need to be able to survive. If you cannot survive, you cannot think about learning.&lt;/p&gt;
&lt;p&gt;If you don’t have a job now, the first thing you need is to get a job to feed yourself an your family. This statement is true even if you are in your twenties. You need to feel safe about money before you can learn.&lt;/p&gt;
&lt;p&gt;Because of this reason, I ask people to get a job before enrolling in my courses. If you don’t money to support right now, you won’t be able to learn. Your focus will be on money instead. That’s when you’ll waste a lot of time and energy.&lt;/p&gt;
&lt;p&gt;I’m here to make your lives better. I’m not here to make it worst by taking money away from you. So I suggest you find a job, any job. It doesn’t if it’s not about coding. You can get a job as a waiter and learn after work hours.&lt;/p&gt;
&lt;p&gt;The problem though, if you work, is your are going to be demotivated and tired after your work. If coding is important to you, you need to fight these feelings. You have to go through it.&lt;/p&gt;
&lt;p&gt;If your friends and family don’t understand you, you need to communicate with them. Talk to them, work with them. Listen to them. You have to hear them before they can hear you.&lt;/p&gt;
&lt;p&gt;Ask for their support your journey. I asked my wife to support me in the journey to create materials for you. If she’s too worried about the money, and she doesn’t let me do what I want/need to do, I won’t be here. I’ll be working for someone else.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s it from me. I hope it helps. I’m sorry I got a bit heated up. I want to help you overcome your barriers and live the life you want. I don’t you to be stuck like me for 6 years before I started coding.&lt;/p&gt;
&lt;p&gt;Thanks for watching.&lt;/p&gt;
&lt;p&gt;If you have any questions about frontend development, please feel free to leave them in the comments below. I will try to answer them via video.&lt;/p&gt;
&lt;p&gt;If you like this video, please hit the subscribe button below so I can send you more videos like this one every Friday. Or better yet, subscribe over at my blog at zellwk.com and I’ll send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;With that, I’m out. Happy Friday and I hope you have a nice weekend. See you next week 😄.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to build a calculator—part 1</title>
    <link href="https://zellwk.com/blog/calculator-part-1/"/>
    <updated>2018-03-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/calculator-part-1/</id>
    <content type="html">&lt;p&gt;This is the start of a three-part lesson about building a calculator. By the end of these three lessons, you should get a calculator that functions exactly like an iPhone calculator (without the &lt;code&gt;+/-&lt;/code&gt; and percentage functionalities).&lt;/p&gt;
&lt;p&gt;Here’s what you’ll get:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/calculator.gif&quot; alt=&quot;GIF of a calculator you&#39;ll build&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;GIF of a calculator you&#39;ll build&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-prerequisites&quot;&gt;The prerequisites&lt;/h2&gt;
&lt;p&gt;Before you attempt follow through the lesson, please make sure you have decent command of JavaScript. Minimally, you need to know these things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/js-if-else&quot;&gt;If/else statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/js-for-loops&quot;&gt;For loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/js-functions&quot;&gt;JavaScript functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/es6/#arrow-functions&quot;&gt;Arrow functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators&lt;/li&gt;
&lt;li&gt;How to change the text with the &lt;code&gt;textContent&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;How to add event listeners with the event delegation pattern&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: This article is a sample lesson from &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;—a course to help you learn JavaScript once and for all. Check it out if you love the lesson :)&lt;/p&gt;
&lt;h2 id=&quot;before-you-begin&quot;&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;I urge you to try and build the calculator yourself before following the lesson. It’s good practice because you’ll train yourself to think like a developer.&lt;/p&gt;
&lt;p&gt;Come back to this lesson once you’ve tried for one hour (doesn’t matter whether you succeed or fail; when you try, you think, and that’ll help you absorb the lesson in double quick time).&lt;/p&gt;
&lt;p&gt;With that, let’s begin by understanding how a calculator works.&lt;/p&gt;
&lt;h2 id=&quot;building-the-calculator&quot;&gt;Building the calculator&lt;/h2&gt;
&lt;p&gt;First, we want to build the calculator.&lt;/p&gt;
&lt;p&gt;The calculator consist of two parts. The display and the keys.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/display-and-keys.png&quot; alt=&quot;Squares that label the calculator&#39;s display and keys&quot;&gt;
  &lt;figcaption&gt;Calculators have a display and several keys&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;calculator&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;calculator__display&amp;quot;&amp;gt;0&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;calculator__keys&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use CSS Grid to make the keys since they’re arranged in a grid-like format. This has already been done for you in the starter file. You can find the starter file at &lt;a href=&quot;https://codepen.io/zellwk/pen/pLgmGL&quot;&gt;this pen&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.calculator__keys {
  display: grid;
  /* other necessary CSS */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To help us identify operator, decimal, clear and equal keys, we’re going to supply a data-action attribute that describes what they do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;calculator__keys&amp;quot;&amp;gt;
  &amp;lt;button class=&amp;quot;key--operator&amp;quot; data-action=&amp;quot;add&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt;
  &amp;lt;button class=&amp;quot;key--operator&amp;quot; data-action=&amp;quot;subtract&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt;
  &amp;lt;button class=&amp;quot;key--operator&amp;quot; data-action=&amp;quot;multiply&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
  &amp;lt;button class=&amp;quot;key--operator&amp;quot; data-action=&amp;quot;divide&amp;quot;&amp;gt;÷&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;7&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;8&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;9&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;4&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;5&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;6&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;1&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;2&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;3&amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt;0&amp;lt;/button&amp;gt;
  &amp;lt;button data-action=&amp;quot;decimal&amp;quot;&amp;gt;.&amp;lt;/button&amp;gt;
  &amp;lt;button data-action=&amp;quot;clear&amp;quot;&amp;gt;AC&amp;lt;/button&amp;gt;
  &amp;lt;button class=&amp;quot;key--equal&amp;quot; data-action=&amp;quot;calculate&amp;quot;&amp;gt;=&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;listening-to-key-presses&quot;&gt;Listening to key-presses&lt;/h2&gt;
&lt;p&gt;Five things can happen when a person gets hold of a calculator:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They hit a number key (0-9)&lt;/li&gt;
&lt;li&gt;They hit an operator key (+, -, ×, ÷)&lt;/li&gt;
&lt;li&gt;They hit the decimal key&lt;/li&gt;
&lt;li&gt;They hit the equal key&lt;/li&gt;
&lt;li&gt;They hit the clear key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first step to building this calculator is to be able to (1) listen for all keypresses and (2) determine the type of key that pressed. In this case, we can use an event delegation pattern to listen since keys are all children of &lt;code&gt;.calculator__keys&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculator = document.querySelector(&#39;.calculator&#39;)
const keys = calculator.querySelector(&#39;.calculator__keys&#39;)

keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) {
    // Do something
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can use the &lt;code&gt;data-action&lt;/code&gt; attribute to determine the type of key that is clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const key = e.target
const action = key.dataset.action
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the key does not have a &lt;code&gt;data-action&lt;/code&gt; attribute, it must be a number key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  console.log(&#39;number key!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the key has a &lt;code&gt;data-action&lt;/code&gt; that is either &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;subtract&lt;/code&gt;, &lt;code&gt;multiply&lt;/code&gt; or &lt;code&gt;divide&lt;/code&gt;, we know the key is an operator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  console.log(&#39;operator key!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the key’s &lt;code&gt;data-action&lt;/code&gt; is &lt;code&gt;decimal&lt;/code&gt;, we know the user clicked on the decimal key. Following the same thought process, if the key’s &lt;code&gt;data-action&lt;/code&gt; is &lt;code&gt;clear&lt;/code&gt;, we know the user clicked on the clear (the one that says AC) key; if the key’s &lt;code&gt;data-action&lt;/code&gt; is &lt;code&gt;calculate&lt;/code&gt;, we know the user clicked on the equal key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;decimal&#39;) {
  console.log(&#39;decimal key!&#39;)
}

if (action === &#39;clear&#39;) {
  console.log(&#39;clear key!&#39;)
}

if (action === &#39;calculate&#39;) {
  console.log(&#39;equal key!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you should get a &lt;code&gt;console.log&lt;/code&gt; response from every calculator key.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/click-key.gif&quot; alt=&quot;We&#39;re now able to detect different types of keys&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;We&#39;re now able to detect different types of keys&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;building-the-happy-path&quot;&gt;Building the happy path&lt;/h2&gt;
&lt;p&gt;When a user picks up the calculator, they can click on any of these five types of keys:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a number key (0-9)&lt;/li&gt;
&lt;li&gt;an operator key (+, -, ×, ÷)&lt;/li&gt;
&lt;li&gt;the decimal key&lt;/li&gt;
&lt;li&gt;the equal key&lt;/li&gt;
&lt;li&gt;the clear key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It can be overwhelming to consider five types of keys at once, so let’s take it step by step and consider what a normal person would do when they pick up a calculator. &lt;strong&gt;This “what a normal person would do” is called the happy path&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s call our normal person Mary.&lt;/p&gt;
&lt;p&gt;When Mary picks up a calculator, she’ll probably hit a number key at first.&lt;/p&gt;
&lt;h2 id=&quot;when-a-user-hits-a-number-key&quot;&gt;When a user hits a number key&lt;/h2&gt;
&lt;p&gt;At this point, if the calculator shows 0 (the default number), the target number should replace zero.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/num-zero.gif&quot; alt=&quot;Calculator replaces 0 with 9&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Calculator replaces 0 with 9&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If the calculator shows a non-zero number, the target number should be appended to the displayed number.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/num-non-zero.gif&quot; alt=&quot;Calculator appends 5 to 9&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Calculator appends 5 to 9&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here, we need to know two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number of the key that was clicked&lt;/li&gt;
&lt;li&gt;The current displayed number&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can get these two values through the &lt;code&gt;textContent&lt;/code&gt; property of the clicked key and &lt;code&gt;.calculator__display&lt;/code&gt; respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const display = document.querySelector(&#39;.calculator__display&#39;)

keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) {
    const key = e.target
    const action = key.dataset.action
    const keyContent = key.textContent
    const displayedNum = display.textContent
    // ...
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If the calculator shows 0, we want to replace the calculator’s display with the textContent of the clicked key.&lt;/strong&gt; We can do so by replacing the display’s textContent property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  if (displayedNum === &#39;0&#39;) {
    display.textContent = keyContent
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If the calculator shows a non-zero number, we want to append the clicked key to the displayed number.&lt;/strong&gt; To append a number, we concatenate a string.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (!action) {
  if (displayedNum === &#39;0&#39;) {
    display.textContent = keyContent
  } else {
    display.textContent = displayedNum + keyContent
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, Mary may click either of these keys:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A decimal key&lt;/li&gt;
&lt;li&gt;An operator key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s say Mary hits the decimal key.&lt;/p&gt;
&lt;h2 id=&quot;when-a-user-hits-the-decimal-key&quot;&gt;When a user hits the decimal key&lt;/h2&gt;
&lt;p&gt;When Mary hits the decimal key, a decimal should appear on the display. If Mary hits any number after hitting a decimal key, the number should be appended on the display as well.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/decimal-non-zero.gif&quot; alt=&quot;Calculator adds a decimal, followed by a number, to the display&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Calculator adds a decimal, followed by a number, to the display&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To create this effect, we can concatenate &lt;code&gt;.&lt;/code&gt; to the displayed number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;decimal&#39;) {
  display.textContent = displayedNum + &#39;.&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s say Mary continues her calculation by hitting an operator key.&lt;/p&gt;
&lt;h2 id=&quot;when-a-user-hits-an-operator-key&quot;&gt;When a user hits an operator key&lt;/h2&gt;
&lt;p&gt;If Mary hits an operator key, the operator should be highlighted so Mary knows the operator is active.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/operator.gif&quot; alt=&quot;Operator keys should be depressed when they&#39;re clicked on&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Operator keys should be depressed when they&#39;re clicked on&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To do so, we can add the &lt;code&gt;is-depressed&lt;/code&gt; class to the operator key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  key.classList.add(&#39;is-depressed&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once Mary has hit an operator key, she’ll hit another number key.&lt;/p&gt;
&lt;h2 id=&quot;when-a-user-hits-a-number-key-after-an-operator-key&quot;&gt;When a user hits a number key after an operator key&lt;/h2&gt;
&lt;p&gt;When Mary hits a number key again, the previous display should be replaced with the new number. The operator key should also release it’s pressed state.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/num-after-operator.gif&quot; alt=&quot;Display replaced by a new number&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Display replaced by a new number&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To release the pressed state, we remove the &lt;code&gt;is-depressed&lt;/code&gt; class from all keys through a &lt;code&gt;forEach&lt;/code&gt; loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) {
    const key = e.target
    // ...

    // Remove .is-depressed class from all keys
    Array.from(key.parentNode.children)
      .forEach(k =&amp;gt; k.classList.remove(&#39;is-depressed&#39;))
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we want to update the display to the clicked key. Before we do this, we need a way to tell if the previous key is an operator key.&lt;/p&gt;
&lt;p&gt;One way to do this is through a custom attribute. Let’s call this custom attribute &lt;code&gt;data-previous-key-type&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculator = document.querySelector(&#39;.calculator&#39;)
// ...

keys.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (e.target.matches(&#39;button&#39;)) {
    // ...

    if (
      action === &#39;add&#39; ||
      action === &#39;subtract&#39; ||
      action === &#39;multiply&#39; ||
      action === &#39;divide&#39;
    ) {
      key.classList.add(&#39;is-depressed&#39;)
      // Add custom attribute
      calculator.dataset.previousKeyType = &#39;operator&#39;
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;previousKeyType&lt;/code&gt; is an operator, we want to replace the displayed number with clicked number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const previousKeyType = calculator.dataset.previousKeyType

if (!action) {
  if (displayedNum === &#39;0&#39; || previousKeyType === &#39;operator&#39;) {
    display.textContent = keyContent
  } else {
    display.textContent = displayedNum + keyContent
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s say Mary decides to complete her calculation by hitting the equal key.&lt;/p&gt;
&lt;h2 id=&quot;when-a-user-hits-the-equal-key&quot;&gt;When a user hits the equal key&lt;/h2&gt;
&lt;p&gt;When Mary hits the equal key, the calculator should calculate a result that depends on three values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;em&gt;first number&lt;/em&gt; entered into the calculator&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;operator&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;second number&lt;/em&gt; entered into the calculator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the calculation, the result should replace the displayed value.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/calculator-1/equal.gif&quot; alt=&quot;Calculates the correct value&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;Calculates the correct value&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;At this point, we only know the &lt;em&gt;second number&lt;/em&gt;—the currently displayed number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  const secondValue = displayedNum
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get the &lt;em&gt;first number&lt;/em&gt;, we need to store the calculator’s displayed value before we erase it. One way to save this first number is to add it to a custom attribute when the operator button gets clicked.&lt;/p&gt;
&lt;p&gt;To get the &lt;em&gt;operator&lt;/em&gt;, we can also use the same technique.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (
  action === &#39;add&#39; ||
  action === &#39;subtract&#39; ||
  action === &#39;multiply&#39; ||
  action === &#39;divide&#39;
) {
  // ...
  calculator.dataset.firstValue = displayedNum
  calculator.dataset.operator = action
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the three values we need, we can perform a calculation. Eventually, we want code to look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (action === &#39;calculate&#39;) {
  const firstValue = calculator.dataset.firstValue
  const operator = calculator.dataset.operator
  const secondValue = displayedNum

  display.textContent = calculate(firstValue, operator, secondValue)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means we need to create a &lt;code&gt;calculate&lt;/code&gt; function. It should take in three parameters—the first number, the operator, and the second number.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  // Perform calculation and return calculated value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the operator is &lt;code&gt;add&lt;/code&gt;, we want to add values together; if the operator is &lt;code&gt;subtract&lt;/code&gt;, we want to subtract the values, and so on.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  let result = &#39;&#39;

  if (operator === &#39;add&#39;) {
    result = n1 + n2
  } else if (operator === &#39;subtract&#39;) {
    result = n1 - n2
  } else if (operator === &#39;multiply&#39;) {
    result = n1 * n2
  } else if (operator === &#39;divide&#39;) {
    result = n1 / n2
  }

  return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that &lt;code&gt;firstValue&lt;/code&gt; and &lt;code&gt;secondValue&lt;/code&gt; are strings at this point. If you add strings together, you’ll concatenate them (&lt;code&gt;1 + 1 = 11&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;So, before calculating the result, we want to convert strings to numbers. We can do so with two functions—&lt;code&gt;parseInt&lt;/code&gt; and &lt;code&gt;parseFloat&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parseInt&lt;/code&gt; converts a string into an &lt;strong&gt;integer&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parseFloat&lt;/code&gt; converts a string into a &lt;strong&gt;float&lt;/strong&gt; (this means a number with decimal places).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a calculator, we need a float.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const calculate = (n1, operator, n2) =&amp;gt; {
  let result = &#39;&#39;

  if (operator === &#39;add&#39;) {
    result = parseFloat(n1) + parseFloat(n2)
  } else if (operator === &#39;subtract&#39;) {
    result = parseFloat(n1) - parseFloat(n2)
  } else if (operator === &#39;multiply&#39;) {
    result = parseFloat(n1) * parseFloat(n2)
  } else if (operator === &#39;divide&#39;) {
    result = parseFloat(n1) / parseFloat(n2)
  }

  return result
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s it; we’re done constructing the happy path! 😄&lt;/p&gt;
&lt;p&gt;But we’re not done building the calculator yet. This is because users tend to veer away from happy paths in reality.&lt;/p&gt;
&lt;p&gt;So, when you any application, you want to make sure you cater for common edge cases that may happen. You’ll learn how to do this in the &lt;a href=&quot;https://zellwk.com/blog/calculator-part-2&quot;&gt;next lesson&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article. If you did, you’ll want to check out &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;—a course to help you learn JavaScript once and for all.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Experiment publicly</title>
    <link href="https://zellwk.com/blog/experiment-publicly/"/>
    <updated>2018-03-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/experiment-publicly/</id>
    <content type="html">&lt;p&gt;I’m going to be honest with you. This video is probably going to suck. Why? Because I’m experimenting with something new.&lt;/p&gt;
&lt;p&gt;I’m going to tell you what I’m experimenting with, why I’m experimenting and why you should conduct your own public experiment.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Here’s what my experiment is going to be about: I’m going to record videos and upload them directly without editing them.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-would-i-do-such-a-stupid-thing%3F&quot;&gt;Why would I do such a stupid thing?&lt;/h2&gt;
&lt;p&gt;I found out that I loved creating videos, but it took too long for me to create each video. What I realized was I get too nervous in front of the camera, and I keep repeating the words I wanted to say.&lt;/p&gt;
&lt;p&gt;So, a video that is 5 minutes can take up to 30 minutes to record and up to 3 hours to edit. It took too much time.&lt;/p&gt;
&lt;p&gt;The experiment lets me reduce the creation time for videos, and also reduce the “camera fright” I experience whenever I speak in front of a camera.&lt;/p&gt;
&lt;p&gt;Back to you. I recommend you experiment publicly as well. Here’s why.&lt;/p&gt;
&lt;h2 id=&quot;you-improve-quickly-when-you-experiment-publicly&quot;&gt;You improve quickly when you experiment publicly&lt;/h2&gt;
&lt;p&gt;When I started recording videos, my videos sucked. If you watch my first video, you’ll see how the sound quality and video quality sucked, and how I didn’t know anything about lighting at all.&lt;/p&gt;
&lt;p&gt;Over 2 months (or eight videos), I improved to a point where I am confident to produce video content for premium courses.&lt;/p&gt;
&lt;p&gt;(Note: I won’t be producing video courses yet; that’s a future thing. Right now, I want to practice so I speak confidently and not robotically).&lt;/p&gt;
&lt;p&gt;So the idea is, if you experiment publicly, you will improve faster than if you don’t.&lt;/p&gt;
&lt;p&gt;That’s the end of this video.&lt;/p&gt;
&lt;p&gt;Thanks for watching. I hope this video didn’t suck too much, and I hope it gave you the courage to experiment publicly.&lt;/p&gt;
&lt;p&gt;If you have any questions about frontend development (or anything else), feel free to leave them in the comments below. I’m going to answer some questions over video starting next week.&lt;/p&gt;
&lt;p&gt;If you like this video, please hit the subscribe button below so I can send you more videos like this one every Friday. Or better yet, subscribe over at my blog at zellwk.com and I’ll send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;That’s it for today, happy Friday and I hope you have a nice weekend. See you next week 😄.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Case study—a project from hell</title>
    <link href="https://zellwk.com/blog/case-study-project-from-hell/"/>
    <updated>2018-03-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/case-study-project-from-hell/</id>
    <content type="html">&lt;p&gt;Project T is a project that I don’t want to remember. It was a big project for a big company—a project that I thought I would be proud to include in my portfolio; and boy, I was wrong.&lt;/p&gt;
&lt;p&gt;Project T was bad. It lasted nine months when it was supposed to last three months. At the end, I gave a huge discount to the agency because they lost money on the project; as a result, I lost big time too.&lt;/p&gt;
&lt;p&gt;Of the original team—a project manager, a visual designer, a UX designer and a frontend developer (me), I was the only member that survived the project till the end. Largely because of two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I was stupid and naive&lt;/li&gt;
&lt;li&gt;My sense of responsibility didn’t allow me to abandon the project halfway.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the end of the 9-month long project, I was burned out, and I quit freelancing for a year.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;p&gt;I bottled up my feelings for three years before writing this case study because I fear the case study would reflect badly on me—I only had negative experiences to share.&lt;/p&gt;
&lt;p&gt;But I still want to share the lessons I learnt from Project T. While doing so, I want to keep the project, client, and agency anonymous to protect all parties.&lt;/p&gt;
&lt;p&gt;To summarize, I learned three important lessons.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There’s no client from hell&lt;/li&gt;
&lt;li&gt;Project managers need to shoulder 100% responsibility for the project.&lt;/li&gt;
&lt;li&gt;Design and development teams should talk from day 1&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;there%E2%80%99s-no-client-from-hell&quot;&gt;There’s no client from hell&lt;/h2&gt;
&lt;p&gt;Service providers love to blame clients for things that go wrong. It’s never our fault; always theirs; or so we hope.&lt;/p&gt;
&lt;p&gt;For this project, things went immensely wrong. Let me give you a typical example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Day 1: We proposed a solution to a problem they had&lt;/li&gt;
&lt;li&gt;Day 3: They came back with a different solution. My project manager would accept their solution and we’d work on it.&lt;/li&gt;
&lt;li&gt;Day 5: Feature completed&lt;/li&gt;
&lt;li&gt;Day 7: Meeting held; they’d say the solution wasn’t good enough; they would like to propose another solution. This “new” solution was what we initially proposed. My project manager accepted again, and we’d get to building.&lt;/li&gt;
&lt;li&gt;Day 9: Another meeting held; solution wasn’t good enough again; some other ideas needed to be explored. We went back to the drawing board.&lt;/li&gt;
&lt;li&gt;Day 11: My project manager couldn’t translate the requirements, I’d pop into the meeting, discover that the previous solution was everything they needed, proceed to explain, and everyone agreed. We thought the case was closed.&lt;/li&gt;
&lt;li&gt;Day 13: Something wasn’t good enough again. We had to go back to the drawing board. Rinse and repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And so, we spent a month, maybe more, designing a carousel.&lt;/p&gt;
&lt;p&gt;Although there were politics and backside-covering messages flying around, they weren’t difficult to handle. If anyone was to take responsibility for what transpired, I believe the project managers should be the ones responsible.&lt;/p&gt;
&lt;p&gt;So, there’s no clients from hell. There are only project managers who don’t perform.&lt;/p&gt;
&lt;h2 id=&quot;project-managers-need-to-shoulder-100%25-responsibility-for-the-project.&quot;&gt;Project managers need to shoulder 100% responsibility for the project.&lt;/h2&gt;
&lt;p&gt;Here’s a crazy thing you’ll never believe—my project manager’s view on the project was: “Just give them what they want”.&lt;/p&gt;
&lt;p&gt;Can you imagine how much pain the development team had to endure because of this attitude?&lt;/p&gt;
&lt;p&gt;If you can’t, imagine rebuilding a carousel 7 times throughout a project. (I forgot the actual number, but we rebuilt many components many times without valid reasons). The development team complained day in and day out; morale was low; all of us (sometimes even the project manager) worked for at least twelve hours everyday.&lt;/p&gt;
&lt;p&gt;The worst part of the project was—I was under immense pressure to build and rebuild everything as the sole developer on the project (for many months). I felt I was the bottleneck. I couldn’t push for much in the project because I had no authority (even though I had ownership). This was what caused the burnout eventually.&lt;/p&gt;
&lt;p&gt;On the client’s side, their project manager could not stand firm on any decision. He’d get swayed by other department heads after a meeting and tell us his proposed changes, even though things were agreed upon in the meeting!&lt;/p&gt;
&lt;p&gt;When we proposed a change, the project manager would go: “let me talk to the CEO and see what he thinks”. As a result, we would wait.&lt;/p&gt;
&lt;p&gt;Before this project, I assumed that project managers would assume complete ownership of a project. I was wrong and naive. “Let me talk to the CEO and see what he thinks” should have been a red flag; I should have gotten out of the project right away.&lt;/p&gt;
&lt;p&gt;Why? If the project manager doesn’t have complete authority over the project, it implies they don’t have ownership. If they don’t have ownership, they defer responsibility. When nobody makes decisions, nothing gets done.&lt;/p&gt;
&lt;p&gt;Project managers on both teams need to assume ownership of the project. If client’s project manager falters, it’s up to our team’s project manager to hold the fort.&lt;/p&gt;
&lt;p&gt;If you are a one-person team, you need to hold the fort yourself. It’s part and parcel of development work.&lt;/p&gt;
&lt;h2 id=&quot;design-and-development-teams-should-talk-from-day-1&quot;&gt;Design and development teams should talk from day 1&lt;/h2&gt;
&lt;p&gt;7 months into the project, management was finally ready to integrate our design and frontend into the backend. It wasn’t because they were finally happy with the design (the team could have made tweaks forever); it was because we had to launch in two months. We had to integrate and run QA tests before it was too late.&lt;/p&gt;
&lt;p&gt;It was already too late.&lt;/p&gt;
&lt;p&gt;Integration is difficult. Bugs are inevitable. Don’t expect a backend developer to understand 100% of your code, even if you documented well. Sometimes, people miss out important details.&lt;/p&gt;
&lt;p&gt;The result?&lt;/p&gt;
&lt;p&gt;Tonnes of panic, lots of overtime. We eventually managed to launch on time, but I (and another developer we hired to help ease the panic) had to stay an extra month after launch to iron out all the bugs.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I tried to keep this case study concise and only mention key learning points. If I said anymore, I’d probably go into a full three-day rant or something.&lt;/p&gt;
&lt;p&gt;Like I said, writing this case study was difficult because I feared the negative perceptions people would have of me once I released it. To be honest, I still feel afraid. I don’t know if it’ll adversely affect my freelance or job-seeking opportunities down the road should I need a job.&lt;/p&gt;
&lt;p&gt;But I still want to release this article, because I hope you would learn something from my experience.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How do you decide what to build?</title>
    <link href="https://zellwk.com/blog/what-to-build/"/>
    <updated>2018-03-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/what-to-build/</id>
    <content type="html">&lt;p&gt;“Can you tell me what should I build? I don’t have any ideas!”&lt;/p&gt;
&lt;p&gt;This is one of the biggest problems that stop developers from becoming better at their craft. Upon investigation, I discovered that people have ideas; they’re just afraid their ideas are bad, would fail, or nobody would use the thing they made.&lt;/p&gt;
&lt;p&gt;These feelings are normal. We’re afraid to make things that kinda suck because we’re afraid others will shame us for it. We’re afraid the very thing we make will convince us that we’re the useless fraud that should never have existed in this world.&lt;/p&gt;
&lt;p&gt;Then, we freeze in fear.&lt;/p&gt;
&lt;p&gt;It’s a big problem. I can’t solve the problem for you, but I hope the lessons I share in today’s article can help you push yourself out of paralysis.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;don%E2%80%99t-worry-about-the-results&quot;&gt;Don’t worry about the results&lt;/h2&gt;
&lt;p&gt;We all want to be guaranteed results. If I build this, I’ll get that—money, opportunities, work; you name it.&lt;/p&gt;
&lt;p&gt;But nobody can guarantee results. Nobody knows how much money you’ll earn from the product you make. Nobody knows if you’ll get freelance clients from the post you wrote. Nobody knows whether you’ll get a job if you build a todo list app with the latest JavaScript framework.&lt;/p&gt;
&lt;p&gt;Since nobody can guarantee results, nobody knows what you should build. That’s why so many entrepreneurs pivot their companies—because they don’t know what to build; they figure it out along the way.&lt;/p&gt;
&lt;p&gt;You cannot focus on the results. There’s nothing to focus on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus on the process. Focus on the things you want to make. Make them.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;all-ideas-are-great&quot;&gt;All ideas are great&lt;/h2&gt;
&lt;p&gt;“My ideas suck.”&lt;/p&gt;
&lt;p&gt;Many people say this, then, proceed to claim that they can’t build anything worthwhile.&lt;/p&gt;
&lt;p&gt;These people have it backwards. They judged their ideas before they worked on them. They don’t give their ideas the chance to materialize. If the idea doesn’t materialize, it’s worth nothing. You won’t know if an idea would work before you work on it.&lt;/p&gt;
&lt;p&gt;Was it a good idea to write a &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;book on Susy&lt;/a&gt;? (In case you didn’t know, that was the first book I wrote).&lt;/p&gt;
&lt;p&gt;Expert entrepreneurs would say it’s a bad idea—nobody wrote about Susy; there’s no demand; nobody would buy it.&lt;/p&gt;
&lt;p&gt;But I wrote it anyway.&lt;/p&gt;
&lt;p&gt;I didn’t expect the book to sell. I wrote it because I wanted to share my knowledge. I was okay if nobody bought it. If ONE person bought and loved the book, it’s a smashing success.&lt;/p&gt;
&lt;p&gt;To my surprise, &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learn Susy&lt;/a&gt; made $56,000 in it’s lifetime (three years I think). Here’s some solid proof:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/what-to-build/learnsusy-revenue.png&quot; alt=&quot;Image of the revenues generated from Learn Susy&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Was Learning Susy a good idea?&lt;/p&gt;
&lt;p&gt;On hindsight. It was the BEST IDEA I ever had, even though it sounded like a stupid idea to most people.&lt;/p&gt;
&lt;h2 id=&quot;the-kickstarting-idea&quot;&gt;The kickstarting idea&lt;/h2&gt;
&lt;p&gt;We don’t want to make things because we’re afraid they’ll fail. But what if we can never fail?&lt;/p&gt;
&lt;p&gt;Learning Susy wasn’t the first thing I made.&lt;/p&gt;
&lt;p&gt;The first thing I made was my &lt;a href=&quot;https://zellwk.com/blog/why-i-started-learning-about-web-design-and-how-you-can-do-it-too&quot;&gt;first article&lt;/a&gt;. It sucked; nobody paid attention to it; but it didn’t fail. There was no way it could fail because of how I defined failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What happens if you’ve made something and it didn’t fail?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chances are, you’ll gain confidence to make a second thing, then another, then another, then another.&lt;/p&gt;
&lt;h2 id=&quot;how-did-you-define-failure%3F&quot;&gt;How did you define failure?&lt;/h2&gt;
&lt;p&gt;We don’t consciously think about what it means to fail. When we don’t consciously set a failure mark, we automatically set it sky high.&lt;/p&gt;
&lt;p&gt;“It would fail if nobody buys it”, we say, but “nobody” means 200 people. No wonder we’re afraid.&lt;/p&gt;
&lt;p&gt;How do you define failure?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here’s another alternative, “it would fail if I don’t make it, and if I don’t tweet about it at least once”.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;build-what-if-it-doesn%E2%80%99t-get-results%3F&quot;&gt;Build what if it doesn’t get results?&lt;/h2&gt;
&lt;p&gt;If you lower the bar for failure, you can create anything you want. Of course, they don’t guarantee results.&lt;/p&gt;
&lt;p&gt;If you want results, you need to level up your game—get customers, connect with them, provide them with delight, give them solutions, etc.&lt;/p&gt;
&lt;p&gt;That’s game to play at a later stage. First, you gotta make something for yourself. &lt;strong&gt;If you can’t make something for yourself, you’re never going to learn to make anything for someone else.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Besides, no work is ever wasted.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you “fail” at making something, you’ll gain from the experience. You’ll learn how to make it better the next time. Thomas Edison didn’t fail to make the a lightbulb 9,999 times; he found 9,999 ways not to create a lightbulb. Eventually, he made something that worked.&lt;/p&gt;
&lt;p&gt;No work is wasted. You learn from everything you do.&lt;/p&gt;
&lt;h2 id=&quot;but-what-if-you-don%E2%80%99t-have-a-single-idea%3F&quot;&gt;But what if you don’t have a single idea?&lt;/h2&gt;
&lt;p&gt;If you don’t have a single idea, you may have conditioned yourself not to think.&lt;/p&gt;
&lt;p&gt;I want to share two heroes to help you out.&lt;/p&gt;
&lt;p&gt;First, I want to share about Chee Aun. &lt;a href=&quot;https://cheeaun.com/&quot;&gt;Chee Aun&lt;/a&gt; is a developer I respect. He’s quiet and reserved, but he’s built lots of crazy things, including &lt;a href=&quot;https://hackerwebapp.com/&quot;&gt;hackerweb&lt;/a&gt;, &lt;a href=&quot;https://busrouter.sg/&quot;&gt;BusRouter SG&lt;/a&gt;, &lt;a href=&quot;https://taxirouter.sg/&quot;&gt;TaxiRouter SG&lt;/a&gt;, &lt;a href=&quot;https://railrouter.sg/&quot;&gt;RailRouter SG&lt;/a&gt;, and &lt;a href=&quot;https://cheeaun.github.io/repokemon/&quot;&gt;repokemon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How does Chee Aun come up with his ideas?&lt;/p&gt;
&lt;p&gt;One day, I heard Chee Aun talk about his idea generation process. It boiled down to one word—&lt;a href=&quot;http://cheeaun.com/blog/2016/01/building-side-projects/&quot;&gt;curiosity&lt;/a&gt;. He wondered: “where does buses go after he alighted from them?” From this curiosity, he eventually conjured BusRouter SG.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don’t have an idea, you can start by being curious. Ask questions. You’ll come to a point where you can build something to answer your questions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The second story is about Hui Jing. &lt;a href=&quot;https://www.chenhuijing.com/#%F0%9F%8F%80&quot;&gt;Hui Jing&lt;/a&gt; is a strange individual who has lots of interests. (I say that because I don’t seem to have any interests). Her interests include basketball, hardware, CSS, typography, and the Chinese language.&lt;/p&gt;
&lt;p&gt;Her interests about CSS, typography, and Chinese drove her to explore new CSS features like CSS Writing Mode. After researching, she writes articles about the things she learned (that’s what she made). &lt;a href=&quot;https://www.chenhuijing.com/blog/vertical-typesetting-revisited/#%F0%9F%91%BE&quot;&gt;Here’s one of her articles about CSS Writing Mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides writing articles, she also give hosts (and give talks) at Singapore CSS (a CSS Meetup in Singapore). One of her talks was about &lt;a href=&quot;https://engineers.sg/video/a-chinese-typography-experiment-talk-css--1273&quot;&gt;a Chinese typgoraphy experiment&lt;/a&gt;. This talk’s perspective was so unique that she eventually got to speak at conferences—including Smashing Conf, You gotta love frontend, JSConf.Asia, and WebConf.Asia. She also went on and spoke about many other CSS topics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don’t have an idea, start by looking at a specific interest.&lt;/strong&gt; Are you interested in animation? CSS? Node? JavaScript? Writing? Building random stuff?&lt;/p&gt;
&lt;p&gt;Start with these interests. Make anything that comes to mind. Create open-sourced libraries, write articles, or build demos.&lt;/p&gt;
&lt;p&gt;Make something. Share it.&lt;/p&gt;
&lt;h2 id=&quot;what-if-you-have-too-many-ideas%3F&quot;&gt;What if you have too many ideas?&lt;/h2&gt;
&lt;p&gt;That’s a good problem to have!&lt;/p&gt;
&lt;p&gt;If you have many ideas, you need to choose one.&lt;/p&gt;
&lt;p&gt;To choose one, consider which idea excites you the most. Start with that one. Focus on it, complete it, tell the world about it, then start building another.&lt;/p&gt;
&lt;p&gt;Email or tweet @ me when you’ve created something. I’ve love to see them.&lt;/p&gt;
&lt;h2 id=&quot;make-something-you%E2%80%99re-proud-to-show-the-world&quot;&gt;Make something you’re proud to show the world&lt;/h2&gt;
&lt;p&gt;Give it your best shot. Build something you’re proud of. It doesn’t matter if it looks ugly when you’ve completed what you need to do.&lt;/p&gt;
&lt;p&gt;One of my early projects, a HSL color tool, looked pretty ugly too. (You can read about this tool in this &lt;a href=&quot;https://zellwk.com/blog/color-tools/&quot;&gt;ancient article&lt;/a&gt; if you like).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/what-to-build/hsl-trainer.png&quot; alt=&quot;Probably the ugliest web app you&#39;ll ever see&quot;&gt;
  &lt;figcaption&gt;This app lacks UX and design sense. Don&#39;t you agree?&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But it didn’t matter. It was the first project I built with Angular. I challenged myself, I succeeded, I have something to share, and I’m proud to share it.&lt;/p&gt;
&lt;p&gt;When you build something you’re proud to share, you’ll tell everyone about it automatically. Another example I’m super proud to share is &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;—it’s a course on JavaScript; I believe it’s the best course on JavaScript, ever.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/what-to-build/learnjavascript.jpg&quot; alt=&quot;Image of Learn JavaScript&#39;s logo&quot;&gt;
  &lt;figcaption&gt;Learn JavaScript is the best course on JavaScript! 😺&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;don%E2%80%99t-let-opinions-stop-you&quot;&gt;Don’t let opinions stop you&lt;/h2&gt;
&lt;p&gt;Some people say your projects shouldn’t make money; others say side projects should be silly. These are just opinions. Don’t buy into them; don’t let them inform how your project should be.&lt;/p&gt;
&lt;p&gt;I can’t seem to build a project that’s silly—it was never my style, but I still build things nevertheless.&lt;/p&gt;
&lt;p&gt;You own your life, you create your rules. What matters is you make something you’re proud to show the world and say, “I made this”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/what-to-build/icarus-deception.png&quot; alt=&quot;A section from Seth Godin&#39;s book, Icarus Deception&quot;&gt;
  &lt;figcaption aria-hidden=&quot;&quot;&gt;A section from Seth Godin&#39;s book, Icarus Deception&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;it%E2%80%99s-important%3B-it%E2%80%99s-urgent&quot;&gt;It’s important; it’s urgent&lt;/h2&gt;
&lt;p&gt;You have great ideas; you can do great work; Will you give yourself the chance? I hope you do.&lt;/p&gt;
&lt;p&gt;If you make something, you’ll end up making more and more things. You benefit, I benefit, the world benefits (assuming you make things you’re proud of, not junk).&lt;/p&gt;
&lt;p&gt;If you don’t make anything, you’ll get stuck. You’ll wonder how other people make things, get the success you can never seem to get, and generally be miserable for a long time. (I know, because I felt this way for at least 6 years. That was before I made anything).&lt;/p&gt;
&lt;p&gt;So, I hope you start making things. Whatever it is, I hope you start making it now.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use a linter</title>
    <link href="https://zellwk.com/blog/linter/"/>
    <updated>2018-03-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/linter/</id>
    <content type="html">&lt;p&gt;Today we’re going to talk about linters.&lt;/p&gt;
&lt;p&gt;When you use a linter, you will see red squiggly underlines all over your code. If you’re not used to using a linter yet, it’s hard not to feel like you’re doing something wrong!&lt;/p&gt;
&lt;p&gt;You don’t have to feel that way.&lt;/p&gt;
&lt;p&gt;A linter is there to help you write better code. There are reasons for the red squiggly underlines. Once you know what brings these underlines out, you’ll know what to ignore and what not to.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;To make things simple, you can divide the red squiggly underlines into three kinds of error messages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unused variables&lt;/li&gt;
&lt;li&gt;Parsing errors&lt;/li&gt;
&lt;li&gt;Formatting errors&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you use VS Code, you can hover over the error message to see what it’s about. For example this red squiggly line says “‘button’ is assigned a value but never used. (no-unused-vars)”.&lt;/p&gt;
&lt;p&gt;That’s the first category of errors, unused variables.&lt;/p&gt;
&lt;h2 id=&quot;no-unused-variables&quot;&gt;No Unused variables&lt;/h2&gt;
&lt;p&gt;This error is there to let you know that you’ve created a variable, but you haven’t used it yet.&lt;/p&gt;
&lt;p&gt;You can ignore this error message most of the time when you’re creating code because it’s common to create variables you have not used yet.&lt;/p&gt;
&lt;p&gt;But you want to pay attention to this error when you touching up your code. This helps ensure that you don’t have extra variables in your code that are left unused.&lt;/p&gt;
&lt;h2 id=&quot;parsing-errors&quot;&gt;Parsing errors&lt;/h2&gt;
&lt;p&gt;The second type of errors you see is parsing errors. These would usually say: &lt;code&gt;Parsing error: Unexpected token )&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you spot parsing errors, you must correct them immediately because it means your code has an error that prevents JavaScript from executing.&lt;/p&gt;
&lt;p&gt;If you don’t fix these errors, you’ll get an error in your console anyway. Just fix them when you see them.&lt;/p&gt;
&lt;h2 id=&quot;formatting-errors.&quot;&gt;Formatting errors.&lt;/h2&gt;
&lt;p&gt;The third type of errors are formatting errors. Formatting errors focuses things like spaces, empty lines and indentation.&lt;/p&gt;
&lt;p&gt;These errors can be corrected automatically if you have set up a formatter for your linter. I have already set mine up, so when I save a file that’s filled with formatted errors, the errors go away automatically.&lt;/p&gt;
&lt;p&gt;If you want to see how I set mine up, you will want to watch Part two of the vs code setup series.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;p&gt;Linters aren’t scary once you get used to the type of errors they product and how to handle them.&lt;/p&gt;
&lt;p&gt;I hope you learned something useful today. If you like this video, I hope hit the subscribe button below so I can send you more videos like this every Friday. Or better yet, I hope you subscribe to my blog at https://zellwk.com. If you do so, I’ll send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;Thanks for watching. Have a good Friday and see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Responsive Vertical Rhythm with CSS Custom Properties and CSS Calc</title>
    <link href="https://zellwk.com/blog/responsive-vertical-rhythm/"/>
    <updated>2018-02-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/responsive-vertical-rhythm/</id>
    <content type="html">&lt;p&gt;Vertical Rhythm is an important concept in web design. It has the ability to bring a design together and make different elements feel consistent on the same page.&lt;/p&gt;
&lt;p&gt;It was impossible to change Vertical Rhythm at different viewports previously, because we didn’t have the right tools. But now, with CSS Calc and CSS Custom Properties, we can change Vertical Rhythm at different viewports. This article explains how.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;calculating-the-rhythm-unit&quot;&gt;Calculating the rhythm unit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A rhythm unit&lt;/strong&gt; is the base multiple you’d use for the Vertical Rhythm of your site. &lt;strong&gt;The value of a rhythm unit should be the line-height of your body text.&lt;/strong&gt; &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;Here’s why&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* One rhythm unit would be 20px * 1.4 = 28px */
html {
  font-size: 20px;
  line-height: 1.4;
}

p {
  margin: 28px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating the rhythm unit becomes easier if you use relative units (&lt;a href=&quot;https://zellwk.com/blog/responsive-typography/&quot;&gt;and you should&lt;/a&gt;). &lt;strong&gt;One rhythm unit will always be equal to the root font-size times the line-height of your body text.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* 1 rhythm unit, calculated with rem */
html {
  line-height: 1.4;
}

p {
  margin: 1.4rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you create whitespace, feel free to vary the number of rhythm units. &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;You can even include non-integer values&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* 2 rhythm units */
h2 { margin-top: 2.8rem}

/* 0.75 rhythm units */
p { margin-top: 1.05rem }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;why-change-vertical-rhythm-at-different-viewports%3F&quot;&gt;Why change Vertical Rhythm at different viewports?&lt;/h2&gt;
&lt;p&gt;We tend to place larger devices (like desktops) farther away than smaller devices (like phones). We need to increase font-size to compensate for the loss in readability due to the increased distance. If your user can’t read your site comfortably, they’ll likely leave, they’ll squint their eyes, or increase their browser’s front-size (if they’re savvy enough).&lt;/p&gt;
&lt;p&gt;A little more on readability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Readability is one of the most important elements to web typography. It’s affected by three values—the font-size, line-height (or leading), and line-length (or measure) of your text.&lt;/strong&gt; When one element changes, others may need to change to preserve readability.&lt;/p&gt;
&lt;p&gt;When you resize a browser from a mobile view to a desktop view, you’ll notice that both measure and font-size changes. As a result, leading should change too. This concept is so important that Tim Brown came up with the &lt;a href=&quot;https://css-tricks.com/molten-leading-css/&quot;&gt;Molten leading&lt;/a&gt; approach. One example of molten leading in use is where you write your body line-height with viewport units.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* This is a simple example. See the complete example in the link above */
body {
  font-size: calc(1em + 1vw);
  line-height: calc(1.2em + 1vw);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the problem is, when you change the line-height of your body text, the Vertical Rhythm unit changes. There’s no way to incorporate Molten leading with Vertical Rhythm.&lt;/p&gt;
&lt;p&gt;Now, even if you discarded molten leading and used the standard unitless line-heights, you’ll probably still go insane from the amount of duplication you need to create. Not worth the effort.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Change line height at different breakpoints */
html {
  line-height: 1.4;
}

@media (min-width: 600px) {
  html {
    line-height: 1.5;
  }
}

/* Calculate rhythm again at each breakpoint */
p {
  margin-top: 1.4rem;
}

@media (min-width: 600px) {
  p {
    line-height: 1.5rem;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;changing-the-rhythm-unit-with-css-custom-properties&quot;&gt;Changing the rhythm unit with CSS Custom Properties&lt;/h2&gt;
&lt;p&gt;CSS Custom properties (better known as CSS variables) can be used to create a rhythm unit that changes at different viewports.&lt;/p&gt;
&lt;p&gt;To create a CSS variable, you create a custom property (hence it’s name) by prepending &lt;code&gt;--&lt;/code&gt; to a property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --color: red;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use a custom property you created, you write &lt;code&gt;var(--your-custom-property)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;p {
  color: var(--color)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about CSS Custom Properties is: they can be updated dynamically within different media queries.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --color: red;
}

@media (min-width: 30em) {
  :root {
    --color: blue;
  }
}

p {
  color: var(--color)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/responsive-vertical-rhythm/var-change.gif&quot; alt=&quot;GIF that shows a paragraph to text switching between red and blue colors&quot;&gt;
  &lt;figcaption&gt;CSS Custom properties are updated dynamically, even within media queries!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;That means you can create a &lt;code&gt;--baseline&lt;/code&gt; property that correspond to one rhythm unit, then, use this &lt;code&gt;--baseline&lt;/code&gt; property across your CSS to create responsive Vertical Rhythm.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;:root {
  --baseline: 1.4;
  line-height: var(--baseline)
}

@media (min-width: 30em) {
  :root {
    /* a value of 3 used here to exaggerate the changes so you can see it in the demo below */
    --baseline: 3;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/responsive-vertical-rhythm/baseline-resize.gif&quot; alt=&quot;GIF that shows that line-height can be changed via the baseline custom property.&quot;&gt;
  &lt;figcaption&gt;Line height can be changed at different breakpoints via a custom property&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To create rhythm values, you can need to use CSS Calc (because you can only calculate stuff in CSS with CSS Calc).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Two rhythm units */
h2 { margin-top: calc(var(--baseline) * 2rem); }

/* 0.75 rhythm units */
p { margin-top: calc(var(--baseline) * 0.75rem); }
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/responsive-vertical-rhythm/calc-resize.gif&quot; alt=&quot;GIF that shows the margins of both &lt;h2&gt; and &lt;p&gt; change at the breakpoint&quot;&gt;
  &lt;figcaption&gt;CSS Calc can be used together with CSS Custom Properties to calculate rhythm values&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;simplifying-the-calculation-with-a-function&quot;&gt;Simplifying the calculation with a function&lt;/h2&gt;
&lt;p&gt;It can be a chore to write &lt;code&gt;calc&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; every time you create a rhythm value. You can simplify the calculation if create a function in a preprocessor like Sass.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// rvr stands for responsive vertical rhythm
@function rvr($multiple) {
  @return calc(var(--baseline) * $multiple * 1rem);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can use the &lt;code&gt;rvr&lt;/code&gt; function you’ve created like this. Much simpler! 💃.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;/* Two rhythm units */
h2 { margin-top: rvr(2); }

/* 0.75 rhythm units */
p { margin-top: rvr(0.75); }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;how-does-support-look-like%3F&quot;&gt;How does support look like?&lt;/h2&gt;
&lt;p&gt;Support for both &lt;a href=&quot;https://caniuse.com/#feat=css-variables&quot;&gt;CSS Custom Properties&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#feat=calc&quot;&gt;CSS Calc&lt;/a&gt; are awesome. They’re supported in all major browsers today.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/responsive-vertical-rhythm/ciu-custom-props.png&quot; alt=&quot;Support chart for CSS Custom properties from caniuse.com&quot;&gt;
  &lt;figcaption&gt;CSS Custom Properties are pretty well supported!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/responsive-vertical-rhythm/ciu-calc.png&quot; alt=&quot;Support chart for CSS Calc from caniuse.com&quot;&gt;
  &lt;figcaption&gt;CSS Calc is pretty well supported too!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Unfortunately, support for both CSS Calc and CSS Custom is lacking in Opera Mini (along with some lesser known browsers like QQ and Baidu); that’s a bummer.&lt;/p&gt;
&lt;p&gt;Since Opera Mini doesn’t support CSS Calc and CSS Custom properties, we need to provide fallback properties each time we create a rhythm unit. This is slightly more work, but luckily, not a deal breaker.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;:root {
  --baseline: 1.4;
  /* Line-height fallback */
  line-height: 1.4;
  line-height: calc(var(--baseline) * 1rem);
}

@media (min-width: 30em) {
  :root {
    --baseline: 1.5;
  }
}

p {
  /* Line-height basic vertical rhythm fallback. */
  margin-top: 1.05rem;
  margin-top: rvr(0.75);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make it simpler, you can also create a &lt;code&gt;vr&lt;/code&gt; function that calculates Vertical rhythm based on the base line-height value. Here’s a simple version you can use (specifically for this example). If you’d like a more complete version, check out &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt;, which is a library I’ve made to help make responsive typography simpler.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@function vr($multiple) {
  @return 1.4 * $multiple * 1rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you create the &lt;code&gt;vr&lt;/code&gt; function, your rhythm fallback would be simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;p {
  /* Line-height basic vertical rhythm fallback. */
  margin-top: vr(0.75);
  margin-top: rvr(0.75);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I’ve yet to include responsive vertical rhythm in Typi yet. I hope to add it when I get some time on my hands.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Vertical Rhythm is an important typography principle we should pay attention to, as designs and developers. Unfortunately, we couldn’t give it as much attention as we should because we lacked the tools to do so.&lt;/p&gt;
&lt;p&gt;But now, we can create responsive vertical rhythm with the help of CSS Custom Properties and CSS Calc. If you create responsive vertical rhythm, make sure you provide fallback for browsers that don’t support either CSS Custom Properties and CSS Calc!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Useful VS Code keyboard shortcuts</title>
    <link href="https://zellwk.com/blog/useful-vscode-keyboard-shortcuts/"/>
    <updated>2018-02-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/useful-vscode-keyboard-shortcuts/</id>
    <content type="html">&lt;p&gt;Today, I want to share vs code shortcuts I use on a daily basis. Here’s a list of what we’re going to go through:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Opening and closing the sidebar&lt;/li&gt;
&lt;li&gt;File explorer&lt;/li&gt;
&lt;li&gt;Marketplace&lt;/li&gt;
&lt;li&gt;Switching workspaces&lt;/li&gt;
&lt;li&gt;Opening the terminal&lt;/li&gt;
&lt;li&gt;Go to file&lt;/li&gt;
&lt;li&gt;Go to line&lt;/li&gt;
&lt;li&gt;Go to symbol&lt;/li&gt;
&lt;li&gt;The command palette&lt;/li&gt;
&lt;li&gt;Split editor&lt;/li&gt;
&lt;li&gt;Toggle editor group layout&lt;/li&gt;
&lt;li&gt;Working with tabs&lt;/li&gt;
&lt;li&gt;Select word&lt;/li&gt;
&lt;li&gt;Folding and unfolding&lt;/li&gt;
&lt;li&gt;Move line upwards or downwards.&lt;/li&gt;
&lt;li&gt;Split lines&lt;/li&gt;
&lt;li&gt;Pageup/pagedown&lt;/li&gt;
&lt;li&gt;Jump to word&lt;/li&gt;
&lt;li&gt;Expand region&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-shortcuts&quot;&gt;The shortcuts&lt;/h2&gt;
&lt;p&gt;Two things before we dive into the shortcuts.&lt;/p&gt;
&lt;p&gt;First, I use a mac, so I’m only going to share the Mac keyboard shortcuts with you. If you’re on a Windows machine, you you can use most shortcuts I’m going to talk about by replacing &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;ctrl&lt;/code&gt;. If that doesn’t work, you may have to google for the right shortcut.&lt;/p&gt;
&lt;p&gt;Second, some of the shortcuts you’ll see in this video may not be native VS Code shortcuts. This is because I used Sublime Text before I switched to VS Code. When I made the switch, I installed the Sublime Text Keymap extensios, which preserves Sublime Text shortcuts.&lt;/p&gt;
&lt;p&gt;Let’s move on to the shortcuts.&lt;/p&gt;
&lt;h3 id=&quot;opening-and-closing-the-sidebar&quot;&gt;Opening and closing the sidebar&lt;/h3&gt;
&lt;p&gt;To close or open the sidebar, you can use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;file-explorer&quot;&gt;File Explorer&lt;/h3&gt;
&lt;p&gt;To open the file explorer, you can use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;marketplace&quot;&gt;Marketplace&lt;/h3&gt;
&lt;p&gt;To open the VS Code marketplace, you can use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;switching-workspaces&quot;&gt;Switching workspaces&lt;/h3&gt;
&lt;p&gt;VS Code keeps tracks of folders you opened automatically. Each folder is a workspace. To switch between workspaces, use &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt;, then select the workspace you want.&lt;/p&gt;
&lt;h3 id=&quot;opening-the-terminal&quot;&gt;Opening the terminal&lt;/h3&gt;
&lt;p&gt;VS Code has a built-in terminal that navigates to the project’s folder. To open the terminal, use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;`&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I tend to use the VS code terminal for simple one-off commands. When I need a dedicated terminal, I switch over to my iTerm. My shortcut to bring up iTerm is &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;space&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;go-to-file&quot;&gt;Go to file&lt;/h3&gt;
&lt;p&gt;To go to a file, you use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;, then type the name of the file you’re looking for. This should help you locate files quickly.&lt;/p&gt;
&lt;h3 id=&quot;go-to-line&quot;&gt;Go to line&lt;/h3&gt;
&lt;p&gt;To go to a line in the file, you use &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;g&lt;/code&gt;, then type a line number. Alternatively, you can also open the go to file menu with &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt; first, then type &lt;code&gt;:&lt;/code&gt;, then type your line number.&lt;/p&gt;
&lt;h3 id=&quot;go-to-symbol&quot;&gt;Go to symbol&lt;/h3&gt;
&lt;p&gt;In CSS, a symbol means a selector. In JavaScript, a symbol is variable.&lt;/p&gt;
&lt;p&gt;To jump to a symbol in VS Code, you use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt;, then look for the symbol you want.&lt;/p&gt;
&lt;p&gt;To jump to a symbol in your project workspace, you use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-command-palette&quot;&gt;The command palette&lt;/h3&gt;
&lt;p&gt;The command palette lets you execute tasks in VS code. To bring up the command palette, you use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;shift&lt;/code&gt; + &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can type any task you want to complete and VS Code will search for the task for you. If a keyboard shortcut exists, VS Code will show you the shortcut too.&lt;/p&gt;
&lt;h3 id=&quot;split-editor&quot;&gt;Split Editor&lt;/h3&gt;
&lt;p&gt;When I code, I usually split the screen into two. You can bring up to three different editor views in VS Code.&lt;/p&gt;
&lt;p&gt;To split the editor, you can use the &lt;code&gt;split editor&lt;/code&gt; command. The original keyboard shortcut for split editor is &lt;code&gt;123&lt;/code&gt;. I switched it to &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To switch keyboard shortcuts, you can open up the keyboard shortcut editor by opening the command palette, type the keyboard shortcut, then click the pencil icon to the left of the command and enter your new command.&lt;/p&gt;
&lt;h3 id=&quot;toggle-editor-group-layout&quot;&gt;Toggle editor group layout&lt;/h3&gt;
&lt;p&gt;You can also toggle between horizontal or vertical split layouts in VS Code. To do so, you use the &lt;code&gt;toggle editor group&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The original keyboard shortcut is &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;0&lt;/code&gt;. I switched it to &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;working-with-tabs&quot;&gt;Working with tabs&lt;/h3&gt;
&lt;p&gt;You can open a new tab by hitting &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To switch between tabs, you use &lt;code&gt;command&lt;/code&gt; + the tab number. 1 works for the leftmost tab; 2 for the second tab, and so on.&lt;/p&gt;
&lt;p&gt;If you want to switch between tabs in different editors, use &lt;code&gt;ctrl&lt;/code&gt; + the editor number. 1 works for the leftmost editor; 2 works for the second editor, and so on.&lt;/p&gt;
&lt;p&gt;To close a tab, use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;select-word&quot;&gt;Select word&lt;/h3&gt;
&lt;p&gt;To select a word, use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;d&lt;/code&gt;. If you hit &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;d&lt;/code&gt; more than once, you’ll add another occurrence of the same keyword to your selection.&lt;/p&gt;
&lt;p&gt;To select all instances of a keyword in the same file, use &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;g&lt;/code&gt;. You can also use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;F2&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;folding-and-unfolding&quot;&gt;Folding and unfolding&lt;/h3&gt;
&lt;p&gt;To fold code, use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;opt&lt;/code&gt; + &lt;code&gt;[&lt;/code&gt;. This command lets you hide code that you might not need.&lt;/p&gt;
&lt;p&gt;To unfold code, use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;opt&lt;/code&gt; + &lt;code&gt;]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;move-line-upwards-or-downwards.&quot;&gt;Move line upwards or downwards.&lt;/h3&gt;
&lt;p&gt;To move a line upwards or downwards, use &lt;code&gt;opt&lt;/code&gt; + the &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;down&lt;/code&gt; arrow key.&lt;/p&gt;
&lt;h3 id=&quot;split-lines&quot;&gt;Split lines&lt;/h3&gt;
&lt;p&gt;To split a selection into multiple lines, first select multiple lines, then use &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;opt&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pageup-%2F-pagedown&quot;&gt;Pageup / Pagedown&lt;/h3&gt;
&lt;p&gt;If you want to move up or down a document quickly, like through the good old &lt;code&gt;pageup&lt;/code&gt; or &lt;code&gt;pagedown&lt;/code&gt; shortcut in Windows, you can use &lt;code&gt;fn&lt;/code&gt; + &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;fn&lt;/code&gt; + &lt;code&gt;down&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;jump-to-word&quot;&gt;Jump to word&lt;/h3&gt;
&lt;p&gt;To jump to a word in VS Code, you need to install the Jumpy extension.&lt;/p&gt;
&lt;p&gt;Once you’ve installed Jumpy, you can activate Jumpy’s “word mode” through the command line to enter the word jump mode.&lt;/p&gt;
&lt;p&gt;In this mode, you can type the two letter characters that’s shown all over the editor to jump to the right word.&lt;/p&gt;
&lt;p&gt;To exit jumpy’s word mode, you can type a non a-z character like space or enter.&lt;/p&gt;
&lt;p&gt;I set the Jumpy’s word mode keyboard shortcut to &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;j&lt;/code&gt; since J stands for jump.&lt;/p&gt;
&lt;h3 id=&quot;expand-region&quot;&gt;Expand Region&lt;/h3&gt;
&lt;p&gt;The Expand region shortcut can only be used if you have installed the Expand Region extension. It should have been in the last video, but I completely forgot about it.&lt;/p&gt;
&lt;p&gt;Expand region lets you select a word, expand the selection upwards to the containing brackets (or tags), then another level of brackets, and so on.&lt;/p&gt;
&lt;p&gt;To expand upwards, I set the keyboard shortcut to &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;up&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To undo the expansion, I set the keyboard shortcut to &lt;code&gt;command&lt;/code&gt; + &lt;code&gt;option&lt;/code&gt; + &lt;code&gt;down&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;syncing-keyboard-shortcuts-across-devices&quot;&gt;Syncing keyboard shortcuts across devices&lt;/h2&gt;
&lt;p&gt;Keyboard shortcuts can be synced automatically across VS Code editors if you use the settingsSync extension mentioned in an &lt;a href=&quot;https://zellwk.com/blog/vscode-3&quot;&gt;earlier video&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;That’s it for today. I hope you learned something useful.&lt;/p&gt;
&lt;p&gt;If you like this video, I hope you subscribe to the channel so I can send you more videos like this every Friday. Or better yet, I hope you subscribe to my blog at https://zellwk.com. If you do so, I’ll send you one article and one video every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;Thanks for watching. Have a good Friday and see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up Visual Studio Code (Part 3)—Extensions</title>
    <link href="https://zellwk.com/blog/vscode-3/"/>
    <updated>2018-02-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/vscode-3/</id>
    <content type="html">&lt;p&gt;Welcome Part 3 of the VS Code setup series.&lt;/p&gt;
&lt;p&gt;If you haven’t watched the &lt;a href=&quot;https://zellwk.com/blog/vscode-1&quot;&gt;first&lt;/a&gt; or &lt;a href=&quot;https://zellwk.com/blog/vscode-2&quot;&gt;second&lt;/a&gt; parts yet, I suggest you go watch them first. Everything I’m sharing today builds on what I showed you before. For today, I want to share the extensions I use on a daily basis.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Here’s a complete list of the extensions I use. We’ll go through them one by one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advanced new file&lt;/li&gt;
&lt;li&gt;Bracket pair colorizer&lt;/li&gt;
&lt;li&gt;Code spell checker&lt;/li&gt;
&lt;li&gt;Editor config&lt;/li&gt;
&lt;li&gt;Path intellisense&lt;/li&gt;
&lt;li&gt;Settings Sync&lt;/li&gt;
&lt;li&gt;Sort JSON Objects&lt;/li&gt;
&lt;li&gt;Sort lines&lt;/li&gt;
&lt;li&gt;SVG Viewer&lt;/li&gt;
&lt;li&gt;TODO Highlight&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;advanced-new-file&quot;&gt;Advanced new file&lt;/h2&gt;
&lt;p&gt;Advanced New file helps me create new files and folders with keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;To use Advanced New File, you hit the &lt;code&gt;command + opt + n&lt;/code&gt;. When you do so, you’ll see a tiny window at the top of VS Code. In this window, you enter the folder where you wish to create the new file. Then, once you hit enter, you’ll get another prompt to enter your file name.&lt;/p&gt;
&lt;h2 id=&quot;bracket-pair-colorizer&quot;&gt;Bracket pair colorizer&lt;/h2&gt;
&lt;p&gt;Bracket pair colorizer adds color to your brackets. It helps you see which is the closing bracket for every bracket you open. It works for parenthesis (&lt;code&gt;()&lt;/code&gt;), square brackets (&lt;code&gt;[]&lt;/code&gt;), and curly brackets (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;code-spell-checker&quot;&gt;Code Spell checker&lt;/h2&gt;
&lt;p&gt;Code spell checker checks if your code exist in an English dictionary. It underlines your code with a squiggly green underline if a word doesn’t exist in the dictionary. This helps to reduce errors that are caused through typos.&lt;/p&gt;
&lt;p&gt;It works even when you write camelCase variables, which is super helpful for people who write a lot of JavaScript.&lt;/p&gt;
&lt;p&gt;You can add on other dictionaries if you prefer coding in another language.&lt;/p&gt;
&lt;h2 id=&quot;editor-config&quot;&gt;Editor Config&lt;/h2&gt;
&lt;p&gt;Editor config essential if you work with colleagues who prefers other text editor settings. It overrides your default project settings to a team based if it finds an &lt;code&gt;.editorconfig&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;It only has six options, so you’ll still need things like linters to help you check code style.&lt;/p&gt;
&lt;h2 id=&quot;path-intellisense&quot;&gt;Path intellisense&lt;/h2&gt;
&lt;p&gt;Path intellisense gives you helps you find the right files by giving you suggestions for file paths. You can link styles, images and other files easily. For example, in your HTML, you can type the directory you want, and Path intellisense will start looking for options for you.&lt;/p&gt;
&lt;h2 id=&quot;settings-sync&quot;&gt;Settings Sync&lt;/h2&gt;
&lt;p&gt;Settings sync saves the settings file in a Github Gist. You can use this extension to transfer your VS code settings file across computers. It’s a pity it doesn’t save the extensions you use though, because that would be awesome.&lt;/p&gt;
&lt;h2 id=&quot;sort-json-objects&quot;&gt;Sort JSON Objects&lt;/h2&gt;
&lt;p&gt;By this time, your settings file would be a little messy. Sort JSON Objects lets you list JSON items in alphabetical order.&lt;/p&gt;
&lt;h2 id=&quot;sort-lines&quot;&gt;Sort Lines&lt;/h2&gt;
&lt;p&gt;Like Sort JSON Object, Sort lines let you sort lines in alphabetical order.&lt;/p&gt;
&lt;h2 id=&quot;todo-highlight&quot;&gt;Todo highlight&lt;/h2&gt;
&lt;p&gt;Todo highlight let you leave &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt; notes in your code so you can find them easily. &lt;code&gt;TODO&lt;/code&gt; notes have a bright yellow background while &lt;code&gt;FIXME&lt;/code&gt; notes have a bright red background.&lt;/p&gt;
&lt;p&gt;You can find all &lt;code&gt;TODO&lt;/code&gt; and &lt;code&gt;FIXME&lt;/code&gt; notes through the “List highlight annotations command”.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Intro to Object Oriented Programming in JavaScript</title>
    <link href="https://zellwk.com/blog/https:/scotch.io/tutorials/object-oriented-programming-in-javascript/"/>
    <updated>2018-02-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/scotch.io/tutorials/object-oriented-programming-in-javascript/</id>
    <content type="html">&lt;p&gt;Object-Oriented Programming is a popular style of programming that has taken root in JavaScript since the beginning.&lt;/p&gt;
&lt;p&gt;It’s so deeply rooted in JavaScript that many of JavaScript’s native functions and methods are written in the Object Oriented style; you’ll also find many popular libraries written in the Object Oriented style.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn what Object Oriented Programming is and how to begin using it in JavaScript.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Faux Subgrid</title>
    <link href="https://zellwk.com/blog/faux-subgrid/"/>
    <updated>2018-02-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/faux-subgrid/</id>
    <content type="html">&lt;p&gt;I was super excited when CSS Grid landed in major browsers back in March/April 2017. I thought CSS Grid was going to change the way we make layouts; it did. We gotta thank &lt;a href=&quot;https://twitter.com/rachelandrew&quot;&gt;Rachel Andrew&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jensimmons&quot;&gt;Jen Simmons&lt;/a&gt; for teaching all of us us about CSS Grid.&lt;/p&gt;
&lt;p&gt;Unfortunately, even though CSS Grid has landed, subgrid (which I consider one of the most important CSS Grid features) didn’t.&lt;/p&gt;
&lt;p&gt;But thankfully, there’s a way to create subgrids with pure CSS (no hacks at all!). This method works with all browsers that support CSS Grid.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-are-subgrids-important%3F&quot;&gt;Why are subgrids important?&lt;/h2&gt;
&lt;p&gt;When we design websites, we don’t often think about how we write HTML. We usually slap boxes into a grid in our design tool and decide that’s how we want our sites to look.&lt;/p&gt;
&lt;p&gt;Most of the time, the HTML structure is straightforward. Let’s say you have a 3x2 grid in a component. You can style your grid this way:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/faux-subgrid/kats.png&quot; alt=&quot;Image that contains 6 cats lined up in a grid&quot;&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;kats&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;Kats! Kats!&amp;lt;/h3&amp;gt;
  &amp;lt;ul class=&amp;quot;kats-grid&amp;quot;&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.kats-grid {
  display: grid;
  grid-template-columns repeat(3, 1fr);
  grid-gap: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But sometimes, your design may call for a complicated nested HTML structure. I ran into one such case when I built &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;. Here’s the design of the component that I had troubles with:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2018/faux-subgrid/learnjavascript.png&quot; alt=&quot;A component from learnjavascript.today that requires a nested HTML structure&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;From the design, you can tell that I need a nested HTML structure that resembles the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;component&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;The 20 components&amp;lt;/h3&amp;gt;
  &amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;list-of-components&amp;quot;&amp;gt;
      &amp;lt;ol&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/ol&amp;gt;
      &amp;lt;ol&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/ol&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;sneak-peek-text&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;ul class=&amp;quot;examples&amp;quot;&amp;gt;
      &amp;lt;li&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;grid-column&lt;/code&gt; and &lt;code&gt;grid-row&lt;/code&gt; properties can only be used in direct descendants of an element with the &lt;code&gt;display&lt;/code&gt; property set to &lt;code&gt;grid&lt;/code&gt;, I couldn’t create the design directly without subgrid. I had to provide workarounds.&lt;/p&gt;
&lt;p&gt;One way to circumvent the issue is to flatten the HTML. If I did so, my HTML would lose it’s semantic meaning. (Don’t do this; both Chris Coyier and Rachel Andrew have &lt;a href=&quot;https://css-tricks.com/will-flattening-html-css-grids/&quot;&gt;warned us about flattening our HTML&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Flattened HTML. Don&#39;t do this! --&amp;gt;
&amp;lt;div class=&amp;quot;component&amp;quot;&amp;gt;
  &amp;lt;h3&amp;gt;The 20 components&amp;lt;/h3&amp;gt;
  &amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;text&amp;quot;&amp;gt; &amp;lt;!-- ... ---&amp;gt; &amp;lt;/div&amp;gt;

    &amp;lt;ol class=&amp;quot;list-of-components-1&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/ol&amp;gt;
    &amp;lt;ol class=&amp;quot;list-of-components-2&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/ol&amp;gt;

    &amp;lt;div class=&amp;quot;sneak-peek-text&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;example-1&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;example-2&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;example-3&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;example-4&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way is to force &lt;code&gt;.list-of-components&lt;/code&gt; and &lt;code&gt;.examples&lt;/code&gt; to be CSS Grid items with &lt;code&gt;display: grid&lt;/code&gt;. This is the only viable method I know of.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.list-of-components {
  grid-column: span 6 / -1;
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  grid-gap: 1em;
}

.examples {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-gap: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we had subgrid, the above code could be simplified to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.list-of-components {
  grid-column: span 6 / -1;
  display: subgrid;
}

.examples {
  grid-column: 1 / -1;
  display: subgrid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then style items in &lt;code&gt;.list-of-components&lt;/code&gt; and &lt;code&gt;.examples&lt;/code&gt; as if they’re normal grid items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.list-of-components &amp;gt; ol {
  grid-column: span 3;
}

.examples &amp;gt; li {
  grid-column: span 3;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;500&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;mXryjP&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Faux subgrid example&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/mXryjP/&quot;&gt;Faux subgrid example&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;automating-the-%E2%80%9Csubgrid%E2%80%9D-creation-process&quot;&gt;Automating the “subgrid” creation process&lt;/h2&gt;
&lt;p&gt;When I created the “subgrid” above, I gave it two pieces of information—the &lt;code&gt;grid-gap&lt;/code&gt; value and the &lt;code&gt;grid-column&lt;/code&gt; value. Both values are vital to creating subgrids automatically with CSS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;grid-gap&lt;/code&gt; value&lt;/strong&gt; creates grid gutters (the whitespaces between grid items). If you want the “subgrid’s” gutters to be the same value as the parent’s gutters, you can set &lt;code&gt;grid-gap&lt;/code&gt; to &lt;code&gt;inherit&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.examples {
  /* other properties */
  grid-gap: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;grid-column&lt;/code&gt; value tells the “subgrid” two things&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number of columns to take up.&lt;/li&gt;
&lt;li&gt;The position of the “subgrid”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your grid contains columns of equal widths, the &lt;strong&gt;number of columns&lt;/strong&gt; can be used to create the &lt;code&gt;grid-template-columns&lt;/code&gt; property. It should become obvious if you look at this code closely.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.examples {
  /* 12 columns */
  grid-column: 1 / -1;
  display: grid;
  /* Create a 12-column grid */
  grid-template-columns: repeat(12, 1fr);
  grid-gap: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can rewrite &lt;code&gt;grid-column: 1 / -1&lt;/code&gt; with a column number for clarity:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.examples {
  /* 12 columns */
  grid-column: 1 / span 12;
  display: grid;
  /* Create a 12-column grid */
  grid-template-columns: repeat(12, 1fr);
  grid-gap: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This meant we can use a &lt;strong&gt;faux-subgrid&lt;/strong&gt; mixin to create the “subgrid”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin faux-subgrid ($columns) {
  grid-column-end: span $columns;
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-gap: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.examples {
  @include faux-subgrid(12);
}

.examples &amp;gt; li {
  grid-column: span 3;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen to see &lt;code&gt;faux-subgrid&lt;/code&gt; in action.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;QQKbLr&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Faux subgrid mixin&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/QQKbLr/&quot;&gt;Faux subgrid mixin&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;positioning-%E2%80%9Csubgrids%E2%80%9D-with-finesse&quot;&gt;Positioning “subgrids” with finesse&lt;/h2&gt;
&lt;p&gt;If you need a smaller subgrid item, like what I needed for &lt;code&gt;.list-of-components&lt;/code&gt;, you can still use &lt;code&gt;faux-subgrid&lt;/code&gt;. The difference is you need to position the subgrid item with &lt;code&gt;grid-column-start&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.list-of-components {
  @include faux-subgrid(6);
  grid-column-start: 7;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a codepen to see this in action. (Pay attention to the two purple items on the right).&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;qxadZO&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Faux subgrid mixin (positioning subgrids with finesse)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/qxadZO/&quot;&gt;Faux subgrid mixin (positioning subgrids with finesse)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;the-faux-subgrid-mixin&quot;&gt;The faux-subgrid mixin&lt;/h2&gt;
&lt;p&gt;In case you missed it, here’s the &lt;code&gt;faux-subgrid&lt;/code&gt; mixin again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin faux-subgrid ($columns) {
  grid-column-end: span $columns;
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-gap: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;limitations-of-the-faux-subgrid&quot;&gt;Limitations of the faux-subgrid&lt;/h2&gt;
&lt;p&gt;This &lt;code&gt;faux-subgrid&lt;/code&gt; mixin is quite limited. It only works with grids with equal-width columns.&lt;/p&gt;
&lt;p&gt;If you need to work with grids with unequal-width columns, you might want to wait for real subgrid support to come.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;faux-subgrid&lt;/code&gt; can also support &lt;code&gt;grid-rows&lt;/code&gt;. Use the same methodology to extend the mixin if you need it.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;CSS Grid is awesome; it’ll be even more awesome if we had support for subgrid. Luckily, &lt;a href=&quot;https://www.w3.org/TR/css-grid-2/&quot;&gt;CSS Grid level 2 specifications&lt;/a&gt; are out; it seems like we’ll get subgrid support soon!&lt;/p&gt;
&lt;p&gt;(I just hope it lands in 2018 or 2019).&lt;/p&gt;
&lt;p&gt;In the meantime, try using the &lt;code&gt;faux-subgrid&lt;/code&gt; mixin I cooked up! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up Visual Studio Code (Part 2)—HTML, CSS and JavaScript settings</title>
    <link href="https://zellwk.com/blog/vscode-2/"/>
    <updated>2018-02-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/vscode-2/</id>
    <content type="html">&lt;p&gt;Hey, it’s Zell. Welcome back to Part 2 of the VS code setup series.&lt;/p&gt;
&lt;p&gt;If you haven’t watched the 1st part yet, I suggest you go &lt;a href=&quot;https://zellwk.com/blog/vscode-1&quot;&gt;watch it first&lt;/a&gt;, because everything we’re going to do today follows from there.  Everything follows from there.&lt;/p&gt;
&lt;p&gt;What we’re going to do in this video is to setup VS code to write HTML, CSS and JavaScript properly. Let’s work on HTML first.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;format-on-save&quot;&gt;Format On Save&lt;/h2&gt;
&lt;p&gt;The first I like to do is add &lt;code&gt;editor.formatOnSave&lt;/code&gt; to your settings file. With this option turned on, VS Code will format or (beautify) your code when you save the file. It’s very very useful for maintaining good quality code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;editor.formatOnPaste&amp;quot;: true,
  &amp;quot;editor.formatOnSave&amp;quot;: true,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;html-settings&quot;&gt;HTML Settings&lt;/h2&gt;
&lt;p&gt;VS Code has a weird way of splitting lines by the number of characters. If you have a long paragraph of text in your HTML and if you hit save, you may notice that long paragraph gets split into two lines of code. It’s pretty weird because you want to use HTML tags to split them properly.&lt;/p&gt;
&lt;p&gt;What I’ll do is set the &lt;code&gt;wrapLineLength&lt;/code&gt; property to 0. This prevents VS Code from acting in the weird manner. While I’m at the HTTML part, I also set suggestions for &lt;code&gt;angular1&lt;/code&gt; and &lt;code&gt;ionic&lt;/code&gt; to false since I don’t use them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;html.format.wrapLineLength&amp;quot;: 0,
  &amp;quot;html.suggest.angular1&amp;quot;: false,
  &amp;quot;html.suggest.ionic&amp;quot;: false,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for the settings file.&lt;/p&gt;
&lt;h3 id=&quot;html-extensions&quot;&gt;HTML Extensions&lt;/h3&gt;
&lt;p&gt;VS Code has pretty code HTML Extensions. I use the following extensions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Auto close tag&lt;/li&gt;
&lt;li&gt;Auto rename tag&lt;/li&gt;
&lt;li&gt;intellisense for CSS Names&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Auto close tag&lt;/strong&gt; helps you close HTML tags automatically. You can write lesser keystrokes, which is always a win.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Auto rename tag&lt;/strong&gt; helps you rename the closing tag when you change the opening tag. This is a lifesaver because I always forget to rename the closing tag whenever I change an opening tag.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intellisense for classnames&lt;/strong&gt; gives you auto class completions, which when you’re writing classes. It doesn’t always work, but when it works, it’s useful. I have no idea why it works or why it doesn’t sometime. This is a bonus for me.&lt;/p&gt;
&lt;p&gt;That’s it for HTML. Let’s move on to CSS.&lt;/p&gt;
&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;
&lt;p&gt;For CSS, I install the following extensions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sass&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Stylelint&lt;/li&gt;
&lt;li&gt;CSS Peek&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Sass&lt;/strong&gt; gives you syntax highlighting for Sass files (both &lt;code&gt;.sass&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt;). I use Sass whenever I write CSS, so this is a no-brainer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prettier&lt;/strong&gt; is the best CSS formatter I’ve seen to date. When you install prettier, you can hit save and your CSS or Sass files will be formatted properly. You can even add stylelint integrations which is useful if you’re more advanced on the config part of things.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stylelint&lt;/strong&gt; is a CSS Linter. A Linter is a tool that checks your file for consistent formatting. It also tells you when there is an error, so you don’t make silly typo mistakes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS Peek&lt;/strong&gt; gives you the ability to search for CSS Selectors in a file. It helps when you have a long CSS file.&lt;/p&gt;
&lt;p&gt;Settings-wise, I set &lt;code&gt;prettier.stylelintIntegration&lt;/code&gt; and and &lt;code&gt;stylelint.enable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. That’s all. If you don’t use stylelint, there’s nothing for you to configure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  &amp;quot;prettier.stylelintIntegration&amp;quot;: true,
  &amp;quot;stylelint.enable&amp;quot;: true,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;
&lt;p&gt;For JavaScript, I install the following extensions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript standard style&lt;/li&gt;
&lt;li&gt;JavaScript standardjs styled snippets&lt;/li&gt;
&lt;li&gt;Sublime Babel&lt;/li&gt;
&lt;li&gt;npm intellisense&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;javascript-standard-style&quot;&gt;JavaScript standard style&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;JavaScript Standard Style&lt;/strong&gt; is a linter that follows the JavaScript standard format. It’s a popular format made by a guy called @feross. It contains a linter plus a formatter. But making the formatter work is kinda tricky.&lt;/p&gt;
&lt;p&gt;To make the formatter work with VSCode, you need disable the default formatter built into VS Code. To do so, you set &lt;code&gt;javascript.validate.enable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  &amp;quot;javascript.validate.enable&amp;quot;: false,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make JavaScript Standard Style work with Prettier, you also need to disable the default formatter built into VSCode. You can do by adding “javascript” to &lt;code&gt;prettier.disableLanguages&lt;/code&gt;. I also add &lt;code&gt;javascriptreact&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; to the array of disabled languages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  &amp;quot;prettier.disableLanguages&amp;quot;: [
    &amp;quot;javascript&amp;quot;,
    &amp;quot;javascriptreact&amp;quot;,
    &amp;quot;json&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you’ll need to turn on JavaScript Standard Style’s formatter with &lt;code&gt;standard.autoFixOnSave&lt;/code&gt; and &lt;code&gt;standard.validate&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;standard.autoFixOnSave&amp;quot;: true,
  &amp;quot;standard.validate&amp;quot;: [
    &amp;quot;javascript&amp;quot;,
    &amp;quot;javascriptreact&amp;quot;
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;JavaScript standardjs styled snippets&lt;/strong&gt; gives you some snippets that can help you increase your coding speed. For example, you if type cl followed by tab, you’ll get &lt;code&gt;console.log&lt;/code&gt;. You can find a list of snippet extension keywords in the snippet itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sublime Babel&lt;/strong&gt; gives you better syntax highlighting for JavaScript files when you use newer JavaScript syntax through Babel. That is pretty self explanatory so I’m not going to say anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm intellisense&lt;/strong&gt; is good when you use npm modules in your code. It helps you autocomplete node modules, which is awesome.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This is how I configure VS Code for HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;I hope this video has been helpful for you. In the next video, I show you some useful extensions I use to improve the overall VS Code experience.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Setting up Visual Studio Code (Part 1)—appearances</title>
    <link href="https://zellwk.com/blog/vscode-1/"/>
    <updated>2018-02-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/vscode-1/</id>
    <content type="html">&lt;p&gt;Hey, It’s Zell.&lt;/p&gt;
&lt;p&gt;I switched from Sublime Text to Visual Studio Code recently, and I’d like to show you how I set it up.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;For this video, I’m going to use Visual Studio Code—Insiders, which is the development version of Visual Studio Code. The icons look slightly different. Insiders is green in color, while the standard version is blue. You can choose the normal version or insiders version. Both are good. There’s no right or wrong choice.&lt;/p&gt;
&lt;p&gt;Once you open up Visual Studio Code (I’m going to call it vscode for short), you’ll come to the welcome page. The first thing I’ll do is to set up Sublime shortcuts since I switched from Sublime Text to Visual Studio Code. I don’t want to relearn VSCode shortcuts because it’s going to be a big dip in my productivity. So, the first I do is add Sublime Text keyboard shortcuts. You can do that by clicking on Sublime Text here.&lt;/p&gt;
&lt;h2 id=&quot;color-themes&quot;&gt;Color Themes&lt;/h2&gt;
&lt;p&gt;Next you’ll want to use a color theme that you’re comfortable with. To choose a color theme, you open up the extensions tab by clicking on it, or by hitting command shift x. Once the extension tab is open, you can type the theme you’re looking for.&lt;/p&gt;
&lt;p&gt;When I used Sublime Text, the theme I used is called Tomorrow Night Eighties; I still recommend it. But somehow, in VSCode, I feel that Atom One Dark is nicer, so we’re going to install Atom One Dark instead.&lt;/p&gt;
&lt;h2 id=&quot;editor-settings&quot;&gt;Editor Settings&lt;/h2&gt;
&lt;p&gt;Next, let’s open up the editor settings. There are more things to customize. For mac users, you can hit &lt;code&gt;command&lt;/code&gt; &lt;code&gt;comma&lt;/code&gt;. For Windows users, I believe it’s &lt;code&gt;ctrl&lt;/code&gt; &lt;code&gt;comma&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’ll open a page where the screen splits into two. On the left side, you’ll see a list of all possible configurations. On the right, you’ll be able to create your custom settings to overwrite whatever is on the left.&lt;/p&gt;
&lt;p&gt;The first thing I’ll do here is change the typeface and fontSize to something I like. For typeface, I choose Fira Mono. You can download Fira Mono from Google fonts if you want to use it without the Internet.&lt;/p&gt;
&lt;p&gt;For font size, I use 16.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Fira Mono&amp;quot;,
&amp;quot;editor.fontSize&amp;quot;: 16,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;16 is a too big for me normally when I’m on my laptop. What I usually do is I’ll hit &lt;code&gt;command&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; to reduce the size of the editor. The good thing is &lt;code&gt;command&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; also reduces the size of the extra stuff around, which gives me more room to code.&lt;/p&gt;
&lt;p&gt;But for now, let me put back to zoom level 0, so it’s easier for you to see and follow along.&lt;/p&gt;
&lt;h2 id=&quot;the-indent-guides&quot;&gt;The indent guides&lt;/h2&gt;
&lt;p&gt;You may have noticed the white color guidelines on the left of each setting. These are indent guidelines. They’re good, but they’re too distracting for me.&lt;/p&gt;
&lt;p&gt;If you don’t want indent guidelines at all, you can remove them by setting &lt;code&gt;editor.renderIndentGuides&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;editor.renderIndentGuides&amp;quot;: false,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of removing the guides entirely, I recommend you install an extension called Guides, since indent guidelines can help you when you’re working with large codebases.&lt;/p&gt;
&lt;p&gt;Once you install Guides, you’ll notice the thick white line becomes a red line instead. It’s more subtle and doesn’t distract as much. If you have a second layer of indent, you can see that the current indent lines will be red, while everything else is offwhite. This helps a tiny bit with focus.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;This is the setup I use for the appearance of my VS Code. I hope you learned something useful from this video. Next week, I’ll show you the extensions and settings I use for HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;I hope this video has been helpful for you. If you like this video, hit the subscribe button below and I’ll send you one video every week.&lt;/p&gt;
&lt;p&gt;Or better yet, if you subscribe over at my blog at zellwk.com, I’ll send you one video and one article every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;Happy Friday. Have a good weekend&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Year End Review—2017</title>
    <link href="https://zellwk.com/blog/review-2017/"/>
    <updated>2018-01-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/review-2017/</id>
    <content type="html">&lt;p&gt;2017 has ended. I didn’t do a review earlier in the year because I wanted to wait till enrollment for &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt; closes. Everything that’s going to happen in 2018 depended on the results of the launch.&lt;/p&gt;
&lt;p&gt;Now that it’s over, it’s time for a proper review.&lt;/p&gt;
&lt;p&gt;I want to begin the review by talking about the projects I’ve worked on.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;projects-i-created&quot;&gt;Projects I created&lt;/h2&gt;
&lt;h3 id=&quot;mastering-responsive-typography&quot;&gt;Mastering Responsive Typography&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Mastering Responsive Typography&lt;/a&gt; is a course that focuses on web typography. I made this course to explain the aha moments I gained through experimenting with typography in the previous months.&lt;/p&gt;
&lt;p&gt;I launched it in April 2017 to 1,600 people on my email list. It made approximately $4,000, which was a decent income.&lt;/p&gt;
&lt;p&gt;I didn’t want to launch it to everyone on my email list because I thought it would be impolite to talk about typography when people on my newsletter are more concerned about CSS.&lt;/p&gt;
&lt;p&gt;But deep down, I was trying to act smart. I thought I have reached a point where I could try segmenting the list. I didn’t. I had 6,000 subscribers I think. It was way too early. I should have launched it to everyone.&lt;/p&gt;
&lt;p&gt;For Mastering Responsive Typography, I tried closing the cart too. I closed off the sales to the course because I wanted to see if I could make more money by releasing it at a later time (with hopefully more testimonials). Unfortunately, Mastering Responsive Typography never saw the light again. I moved on and started teaching JavaScript.&lt;/p&gt;
&lt;p&gt;I received requests to open up Mastering Responsive Typography again though, which is nice. I’m going to find some time to open it up; this time, forever.&lt;/p&gt;
&lt;h3 id=&quot;javascript-roadmap&quot;&gt;JavaScript Roadmap&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt; is a free email course that shows people how to best learn JavaScript. It’s a course I put together after understanding a large number of learners was overwhelmed, afraid and confused about JavaScript. I wanted to help them through the process.&lt;/p&gt;
&lt;p&gt;For JavaScript Roadmap, I didn’t focus entirely on JavaScript content. I took a risk with this course and talked about the overcoming the emotions—the feelings of overwhelm, confusion, fear, and paralysis—to learning. It turned out well. Many beginners found hope and felt motivated to learn JavaScript because of these lessons. This was a major turning point in the content I create.&lt;/p&gt;
&lt;h3 id=&quot;learn-javascript&quot;&gt;Learn JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt; is a paid JavaScript course I created to help people learn JavaScript. I called it JavaScript Fundamentals originally.&lt;/p&gt;
&lt;p&gt;I kicked off JavaScript Fundamentals in August 2017 by launching a pre-order through my email list. It was 8,000 strong then. I sold it at $75. Approximately 130 students pre-ordered and I earned $10,000. This is a turning point in last year; it’s the largest sum I ever earned from a launch. Plus, I didn’t expect people to pay $75 for something that’s non-existent.&lt;/p&gt;
&lt;p&gt;I gathered questions from students when they pre-ordered JavaScript Fundamentals. From the responses, I improved my outline and added more content to the course. It eventually ballooned from an 8-module course to a 17-module one. I knew I had a beast on my hand, and I needed more time and money to make it work.&lt;/p&gt;
&lt;p&gt;Early this year, between 4th January and 14th January, I re-branded JavaScript Fundamentals as Learn JavaScript and launched another pre-order. This time round, I charged three price points—$129, $259, and $649.&lt;/p&gt;
&lt;p&gt;165 students enrolled in the pre-order. I was hoping for $20,000, expecting $25,000. (It’s kind of weird to hope for $20,000 and expect $25,000, but this just shows how little confidence I had with myself for the launch).&lt;/p&gt;
&lt;p&gt;The results blew my mind once more. I earned $42,000—enough for me to dedicate a few months of full time work to Learn JavaScript.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;one-million-journey&quot;&gt;One Million Journey&lt;/h3&gt;
&lt;p&gt;One Million Journey was a secret project. I wanted to talk about my plans and share my journey to achieving one million in revenue. I wanted to inspire, encourage and aid people who want to come along with the journey (for a fee, of course).&lt;/p&gt;
&lt;p&gt;I launched One Million Journey to 900 people who replied to my email that asked if they wanted to hear about non-technical things. Then, I launched it again, later, through a PS in one of my emails.&lt;/p&gt;
&lt;p&gt;I was scared to let everyone know about this launch. because the salespage was hilarious (looking back). I’m not going to show it to you, but those who’ve saw it would probably agree. I was so afraid of sharing my story that I used profanity to push people away 🤣.&lt;/p&gt;
&lt;p&gt;But four people joined. Two of them were active for a while. The other two were literally ghosts.&lt;/p&gt;
&lt;p&gt;For the two active participants, we chatted about our goals and dreams and money making plans through Slack and video calls. I hope I’ve helped them rethink their lives.&lt;/p&gt;
&lt;p&gt;In December, one of the active people quit the group because he wanted to focus on something else. In January, the other active person quit the group. I decided to shut down the project on 17th January 2018.&lt;/p&gt;
&lt;p&gt;Will I reopen One Million Journey again? Probably, but I’m definitely not going to do it in the next two years. I’ve got grand plans for the next two years.&lt;/p&gt;
&lt;h2 id=&quot;other-things-i%E2%80%99ve-started-or-did&quot;&gt;Other things I’ve started or did&lt;/h2&gt;
&lt;p&gt;Here’s a list of random things that I started or did. After this list, you’ll see a list of the lessons I learned in the year.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I snowboarded five times while I was hanging out in the States for two months.&lt;/li&gt;
&lt;li&gt;I tried to submit CFPs to talks. All of them failed, except for one weird one, which I gave last Friday at JSConf.Asia. It’s the most important talk I gave so far. You’ll hear about this soon.&lt;/li&gt;
&lt;li&gt;I wrote 29 articles on my blog even though I tried to write 52. I can’t remember how many guest articles I wrote.&lt;/li&gt;
&lt;li&gt;I created 6 videos.&lt;/li&gt;
&lt;li&gt;I tried to freelance again (but failed).&lt;/li&gt;
&lt;li&gt;I created four designs—a redesign of zellwk.com, the salespage for Mastering Responsive Typography, the landing page for JavaScript Roadmap and the salespage for Learn JavaScript.&lt;/li&gt;
&lt;li&gt;I wrote almost everyday. I tried to hit 5,000 words a day, and I managed to hit the target on most days. My highest record so far is 12,600 words in a single day. This was in January.&lt;/li&gt;
&lt;li&gt;I taught a frontend development course at General Assembly. The teaching experience was mind blowing for me.&lt;/li&gt;
&lt;li&gt;I assembled a small team of four designers to help me design components Learn JavaScript. It was fun and challenging to work with different people from different background with different thought processes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;surprising-things-i-discovered&quot;&gt;Surprising things I discovered&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I love snowboarding! I love it so much that I want to do it again this year. I wanted to do it last year too, but finances were tight :(&lt;/li&gt;
&lt;li&gt;I had no idea what my level of JavaScript was. I always thought I was below average with it. Turns out, I’m not 😎.&lt;/li&gt;
&lt;li&gt;I never thought I could sell a pre-order at $259, and people would buy it, and they would thank me for it after going through the materials. It’s a big eye opener.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;lessons-i-learned&quot;&gt;Lessons I learned&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Marketing is complicated.&lt;/strong&gt; It’s way more complicated than most digital marketers out there think. I had the opportunity to go through Seth Godin’s Marketing Seminar and got mind blown maybe 20 times. Still consolidating lessons from the course to help market my materials. Expect magic in 2018 😎.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s important to speak about emotions&lt;/strong&gt;; it’s important to tell my stories. They’re not boring stories. They connect with people.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Closing launch sequences drive sales for a short time, but I need a good reason to close the launch.&lt;/strong&gt; If I don’t, I won’t have a reason to open up the product again. It’ll become dead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s worth the effort to write good quality articles.&lt;/strong&gt; I didn’t see it working out for me financially from 2015 to 2017, but it worked out now with Learn JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I won’t be able to live off product creation if I price low.&lt;/strong&gt; An incredible amount of work that goes into each of my products. If I got no money, I need to find a job; if I find a job, I won’t create as much, and the world doesn’t benefit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Launch my courses to everyone.&lt;/strong&gt; It’s still too early to be smart about systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Joy&lt;/strong&gt; doesn’t come from work, it doesn’t come from leisure. It’s a state where you can get into. You need nothing to be joyful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You’re going to face resistance everyday&lt;/strong&gt;. What’s important is to sit down and do the work everyday. Do what you can, and let the rest speak for itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You are not entitled to the results&lt;/strong&gt;. If you create meaningful work, the results will come, but you need to be ready for the results to come too. If I didn’t charge a high price for Learn JavaScript, I’d probably be looking for a job right now.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Giving away something for free doesn’t equate to generosity&lt;/strong&gt;; discounting doesn’t equate to generosity Charging low doesn’t equate to generosity. This is one of the biggest lessons I learned. I need to share more about this in 2018.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It’s useless to keep secrets&lt;/strong&gt; when I’m creating things. I should share them openly instead, because if nobody knows it, nobody will buy it. The thing will die.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I understood why I didn’t want to freelance as a designer or a developer&lt;/strong&gt;. Since I run my own business, I know firsthand that design nor code doesn’t make money. They’re aids. Charging for design/code doesn’t help a client. Fixing their products or showing them how to sell does. So, instead of freelancing as a designer/developer, I might want to freelance as a business consultant. Not going to focus on this much, because I want to focus on my own teaching business this year.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m not sure how helpful it is to read through a list of lessons like the one you’ve just read above. Some of the lessons I learned cannot be taught through words. You have to experience them.&lt;/p&gt;
&lt;p&gt;But I hope it helped somehow.&lt;/p&gt;
&lt;h2 id=&quot;plans-for-2018&quot;&gt;Plans for 2018&lt;/h2&gt;
&lt;p&gt;My plan for 2018 is simple. Focus on creating, communicating and delivering value. I’m going to focus on three things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Blog posts and videos&lt;/strong&gt;—I’m going to create content every week without fail (except when I’m launching something).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn JavaScript&lt;/strong&gt;—I intend to complete Learn JavaScript by June 2018 and launch the full course by July 2018. This is going to be a tough one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A free CSS Course&lt;/strong&gt;—I have grand plans for this CSS course. If the plans succeeds, this will be big. I’m going to keep quiet about the plans until I finish Learn JavaScript. I don’t want to spill the beans when I can’t work on it! If you have any CSS questions, click on &lt;a href=&quot;https://zellwk.com/questions/node&quot;&gt;this link and leave some questions&lt;/a&gt;!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also have plans for 2019. I’m thinking of creating two more paid courses. If you want me to make these courses, click on the links and leave some questions!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/questions/node&quot;&gt;A course on building webapps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/questions/design&quot;&gt;A design course for frontend developers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have plans for 2020 too, but it’s too early to say anything now. I just know the next few years will be exciting 😎.&lt;/p&gt;
&lt;p&gt;Aren’t you excited?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding And Using REST APIs</title>
    <link href="https://zellwk.com/blog/https:/www.smashingmagazine.com/2018/01/understanding-using-rest-api/"/>
    <updated>2018-01-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.smashingmagazine.com/2018/01/understanding-using-rest-api/</id>
    <content type="html">&lt;p&gt;There’s a high chance you came across the term “REST API” if you’ve thought about getting data from another source on the internet, such as Twitter or Github. But what is a REST API? What can it do for you? How do you use it?&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn everything you need to know about REST APIs to be able to read API documentations and use them effectively.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Why mutation can be scary</title>
    <link href="https://zellwk.com/blog/http:/alistapart.com/article/why-mutation-can-be-scary/"/>
    <updated>2018-01-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/http:/alistapart.com/article/why-mutation-can-be-scary/</id>
    <content type="html">&lt;p&gt;Unexpected changes in your JavaScript code can be a real headache. When working with objects, it can be even harder to prevent unintended mutation. In this article, I’ll show you some tricks (and libraries) to prevent these unintended changes and ensure stability when working with objects.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Should you use CSS or JavaScript for animations?</title>
    <link href="https://zellwk.com/blog/https:/www.heartinternet.uk/blog/should-you-use-css-or-javascript-for-web-animations/"/>
    <updated>2018-01-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.heartinternet.uk/blog/should-you-use-css-or-javascript-for-web-animations/</id>
    <content type="html">&lt;p&gt;When should you use CSS for your web animations? Or when should you use JavaScript? Is one better than the other? In this article, I’ll show how you to use both to produce smooth animations for your web site.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Can I get a discount?</title>
    <link href="https://zellwk.com/blog/discount/"/>
    <updated>2018-01-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/discount/</id>
    <content type="html">&lt;p&gt;You’ll have to pay the full fee to enroll in my courses. I don’t discount anymore, with the exception of early-bird prices. This article explains why I offer early-bird prices, and why I don’t discount anymore.&lt;/p&gt;
&lt;!--more--&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;early-bird-prices&quot;&gt;Early-bird prices&lt;/h2&gt;
&lt;p&gt;You may have noticed I offer pre-orders for my courses. If you enroll in these pre-orders, you’ll enroll at a lower price. If you enroll in later batches, you’ll pay a higher price.&lt;/p&gt;
&lt;p&gt;For example, if you enrolled in Learn JavaScript during the first pre-order launch, you would have enrolled at $75. In the second launch, you could choose between three packages—$129, $259 and $649. People who enrolled the first launch at $75 get upgraded to the $259 package automatically.&lt;/p&gt;
&lt;p&gt;If you intend to enroll in a third launch, you can expect prices to be higher than the second launch.&lt;/p&gt;
&lt;p&gt;That’s how early-bird pricing works over here.&lt;/p&gt;
&lt;h3 id=&quot;why-i-offer-early-bird-prices&quot;&gt;Why I offer early-bird prices&lt;/h3&gt;
&lt;p&gt;I create courses in a different way compared to most creators. When I create a course, I launch a pre-order before I write anything. This sounds crazy, but there’s a reason to it. Let me explain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I want to make sure the courses I create are the best ones ever written on a subject&lt;/strong&gt;. When you go through a course, you’ll be able to understand what’s being taught without getting confused or overwhelmed along the way. You’ll take home real skills and remember them for life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To create these courses, I gather real-world questions and challenges from people like you&lt;/strong&gt;—I’ll ask everyone who pre-ordered a course what questions they have and what would help them learn best. Then I’ll create a structure that best answers the questions they’ve asked.&lt;/p&gt;
&lt;p&gt;That’s how courses are formed over at zellwk.com.&lt;/p&gt;
&lt;p&gt;But as you can see, pre-orders are risky. If you enroll during the initial launch, you won’t get to see the course immediately. You wouldn’t be able to go through any lessons yet. You’re trusting me to produce a course that’ll help you learn best.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I want to thank you for this trust.&lt;/strong&gt; That’s why I offer the pre-order at a lower price. I promise to make sure I do everything I can to create the best possible course.&lt;/p&gt;
&lt;p&gt;As I produce more of the course, I may release more pre-order launches. The price for these subsequent launches will be higher than the initial pre-order because you’ll be able to see more of the course; you’ll get immediate access to the lessons that are already created. Of course, since you’re still taking a risk by jumping in before the course is fully produced, you’ll also be rewarded with a lower price point compared to the final course.&lt;/p&gt;
&lt;p&gt;When the course is completed, it would have went through multiple revisions with real students. It would have addressed real pains that you may be experiencing. You can be sure the course will help you learn the subject well (if you put in the effort). Since the course is tested and proven to work, you’ll pay a higher price when you enroll.&lt;/p&gt;
&lt;p&gt;Sounds fair?&lt;/p&gt;
&lt;p&gt;This process may sound weird, but that’s how I create courses.&lt;/p&gt;
&lt;h2 id=&quot;why-are-prices-high-compared-to-other-books%2Fcourses&quot;&gt;Why are prices high compared to other books/courses&lt;/h2&gt;
&lt;p&gt;Two reasons.&lt;/p&gt;
&lt;h3 id=&quot;great-material-requires-great-effort-to-create&quot;&gt;Great material requires great effort to create&lt;/h3&gt;
&lt;p&gt;If you’ve read my articles, you would have felt that they were clear and succinct. In each article, I would have answered almost every question you have about a specific subject.&lt;/p&gt;
&lt;p&gt;How did I do that?&lt;/p&gt;
&lt;p&gt;The answer is reasonably simple. I work my ass off to create quality material. I put myself in a beginner’s shoes to explore possible questions you may have; I explain concepts in a clear and understandable manner, without jargon; I double check my examples to make sure they’re correct and error-free; I edit the text (although I still suck at grammar) multiple times to ensure you get the best possible reading experience, one that’ll allow you to absorb the information you’ve just read.&lt;/p&gt;
&lt;p&gt;It’s hard work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I spend at least five hours, often more, to create one article.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I triple or even quadruple the amount of effort that goes into each of my courses.&lt;/strong&gt; I think of exercises you can do to cement your knowledge; I consider common mistakes and edge cases and explain them so you won’t get blind-sided when you encounter them; I show you my detailed thought process. Unlike most books and courses out there that are created to provide you with information, I engineer each of my courses to make sure you learn well.&lt;/p&gt;
&lt;h3 id=&quot;i-support-my-students-fully&quot;&gt;I support my students fully&lt;/h3&gt;
&lt;p&gt;I’m here to support the students who have enrolled into my courses. I’m here to help my students build strong fundamentals in whatever they’re trying to learn.&lt;/p&gt;
&lt;p&gt;My students can attest that, once they joined the community, I am there for them. I pop into our community a lot, I communicate with them, I facilitate conversations, I answer questions whenever I see anything amiss, and I generally try to keep on top of my students’ learning experience.&lt;/p&gt;
&lt;p&gt;If you have a question about the materials I created for the course, you can shoot the question over at any time and I’ll be here to answer them until you get it. That’s my commitment to my students.&lt;/p&gt;
&lt;p&gt;This takes significant investment in terms of time and energy on my side, and in return, you’ll get clarity and improvement. I believe it’s worth it to invest in you.&lt;/p&gt;
&lt;h2 id=&quot;why-i-don%E2%80%99t-discount&quot;&gt;Why I don’t discount&lt;/h2&gt;
&lt;p&gt;Once the price is set, I don’t discount my courses anymore—not for students, not for educators, not for people whom may live in a country that has a weaker currency compared to USD.&lt;/p&gt;
&lt;p&gt;Please understand this is the way I opt to run my business.&lt;/p&gt;
&lt;p&gt;If you believe the value you’ll get out of the course is much greater than the investment you have to put in, I recommend you get my course.&lt;/p&gt;
&lt;p&gt;If you don’t believe the course is worth your money, don’t enroll. Simple as that.&lt;/p&gt;
&lt;h2 id=&quot;what-if-you-don%E2%80%99t-have-enough-money-to-enroll%3F&quot;&gt;What if you don’t have enough money to enroll?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you don’t have enough money on hand to enroll in the course, consider saving up for the next launch.&lt;/strong&gt; Yes, it’ll be more expensive, and you’ll only be able to enroll at a later date; but you’ll have less financial worries, and you’ll be ready to immerse yourself in the course.&lt;/p&gt;
&lt;p&gt;While you wait for the next launch, use the free materials I produce to help you become a better developer. They may help you get a better job, which can increase your income before you purchase a course too. Who knows!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you’re in dire financial straits, don’t enroll into my courses&lt;/strong&gt;. I want you to find a job to support yourself and your family first. Education can wait until you’ve ensured everyone in your family doesn’t starve on the streets.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You’ve read why I charge high prices, why I offer early-bird pricing and why I don’t offer discounts for my courses.&lt;/p&gt;
&lt;p&gt;If you’re ready and willing to invest in your growth, take a leap of faith and enroll in one of my courses. I’m here to support you on your journey.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An introduction to animations with Greensock Animation API (GSAP)</title>
    <link href="https://zellwk.com/blog/gsap/"/>
    <updated>2017-12-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gsap/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://greensock.com/&quot;&gt;Greensock Animation API (GSAP)&lt;/a&gt; is an animation library that helps you create performant animations. It can be used safely (back to IE6!) to create animations without jank, and it’s the only animation library (as far as I know) that handles SVG animations seamlessly.&lt;/p&gt;
&lt;p&gt;Many animation experts, like &lt;a href=&quot;https://twitter.com/sarah_edo&quot;&gt;Sarah Drasner&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ChrisGannon&quot;&gt;Chris Gannon&lt;/a&gt;, use and recommend GSAP.&lt;/p&gt;
&lt;p&gt;In this article, you’ll learn how to use GSAP to build simple animations.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;tweenmax-and-timelinemax&quot;&gt;TweenMax and TimelineMax&lt;/h2&gt;
&lt;p&gt;GSAP lets you choose from four libraries—&lt;strong&gt;TweenLite&lt;/strong&gt;, &lt;strong&gt;TweenMax&lt;/strong&gt;, &lt;strong&gt;TimelineLite&lt;/strong&gt; and &lt;strong&gt;TimelineMax&lt;/strong&gt;; TweenMax has more features than TweenLite; TimelineMax has more features than TimelineLite.&lt;/p&gt;
&lt;p&gt;Since you’re learning about GSAP for the first time, let’s optimize for learning and use TweenMax; it includes almost everything you’ll ever need (including TimelineMax).&lt;/p&gt;
&lt;p&gt;If you’re worried about file size, you can optimize your assets for production by choosing the right libraries later. For now, let’s stick with learning.&lt;/p&gt;
&lt;h2 id=&quot;installing-gsap&quot;&gt;Installing GSAP&lt;/h2&gt;
&lt;p&gt;To install GSAP in your project, you need to include the library before you include your JavaScript file. The process looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Link to GSAP --&amp;gt;
&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenMax.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;!-- Your main JavaScript comes next --&amp;gt;
&amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;first%2C-what%E2%80%99s-a-tween%3F&quot;&gt;First, what’s a Tween?&lt;/h2&gt;
&lt;p&gt;A tween is a single movement in an animation. In GSAP, a tween has the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;TweenMax.method(element, duration, vars)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;method&lt;/code&gt; refers to the GSAP method you’ll like to tween with.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;element&lt;/code&gt; is the element you want to animate. If you want to create tweens for multiple elements at the same time, you can pass in an array of elements to &lt;code&gt;element&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;duration&lt;/code&gt; is the duration of your tween. It is an integer in seconds (without the &lt;code&gt;s&lt;/code&gt; suffix!).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vars&lt;/code&gt; is an object of the properties you want to animate. More on this later.&lt;/p&gt;
&lt;h2 id=&quot;gsap-methods&quot;&gt;GSAP methods&lt;/h2&gt;
&lt;p&gt;GSAP lets you animate with many methods. When you’re new, the ones you’ll use most are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt; sets the &lt;code&gt;vars&lt;/code&gt; object to the specified values &lt;strong&gt;without creating an animation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from&lt;/code&gt; animates the element &lt;strong&gt;from the values you set in &lt;code&gt;vars&lt;/code&gt;&lt;/strong&gt; to their current values.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;to&lt;/code&gt; animates the element from their current values &lt;strong&gt;to the values you set in &lt;code&gt;vars&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;gsap-vars&quot;&gt;GSAP vars&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vars&lt;/code&gt; is an object that lets you specify the properties you want to animate. You can specify any CSS property here. Just switch the CSS naming format into camel case.&lt;/p&gt;
&lt;p&gt;For example, if you want to animate the &lt;code&gt;font-size&lt;/code&gt; property, you change &lt;code&gt;font-size&lt;/code&gt; into &lt;code&gt;fontSize&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const vars = {
  fontSize: &#39;20px&#39;,
  backgroundColor: &#39;#40eefa&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GSAP also lets you animate CSS transforms. The syntax here is slightly different though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;translateX&lt;/code&gt;, you use &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;translateY&lt;/code&gt;, you use &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;rotate&lt;/code&gt;, you use &lt;code&gt;rotation&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const vars = {
  x: 200, // Translates 200px from left to right
  y: -200 // Translates 200px from bottom to top
  rotation: 90 // Rotates 90 degrees
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;rotation&lt;/code&gt;, GSAP uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix&quot;&gt;CSS transform matrix&lt;/a&gt; to calculate the tween.&lt;/p&gt;
&lt;p&gt;In case you are wondering, there is no need to understand CSS Transform matrix because you’ll probably not want to hand-write one. It’s unbelievably complicated.&lt;/p&gt;
&lt;h3 id=&quot;is-there-a-documentation-that-contains-all-animate-able-properties%3F&quot;&gt;Is there a documentation that contains all animate-able properties?&lt;/h3&gt;
&lt;p&gt;Unfortunately, no. There isn’t a documentation that contains all animate-able properties. The good news is, you won’t need such a documentation because GSAP can animate any animate-able CSS property. As long as you can use CSS Transitions on the property, GSAP can handle it for you.&lt;/p&gt;
&lt;p&gt;By the way, even though GSAP is super fast, you can’t stop jank from happening if you animate CSS properties other than &lt;code&gt;transform&lt;/code&gt; and &lt;code&gt;opacity&lt;/code&gt;. So don’t animate other CSS properties unnecessarily.&lt;/p&gt;
&lt;h2 id=&quot;let%E2%80%99s-start-tweening&quot;&gt;Let’s start tweening&lt;/h2&gt;
&lt;p&gt;Let’s say you have a box. You want to move the box from the left to the right over 2 seconds.&lt;/p&gt;
&lt;p&gt;To do so, you use the &lt;code&gt;to&lt;/code&gt; method because you want to move the box &lt;strong&gt;to&lt;/strong&gt; the right. In &lt;code&gt;vars&lt;/code&gt; object, you specify the &lt;code&gt;x&lt;/code&gt; property (translateX) to move things horizontally.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const box = document.querySelector(&#39;.box&#39;)
TweenMax.to(box, 2, {x: 400 })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/tween-horizontal.gif&quot; alt=&quot;Moving a box from left to right over 2 seconds&quot;&gt;
  &lt;figcaption&gt;Moving a box from left to right over 2 seconds&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s another example: let’s say you want the box from the bottom to it’s current position. The box should be invisible at first; it fades in and becomes fully visible at the end of the animation.&lt;/p&gt;
&lt;p&gt;To do so, you use the &lt;code&gt;from&lt;/code&gt; method because you want to move the box &lt;strong&gt;from&lt;/strong&gt; the bottom. In the &lt;code&gt;vars&lt;/code&gt; object, you specify the &lt;code&gt;y&lt;/code&gt; property to move things vertically. You also specify &lt;code&gt;opacity&lt;/code&gt; to make the box fade in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const box = document.querySelector(&#39;.box&#39;)
TweenMax.from(box, 2, {
  y: 100,
  opacity: 0
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/tween-vertical.gif&quot; alt=&quot;Moving a box from bottom up, changing opacity at the same time&quot;&gt;
  &lt;figcaption&gt;Moving a box from bottom up, changing opacity at the same time&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;timing-functions&quot;&gt;Timing functions&lt;/h2&gt;
&lt;p&gt;Like CSS Transitions and CSS Animations, you can create timing functions for each of your tweens. The syntax is slightly different though.&lt;/p&gt;
&lt;p&gt;In GSAP, you write the timing functions as the &lt;code&gt;ease&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const vars = {
  ease: Power0.easeOut
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GSAP provides you with many easing variables like &lt;code&gt;Power0&lt;/code&gt;, &lt;code&gt;Power1&lt;/code&gt;, &lt;code&gt;Power2&lt;/code&gt;, &lt;code&gt;Power3&lt;/code&gt; and &lt;code&gt;Power4&lt;/code&gt;. These easing variables tell GSAP how strong the easing needs to be.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Power0&lt;/code&gt; gives you the normal ease-in and ease-out values, &lt;code&gt;Power1&lt;/code&gt; gives you the quadratic ease-in and ease-out values, and &lt;code&gt;Power2&lt;/code&gt; gives you the cubic ease-in and cubic ease-out values, and so on.&lt;/p&gt;
&lt;p&gt;If you use Firefox’s devtools, you can roughly estimate what &lt;code&gt;Power0&lt;/code&gt; to &lt;code&gt;Power4&lt;/code&gt; looks like.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/power.png&quot; alt=&quot;Power0 to Power4 are similar to the standard, quadratic, cubic and quartic easing values&quot;&gt;
  &lt;figcaption&gt;Power0 to Power4 are similar to the standard, quadratic, cubic and quartic easing values&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Besides &lt;code&gt;Power0&lt;/code&gt; to &lt;code&gt;Power4&lt;/code&gt;, GSAP gives you other easing variables, like &lt;code&gt;Bounce&lt;/code&gt; and &lt;code&gt;Elastic&lt;/code&gt;, that are more powerful than to cubic-bezier curves—they let you create animations that you can’t do with cubic-bezier!&lt;/p&gt;
&lt;p&gt;One example is a bouncing animation. Click the ball in the codepen below and you’ll see the ball bounce!.&lt;/p&gt;
&lt;p data-height=&quot;600&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;mBoJry&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Bouncing ball animation&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/mBoJry/&quot;&gt;Bouncing ball animation&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;the-easing-visualizer&quot;&gt;The Easing visualizer&lt;/h2&gt;
&lt;p&gt;To find the perfect timing-function for your tweens, you can use the &lt;a href=&quot;https://greensock.com/ease-visualizer&quot;&gt;easing visualizer&lt;/a&gt; that GSAP has created. Here, you’ll find a complete list of possible easing variables.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/visualizer%E2%80%93easing-vars.png&quot; alt=&quot;A complete list of easing variables&quot;&gt;
  &lt;figcaption&gt;A complete list of easing variables&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can also customize easing properties and see how it looks like immediately.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/visualizer%E2%80%93customize.png&quot; alt=&quot;Each easing variable can be further customized by clicking on the underlined items&quot;&gt;
  &lt;figcaption&gt;Each easing variable can be further customized by clicking on the underlined items&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you want to create animations that look good, you need to go through different possible timing-functions and find the perfect one. There’s no substitute for experimentation here, so experiment away! GSAP has already made it easy for you!&lt;/p&gt;
&lt;h2 id=&quot;multiple-tweens-at-the-same-time&quot;&gt;Multiple Tweens at the same time&lt;/h2&gt;
&lt;p&gt;You can Tween an element with two different sets of &lt;code&gt;vars&lt;/code&gt; at the same time. To do so, you create two tweens, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const ball = document.querySelector(&#39;svg g&#39;)

ball.addEventListener(&#39;click&#39;, e =&amp;gt; {
  TweenMax.to(ball, 2.5, {
    x: 600,
    rotation: 720,
    transformOrigin: &#39;50% 50%&#39;,
    ease: &#39;Power1.easeOut&#39;
  });
  TweenMax.to(ball, 2, {
    y: 400,
    ease: &#39;Bounce.easeOut&#39;
  });
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/bounce-and-rotate.gif&quot; alt=&quot;Bouncing, moving and rotating at the same time&quot;&gt;
  &lt;figcaption&gt;Bouncing, moving and rotating at the same time&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;See &lt;a href=&quot;https://codepen.io/zellwk/pen/rGRVev&quot;&gt;this codepen&lt;/a&gt; if you want to click on the ball yourself.&lt;/p&gt;
&lt;p&gt;If you want to start the second tween after the first tween is done, you need to set a delay value in the second tween with the &lt;code&gt;delay&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const box = document.querySelector(&#39;box&#39;)
TweenMax.to(box, 1, {x: 200})
TweenMax.to(box, 1, {y: 200, delay: 1})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/tween-delay.gif&quot; alt=&quot;Delaying a tween with the delay property&quot;&gt;
  &lt;figcaption&gt;Delaying a tween with the delay property&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Setting delay like this is easy if you only use a few tweens. However, it becomes unwieldy quickly.&lt;/p&gt;
&lt;p&gt;This is where TimelineMax comes in to help.&lt;/p&gt;
&lt;h2 id=&quot;chaining-tweens-with-timelinemax&quot;&gt;Chaining Tweens with TimelineMax&lt;/h2&gt;
&lt;p&gt;TimelineMax lets you chain tweens together. When you do so, the second tween starts after the first tween completes; the third tween starts after the second tween completes.&lt;/p&gt;
&lt;p&gt;To create a TimelineMax instance, you write &lt;code&gt;new TimelineMax({})&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const tl = new TimelineMax({})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve created a timeline, treat the new &lt;code&gt;tl&lt;/code&gt; variable as &lt;code&gt;TweenMax&lt;/code&gt; and continue doing whatever you did previously.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const tl = new TimelineMax({})
tl.to(box, 1, {x: 200})
tl.to(box, 1, {y: 200})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you’ll notice is, without the delay, the second tween (moving vertically) gets attached to the end of the first tween automatically. Isn’t that sweet?!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/gsap/tween-delay.gif&quot; alt=&quot;Chaining tweens with TimelineMax&quot;&gt;
  &lt;figcaption&gt;Chaining tweens with TimelineMax&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Check &lt;a href=&quot;https://codepen.io/zellwk/pen/qPgyEb&quot;&gt;this codepen&lt;/a&gt; for a demo.&lt;/p&gt;
&lt;p&gt;That’s it for a basic intro to the Greensock Animation API (GSAP). There’s way more to TweenMax and TimelineMax that you’ve learned in this lesson. Feel free to explore what you can do with them (or wait till you learn more when you build components).&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;GSAP is a library that lets you create animations with JavaScript. It contains four possible libraries—TweenLite, TweenMax, TimelineLite and TimelineMax.&lt;/p&gt;
&lt;p&gt;To create a tween, you specify three things—the element you want to tween, the duration of the tween, and the &lt;code&gt;vars&lt;/code&gt; object—in the &lt;code&gt;to&lt;/code&gt; or &lt;code&gt;from&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;You can create multiple tweens that start at the same time by simply writing two tweens. To chain tweens together, you can use TimelineMax.&lt;/p&gt;
&lt;p&gt;I hope this article has been useful to help you learn GSAP.&lt;/p&gt;
&lt;p&gt;If you loved this article, you’ll love learn &lt;strong&gt;Learn JavaScript&lt;/strong&gt;—a course that helps you learn to &lt;strong&gt;build real components from scratch&lt;/strong&gt; with Javascript. &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Click here to find out more about Learn JavaScript&lt;/a&gt; if you’re interested.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Animations explained</title>
    <link href="https://zellwk.com/blog/css-animations/"/>
    <updated>2017-12-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-animations/</id>
    <content type="html">&lt;p&gt;The second way to animate your components is through CSS Animations. CSS Animations are like CSS Transitions, except they’re way more powerful.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;You create a CSS Animation by defining an animation in &lt;code&gt;@keyframes&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes animation-name {
  0% {
    margin-left: 0px;
  }

  50% {
    margin-right: 400px;
  }

  100% {
    margin-left: 0px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the keyframes above, the &lt;code&gt;0%&lt;/code&gt;, &lt;code&gt;50%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; values are points on an animation timeline. It means the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Begin the animation (0%) with &lt;code&gt;margin-left&lt;/code&gt; set to 0px.&lt;/li&gt;
&lt;li&gt;Animate &lt;code&gt;margin-left&lt;/code&gt; to 400px as the animation continues to the the middle of the animation duration (50%)&lt;/li&gt;
&lt;li&gt;Animate &lt;code&gt;margin-left&lt;/code&gt; to 0px as the animation continues to the end (100%)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can add any number of points on the &lt;code&gt;@keyframes&lt;/code&gt; declaration. Each point you add should be a percentage value. (You can also substitute &lt;code&gt;from&lt;/code&gt; for 0% and &lt;code&gt;to&lt;/code&gt; for 100%).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes animation-name {
  0% {
    margin-left: 0px;
  }

  25% {
    margin-right: 200px;
  }

  50%, {
    margin-right: 400px;
  }

  75% {
    margin-right: 200px;
  }

  100% {
    margin-left: 0px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your &lt;code&gt;@keyframes&lt;/code&gt; points contain similar properties (like in the above case), you can stack the points together to compact the &lt;code&gt;@keyframes&lt;/code&gt; declaration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes animation-name {
  from, to {
    margin-left: 0px;
  }

  25%, 75% {
    margin-right: 200px;
  }

  50% {
    margin-right: 400px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-the-animation&quot;&gt;Using the animation&lt;/h2&gt;
&lt;p&gt;You can use the animation you’ve created with the &lt;code&gt;animation&lt;/code&gt; property. Like &lt;code&gt;transition&lt;/code&gt;, &lt;code&gt;animation&lt;/code&gt; is a short hand for a handful of &lt;code&gt;animation-&lt;/code&gt; properties (8 in total).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.component {
  animation-name: name;
  animation-duration: duration;
  animation-timing-function: timing-function;
  animation-delay: delay;
  animation-iteration-count: count;
  animation-direction: direction;
  animation-fill-mode: fill-mode;
  animation-play-state: play-state;

  /* OR */
  animation: name
             duration
             timing-function
             delay
             iteration-count
             direction
             fill-mode
             play-state;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;animation-name&lt;/code&gt; is the name of the animation you created with the &lt;code&gt;@keyframes&lt;/code&gt; syntax. You can include more than one animation by separating them with commas.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-duration&lt;/code&gt; is the duration of the animation. It is written in seconds with the &lt;code&gt;s&lt;/code&gt; suffix, like &lt;code&gt;3s&lt;/code&gt;. It is also a required value.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-timing-function&lt;/code&gt; is the timing-function used for the animation. It has the same syntax as a &lt;code&gt;transition-timing-function&lt;/code&gt;. If left out, it defaults to &lt;code&gt;ease&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-delay&lt;/code&gt; is the delay before starting the animation. It creates a delay for every iteration of the animation and is written in seconds with the &lt;code&gt;s&lt;/code&gt; suffix, like &lt;code&gt;3s&lt;/code&gt;. If left out, it defaults to 0s.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt; tells CSS how many times you want the animation to occur. It takes in a number value. If you want the animation to loop infinitely (until you say stop), use &lt;code&gt;infinite&lt;/code&gt;. If left out, it defaults to 1.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-direction&lt;/code&gt; is the direction of the animation. More on &lt;code&gt;animation-direction&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode&lt;/code&gt; tells CSS what to do when the animation ends. More on &lt;code&gt;animation-fill-mode&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-play-state&lt;/code&gt; determines the state of the animation. It can either be &lt;code&gt;running&lt;/code&gt; (which means the animation is playing) or &lt;code&gt;paused&lt;/code&gt;. If left out, it defaults to &lt;code&gt;running&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;animation-direction&quot;&gt;Animation-direction&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;animation-direction&lt;/code&gt; tells CSS to play the animation from 0% to 100% or vice versa.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;animation-direction&lt;/code&gt; is set to &lt;code&gt;normal&lt;/code&gt;, the animation plays from 0% to 100%.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;animation-direction&lt;/code&gt; is set to &lt;code&gt;reverse&lt;/code&gt;, the animation plays from 100% to 0%.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;animation-direction&lt;/code&gt; is set to &lt;code&gt;alternate&lt;/code&gt;, the animation plays from 0% to 100% first, then plays from 100% to 0%, and from 0% to 100% again, until the &lt;code&gt;animating-iteration-count&lt;/code&gt; runs out.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;animation-direction&lt;/code&gt; is set to &lt;code&gt;alternate-reverse&lt;/code&gt;, the animation plays from 100% to 0% first, then plays from 0% to 100%, and from 100% to 0% again, until the &lt;code&gt;animating-iteration-count&lt;/code&gt; runs out.&lt;/p&gt;
&lt;p data-height=&quot;600&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;eGxBWP&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Animation direction demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/eGxBWP/&quot;&gt;Animation direction demo&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;animation-fill-mode&quot;&gt;Animation-fill-mode&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode&lt;/code&gt; tells CSS how to style the animated element when the animation ends. It can take four possible values: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;forwards&lt;/code&gt;, &lt;code&gt;backwards&lt;/code&gt; and &lt;code&gt;both&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(If the &lt;code&gt;animation-iteration-count&lt;/code&gt; is infinite, this property does nothing).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode: none;&lt;/code&gt; tells CSS to style the animated element CSS rules that apply to it. Nothing from the &lt;code&gt;@keyframes&lt;/code&gt; declaration should affect the animation when it ends.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode: forwards;&lt;/code&gt; tells CSS to style the animated element such that it contains styles from the last &lt;code&gt;@keyframes&lt;/code&gt; it encountered. If the animation goes in the normal direction, CSS will style the element with properties from the &lt;code&gt;100%&lt;/code&gt; step. If the animation goes in the reverse direction, CSS styles the element with properties from the &lt;code&gt;0%&lt;/code&gt; step.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode: backwards;&lt;/code&gt; tells CSS to style the animated element according to where it originated. In practice, this looks exactly the same as &lt;code&gt;none&lt;/code&gt;. I don’t see a good use case for it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animation-fill-mode: both;&lt;/code&gt; tells CSS to apply properties in both the &lt;code&gt;forwards&lt;/code&gt; and &lt;code&gt;backwards&lt;/code&gt; direction. In practice, this works exactly like &lt;code&gt;forwards&lt;/code&gt; most of the time. I don’t see a good use case for it too.&lt;/p&gt;
&lt;p&gt;Of the four different fill-modes, the one you’ll most likely use is &lt;code&gt;forwards&lt;/code&gt;.&lt;/p&gt;
&lt;p data-height=&quot;600&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;bozBRr&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Animation fill-mode demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/bozBRr/&quot;&gt;Animation fill-mode demo&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;animating-two-or-more-properties.&quot;&gt;Animating two or more properties.&lt;/h2&gt;
&lt;p&gt;You can animate two or more properties from the same element by separating the &lt;code&gt;animation-name&lt;/code&gt; property with commas, just like how you’d do it with &lt;code&gt;transition-property&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  animation-name: slideIn, fadeIn;
  animation-duration: 2s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The syntax is exactly the same as &lt;a href=&quot;https://zellwk.com/blog/css-transitions#transitioning-two-or-more-properties&quot;&gt;transitioning multiple properties&lt;/a&gt;, so I’m confident you know how to take it from here :)&lt;/p&gt;
&lt;h2 id=&quot;vary-your-%40keyframes-points&quot;&gt;Vary your @keyframes points&lt;/h2&gt;
&lt;p&gt;Setting &lt;code&gt;@keyframes&lt;/code&gt; point values to standard, divisible values like 0%, 25%, 50%, 75% and 100% can make your animation dull and boring – because its predictable.&lt;/p&gt;
&lt;p&gt;You can vary your @keyframe point values so your animation becomes a bit more life-like, like the heartbeat example here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes heartbeat {
  0% { transform: scale(1); }
  35% { transform: scale(1.3); }
  50% { transform: scale(1); }
  65% { transform: scale(1.2); }
  80% { transform: scale(1); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;wrNoXP&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Heartbeat simple&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/wrNoXP/&quot;&gt;Heartbeat simple&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;points-and-timing&quot;&gt;Points and timing&lt;/h2&gt;
&lt;p&gt;It’s hard to time your CSS animation with other elements on the page at the same time.&lt;/p&gt;
&lt;p&gt;For example, let’s say you decide the animation should last for three seconds. You go ahead and calculate your points. In three seconds, if you want a specific part of the animation to take one second, you need to divide 100% by three. That means 33.333%.&lt;/p&gt;
&lt;p&gt;Later, you decide to change the entire animation to two seconds, but you still want the same part to be one second. Now you’re screwed. You need to redo your entire &lt;code&gt;@keyframes&lt;/code&gt; sequence because 33.333% now means 0.67 seconds instead.&lt;/p&gt;
&lt;p&gt;😡.&lt;/p&gt;
&lt;p&gt;I have to confess here, this is why I don’t use CSS animations much. Whenever I have a complicated animation I want to create, I’ll use JavaScript instead. Animating with JavaScript is much easier once you get used to the syntax.&lt;/p&gt;
&lt;h2 id=&quot;playing%2Fpausing-your-animation-with-css-or-javascript&quot;&gt;Playing/pausing your animation with CSS or JavaScript&lt;/h2&gt;
&lt;p&gt;CSS animations play immediately when the page loads. If you want to play/pause your CSS animation on an event, you need to change the &lt;code&gt;animation-play-state&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.heart {
  animation-play-state: running;
}

.heart:hover {
  animation-play-state: paused;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mouse over the heart below and you’ll see a paused animation:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;WZPRva&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Heartbeat (pause on hover)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/WZPRva/&quot;&gt;Heartbeat (pause on hover)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;IMPORTANT! Always pause your CSS animations when you don’t need them! This stops the animations from moving, which saves precious computing power that can be used for other things.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;when-to-use-css-animations&quot;&gt;When to use CSS Animations&lt;/h2&gt;
&lt;p&gt;Now, this is the big question. You’ve learned so much about CSS animations. When should you use it?&lt;/p&gt;
&lt;p&gt;Although CSS animations are useful, I recommend it only one or more if the following scenarios are met.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need a complex animation that CSS Transitions cannot provide you with (like the heartbeat animation for example)&lt;/li&gt;
&lt;li&gt;You need to transition more than 2 properties for a single element.&lt;/li&gt;
&lt;li&gt;The animation is relatively simple. It should not be more than 4 steps. Any more, you’re in for a headache.&lt;/li&gt;
&lt;li&gt;You want to trigger the animation when the screen loads (without listening for any JavaScript event).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the animation becomes complicated enough to exceed 4 steps, I recommend you animate your component with JavaScript. It’s far easier to calculate and synchronize timings with JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;CSS Animations are kind of a powered-up version of CSS Transitions. They allow you to create multi-step transitions through the &lt;code&gt;@keyframes&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;To use an animation you created, you can specify the animation in &lt;code&gt;animation&lt;/code&gt; or &lt;code&gt;animation-property&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;CSS Animations are great for animations that are relatively simple, because of the way &lt;code&gt;@keyframes&lt;/code&gt; is structured. If you want to create a more complex animation, I highly recommend Javascript to create your animation instead.&lt;/p&gt;
&lt;p&gt;If you loved this article, you’ll love learn &lt;strong&gt;Learn JavaScript&lt;/strong&gt;—a course that helps you learn to &lt;strong&gt;build real components from scratch&lt;/strong&gt; with Javascript. &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Click here to find out more about Learn JavaScript&lt;/a&gt; if you’re interested.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Dealing with Imposter Syndrome</title>
    <link href="https://zellwk.com/blog/imposter/"/>
    <updated>2017-12-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/imposter/</id>
    <content type="html">&lt;p&gt;Two days ago, I sent out a tweet that says, “The more I learn about code, the less I realize I know, and the less confident I feel about teaching people how to code. Compound this with the fact that I’m writing a course AND selling it”.&lt;/p&gt;
&lt;p&gt;That sums up how I’m feeling these two days. If I were to put it in a nice way—I feel like shit. I haven’t been sleeping well the entire week. I woke up today at 3am these two days.&lt;/p&gt;
&lt;p&gt;When I had dinner with my wife yesterday, she said I look like I might be better off dead. Obviously that’s not what she said in my face, but that’s what I inferred.&lt;/p&gt;
&lt;!--more--&gt;
&lt;iframe class=&quot;youtube&quot; src=&quot;https://www.youtube.com/embed/xFEpgUsX46E&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;It’s bad.&lt;/p&gt;
&lt;p&gt;One of the things I tend to do whenever I feel like shit is to go on Twitter and rant about my feelings. That’s why I wrote that tweet.&lt;/p&gt;
&lt;p&gt;I’m lucky in a sense that I can rant, and some people would reply. Those that reply are nice people, and they encourage me to go on. So, thank you Anneke, Brendan, Dave, Daneil and everyone who said something nice.&lt;/p&gt;
&lt;p&gt;It’s heartwarming, I appreciate it a lot.&lt;/p&gt;
&lt;p&gt;Usually, I’m able to put aside the Imposter Syndrome and continue to get things done.&lt;/p&gt;
&lt;p&gt;But this is just one of the times where reassurance from outside doesn’t even work. When I turn away from these tweets, I feel the fear and the pressure to perform. I feel that my writing still sucks, I don’t know if the code that I’m sharing is the best one out there, and I’m afraid of leading people down the wrong path.&lt;/p&gt;
&lt;p&gt;I know I’m not the only one suffering from Impsoter Syndrome. Even Sara Soueidan, who is a developer I respect, has it, and has produced lesser content because of Imposter Syndrome. And that’s such a waste. I benefit a lot from Sara’s articles, and I would love to read more of her content.&lt;/p&gt;
&lt;p&gt;From a bigger perspective, I know that everyone watching this video suffer from Imposter Syndrome in a way, or you wouldn’t be watching this. If we could all muster up our courage and still put things out there, as if Imposter Syndrome didn’t affect us, how much richer would this world be?&lt;/p&gt;
&lt;h2 id=&quot;so%2C-what-do-we-do-with-imposter-syndrome%3F&quot;&gt;So, what do we do with Imposter Syndrome?&lt;/h2&gt;
&lt;p&gt;Honestly, I don’t feel comfortable with sharing about Imposter Syndrome, because it’s highly personal, and it might adversely affect the sales for my upcoming launch. But I know that this is the best moment I can share, since I’m in touch with the fear right now. Getting this out is important enough to warrant a decrease in monetary incentives for me.&lt;/p&gt;
&lt;p&gt;So I hope what I’m about to share helps you in some way.&lt;/p&gt;
&lt;p&gt;A disclaimer upfront, my story might not sound tragic like it’s the end of the world. Some of you would think that I have a blessed life, and shouldn’t feel so bad about it. But it does feel like the end of the world to me. It’s my world anyway.&lt;/p&gt;
&lt;p&gt;I think what I need to share at this point is that Imposter Syndrome doesn’t affect me much on regular daily basis. When I notice I know next to nothing about coding or designing, it motivates me me instead, because I know I have so much more to learn and I love the learning process.&lt;/p&gt;
&lt;p&gt;It doesn’t affect me when I write too, because I know everything that I have written so far is helpful to someone.&lt;/p&gt;
&lt;p&gt;It affects me when I try to make money with the skills that I have learned. I think I am not good enough to make $whatever amount of money I’m aiming for.&lt;/p&gt;
&lt;p&gt;And that means, interviews for jobs, selling to potential clients, selling courses online to people like you.&lt;/p&gt;
&lt;p&gt;Is this particular case, it affects me a lot because of five reasons.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, I’m launching a course next month, and I’m selling stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, I need the money. I made an agreement with my wife that, if I don’t make $20,000 in this launch. We have items coming up in the next two years, and I can’t sit around waiting for money to drop anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third&lt;/strong&gt;, many of you won’t know this, but I’ve been trying to make this teach for a living thing work out for the past two years. At the beginning, I was able to make $2000 a month—and that’s decent income—but the more I write, the more I produce, the less revenue I get.&lt;/p&gt;
&lt;p&gt;So, in recent months, I get way less that $500 a month. I’ll be lucky if it even hits that amount. So I’m kind of living on my savings. But because we have items coming in, I can’t do that anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fourth&lt;/strong&gt;, and this is the one that makes things worst, and why I might be deterring you away from my course. Whenever you sell anything, you need testimonials, rightL You need people to believe in your product.&lt;/p&gt;
&lt;p&gt;I reached out to the folks who bought pre-ordered the course before and asked them for their experiences. Nobody replied.&lt;/p&gt;
&lt;p&gt;I don’t know if it’s just the holiday season, or if they have been so busy to a point where they couldn’t go through the course, or because the course is simply just lacklustre, or because they don’t want to start until the full course is completed.&lt;/p&gt;
&lt;p&gt;There are many different reasons, but I don’t know the answer. I can only let these reasons swim in my head and when I consider that the course isn’t good enough, I get pretty upset.&lt;/p&gt;
&lt;p&gt;I’ve been trying to teach web development for over four years now by sharing what I know online. I identify myself with it already. I want to help the world learn web development. But if I am not helping, then what’s the point. If the courses I’m writing isn’t helping, then what’s the point of writing and selling them in the first place?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fifth&lt;/strong&gt;, I don’t want to get a job. I love what I’m doing now, teaching and sharing, and I don’t want to feel trapped behind a job. I have not freelanced for such a long time that it’s intimidating to even think about it. I tried to think of freelancing as a plan B last year, but it didn’t work out. I came back to products again.&lt;/p&gt;
&lt;p&gt;So these are conversations that I have with myself. Mostly about the value that I bring for people, specifically with regards to results and money.&lt;/p&gt;
&lt;p&gt;The reasons differ slightly everytime when I encounter Imposter Syndrome and I get into such an emotional state, but it large hinges around the feeling that I not good enough to charge, and I haven’t been producing enough value.&lt;/p&gt;
&lt;p&gt;So that’s the reasons behind this current bout of severe Imposter Syndrome. As I write it down and as I talk about it, it’s getting better, so you don’t feel like I’m better off dead right now.&lt;/p&gt;
&lt;p&gt;But how can you deal with Imposter Syndrome. That’s what this video is all about right. You came here to hear that.&lt;/p&gt;
&lt;h2 id=&quot;what-i-realized-about-imposter-syndrome&quot;&gt;What I realized about Imposter Syndrome&lt;/h2&gt;
&lt;p&gt;I noticed three things: my Imposter Syndrome gets severe when&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One&lt;/strong&gt;, I don’t take care of myself well.&lt;/p&gt;
&lt;p&gt;I skip exercises, I eat junk food, I don’t meditate, I coop myself up in my house and don’t talk to anyone (which happens a lot if you work from home)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two&lt;/strong&gt;, I don’t give myself time to do what I want to do&lt;/p&gt;
&lt;p&gt;By that I don’t mean watching Netflix or relaxing by the beach. I want to code, I want to learn, but I haven’t been learning to code or design for a long time. That’s what got me into this line in the first place. I feel that I’m lagging behind now, and I want to improve my skills.&lt;/p&gt;
&lt;p&gt;But because I need to write, and I have a course to write, and I need to produce content, and I need to think about selling and marketing, I don’t give myself any leeway to learn to code or design.&lt;/p&gt;
&lt;p&gt;I think it’s been a year and a half now. It’s eating at me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Three&lt;/strong&gt;, I try to control things that I can’t control.&lt;/p&gt;
&lt;p&gt;I want results, I want others to think that I’m good enough for their wallets, I want others to respond and acknowledge me, and so on.&lt;/p&gt;
&lt;p&gt;These are things that I cannot control. You can say that I’m shit right now and I can’t stop it.&lt;/p&gt;
&lt;h2 id=&quot;what-to-do-about-imposter-syndrome&quot;&gt;What to do about Imposter Syndrome&lt;/h2&gt;
&lt;p&gt;Once I realize these things, I know what I need to do. I need to take better care of myself, go exercise, eat better, go out for a walk, and find people to talk to.&lt;/p&gt;
&lt;p&gt;I know I need to give myself the time to learn, code and design without the pressure of delivering results. So, not coding salespages and stuff like that, but generally things I want to try and build.&lt;/p&gt;
&lt;p&gt;I also know I need to focus on the things I can do and have planned to do. For sales, I planned some things in advance, so I need to execute them all.&lt;/p&gt;
&lt;p&gt;Then, just let the results speak for itself. If it works, it works. If it doesn’t, then maybe the universe is telling me to get a job.&lt;/p&gt;
&lt;p&gt;The world doesn’t end.&lt;/p&gt;
&lt;p&gt;Hopefully, things work out… That’s all I can say. Hopefully, things work out.&lt;/p&gt;
&lt;p&gt;I believe it will.&lt;/p&gt;
&lt;p&gt;I hope this helped in some way&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Transitions explained</title>
    <link href="https://zellwk.com/blog/css-transitions/"/>
    <updated>2017-12-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-transitions/</id>
    <content type="html">&lt;p&gt;The simplest (and most straightforward) way to animate your components is through CSS Transitions. In this article, you’ll learn how CSS Transitions work, and how to make animations with it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;A transition occurs when a CSS property changes from one value to another value over a period of time.&lt;/p&gt;
&lt;p&gt;You can create CSS Transitions with the &lt;code&gt;transition&lt;/code&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition: property duration transition-timing-function delay;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;transition&lt;/code&gt; property is a shorthand of four CSS properties, &lt;code&gt;transition-property&lt;/code&gt;, &lt;code&gt;transition-duration&lt;/code&gt;, &lt;code&gt;transition-timing-function&lt;/code&gt;, &lt;code&gt;transition-delay&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition-property: property;
  transition-duration: duration;
  transition-timing-function: timing-function;
  transition-delay: delay

  /* The transition property is the shorthand for the above four properties */
  transition: property duration timing-function delay;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;transition-property&lt;/code&gt; refers to the CSS property you wish to transition. It is required in the &lt;code&gt;transition&lt;/code&gt; shorthand.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transition-duration&lt;/code&gt; refers to the duration of the transition. How long do you want the transition to last? This value is written in seconds with the &lt;code&gt;s&lt;/code&gt; suffix (like &lt;code&gt;3s&lt;/code&gt;). It is also required in the &lt;code&gt;transition&lt;/code&gt; shorthand.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transition-timing-function&lt;/code&gt; refers to how to transition occurs. You’ll learn more about this later.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transition-delay&lt;/code&gt; refers to how long you want to wait before starting the duration. This value is written in seconds with the &lt;code&gt;s&lt;/code&gt; suffix (like &lt;code&gt;3s&lt;/code&gt;). &lt;code&gt;transition-delay&lt;/code&gt; is optional in the &lt;code&gt;transition&lt;/code&gt; shorthand.&lt;/p&gt;
&lt;h2 id=&quot;triggering-transitions&quot;&gt;Triggering transitions&lt;/h2&gt;
&lt;p&gt;You can trigger CSS transitions directly with pseudo classes like &lt;code&gt;:hover&lt;/code&gt; (activates when mouse goes over an element), &lt;code&gt;:focus&lt;/code&gt; (activates when a user tabs onto an element, or when a user clicks into an input element), or &lt;code&gt;:active&lt;/code&gt; (activates when user clicks on the element).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* creating transitions directly in CSS */
.button {
  background-color: #33ae74;
  transition: background-color 0.5s ease-out;
}

.button:hover {
  background-color: #1ce;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;Qqzzxd&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Transition&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/Qqzzxd/&quot;&gt;CSS Transition&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;You can also trigger CSS transitions through JavaScript by adding or removing a class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.button {
  background-color: #33ae74;
  transition: background-color 0.5s ease-out;
}

.button.is-active {
  color: #1ce;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;.button&#39;)
button.addEventListener(&#39;click&#39;, _ =&amp;gt; button.classList.toggle(&#39;is-active&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;GMPPBg&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Transition with JavaScript&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/GMPPBg/&quot;&gt;CSS Transition with JavaScript&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;understanding-transition-timing-function&quot;&gt;Understanding transition-timing-function&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;transition-timing-function&lt;/code&gt; governs how a transition occurs. All transitions have a value of &lt;code&gt;linear&lt;/code&gt; by default, which means the property changes evenly until the end of the transition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition: transform 1s linear;

  /* OR */
  transition-property: transform;
  transition-duration: 1s;
  transition-timing-function: linear;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The thing is, nothing moves linearly in life. That’s not how real objects move. Sometimes, we accelerate; sometimes, we decelerate. The &lt;code&gt;transition-timing-function&lt;/code&gt; allows you to capture all of that.&lt;/p&gt;
&lt;p&gt;Imagine yourself throwing a tennis ball into an open field. The ball leaves your hand with the maximum speed. As it moves, it loses energy, it decelerates and eventually comes to a halt. This is called &lt;code&gt;ease-out&lt;/code&gt;. There’s a timing function for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition-timing-function: ease-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now imagine you’re in a car. It’s not moving right now. When you move the car, it accelerates and goes toward its top speed. This is called &lt;code&gt;ease-in&lt;/code&gt;. There’s also a timing function for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition-timing-function: ease-in;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since you have &lt;code&gt;ease-in&lt;/code&gt; and &lt;code&gt;ease-out&lt;/code&gt;, there’s also a timing function that combines the two together, &lt;code&gt;ease-in-out&lt;/code&gt;. (I advise against using &lt;code&gt;ease-in-out&lt;/code&gt; in your transitions unless your transitions last longer than a second. Nothing eases in and out within a second. It simply looks weird.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition-timing-function: ease-in-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See this pen for a demo of the timing functions you’ve learned so far:&lt;/p&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;Oxrqpo&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Transition Timing Functions (no cubic)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/Oxrqpo/&quot;&gt;CSS Transition Timing Functions (no cubic)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if you don’t like any of the above choices, you can create your own timing function with &lt;code&gt;cubic-bezier&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;creating-your-own-timing-function-with-cubic-bezier&quot;&gt;Creating your own timing function with cubic-bezier&lt;/h2&gt;
&lt;p&gt;A Cubic-bezier is a set of four values that determine your transition-timing-function. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition-timing-function: cubic-bezier(x1, y1, x2, y2);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t worry about the &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y1,&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt; and &lt;code&gt;y2&lt;/code&gt;. You’ll never create cubic-bezier curves by writing numbers yourself (unless you already know what they mean and you’re tweaking your timing function for perfection).&lt;/p&gt;
&lt;p&gt;You can rely on both Chrome and Firefox’s trusty developer tools to help you create your curves. To use it, you add a &lt;code&gt;transition-timing-function&lt;/code&gt; into an element, then open up devtools and click on the timing function.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-transition/cubic-bezier.png&quot; alt=&quot;Both Chrome and Firefox provides you with a cubic-bezier tool&quot;&gt;
  &lt;figcaption&gt;Both Chrome and Firefox provides you with a cubic-bezier tool&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p data-height=&quot;800&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;gGZqNo&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Transition Timing Functions&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/gGZqNo/&quot;&gt;CSS Transition Timing Functions&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Going in-depth about creating your own bezier curves for your animations is out of scope for today’s article. If you’re interested, you can find more information about cubic-bezier curves in “&lt;a href=&quot;https://www.smashingmagazine.com/2014/04/understanding-css-timing-functions/&quot;&gt;Understanding CSS Timing Functions&lt;/a&gt;” by &lt;a href=&quot;https://twitter.com/Stephen_Greig&quot;&gt;Stephen Greig&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;transitioning-two-or-more-properties&quot;&gt;Transitioning two or more properties&lt;/h2&gt;
&lt;p&gt;You can transition two (or more) CSS properties by separating them with a comma in your &lt;code&gt;transition&lt;/code&gt; or &lt;code&gt;transition-property&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;You can do the same with duration, timing-functions and delays as well. If the values are the same, you only need to specify one of them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.selector {
  transition: background-color 1s ease-out,
              color 1s ease-out;

  /* OR */
  transition-property: background, color;
  transition-duration: 1s;
  transition-timing-function: ease-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may be tempted to transition every CSS property with &lt;code&gt;all&lt;/code&gt;. Don’t ever do this. This is bad for performance. Always specify the property you’re trying to transition.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* DON&#39;T EVER DO THIS */
.selector {
  transition-property: all
}

/* ALWAYS DO THIS */
.selector {
  transition-property: background-color, color, transform;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;transitioning-in-vs-transitioning-out&quot;&gt;Transitioning in vs transitioning out&lt;/h2&gt;
&lt;p&gt;Sometimes, you want the properties to transition in and out at differently. You want the duration, timing-function or delay to be different.&lt;/p&gt;
&lt;p&gt;To do so, you write another set of &lt;code&gt;transition-&lt;/code&gt; properties.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.button {
  background-color: #33ae74;
  transition: background-color 0.5s ease-out;
}

.button:hover {
  background-color: #1ce;
  transition-duration: 2s;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you write transition properties in the triggering (pseudo) class, the transition properties in the triggering class overwrites the original transition properties you’ve stated in the base class.&lt;/p&gt;
&lt;p&gt;So, in the example above, when you hover on the button, the background color takes 2 seconds to change from &lt;code&gt;#33ae74&lt;/code&gt; to &lt;code&gt;#1ce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you hover out from the button, the background color only takes 0.5s to change back to &lt;code&gt;#1ce&lt;/code&gt; because the &lt;code&gt;transition-duration&lt;/code&gt; of 2s no longer exists.&lt;/p&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;GOLLyR&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS Transition (different transition speeds when transitioning in and out)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/GOLLyR/&quot;&gt;CSS Transition (different transition speeds when transitioning in and out)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;CSS Transitions are the easiest way to perform animations. You can create transitions either with the &lt;code&gt;transition&lt;/code&gt; shorthand or with &lt;code&gt;transition-&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;To create a transition, you overwrite a property in a class (or psuedo class), and you specify the property to transit in &lt;code&gt;transition&lt;/code&gt; or &lt;code&gt;transition-property&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember to change your &lt;code&gt;transition-timing-function&lt;/code&gt; so your animation looks more real!&lt;/p&gt;
&lt;p&gt;If you loved this article, you’ll love learn &lt;strong&gt;Learn JavaScript&lt;/strong&gt;—a course that helps you learn to &lt;strong&gt;build real components from scratch&lt;/strong&gt; with Javascript. &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Click here to find out more about Learn JavaScript&lt;/a&gt; if you’re interested.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to make interactive components</title>
    <link href="https://zellwk.com/blog/interactive-components/"/>
    <updated>2017-12-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/interactive-components/</id>
    <content type="html">&lt;p&gt;How do you make a website interactive? That’s one question that many beginners get stuck at. In this video, I walk you through you need to know to build an interactive website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The first thing you want to ask yourself is this—what makes a website interactive? Does it become interactive if you can click on things, or does it become interactive if things start moving around?&lt;/p&gt;
&lt;p&gt;For most people, the answer is both.&lt;/p&gt;
&lt;p&gt;But technically, a website becomes interactive when it responds to a user in some way.&lt;/p&gt;
&lt;p&gt;If you can click on a something and something happens, or you can type on a keyboard and something happens, or can say something, and something happens, your site is interactive.&lt;/p&gt;
&lt;h2 id=&quot;how-do-you-know-when-something-happens%3F&quot;&gt;How do you know when something happens?&lt;/h2&gt;
&lt;p&gt;Imagine you’re thirsty right now. You get up from your computer and grab a cup of water.&lt;/p&gt;
&lt;p&gt;In this case, there is a cue. Because you’re thirsty, you go grab water.&lt;/p&gt;
&lt;p&gt;In Javascript, these cues, are called events. So, a click is an event, a keyboard tab is an event, a scroll is an event, and so on.&lt;/p&gt;
&lt;p&gt;Javascript allows you to listen to many kinds of events, including but not limited to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mouse events&lt;/li&gt;
&lt;li&gt;touch events&lt;/li&gt;
&lt;li&gt;keyboard events&lt;/li&gt;
&lt;li&gt;form events&lt;/li&gt;
&lt;li&gt;scroll events&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find a complete list of events on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;MDN’s event reference&lt;/a&gt;, you’ll find a link below the video.&lt;/p&gt;
&lt;p&gt;To act on the events, your program needs to be able to detect the event itself. To do so, you use an event listener.&lt;/p&gt;
&lt;p&gt;To add an event listener, you first have to select an element, with querySelector. In this example here we have a button and we’re selecting the button with document.querySelector.&lt;/p&gt;
&lt;p&gt;To add an event listener, you use the &lt;code&gt;addEventListener&lt;/code&gt; method that’s present on all HTML elements.&lt;/p&gt;
&lt;p&gt;The first parameter you pass into &lt;code&gt;addEventListener&lt;/code&gt; is the event you’re listening to. In this video, I’m going only to show you how to use the ‘click’ event, which is very basic mouse event. If you’re interested to learn to use the rest, I recommend you check out &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Learn Javascript, I walk you through how to build 20 different real-world components, steps by step, and you’ll learn to use different kinds of events at the same time to make things you build super interactive.&lt;/p&gt;
&lt;p&gt;So back to event the event listener. In this case, we pass in click as the first parameter.&lt;/p&gt;
&lt;p&gt;The second parameter is a function to execute when the event occurs.&lt;/p&gt;
&lt;p&gt;Callbacks allow you to configure different actions to perform when an event occurs; you can do anything you want in the callback function, including changing the back ground color with &lt;code&gt;style&lt;/code&gt; property or adding a class with classList.&lt;/p&gt;
&lt;p&gt;To create some sort of animation, you can use CSS Transitions, that’s the easiest way. If you’re watching from the future, you’ll see a link in the description below. If you’re watching it now, wait till next Wednesday and I’ll send you an article.&lt;/p&gt;
&lt;p&gt;That’s a super basic intro of events and how to create interactive components. With this info, you can get a lot done, including creating a sidebar that stays outside of the screen.&lt;/p&gt;
&lt;p&gt;I teach you how to create components like this one, plus many other advanced ones in &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn Javascript&lt;/a&gt;; you can check it out if you’re interested.&lt;/p&gt;
&lt;p&gt;One more thing before we end.&lt;/p&gt;
&lt;h2 id=&quot;the-listening-element&quot;&gt;The listening element&lt;/h2&gt;
&lt;p&gt;We used the button variable directly in the function for now. This is okay when you’re starting out, but not okay when you create more complex code.&lt;/p&gt;
&lt;p&gt;If you refactor, and shift the callback out of the element, it becomes hard for you to understand what &lt;code&gt;button&lt;/code&gt; refers to. Let’s call this callback &lt;code&gt;handleClick&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you change the &lt;code&gt;button&lt;/code&gt; variable to something else down below, the &lt;code&gt;handleClick&lt;/code&gt; function breaks.&lt;/p&gt;
&lt;p&gt;One way to get the button, which I call the listening element, is to use the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Another way of getting the listening element is through event object.&lt;/p&gt;
&lt;p&gt;The event object is an argument that’s present on all event listeners. You can get the listening element through &lt;code&gt;event.currentTarget&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I prefer use event.currentTarget because I prefer to use ES6 arrow functions whenever I can. ES6 arrow functions lets you write succinct code, but it doesn’t give you the same &lt;code&gt;this&lt;/code&gt; value as normal functions. You can find out more about &lt;code&gt;this&lt;/code&gt; in &lt;a href=&quot;https://zellwk.com/blog/this/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One funny thing is: if you &lt;code&gt;console.log(event)&lt;/code&gt;, you’ll see that currentTarget is actually &lt;code&gt;null&lt;/code&gt;, I’m not sure why this happens though, because &lt;code&gt;event.currentTarget&lt;/code&gt; refers to the listening element itself.&lt;/p&gt;
&lt;p&gt;If you know why, or if you’re interested in finding the answer, do it and let me know in the comments below.&lt;/p&gt;
&lt;p&gt;That’s it for today, I hope you have learned something useful.&lt;/p&gt;
&lt;p&gt;If you liked this video, be sure to hit the subscribe button below, and you’ll get a video from me every Friday.&lt;/p&gt;
&lt;p&gt;What’s even better is go to my website at zellwk.com and subscribe there. If you do that, I’ll share one article and one video every week to help you get better with frontend development.&lt;/p&gt;
&lt;p&gt;With that, I’m off for the week. Have a great weekend.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding for loops</title>
    <link href="https://zellwk.com/blog/js-for-loops/"/>
    <updated>2017-12-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-for-loops/</id>
    <content type="html">&lt;p&gt;Let’s say you want to run a function, &lt;code&gt;bounceBall&lt;/code&gt;, four times. How would you do it? Like this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function bounceBall() {
  // bounce the ball here
}

bounceBall()
bounceBall()
bounceBall()
bounceBall()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach is great if you need to &lt;code&gt;bounceBall&lt;/code&gt; only for a few times. What happens if you need to &lt;code&gt;bounceBall&lt;/code&gt; for a hundred times?&lt;/p&gt;
&lt;p&gt;The better way is through a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-%E2%80%98for%E2%80%99-loop&quot;&gt;The ‘for’ loop&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop runs a block of code as many times as you want to. Here’s a for loop that runs &lt;code&gt;bounceBall&lt;/code&gt; ten times:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 0; i &amp;lt; 10; i++) {
  bounceBall()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s broken down into four parts – the &lt;code&gt;initialExpression&lt;/code&gt;, the &lt;code&gt;condition&lt;/code&gt;, the &lt;code&gt;incrementalExpression&lt;/code&gt; and the &lt;code&gt;statement&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (initialExpression; condition; incrementExpression) {
  statement
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before you loop, you need to have a &lt;strong&gt;statement&lt;/strong&gt;. This statement is the block of code you’d like to run multiple times. You can write any number of lines of code here. You can even use functions.&lt;/p&gt;
&lt;p&gt;Here’s what the &lt;code&gt;for&lt;/code&gt; loop looks like with &lt;code&gt;bounceBall&lt;/code&gt; as its statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (initialExpression; condition; incrementExpression) {
  bounceBall()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, you need an &lt;strong&gt;initial expression&lt;/strong&gt; to begin a loop. This is where you declare a variable. For most loops, this variable is called &lt;code&gt;i&lt;/code&gt;.  It’s also set to 0.&lt;/p&gt;
&lt;p&gt;Here’s how it’ll look like when you put the &lt;code&gt;initialExpression&lt;/code&gt; into the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 0; condition; incrementExpression) {
  bounceBall()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the statement runs, the variable, &lt;code&gt;i&lt;/code&gt; is increased or decreased. You increase or decrease the value of &lt;code&gt;i&lt;/code&gt; in the &lt;strong&gt;increment expression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To increase the value of &lt;code&gt;i&lt;/code&gt; by one, you reassign &lt;code&gt;i&lt;/code&gt; such that it becomes &lt;code&gt;i + 1&lt;/code&gt; with &lt;code&gt;i = i + 1&lt;/code&gt;. The shorthand for this reassignment is &lt;code&gt;i++&lt;/code&gt;, which is what you’ll find in most &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;
&lt;p&gt;To decrease the value of &lt;code&gt;i&lt;/code&gt; by one, you reassign &lt;code&gt;i&lt;/code&gt; such that it becomes &lt;code&gt;i - 1&lt;/code&gt; with &lt;code&gt;i = i - 1&lt;/code&gt;. The shorthand for this reassignment is &lt;code&gt;i--&lt;/code&gt;, which is another variation of what you’ll find in most &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;bounceBall&lt;/code&gt; example above, we increased the variable &lt;code&gt;i&lt;/code&gt; by one each time the code runs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 0; condition; i++) {
  bounceBall()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But should you increase or decrease &lt;code&gt;i&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The answer lies in the &lt;strong&gt;condition&lt;/strong&gt;. This condition statement evaluates either to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. If the statement evaluates to &lt;code&gt;true&lt;/code&gt;, the statement runs.&lt;/p&gt;
&lt;p&gt;When the statement has ran, JavaScript runs the increment expression and checks if the condition evaluates to &lt;code&gt;true&lt;/code&gt; again. It repeats this process until the condition evaluates to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the condition evaluates to &lt;code&gt;false&lt;/code&gt;, JavaScript skips the loop and moves on with the rest of your code.&lt;/p&gt;
&lt;p&gt;So, if you do not want the loop to run, you can set a condition that evaluates to false immediately:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This loop will not run since the condition evaluates to false
for (let i = 0; i &amp;lt; 0; i++) {
  bounceBall()
  const timesBounced = i + 1
  console.log(&#39;The ball has bounced &#39; + timesBounced + &#39; times&#39;)
}

// You will only see this
console.log(&#39;next line of code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/for-loop/zero-times.png&quot; alt=&quot;Next line of code runs immediately since the condition evaluates to false&quot;&gt;
  &lt;figcaption&gt;Next line of code runs immediately since the condition evaluates to false&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you want the loop to &lt;em&gt;run twice&lt;/em&gt;, you change the condition such that it evaluates to false when the increment expression has ran twice.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This loop will run twice
for (let i = 0; i &amp;lt; 2; i++) {
  bounceBall()
  const timesBounced = i + 1
  console.log(&#39;The ball has bounced &#39; + timesBounced + &#39; times&#39;)&amp;quot;)
}

console.log(&#39;next line of code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/for-loop/two-times.png&quot; alt=&quot;The loop runs twice. After two times, the condition evaluates to false. &quot;&gt;
  &lt;figcaption&gt;The loop runs twice. After two times, the condition evaluates to false. &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you want the loop to &lt;em&gt;run ten times&lt;/em&gt;, you change the condition such that it evaluates to false when the increment expression has ran ten times.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This loop will run ten times
for (let i = 0; i &amp;lt; 10; i++) {
  bounceBall()
  const timesBounced = i + 1
  console.log(&#39;The ball has bounced &#39; + timesBounced + &#39; times&#39;)&amp;quot;)
}

console.log(&#39;next line of code&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/for-loop/ten-times.png&quot; alt=&quot;The loop runs twice. After ten times, the condition evaluates to false. &quot;&gt;
  &lt;figcaption&gt;The loop runs ten times. After ten times, the condition evaluates to false. &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;infinite-loops&quot;&gt;Infinite loops&lt;/h2&gt;
&lt;p&gt;Infinite loops occur when the &lt;em&gt;condition&lt;/em&gt; for your &lt;code&gt;for&lt;/code&gt; loops always return &lt;code&gt;true&lt;/code&gt;. Your browser will hang if you run an infinite loop.&lt;/p&gt;
&lt;p&gt;To recover from an infinite loop, you need to quit your browser forcefully. On a Mac, this means you right click on your browser icon and select “force quit”. On a Window’s machine, you open the Windows Task manager with &lt;code&gt;ctrl&lt;/code&gt; + &lt;code&gt;alt&lt;/code&gt; + &lt;code&gt;del&lt;/code&gt;, select your browser, and click “End task”.&lt;/p&gt;
&lt;h2 id=&quot;looping-through-arrays&quot;&gt;Looping through arrays&lt;/h2&gt;
&lt;p&gt;In practice, you almost never write a loop that runs ten times like in the &lt;code&gt;bounceBall&lt;/code&gt; example above. You’d always loop through an array or a object.&lt;/p&gt;
&lt;p&gt;When you loop (or iterate) through an array, you go through each item in the array once. To do so, you can use the length or the array as a condition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruitBasket = [&#39;banana&#39;, &#39;pear&#39;, &#39;guava&#39;]

// fruitBasket.length is 3
for (let i = 0; i &amp;lt; fruitBasket.length; i++) {
  console.log(&amp;quot;There&#39;s a &amp;quot; + fruitBasket[i] + &amp;quot; in the basket&amp;quot;)
}

// =&amp;gt; There&#39;s a banana in the basket
// =&amp;gt; There&#39;s a pear in the basket
// =&amp;gt; There&#39;s a guava in the basket
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The alternate way to write this &lt;code&gt;for&lt;/code&gt; loop is to use a negative increment expression. This version runs slightly faster than the &lt;code&gt;for&lt;/code&gt; loop above, but loops the array from the end instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = fruitBasket.length - 1; i &amp;gt;= 0; i--) {
  console.log(&amp;quot;There&#39;s a &amp;quot; + fruitBasket[i] + &amp;quot; in the basket&amp;quot;)
}

// =&amp;gt; There&#39;s a guava in the basket
// =&amp;gt; There&#39;s a pear in the basket
// =&amp;gt; There&#39;s a banana in the basket
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;looping-through-arrays-with-%E2%80%9Cfor-of%E2%80%9D&quot;&gt;Looping through arrays with “for of”&lt;/h2&gt;
&lt;p&gt;Yet another (much better) way to loop through an array is to use of &lt;code&gt;for...of&lt;/code&gt; loop. This is a new loop syntax that comes with ES6.  It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fruitBasket = [&#39;banana&#39;, &#39;pear&#39;, &#39;guava&#39;]
for (let fruit of fruitBasket) {
  console.log(fruit)
}

// =&amp;gt; There&#39;s a banana in the basket
// =&amp;gt; There&#39;s a pear in the basket
// =&amp;gt; There&#39;s a guava in the basket
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;for...of&lt;/code&gt; loop is preferable to the standard &lt;code&gt;for&lt;/code&gt; loop because it always loops through the array once. There’s no need to write &lt;code&gt;array.length&lt;/code&gt;, which makes your code much easier to read and maintain.&lt;/p&gt;
&lt;p&gt;You can use &lt;code&gt;for...of&lt;/code&gt; with any iterable object. These are objects that contain the &lt;code&gt;Symbol.iterator&lt;/code&gt; property. Arrays are one of such objects. If you &lt;code&gt;console.log&lt;/code&gt; an empty array, you’ll see that it has the &lt;code&gt;Symbol.iterator&lt;/code&gt; as one of its keys (within the Array &lt;code&gt;__proto__&lt;/code&gt; key):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/for-loop/iterator.png&quot; alt=&quot;Any object that contains the Symbol.iterator key can be iterated through with a for...of loop&quot;&gt;
  &lt;figcaption&gt;Any object that contains the Symbol.iterator key can be iterated through with a for...of loop&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;logic-in-loops&quot;&gt;Logic in loops&lt;/h2&gt;
&lt;p&gt;You can use &lt;code&gt;if/else&lt;/code&gt; or any other logic within a for loop.&lt;/p&gt;
&lt;p&gt;For example, let’s say you have a list of numbers, and you want to create a second list of numbers that are smaller that 20.&lt;/p&gt;
&lt;p&gt;To complete this objective, you first loop through the numbers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [25, 22, 12, 56, 8, 18, 34];

for (let num of numbers) {
  // do something here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, you want to check if each &lt;code&gt;num&lt;/code&gt; is smaller than 20.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [25, 22, 12, 56, 8, 18, 34];

for (let num of numbers) {
  if (num &amp;lt; 20) {
    // do something
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;num&lt;/code&gt; is smaller than 20, you want to add it to another array. To do so, you use the &lt;code&gt;push&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [25, 22, 12, 56, 8, 18, 34];
let smallerThan20 = []

for (let num of numbers) {
  if (num &amp;lt; 20) {
    smallerThan20.push(num)
  }
}

// smallerThan20 === [12, 8 , 18]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop is used when you want to execute the same task (or a set of tasks) multiple times.&lt;/p&gt;
&lt;p&gt;You would rarely loop through code for exactly ten times. Normally, you’ll want to loop through an array instead.&lt;/p&gt;
&lt;p&gt;To loop through an array exactly once, you can use the &lt;code&gt;for...of&lt;/code&gt; loop, which is much easier to write and understand compared to the traditional &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;Remember, you can write any amount of logic you want in loops. You can use functions, &lt;code&gt;if/else&lt;/code&gt; statements or even use loops in loops.&lt;/p&gt;
&lt;p&gt;If you loved this article, you’ll love learn &lt;strong&gt;Learn JavaScript&lt;/strong&gt;—a course that helps you learn to &lt;strong&gt;build real components from scratch&lt;/strong&gt; with Javascript. &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Click here to find out more about Learn JavaScript&lt;/a&gt; if you’re interested.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding if/else statements</title>
    <link href="https://zellwk.com/blog/js-if-else/"/>
    <updated>2017-11-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-if-else/</id>
    <content type="html">&lt;p&gt;Let’s say you’re walking on a busy street in the middle of town. You’re about to cross the road when you notice the traffic light for pedestrians turns red. What do you do?&lt;/p&gt;
&lt;p&gt;You stop, don’t you?&lt;/p&gt;
&lt;p&gt;And what happens when the light turns green again? You start walking.&lt;/p&gt;
&lt;p&gt;We can put this analogy into code too. It sounds something like: “If the light turns red, stop walking. Otherwise, continue walking”.&lt;/p&gt;
&lt;p&gt;And that, my friend, is the foundation of an &lt;code&gt;if/else&lt;/code&gt; statement.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-if%2Felse-statement&quot;&gt;The if/else statement&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;if/else&lt;/code&gt; statement helps to control what your program does in specified situations. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (condition) {
  // Do something
} else {
  // Do some other thing
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; tells JavaScript what to check for before continuing. If the condition evaluates to &lt;code&gt;true&lt;/code&gt;, JavaScript executes the code within the &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;If the condition evaluates to &lt;code&gt;false&lt;/code&gt;, JavaScript executes code from the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;In the traffic light example, we check whether the light is red:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Note: This example doesn&#39;t contain valid code yet
if (light is red) {
  // stop walking
} else {
  // continue walking
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need to check for more than one condition, you can use &lt;code&gt;else if&lt;/code&gt;, which goes between &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When would you need such a second condition?&lt;/p&gt;
&lt;p&gt;Well, let’s say you want to cross a small road. If there aren’t any cars around, would you wait for the traffic light to turn green? You still cross, don’t you?&lt;/p&gt;
&lt;p&gt;In code, this would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (light is red) {
  // Stop walking
} else if (cars around) {
  // Stop walking
} else if (police around) {
  // Stop walking
} else {
  // Continue walking
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, if the first condition evaluates to &lt;code&gt;true&lt;/code&gt;, JavaScript executes the code in the &lt;code&gt;if&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;If the first condition evaluates to &lt;code&gt;false&lt;/code&gt;, JavaScript checks the condition in the next &lt;code&gt;else if&lt;/code&gt; block and see whether it evaluates to &lt;code&gt;true&lt;/code&gt;. It goes on and on until all &lt;code&gt;else if&lt;/code&gt; blocks are exhausted.&lt;/p&gt;
&lt;p&gt;To check whether a condition evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, JavaScript relies two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comparison operators&lt;/li&gt;
&lt;li&gt;Truthy and falsey values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s talk about comparison operators first.&lt;/p&gt;
&lt;h2 id=&quot;comparison-operators&quot;&gt;Comparison operators&lt;/h2&gt;
&lt;p&gt;There are four main types of comparison operators:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Greater than (&lt;code&gt;&amp;gt;&lt;/code&gt;) or greater or equals to (&lt;code&gt;&amp;gt;=&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Smaller than (&lt;code&gt;&amp;lt;&lt;/code&gt;) or smaller or equals to (&lt;code&gt;&amp;lt;=&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Strictly equal (&lt;code&gt;===&lt;/code&gt;) or equal (&lt;code&gt;==&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Strictly unequal (&lt;code&gt;!==&lt;/code&gt;) or unequal (&lt;code&gt;!=&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first two types of comparison operators are straightforward. You use them to compare numbers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;24 &amp;gt; 23 // True
24 &amp;gt; 24 // False
24 &amp;gt;= 24 // True

24 &amp;lt; 25 // True
24 &amp;lt; 24 // False
24 &amp;lt;= 24 // True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next two types of comparison operators are quite straightforward as well. You use them to check whether things are equal or unequal to each other.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;24 === 24 // True
24 !== 24 // False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there’s a difference between strictly equal (&lt;code&gt;===&lt;/code&gt;) vs equal (&lt;code&gt;==&lt;/code&gt;), and strictly unequal (&lt;code&gt;!==&lt;/code&gt;) vs unequal (&lt;code&gt;!=&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;24&#39; === 24 // False
&#39;24&#39; == 24 // True

&#39;24&#39; !== 24 // True
&#39;24&#39; != 24 // False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from the example above, when you compare a string of &lt;code&gt;24&lt;/code&gt; vs the number 24, &lt;code&gt;===&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; while &lt;code&gt;==&lt;/code&gt; evaluates to true.&lt;/p&gt;
&lt;p&gt;Why is this so? Let’s look at the difference between strictly equal and equal&lt;/p&gt;
&lt;h3 id=&quot;%3D%3D%3D-vs-%3D%3D-(or-!%3D%3D-vs-!%3D)&quot;&gt;=== vs == (or !== vs !=)&lt;/h3&gt;
&lt;p&gt;JavaScript is a loosely-typed language. What this means is that, when we declare variables, we don’t care what type of value goes into the variable.&lt;/p&gt;
&lt;p&gt;You can declare any primitive or object, and JavaScript does the rest for you automatically:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const aString = &#39;Some string&#39;
const aNumber = 123
const aBoolean = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When comparing things with strictly equal (&lt;code&gt;===&lt;/code&gt;) or strictly unequal (&lt;code&gt;!==&lt;/code&gt;), JavaScript checks the type of variable. This is why a &lt;em&gt;string&lt;/em&gt; of &lt;code&gt;24&lt;/code&gt; and a &lt;em&gt;number&lt;/em&gt; &lt;code&gt;24&lt;/code&gt; do not equate.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;24&#39; === 24 // False
&#39;24&#39; !== 24 // True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When comparing things with equal (&lt;code&gt;==&lt;/code&gt;) or unequal (&lt;code&gt;!=&lt;/code&gt;), JavaScript converts (or casts) the types so they match each other.&lt;/p&gt;
&lt;p&gt;Generally, JavaScript tries to convert all types to numbers when you use a conversion operator. In the example below, the &lt;em&gt;string&lt;/em&gt; &lt;code&gt;24&lt;/code&gt; is converted into the &lt;em&gt;number&lt;/em&gt; 24 before the comparison.&lt;/p&gt;
&lt;p&gt;That’s why a string of &lt;code&gt;24&lt;/code&gt; equates to a number of 24 when you use &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&#39;24&#39; == 24 // True
&#39;24&#39; != 24 // False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Booleans can also be converted into numbers. When JavaScript converts Booleans into numbers, &lt;code&gt;true&lt;/code&gt; becomes 1 and &lt;code&gt;false&lt;/code&gt; becomes 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;0 == false // True
1 == true // True
2 == true // False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Automatic type conversion (when using comparison operators) is one of the common causes of hard-to-find bugs. &lt;strong&gt;Whenever you compare for equality, always use the strict versions&lt;/strong&gt; (&lt;code&gt;===&lt;/code&gt; or &lt;code&gt;!==&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;comparing-objects-and-arrays&quot;&gt;Comparing objects and arrays&lt;/h3&gt;
&lt;p&gt;Try comparing objects and arrays with &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;==&lt;/code&gt;. You’ll be very surprised.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = { isHavingFun: true }
const b = { isHavingFun: true }

console.log(a === b) // false
console.log(a == b) // false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; &lt;em&gt;look&lt;/em&gt; exactly the same. They are both objects, they have the same values.&lt;/p&gt;
&lt;p&gt;The strange thing is, &lt;code&gt;a === b&lt;/code&gt; is always going to be false. Why?&lt;/p&gt;
&lt;p&gt;Let’s say you have an identical twin brother/sister. You look exactly the same as your twin. Same hair color, same face, same clothes, same everything. How can people differentiate the two of you? It’ll be hard.&lt;/p&gt;
&lt;p&gt;In JavaScript, each object has a “identity card”. This identity card is called the &lt;strong&gt;reference&lt;/strong&gt; to the object. When you compare objects with equality operators, you’re asking JavaScript to check if the two objects have the same reference (same identity card).&lt;/p&gt;
&lt;p&gt;Is it a surprise that &lt;code&gt;a === b&lt;/code&gt; is always going to be false now?&lt;/p&gt;
&lt;p&gt;Let’s tweak it a little and assign &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const a = { isHavingFun: true }
const b = a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;a === b&lt;/code&gt; evaluates to true because &lt;code&gt;b&lt;/code&gt; now points to the same reference as &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(a === b) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;truthy-and-falsey&quot;&gt;Truthy and Falsey&lt;/h2&gt;
&lt;p&gt;If you write a single variable (like &lt;code&gt;hasApples&lt;/code&gt; in the example below) as the condition of an &lt;code&gt;if/else&lt;/code&gt; statement, JavaScript checks for a truthy or a falsey value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const hasApples = &#39;true&#39;
if (hasApples) {
  // Eat apple
} else {
  // Buy apples
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;strong&gt;falsey&lt;/strong&gt; value is a value that evaluates to &lt;code&gt;false&lt;/code&gt; when converted into a boolean. There are six possible falsey values in JavaScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; (numeric zero)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; (empty string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; (Not A Number)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A &lt;strong&gt;truthy&lt;/strong&gt; value, on the other hand, is a value that evaluates to &lt;code&gt;true&lt;/code&gt; when converted into a Boolean. In the case of numbers, anything that’s not &lt;code&gt;0&lt;/code&gt; converts to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Automatic type conversion to truthy and falsey values are highly encouraged in JavaScript&lt;/strong&gt;, because they make code shorter and easier to comprehend.&lt;/p&gt;
&lt;p&gt;For example, if you want to check if a string is empty, you can use the string in the condition straightaway.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const str = &#39;&#39;

if (str) {
  // Do something if string is not empty
} else {
  // Do something if string is empty
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;if/else&lt;/code&gt; statements are used to control what your program does in specific situations. It lets you determine whether to walk or cross the road, depending on the conditions given to you.&lt;/p&gt;
&lt;p&gt;To check if a condition is true or false, Javascript relies on two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;comparison operators&lt;/li&gt;
&lt;li&gt;truthy/false values&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you loved this article, you’ll love learn &lt;strong&gt;Learn JavaScript&lt;/strong&gt;—a course that helps you learn to &lt;strong&gt;build real components from scratch&lt;/strong&gt; with Javascript. &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Click here to find out more about Learn JavaScript&lt;/a&gt; if you’re interested.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to debug Javascript errors</title>
    <link href="https://zellwk.com/blog/debug-javascript-errors/"/>
    <updated>2017-11-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/debug-javascript-errors/</id>
    <content type="html">&lt;p&gt;It’s normal for you to make errors when you code. So if you see an error, you don’t have to be afraid. I get error messages all the time. When I have bad days, I get more error messages!&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Error messages are something bad. We’re actually lucky to have error messages show up infront of us when code.&lt;/p&gt;
&lt;p&gt;Think about designers and other professions, when they create something, its hard for them to know what’s wrong with their work.&lt;/p&gt;
&lt;p&gt;In our case, we get instant feedback through error messages. These error messages are like angels that gently tell us that something is wrong. You can correct the code and your program would work.&lt;/p&gt;
&lt;p&gt;Let’s go through an example.&lt;/p&gt;
&lt;p&gt;In this code, we’re trying to add an event listener to a button, and when the button is clicked, the button should turn orange.&lt;/p&gt;
&lt;p&gt;If you hit the refresh button, you’ll see an error message. The first thing you do is to breathe and relax.&lt;/p&gt;
&lt;p&gt;Then, you read the error message. You also look at where the message occurs.&lt;/p&gt;
&lt;p&gt;The error message says you can’t read a property &lt;code&gt;addEventListener&lt;/code&gt; of null. If you’re unsure whether &lt;code&gt;btn&lt;/code&gt; is null, you can do a &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, you’ll understand you missed a &lt;code&gt;.&lt;/code&gt; when declaring the &lt;code&gt;btn&lt;/code&gt; variable. What you’ll need to do is fix this &lt;code&gt;querySelector&lt;/code&gt; declaration and your code works.&lt;/p&gt;
&lt;p&gt;I hope this video has been helpful for you.&lt;/p&gt;
&lt;p&gt;If you like this video, you might want to consider subscribing to this youtube channel, and I’ll send you a helpful tip about frontend development every friday.&lt;/p&gt;
&lt;p&gt;You may also want to consider subscribing over at my blog at zellwk.com, and you’ll get one article plus one video from me every week to help you become a better frontend developer.&lt;/p&gt;
&lt;p&gt;Now good luck, and have a nice day!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning JavaScript – where should you start and what to do when you&#39;re stuck?</title>
    <link href="https://zellwk.com/blog/how-to-learn-javascript/"/>
    <updated>2017-11-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/how-to-learn-javascript/</id>
    <content type="html">&lt;p&gt;Have you tried to learn a JavaScript related topic/framework and found that you understand almost nothing?&lt;/p&gt;
&lt;p&gt;There is a simple reason why you don’t understand what you’re learning – you skipped steps. You tried to learn something advanced without having the fundamentals to back yourself up.&lt;/p&gt;
&lt;p&gt;What you’re trying to do by learning things that are far too advanced is like trying to drive an F1 without a drivers’ license. Can you imagine how badly you’ll crash?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So why do you force yourself to learn advanced JavaScript frameworks like React without learning the foundational topics first?&lt;/p&gt;
&lt;h2 id=&quot;how-to-learn-javascript&quot;&gt;How to learn JavaScript&lt;/h2&gt;
&lt;p&gt;To learn JavaScript, you need to know three things:&lt;/p&gt;
&lt;h3 id=&quot;1.-where-are-you-with-regards-to-javascript%3F&quot;&gt;1. Where are you with regards to JavaScript?&lt;/h3&gt;
&lt;p&gt;Are you a complete beginner at JavaScript? Do you only know how to copy-paste code? Or are you comfortable with writing JavaScript components from scratch?&lt;/p&gt;
&lt;p&gt;Where you’re at determines what “level” of stuff you  try to learn. &lt;strong&gt;If you learn something too simple, you’ll get bored. If you learn something too advanced, you’ll get overwhelmed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But, just knowing where you are isn’t enough. You don’t have a map of what to learn, which is why you’re stuck in the first place.&lt;/p&gt;
&lt;p&gt;This brings us to the next thing:&lt;/p&gt;
&lt;h3 id=&quot;2.-where-do-you-want-to-get-to%3F&quot;&gt;2. Where do you want to get to?&lt;/h3&gt;
&lt;p&gt;People learn JavaScript for different reasons. Are you trying to make your website more interactive? If you are, what you need to learn is completely different from another person who’s trying to develop a web application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You must be able to visualize something concrete at the end of your path to learning JavaScript&lt;/strong&gt;. It can be something simple (like clicking on a button and performing a specific animation) to something complex (like building a chat application).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You cannot use an abstract target like “learn enough to get hired”&lt;/strong&gt;. If you use that as a target, you’ll remain lost since everyone hires differently. Don’t sabotage yourself by using a target set by someone else. Plus, if you want to get hired, &lt;a href=&quot;https://zellwk.com/blog/get-hired/&quot;&gt;you can get hired with less skills than you imagine you need&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you know your end goal, you can work backwards to list the things you possibly need to learn to get there. This list is your learning map. With this map, check off one thing at a time, until you’ve completed what you set out to build. Then, repeat the process and learn something new.&lt;/p&gt;
&lt;h2 id=&quot;3.-what%E2%80%99s-the-shortest-path-between-these-two-points%3F&quot;&gt;3. What’s the shortest path between these two points?&lt;/h2&gt;
&lt;p&gt;The learning map you’ve created will consist of winding paths. You won’t know what winding paths you’ve created. Worse, you won’t know if any hidden straight paths get you from where you are to where you want to be even faster.&lt;/p&gt;
&lt;p&gt;This is expected. You’re charting your way into unknown territory. You won’t know if paths are straight or winding because you don’t know what you don’t know. There can be a shorter path between your two points, but you can’t see it.&lt;/p&gt;
&lt;p&gt;This is where a mentor can come in and help. The mentor went through the path you’re trying to take. He/she knows the landscape better than you. If you have a mentor, consult them. Ask them how to get to where you want to be.&lt;/p&gt;
&lt;p&gt;If you lack a mentor, it’s okay too. Sometimes, you just need to take that winding path to learn.&lt;/p&gt;
&lt;p&gt;For JavaScript, here’s the straightest path I know of. You can use this to guide you.&lt;/p&gt;
&lt;h2 id=&quot;the-four-phases-to-learning-javascript&quot;&gt;The four phases to learning JavaScript&lt;/h2&gt;
&lt;p&gt;Learning JavaScript is similar to like growing up. There are different phases of growth. You can view it in the following four phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Baby Phase&lt;/li&gt;
&lt;li&gt;The Child Phase&lt;/li&gt;
&lt;li&gt;The Teenage Phase&lt;/li&gt;
&lt;li&gt;The Adult Phase&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s walk through each phase briefly so you understand where you are and where you should focus your energy.&lt;/p&gt;
&lt;h3 id=&quot;the-baby-phase&quot;&gt;The Baby Phase&lt;/h3&gt;
&lt;p&gt;If you’re starting out with JavaScript, you’re in the Baby Phase. You’re clueless about JavaScript. The syntax looks foreign.&lt;/p&gt;
&lt;p&gt;What you should focus on in this phase is to &lt;strong&gt;thoroughly learn the JavaScript syntax&lt;/strong&gt; so you know what others are talking about when they say things like objects, arrays, functions, etc.&lt;/p&gt;
&lt;h3 id=&quot;the-child-phase&quot;&gt;The Child Phase&lt;/h3&gt;
&lt;p&gt;You’re in the Child Phase if you’re already comfortable with basic JavaScript syntax. At this stage, you don’t know how to build things from scratch yet.&lt;/p&gt;
&lt;p&gt;You often need help. Maybe you can copy-paste and modify something after hours of googling, but you’re still not confident in your JavaScript skills. You don’t know how the DOM works. You don’t know how to build things from scratch.&lt;/p&gt;
&lt;p&gt;In this phase, &lt;strong&gt;focus on learning methods provided to you by the DOM.&lt;/strong&gt; Learn about selecting elements, traversing the DOM, adding and removing things from the DOM, adding and removing event listeners, changing styles and classes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Try building simple things&lt;/strong&gt; like accordions. Maybe even showing a menu when a button gets clicked. It’s okay to copy-paste at first, but make sure write your component from scratch afterward so you understand the underlying mechanics.&lt;/p&gt;
&lt;h3 id=&quot;the-teenage-phase&quot;&gt;The Teenage Phase&lt;/h3&gt;
&lt;p&gt;You’re in the Teenage Phase if you already know how to build stuff from scratch. You’re somewhat confident you’ll be able to build anything DOM related, but you still can’t do them with a snap of your fingers.&lt;/p&gt;
&lt;p&gt;Your code may be messy and unorganized. It may lack best practices, but at least you got things working.&lt;/p&gt;
&lt;p&gt;The next step is to &lt;strong&gt;learn best practices from books and experts all around&lt;/strong&gt;. Absorb what you can, then, rebuild what you’ve built. Use the new practices you’ve learned to internalize them.&lt;/p&gt;
&lt;p&gt;This is also where you’ll want to begin looking at object oriented programming (OOP) and functional programming (FP). You’d also want to start learning about querying APIs from places like Github and Twitter.&lt;/p&gt;
&lt;h3 id=&quot;the-adult-phase&quot;&gt;The Adult Phase&lt;/h3&gt;
&lt;p&gt;Finally, in the Adult Phase, you know enough JavaScript to be dangerous. You can build almost anything you want. You’re confident with your code. It’s clean. You know the best practices and you’ve used them all. Now it’s time to leave the nest and look for something new, something related.&lt;/p&gt;
&lt;p&gt;Here, you have a few options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can learn a frontend framework (like Angular, Vue or React).&lt;/li&gt;
&lt;li&gt;You can learn Node to build a backend.&lt;/li&gt;
&lt;li&gt;You can dive even deeper into JavaScript.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Choose any option you want here. What you choose depends on where you want to get to. (Remember, your motivation is the deciding factor. Don’t let anyone else decide for you).&lt;/p&gt;
&lt;p&gt;If you choose to learn a frontend framework, you’ll be able to build complicated web applications that can take a ton of work if you tried building the same thing with pure JavaScript.&lt;/p&gt;
&lt;p&gt;If you choose to learn Node, you’ll start your journey towards a full-stack developer. Here, you have to learn about databases and server configuration at the same time.&lt;/p&gt;
&lt;p&gt;If you choose to dive deeper into JavaScript, you’ll learn how to write better, cleaner code. Eventually, it will help you better at both Node or any JavaScript framework you intend to pick up.&lt;/p&gt;
&lt;h2 id=&quot;how-do-you-work-through-each-phase%3F&quot;&gt;How do you work through each phase?&lt;/h2&gt;
&lt;p&gt;Great question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You need to find the correct materials to help you through each phase.&lt;/strong&gt; You can try to find the materials yourself, or you can grab &lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt;, where you’ll get curated learning resources to help you get through each phase.&lt;/p&gt;
&lt;p&gt;In JavaScript Roadmap, I dive into each of the four phases, give you links to resources where you can learn from and send you questions to check your understand in each phase.&lt;/p&gt;
&lt;p&gt;It’s a roadmap I wished I have when I started learning JavaScript. If I had it, I would have learned JavaScript so much faster than I did.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did I create JavaScript Roadmap?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s simple – I want to help you learn JavaScript, much faster than I did, without having to go through the same pain and confusion that I went through. That’s why I dedicated an entire month to curate and map out a path for you to learn from.&lt;/p&gt;
&lt;p&gt;(And just to let you know, this article you’re reading is a lesson from JavaScript Roadmap).&lt;/p&gt;
&lt;h2 id=&quot;learn-javascript&quot;&gt;Learn JavaScript&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I’m also writing a course that shows you how to become great at JavaScript and how to build anything you want from scratch.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I call it &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Learn JavaScript, I show you everything you need to know, step by step, starting from the absolute basics to JavaScript, to building real components from scratch.&lt;/p&gt;
&lt;p&gt;If you loved this article and would love more hands-on practice and step-by-step lessons, you’ll love Learn JavaScript.&lt;/p&gt;
&lt;p&gt;I’ve already spent more than 3 months working on the contents to Learn JavaScript, and I’m still working on it. I can proudly say its going to be the best JavaScript course out there to bring you from an absolute beginner to an advanced intermediate programmer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Check out Learn JavaScript&lt;/a&gt; if it sounds any interesting to you :)&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You struggle to learn JavaScript because you skipped steps and tried to learn something advanced without having the fundamentals to back them up.&lt;/p&gt;
&lt;p&gt;To learn JavaScript and do the things you want to do with it, you need to know these three things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where are you with JavaScript right now?&lt;/li&gt;
&lt;li&gt;Where do you want to get to?&lt;/li&gt;
&lt;li&gt;What’s the path you’re going to take?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leave a comment below/send me an email and tell me your answers. I’ll be waiting to help you refine them if you need help.&lt;/p&gt;
&lt;p&gt;Then, check out &lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt; if you want a road map to guide you through the process of learning JavaScript, and &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt; if you want to me to show you, step by step, how to learn JavaScript and build real components.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Console.log everything!</title>
    <link href="https://zellwk.com/blog/console-log-everything/"/>
    <updated>2017-11-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/console-log-everything/</id>
    <content type="html">&lt;p&gt;When you write Javascript, you’re bound to be unsure of something in your code somewhere. That’s a normal thing.&lt;/p&gt;
&lt;p&gt;When you’re unsure, you need to clarify what that unknown thing is. Otherwise, you won’t be able to code anything up.&lt;/p&gt;
&lt;p&gt;And how do you clarify?&lt;/p&gt;
&lt;p&gt;You write &lt;code&gt;console.log&lt;/code&gt; statements.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Console.log is your friend. Use it as often as you can and you’ll learn much more about Javascript than reading any article or watching any videos out there.&lt;/p&gt;
&lt;p&gt;It lets you learn by trial and error, and when you make a mistake and figure something out afterwards, you’ll remember it for life. That’s why console.log is extremely powerful.&lt;/p&gt;
&lt;p&gt;Let me give you an example when console.log is extremely helpful, especially for beginners.&lt;/p&gt;
&lt;p&gt;Here’s your task. I want you to get the firstName of everyone in the people array in a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;If you’re a beginner, you mind would go blank with this question immediately, even if you learned what a for loop is.&lt;/p&gt;
&lt;p&gt;Why? Because many people don’t understand what happens inside a for loop!&lt;/p&gt;
&lt;p&gt;For this example, I’m going to use a &lt;code&gt;for of&lt;/code&gt; loop instead of the traditional &lt;code&gt;for&lt;/code&gt; loop because its easier to understand and its easier to write than the traditional loop.&lt;/p&gt;
&lt;p&gt;So here’s how the &lt;code&gt;for of&lt;/code&gt; loop looks like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const people = [
  {name: &#39;Zell&#39;},
  {name: &#39;Vincy&#39;},
  {name: &#39;Huijing&#39;},
  {name: &#39;Chris&#39;}
]

for (let item of people) {
  // Do stuff here
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, here’s the question. What is item?&lt;/p&gt;
&lt;p&gt;If you’re unsure, you’ll never be able to get the answer. Right. So you need to clarify.&lt;/p&gt;
&lt;p&gt;And what do you do?&lt;/p&gt;
&lt;p&gt;You console.log whatever you’re unsure of.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let item of people) {
  console.log(item.name)
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And if you take a look it the console, you’ll immediately see what item is.&lt;/p&gt;
&lt;p&gt;In the first run of the loop, you get the object in the array. In the second run of the loop, you get the second object and so on.&lt;/p&gt;
&lt;p&gt;See how that makes a difference immediately?&lt;/p&gt;
&lt;p&gt;Now, if you know about objects, you can get the firstName of each person in the loop by using item.firstName.&lt;/p&gt;
&lt;p&gt;That is why you need to clarify things with console.log!&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;item&lt;/code&gt; isn’t the best variable to use here. If I were to write real code, I’ll use a better variable, like &lt;code&gt;person&lt;/code&gt; or something.&lt;/p&gt;
&lt;p&gt;But what I’m doing in this video is to deliberately mislead you with a weird variable name and a for loop that you probably never seen before so you get confused.&lt;/p&gt;
&lt;p&gt;And the good thing is, if you do get confused, you can see how console.log helps you solve that confusion altogether.&lt;/p&gt;
&lt;p&gt;And with this, my friend, you have learned the ultimate skill to learning how to code.&lt;/p&gt;
&lt;p&gt;If you like this video, you’ll love &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;Learn JavaScript&lt;/a&gt;, a course to help you learn Javascript properly and build things from scratch.&lt;/p&gt;
&lt;p&gt;With that. Good luck and I’ll see you next week.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding JavaScript Functions</title>
    <link href="https://zellwk.com/blog/js-functions/"/>
    <updated>2017-11-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-functions/</id>
    <content type="html">&lt;p&gt;Imagine you live in an village without tap water. To get water, you need to take a empty bucket, head to the well in the middle of the village, draw water from the well and head back home.&lt;/p&gt;
&lt;p&gt;You need to draw water from this well multiple times a day. It’s a hassle to say “I’m going to take an empty bucket, go to the well, draw water and bring back home” every time you explain what you’re doing.&lt;/p&gt;
&lt;p&gt;To shorten it, you can say you’re going to “draw water”.&lt;/p&gt;
&lt;p&gt;And my friend, you’ve created a function.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;declaring-functions&quot;&gt;Declaring functions&lt;/h2&gt;
&lt;p&gt;A function is a block of code that executes tasks in a specific order, like take empty bucket, go to well, draw water, head back home.&lt;/p&gt;
&lt;p&gt;It can be defined with the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function functionName (parameters) {
  // Do stuff here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;function&lt;/code&gt; is a keyword that tells JavaScript you’re defining a function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;functionName&lt;/code&gt; is the name of the function. In the example given above, the function name could be &lt;code&gt;drawWater&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The name of the function can be anything, as long as it follows the same rules as &lt;a href=&quot;https://zellwk.com/blog/javascript-variables&quot;&gt;declaring variables&lt;/a&gt;. In other words, it needs to follow these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be one word&lt;/li&gt;
&lt;li&gt;It must consist only of letters, numbers or underscores (0-9, a-z, A-Z, &lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It cannot begin with a number.&lt;/li&gt;
&lt;li&gt;It cannot be any of these &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;parameters&lt;/code&gt; is optional. It is a comma-separated list of variables you wish to declare for your function. They can be assigned values when you use the function.&lt;/p&gt;
&lt;h2 id=&quot;using-functions&quot;&gt;Using functions&lt;/h2&gt;
&lt;p&gt;Once you declared your function, you can use (&lt;em&gt;or invoke, or call, or execute&lt;/em&gt;) it by writing the name of the function, followed by parenthesis &lt;code&gt;()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example where a &lt;code&gt;sayHello&lt;/code&gt; function is declared and used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Declaring a function
function sayHello () {
  console.log(&#39;Hello world!&#39;)
}

// using a function
sayHello()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-functions/declare.png&quot; alt=&quot;Declaring and using sayHello function&quot;&gt;
  &lt;figcaption&gt;Declaring and using sayHello function&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;the-indentation&quot;&gt;The indentation&lt;/h2&gt;
&lt;p&gt;Code within a block (anything within curly braces &lt;code&gt;{}&lt;/code&gt;) should be indented to the right. This is an important practice that helps you make code easier to read. It allows you to tell at a glance that &lt;code&gt;console.log(&#39;Hello world&#39;)&lt;/code&gt; is part of &lt;code&gt;sayHello&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayHello () {
  // This console.log statement is a part of sayHello
  console.log(&#39;Hello world!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can choose to indent with 2 spaces or with a tab key. Some people prefer spaces, others prefer tab. Both are fine, as long as you keep it consistent.&lt;/p&gt;
&lt;h2 id=&quot;parameters&quot;&gt;Parameters&lt;/h2&gt;
&lt;p&gt;Most functions take in parameters. It is a &lt;strong&gt;comma-separated list of variables&lt;/strong&gt; to you wish to declare for your function.&lt;/p&gt;
&lt;p&gt;You can have any number of parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function functionName(param1, param2, param3) {
  // Do stuff here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To assign values to your parameters, you pass in values (called arguments) by writing them as comma-separated values in the parenthesis&lt;/p&gt;
&lt;p&gt;The first argument would be assigned to the first parameter, the second argument to the second parameter and so on.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;functionName(&#39;arg1&#39;, &#39;arg2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s make it clearer with an example.&lt;/p&gt;
&lt;p&gt;Let’s say you wish to write a function called &lt;code&gt;sayName&lt;/code&gt; that logs the firstName and lastName of a person. The function looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayName(firstName, lastName) {
  console.log(&#39;firstName is &#39; + firstName)
  console.log(&#39;lastName is &#39; + lastName)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zell is my first name, Liew is my last name. To get the function to work correctly, I pass my &lt;code&gt;Zell&lt;/code&gt;, as the first argument, and &lt;code&gt;Liew&lt;/code&gt; as the second argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sayName(&#39;Zell&#39;, &#39;Liew&#39;)
// firstName is Zell
// lastName is Liew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you declared an parameter, but did not pass a argument to it, your parameter would be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sayName()
// firstName is undefined
// lastName is undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-return-statement&quot;&gt;The return statement&lt;/h2&gt;
&lt;p&gt;Functions can have a return statement that consists of the return keyword and a value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function functionName () {
  return &#39;some-value&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When JavaScript sees this return statement, it stops executing the rest of the function and “returns” (passes the value back to the function call).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function get2 () {
  return 2
  console.log(&#39;blah&#39;) // This is not executed
}

const results = get2()
console.log(results) // 2
// Note: You would not see &#39;blah&#39; in the console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the return value is an expression, JavaScript evaluates the expression before returning the value.&lt;/p&gt;
&lt;p&gt;Remember, &lt;strong&gt;Javascript can only pass around primitives&lt;/strong&gt; (like String, Numbers, Booleans) &lt;strong&gt;and objects&lt;/strong&gt; (like functions, arrays and objects) as values. &lt;strong&gt;Anything else needs to be evaluated&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;flow-of-a-function&quot;&gt;Flow of a function&lt;/h2&gt;
&lt;p&gt;Functions can be hard for beginners to understand. To make sure you understand functions completely, let’s go through what happens when you declare and use a function again. This time, we’ll take things one step at a time.&lt;/p&gt;
&lt;p&gt;Here’s the code we’re dissecting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function add2 (num) {
  return num + 2
}

const number = add2(8)
console.log(number) // 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First of all, you need to declare a function before you can use it. In the first line, JavaScript sees the &lt;code&gt;function&lt;/code&gt; keyword and knows the function is called &lt;code&gt;add2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It skips over the code in the function at this point because the function is not used yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-functions/flow-1.png&quot; alt=&quot;JavaScript sees add2 and skips it&quot;&gt;
  &lt;figcaption&gt;JavaScript sees add2 and skips it&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Next, JavaScript sees you’re declaring a variable called &lt;code&gt;number&lt;/code&gt;, and assigning it as the result of &lt;code&gt;add2(8)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since the right hand side (RHS) is a function call (an expression), JavaScript needs to evaluate the value of &lt;code&gt;add2(8)&lt;/code&gt; before it can assign it to the &lt;code&gt;number&lt;/code&gt; variable. Here, it sets the parameter &lt;code&gt;num&lt;/code&gt; to &lt;code&gt;8&lt;/code&gt;, since you passed in 8 as the argument when you call &lt;code&gt;add2(8)&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-functions/flow-2.png&quot; alt=&quot;JavaScript executes the add2 function&quot;&gt;
  &lt;figcaption&gt;JavaScript executes the add2 function&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the &lt;code&gt;add2&lt;/code&gt; function, JavaScript sees a return statement that says &lt;code&gt;num + 2&lt;/code&gt;. This is an expression, so it needs to evaluate it before moving on. Since &lt;code&gt;num&lt;/code&gt; is 8, &lt;code&gt;num + 2&lt;/code&gt; must be 10.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-functions/flow-3.png&quot; alt=&quot;JavaScript evaluates num + 2 as 10&quot;&gt;
  &lt;figcaption&gt;JavaScript evaluates num + 2 as 10&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once &lt;code&gt;num + 2&lt;/code&gt; is evaluated, JavaScript returns the value to the function call. It replaces the function call with the returned value. So, &lt;code&gt;add2(8)&lt;/code&gt; becomes 10.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-functions/flow-4.png&quot; alt=&quot;JavaScript replaces add2(8) with the result, 10&quot;&gt;
  &lt;figcaption&gt;JavaScript replaces add2(8) with the result, 10&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, once the RHS is evaluated, JavaScript creates the variable, &lt;code&gt;number&lt;/code&gt; and assigns the value 10 to it.&lt;/p&gt;
&lt;p&gt;That’s how you read the flow of a function.&lt;/p&gt;
&lt;h2 id=&quot;hoisting&quot;&gt;Hoisting&lt;/h2&gt;
&lt;p&gt;When functions are declared with a function declaration (what you learned above), they are hoisted to the top of your &lt;a href=&quot;https://css-tricks.com/javascript-scope-closures/&quot;&gt;scope&lt;/a&gt;. This means the following two sets of code are exactly the same.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayHello () {
  console.log(&#39;Hello world!&#39;)
}
sayHello()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This is automatically converted to the above code
sayHello()
function sayHello () {
  console.log(&#39;Hello world!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function hoisting gets confusing because JavaScript changes the order of your code. I highly recommend you declare your functions before you use them. &lt;strong&gt;Don’t rely on hoisting.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;declaring-functions-with-function-expressions&quot;&gt;Declaring functions with function expressions&lt;/h2&gt;
&lt;p&gt;A second way to declare functions is with a function expression. Here, you declare a variable, then assign a function without a name (an anonymous function) to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const sayHello = function () {
  console.log(&#39;This is declared with a function expression!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that functions declared with function expressions are not automatically hoisted to the top of your scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sayHello () // Error, sayHello is not defined
const sayHello = function () {
  console.log(&#39;this is a function!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you may wonder if function expressions are important. That’s a common question to have. Why would you use function expressions if you can declare functions with the function declaration syntax?&lt;/p&gt;
&lt;p&gt;They are important. You’ll learn why when you learn to declare object methods and &lt;a href=&quot;https://zellwk.com/blog/es6#/arrow-functions&quot;&gt;arrow functions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A function is a block of code that executes tasks in a specific order, like take empty bucket, go to well, draw water, head back home.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You call functions by adding a &lt;code&gt;()&lt;/code&gt; to the end of the function name. When you do so, you can add additional values as arguments to the function.&lt;/p&gt;
&lt;p&gt;Each function can have a return statement that “returns” a value to the function call.&lt;/p&gt;
&lt;p&gt;As much as possible, don’t rely on hoisting when you write functions. Always declare them upfront before you use them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This article is a sample lesson from Learn JavaScript&lt;/strong&gt; – a course that helps you learn JavaScript to real, practical components from scratch. &lt;strong&gt;You’ll love Learn JavaScript if you found this article helpful. If you loved this article, I invite you to &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;find out more about Learn JavaScript&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Should you use semicolons in JavaScript?</title>
    <link href="https://zellwk.com/blog/semicolons/"/>
    <updated>2017-11-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/semicolons/</id>
    <content type="html">&lt;p&gt;I promised I’d start making videos last week, didn’t I? Well, here’s the first video! Today, I’d like to talk about semicolons.&lt;/p&gt;
&lt;p&gt;There are people out there that say you’re not a real developer if you don’t use semi-colons in JavaScript. Is that really true? Should you listen to them and use semi-colons?&lt;/p&gt;
&lt;p&gt;That’s what I dive into in this video. I also show a very important tool to help you write good, consistent code in the video.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;a-transcript&quot;&gt;A transcript&lt;/h2&gt;
&lt;p&gt;It doesn’t matter whether you use semi-colons or not in your JavaScript. It is not going to make a big difference in the quality of your code.&lt;/p&gt;
&lt;p&gt;If you don’t use semi-colons, your code might look abit nicer without the dangling dots at the end of each line, but that’s about it.&lt;/p&gt;
&lt;p&gt;I understand there that are people who would say that if you don’t use semi-colons, your code is shit. Don’t listen to them and don’t worry about them, because they’re too rigid in their thinking, and they cannot accept new things.&lt;/p&gt;
&lt;p&gt;It’s okay to use or not use semicolons. It boils down your preference or your team’s preference.&lt;/p&gt;
&lt;p&gt;Personally, I don’t use any semi-colons in my code because it feels nicer to write JavaScript without it. I used to use semicolons before, and I tried removing it, and I realize its okay.&lt;/p&gt;
&lt;p&gt;If you want to find out about why you can omit semicolons, read Feross’s &lt;a href=&quot;https://feross.org/never-use-semicolons/&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use a linter to help write consistent code. If you use Sublime Text, I suggest &lt;a href=&quot;https://packagecontrol.io/packages/SublimeLinter&quot;&gt;Sublime linter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you use other text editors, search for “your text editor” plus “linter” and you should be able to find a good one.&lt;/p&gt;
&lt;p&gt;If you want to omit semicolons, I suggest you use standard (https://standardjs.com). If you like semicolons, you can try semistandard (https://github.com/Flet/semistandard).&lt;/p&gt;
&lt;p&gt;If you have any questions about frontend development, or if you want to say hi, feel free to &lt;a href=&quot;https://zellwk.com/apply&quot;&gt;send me an email&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What are variables and why use them in JavaScript</title>
    <link href="https://zellwk.com/blog/javascript-variables/"/>
    <updated>2017-11-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/javascript-variables/</id>
    <content type="html">&lt;p&gt;The main purpose of coding is to solve problems. What happens when you click on a button? That’s also a problem for us to solve.&lt;/p&gt;
&lt;p&gt;So, let’s begin this article by solving a simple problem.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;counting-apples&quot;&gt;Counting apples&lt;/h2&gt;
&lt;p&gt;If you have 4 apples and you buy 27 more, how many apples do you have? Take a second and write your answer in your text editor.&lt;/p&gt;
&lt;p&gt;What’s your answer?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// This?
31

// Or this?
4 + 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both answers are right, but the second method is better, because you’re offloading the calculation to JavaScript. You’re teaching it how to arrive at the answer.&lt;/p&gt;
&lt;p&gt;But there’s still one problem with the code.&lt;/p&gt;
&lt;p&gt;If you look at &lt;code&gt;4 + 27&lt;/code&gt; without any context from our apple problem, do you know we’re calculating the number of apples you’re currently holding?&lt;/p&gt;
&lt;p&gt;Probably not.&lt;/p&gt;
&lt;p&gt;So, a better way is to use Algebra to substitute 4 and 27 with variables. When you do so, you’ll get the ability to write code that has meaning:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;initialApples + applesBought
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process of substituting 4 with a variable called &lt;code&gt;initialApples&lt;/code&gt; is called declaring variables.&lt;/p&gt;
&lt;h2 id=&quot;declaring-variables&quot;&gt;Declaring Variables&lt;/h2&gt;
&lt;p&gt;You declare variables with the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const variableName = &#39;value&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are four parts you’ll want to take note of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;variableName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;=&lt;/code&gt; sign&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;const&lt;/code&gt; keyword&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-variablename&quot;&gt;The variableName&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;variableName&lt;/code&gt; is the name of the variable you’re declaring. You can name it anything, as long as it follows these rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must be one word&lt;/li&gt;
&lt;li&gt;It must consist only of letters, numbers or underscores (0-9, a-z, A-Z, &lt;code&gt;_&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;It cannot begin with a number.&lt;/li&gt;
&lt;li&gt;It cannot be any of these &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords&quot;&gt;reserved keywords&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you need to use two or more words to name your variable, you should join the words together, but capitalize the first letter of each subsequent word. This weird capitalization is called &lt;em&gt;camel case&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A good example of a camel cased variable is &lt;code&gt;applesToBuy&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-value&quot;&gt;The value&lt;/h3&gt;
&lt;p&gt;The value is what you want the variable to be. It can be primitives (like strings and numbers etc) or objects (like arrays and functions).&lt;/p&gt;
&lt;h3 id=&quot;%3D-in-javascript&quot;&gt;= in JavaScript&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt; in JavaScript doesn’t work like &lt;code&gt;=&lt;/code&gt; in Math. Don’t get confused.&lt;/p&gt;
&lt;p&gt;In JavaScript, &lt;code&gt;=&lt;/code&gt; means &lt;strong&gt;assignment&lt;/strong&gt;. When you use &lt;code&gt;=&lt;/code&gt;, you set (or assign) the value on the right hand side (RHS) of the &lt;code&gt;=&lt;/code&gt; sign to the left hand side (LHS) of the &lt;code&gt;=&lt;/code&gt; sign.&lt;/p&gt;
&lt;p&gt;In the following statement, you set the variable &lt;code&gt;initialApples&lt;/code&gt; to the number 4.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const initialApples = 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you &lt;code&gt;console.log&lt;/code&gt; this variable, you can see that &lt;code&gt;initialApples&lt;/code&gt; is 4.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(initialApples) // 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;evaluation-before-assignment&quot;&gt;Evaluation before assignment&lt;/h3&gt;
&lt;p&gt;Every variable can only take up one value. So, if you have an equation that needs to be evaluated on the RHS, it will be evaluated before it is assigned to the variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const initialApples = 4
const applesToBuy = 27

const totalApples = initialApples + applesToBuy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, JavaScript will evaluate the answer of &lt;code&gt;initialApples&lt;/code&gt; + &lt;code&gt;applesToBuy&lt;/code&gt; (which results to 31) before assigning the results to &lt;code&gt;totalApples&lt;/code&gt;. This is why you get &lt;code&gt;31&lt;/code&gt; if tried to log &lt;code&gt;totalApples&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(totalApples) // 31
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;the-const-keyword&quot;&gt;The const keyword&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is one of three keywords you can use to declare variables. There are two other keywords – &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All three keywords declare variables, but they’re slightly different from each other.&lt;/p&gt;
&lt;h2 id=&quot;const-vs-let-vs-var&quot;&gt;Const vs let vs var&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; are keywords made available to us in ES6. They are better keywords to create variables than &lt;code&gt;var&lt;/code&gt; because &lt;a href=&quot;https://zellwk.com/blog/es6/#let-and-const&quot;&gt;they’re block scoped while var is function scoped&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For now, let’s concentrate on the difference between &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;const-vs-let&quot;&gt;Const vs let&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you declare a variable with&lt;/strong&gt; &lt;code&gt;const&lt;/code&gt;, &lt;strong&gt;you cannot reassign&lt;/strong&gt; it with a new value. The following code produces an error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const applesToBuy = 22

// Reassigning to a variable declared with const results in an error
applesToBuy = 27
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-variables/const.png&quot; alt=&quot;Reassigning a variable declared with const results in an error&quot;&gt;
  &lt;figcaption&gt;Reassigning a variable declared with const results in an error&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;If you declare a variable with&lt;/strong&gt; &lt;code&gt;let&lt;/code&gt;, &lt;strong&gt;you can reassign it with a new value.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let applesToBuy = 22
applesToBuy = 27
console.log(applesToBuy)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/js-variables/let.png&quot; alt=&quot;It&#39;s okay to reassign variables declared with let&quot;&gt;
  &lt;figcaption&gt;It&#39;s okay to reassign variables declared with let&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;should-you-use-const-or-let%3F&quot;&gt;Should you use const or let?&lt;/h2&gt;
&lt;p&gt;Understanding whether you should use &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; is more of an advanced topic.&lt;/p&gt;
&lt;p&gt;When you’re starting out, using &lt;code&gt;let&lt;/code&gt; would be much simpler than using &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, as you write more programs, you’ll slowly realize that you want to refrain from reassigning your variables, and you’ll begin to use &lt;code&gt;const&lt;/code&gt; over &lt;code&gt;let&lt;/code&gt;.  Why you’ll want to do so is a different topic for another day.&lt;/p&gt;
&lt;p&gt;Since you’re going to use &lt;code&gt;const&lt;/code&gt; over &lt;code&gt;let&lt;/code&gt; anyway when you write more advanced programs, it’s better to get into the habit of preferring &lt;code&gt;const&lt;/code&gt; over &lt;code&gt;let&lt;/code&gt; when you’re starting out.&lt;/p&gt;
&lt;p&gt;In case you’re wondering, don’t use &lt;code&gt;var&lt;/code&gt; anymore, because there’s no need for it. &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are much better than &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In JavaScript, variables are used to hold a value. It can hold any value, from primitives to objects.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;=&lt;/code&gt; sign in JavaScript isn’t the same as the &lt;code&gt;=&lt;/code&gt; sign in Math. In JavaScript, &lt;code&gt;=&lt;/code&gt; means assignment.&lt;/p&gt;
&lt;p&gt;When you declare variables, use camelCase to name your variables. Avoid the reserved keywords.&lt;/p&gt;
&lt;p&gt;You can declare variables with either &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;var&lt;/code&gt;. As much as possible, you’ll want to use &lt;code&gt;const&lt;/code&gt; over &lt;code&gt;let&lt;/code&gt;. Use &lt;code&gt;let&lt;/code&gt; when you need to reassign values. There’s no longer a need to use &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This article is a sample lesson from Learn JavaScript&lt;/strong&gt; – a course that helps you learn JavaScript and build real, practical components from scratch. If you found this article helpful, I invite you to &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;find out more about Learn JavaScript&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Announcing Learn JavaScript!</title>
    <link href="https://zellwk.com/blog/announcing-learn-js/"/>
    <updated>2017-10-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/announcing-learn-js/</id>
    <content type="html">&lt;p&gt;Are you struggling with JavaScript?&lt;/p&gt;
&lt;p&gt;When you face that blank JavaScript file, does your mind goes blank?&lt;/p&gt;
&lt;p&gt;Do you wish to stop copy/pasting code or modifying what you find online, and write code from scratch instead?&lt;/p&gt;
&lt;p&gt;Do you feel that your code is messy and you want to improve?&lt;/p&gt;
&lt;p&gt;If you’re facing any of these challenges with JavaScript, I’ve got good news for you. I’m writing a course called Learn JavaScript, which will guide you, step by step, to build real components from scratch.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;In Learn JavaScript, you’ll learn everything it takes – from the absolute basics to the advanced stuff – to become great at JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you complete the course, you’ll know JavaScript by heart. You’ll feel confident in your knowledge, and you’ll be able to show off your ability (like ace that job interview when they ask you JavaScript related questions).&lt;/p&gt;
&lt;p&gt;When you get a request to build something, you won’t hesitate and wonder if you can build it. You’ll know you can build it, and you’ll have the confidence to say “Sure, let’s talk about why you want this and how much you’re willing to pay for it”.&lt;/p&gt;
&lt;p&gt;If this sounds like something you’ll be interested in, I invite you to &lt;a href=&quot;https://learnjavascript.today/&quot;&gt;click here and find out more about Learn JavaScript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;:)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to overcome your fear of JavaScript</title>
    <link href="https://zellwk.com/blog/overcome-fear-of-js/"/>
    <updated>2017-10-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/overcome-fear-of-js/</id>
    <content type="html">&lt;p&gt;JavaScript can be scary. It can be scarier for you if you’ve never been to programming school before, and it is even scarier if you tried to learn it through different books and courses, but you found that you’ve failed along the way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“I don’t get it. I’m smart, but why can’t I learn JavaScript?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Can you really learn JavaScript without going to school?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So these questions pop into your head. It gets even scarier. When you look at JavaScript you don’t even dare to begin learning it. You look at your computer and you put it down, thinking you’ll do it another day.&lt;/p&gt;
&lt;p&gt;Don’t worry if that applies to you.&lt;/p&gt;
&lt;p&gt;You’re not the only person who has the same problem. I did before too. When I tried to learn JavaScript, I failed. There was a period of time where I was really afraid of JavaScript.&lt;/p&gt;
&lt;p&gt;But that doesn’t mean you’ll never succeed at learning JavaScript. You can know JavaScript and you can write JavaScript even though you don’t have a programming background.&lt;/p&gt;
&lt;p&gt;So the first step to learning JavaScript is to overcome that dreadful feeling you feel when learning JavaScript. That’s what you’ll learn in today’s article.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;(By the way, this article is a lesson from &lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt; – a course that helps you learn JavaScript quickly without feeling afraid, confused and overwhelmed.&lt;/strong&gt; I can sell you JavaScript Roadmap, I should be selling it, but I want to give it to you for free to help you learn JavaScript).&lt;/p&gt;
&lt;p&gt;First, let’s understand why you’re afraid of JavaScript.&lt;/p&gt;
&lt;h2 id=&quot;it%E2%80%99s-natural-to-be-afraid-of-javascript&quot;&gt;It’s natural to be afraid of JavaScript&lt;/h2&gt;
&lt;p&gt;You may not notice it, but your self-worth is on the line whenever you learn something new. It’s not an exception when you’re trying to learn JavaScript.&lt;/p&gt;
&lt;p&gt;When you fail at an attempt, a voice comes into your head and laughs at you: “&lt;em&gt;You’re stupid. You’re not good enough. You’re never going to make it. You’re never going to succeed&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Every time you fail, the voice gets stronger. For you, it might have gotten so strong that it’s drowning out your desire to learn JavaScript. You want to give up. (Or maybe you already did).&lt;/p&gt;
&lt;p&gt;You don’t want to look stupid. You don’t want to believe that you’re stupid. You rather say “JavaScript is not for me” than admitting you’ve failed at it.&lt;/p&gt;
&lt;p&gt;It’s normal. We’re biologically tuned to avoid pain. It keeps us safe. I told myself that coding wasn’t for me for &lt;em&gt;six years (which is freaking long)&lt;/em&gt; before I finally decided I’m going to learn to code.&lt;/p&gt;
&lt;p&gt;So the good news is, it’s normal to feel afraid. You’re not the only one. Don’t be alarmed. You’re one of the many people who has embarked on the same journey. You can learn JavaScript.&lt;/p&gt;
&lt;p&gt;The bad news is, the fear you experience often causes you to try and learn too quickly. While doing so, you also feel confused and overwhelmed.&lt;/p&gt;
&lt;h2 id=&quot;fear-is-just-one-part-of-the-resistance&quot;&gt;Fear is just one part of the resistance&lt;/h2&gt;
&lt;p&gt;Humans resist change. It’s our nature. We’d rather be couch potatoes than have errors thrown in our faces by some damn programming language (JavaScript, I’m looking at you!) any day.&lt;/p&gt;
&lt;p&gt;The fear you feel daily is part of this resistance. No matter how much you want to learn JavaScript, there’s always going to be a little bastard that tries to thwart your plans from within.&lt;/p&gt;
&lt;p&gt;It insults you by claiming you’re stupid, and you’ll never manage to learn JavaScript.&lt;/p&gt;
&lt;p&gt;It confuses and overwhelms you by throwing all sorts of random information you don’t need while you’re trying your best to learn.&lt;/p&gt;
&lt;p&gt;It shuts you down by telling you that you should chill and watch Game of Thrones this evening, not hammer away at your computer over a piece of junk.&lt;/p&gt;
&lt;p&gt;Well, that’s the enemy within. It’s so good at coming up with nonsense to make you stop learning, you’ll be surprised by its creativity! Sometimes, you don’t even know why, but you just don’t feel like learning! It’s incredible!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you give in to the temptation, the fear, the overwhelm, the confusion, or whatever it throws your way, you’re training yourself to give up.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eventually, you feel you’re getting nowhere. You beat yourself up. And you’ll give up.&lt;/p&gt;
&lt;p&gt;But it’s okay if you’ve given up before!&lt;/p&gt;
&lt;p&gt;IT’S OKAY!&lt;/p&gt;
&lt;p&gt;I’ve given up before too. Many times, in fact. So many that I’ve lost count.&lt;/p&gt;
&lt;p&gt;But what’s past is past. You can make a choice right now. You can choose to start anew. Things will be different this time.&lt;/p&gt;
&lt;p&gt;You know the enemy, you know who to fight. (There’s no avoiding fear, confusion and overwhelm).&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;fighting-fear%2C-overwhelm-and-confusion&quot;&gt;Fighting fear, overwhelm and confusion&lt;/h2&gt;
&lt;p&gt;To stop fear, overwhelm and confusion from taking over you, you first need to know why they surface.&lt;/p&gt;
&lt;p&gt;Here are common reasons why people feel afraid, overwhelmed or confused when learning JavaScript. You may have experienced some of these yourself:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You’re paralyzed. You don’t know where is the best place to start and how the entire JavaScript ecosystem fits together.&lt;/li&gt;
&lt;li&gt;You want to find a good dev job, but the requirements are insane. There’s no way you can learn them all to be a junior developer.&lt;/li&gt;
&lt;li&gt;You already learned the syntax, but you have no idea how to think through problems because nobody taught you how to.&lt;/li&gt;
&lt;li&gt;You feel stupid and incapable because you cannot seem to remember anything you learn about JavaScript.&lt;/li&gt;
&lt;li&gt;You want to make sure you’re learning the best practices so you get it right the first time. You don’t want to waste time writing bad code.&lt;/li&gt;
&lt;li&gt;You don’t want to waste time learning and relearning frameworks. You want to pick the best possible one and stick with it.&lt;/li&gt;
&lt;li&gt;You don’t have enough time/energy to learn JavaScript after work, studies, family and other priorities. You feel completely drained.&lt;/li&gt;
&lt;li&gt;You struggle to understand JavaScript because you can’t find good materials to help you understand WTF is actually going on.&lt;/li&gt;
&lt;li&gt;Supporting multiple browsers and environment scares you… there’s so many factors to watch out for 😱&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any of them sound familiar?&lt;/p&gt;
&lt;p&gt;If you resonate with at least any scenario above, you fell into at least one of the three common traps (maybe all three) to learning:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The victim trap&lt;/li&gt;
&lt;li&gt;The learn fast trap&lt;/li&gt;
&lt;li&gt;The paralysis trap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go through each trap to understand what they are and how to break out of them.&lt;/p&gt;
&lt;h2 id=&quot;the-victim-trap&quot;&gt;The victim trap&lt;/h2&gt;
&lt;p&gt;You’re in the victim trap if you feel that you’re powerless about your circumstances. Something out there is preventing you from learning JavaScript.&lt;/p&gt;
&lt;p&gt;You may resonate with these statements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can’t find any good materials&lt;/li&gt;
&lt;li&gt;You don’t know where to start.&lt;/li&gt;
&lt;li&gt;You feel that it’s impossible to get hired because the requirements are insane.&lt;/li&gt;
&lt;li&gt;You can’t build things because nobody taught you how to think through problems.&lt;/li&gt;
&lt;li&gt;You don’t have the time/energy to learn after [insert work, family, hobbies].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You’ll find yourself complaining and sulking a lot. You’ll say things like:&lt;/p&gt;
&lt;p&gt;It’s their fault (whoever it may be) for making JavaScript so complicated. There are so many tools out there, so many practices to learn and so many browsers to support.&lt;/p&gt;
&lt;p&gt;It’s their fault for not writing good documentation, for not writing courses and tutorials in a way you understand, for not assuming you know things when you don’t.&lt;/p&gt;
&lt;p&gt;It’s their fault for requesting insane JavaScript requirements in every job ad you saw.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oh and if you complain about not having enough time to learn JavaScript (because insert work, family, play, hobbies), maybe you want to consider your priorities again&lt;/strong&gt;. Do you REALLY want to learn JavaScript? If it’s not high on the priority list, then its best to stop kidding yourself and work on the things that matter instead.&lt;/p&gt;
&lt;h3 id=&quot;overcoming-the-victim-mindset&quot;&gt;Overcoming the victim mindset&lt;/h3&gt;
&lt;p&gt;The key to overcoming the victim mindset is to recognize &lt;strong&gt;you control your life. You trade priorities, you make decisions, you find a way to learn if you really want to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop sitting back and blaming the world. Everything that’s worth doing is going to be difficult. Easy things can be done by anyone. Hard things can only be done by people who put in the effort.&lt;/p&gt;
&lt;p&gt;Are you going to be the sucker who complains he/she can’t learn JavaScript forever? Or are you going to get to work?&lt;/p&gt;
&lt;p&gt;If you’re going to get to work, stop playing the role of a victim.&lt;/p&gt;
&lt;p&gt;Carve out time for JavaScript. Stop making excuses for yourself, no matter how valid they are.&lt;/p&gt;
&lt;p&gt;Don’t worry about getting overwhelmed and confused. Expect it. You learn by getting confused since you’re rewriting your brain. Let that sink in and continue working things out.&lt;/p&gt;
&lt;p&gt;Don’t worry about not getting a job. You won’t get a job by learning bits and pieces of many languages. You’d have a much better chance if you learn something deeply, because you’d demonstrate expertise and perseverance, which is rare in the today’s world.&lt;/p&gt;
&lt;p&gt;Don’t worry knowing where to start. I’ll show you where how in &lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-learn-fast-trap&quot;&gt;The learn fast trap&lt;/h2&gt;
&lt;p&gt;You’re in the learn fast trap if you feel the urge to learn quickly. You may resonate with these statements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need to learn JavaScript to find a job in 3 months&lt;/li&gt;
&lt;li&gt;You read through tutorials but you can’t find answers to your questions.&lt;/li&gt;
&lt;li&gt;You can’t understand any of the tutorials you’ve read. They’re too hard or too advanced.&lt;/li&gt;
&lt;li&gt;You cannot seem to remember anything you learn about JavaScript.&lt;/li&gt;
&lt;li&gt;You compare yourself to other people (or to yourself). Then, feel proud or shitty about your speed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key here is to realize you may have (consciously or unconsciously) imposed an unreasonable deadline for yourself.&lt;/p&gt;
&lt;p&gt;When you have an unreasonable deadline, you most likely hypothesize a solution/method with what you already know. Your search for the answer then becomes googling to confirm your bias instead of taking in information and letting your mind organize them (which is how humans learn).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You may also have skipped steps, which is why you can’t understand the materials you’ve read, or can’t remember what you’ve learned.&lt;/strong&gt; This happens to many people who try to learn frameworks like React without having a solid understanding of how JavaScript works.&lt;/p&gt;
&lt;h3 id=&quot;overcoming-the-learn-fast-trap&quot;&gt;Overcoming the learn fast trap&lt;/h3&gt;
&lt;p&gt;The key to overcoming the learn fast trap is to prepare yourself to &lt;a href=&quot;https://zellwk.com/blog/learn-fast/&quot;&gt;learn well, not fast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take it slow. Pay attention.&lt;/strong&gt; Try to formulate arguments from what you read. While you do so, drop any preconceived ideas you have about the subject. Best practices in one field may not be the same in another.&lt;/p&gt;
&lt;p&gt;Dig into documentations, internalize fundamentals, figure out new best practices.&lt;/p&gt;
&lt;p&gt;Experiment. Code. Fail with your experiments. Start another. Do do it over and over, tweaking till you succeed.&lt;/p&gt;
&lt;p&gt;When you work hard this way, &lt;a href=&quot;https://zellwk.com/blog/remember/&quot;&gt;the knowledge and skills you gain stays with you forever&lt;/a&gt;. You’ll never forget them, even if you put them down for a year. JavaScript, like riding a bicycle, can be a skill you keep for life.&lt;/p&gt;
&lt;p&gt;Plus, the more you know, the faster you can understand new concepts. That’s how our brains work. Give yourself the time to let the initial concepts sink in. They may confuse you now, but they won’t confuse you for long.&lt;/p&gt;
&lt;h2 id=&quot;the-paralysis-trap&quot;&gt;The paralysis trap&lt;/h2&gt;
&lt;p&gt;You’re in the paralysis trap if you feel you need to make the right decision before starting to learn. You may resonate with the following statements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There’s too much information out there.&lt;/li&gt;
&lt;li&gt;You can’t decide what frameworks to use.&lt;/li&gt;
&lt;li&gt;You don’t dare to start learning because you don’t know what’s the best way to learn.&lt;/li&gt;
&lt;li&gt;You want to learn it the “right” way so you don’t have to relearn it later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you don’t have enough information, you dig for more information. You feel you’re missing the vital key before you can decide. Sometimes, you have too much information you don’t know how to process them.&lt;/p&gt;
&lt;h3 id=&quot;overcoming-the-paralysis-trap&quot;&gt;Overcoming the paralysis trap&lt;/h3&gt;
&lt;p&gt;They key to overcoming the paralysis trap is to understand that &lt;strong&gt;you can never be 100% sure that your decision is right. You need to learn to make decisions even though you don’t know if you’re right&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;You don’t have all the time in the world to gather information. You can only work within your constraints to gather as much as you require.&lt;/p&gt;
&lt;p&gt;Besides, you can never have complete information. Everyone has their opinions, so your information is skewed anyway.&lt;/p&gt;
&lt;p&gt;But you still got to make that decision.&lt;/p&gt;
&lt;p&gt;Don’t worry if you’re wrong. It makes a valuable lesson. You know what not to do from now on. Thomas Edison didn’t fail to invent the lightbulb for 9,999 times. He found 9,999 ways that wouldn’t work. That’s why he made it the 10,000 time.&lt;/p&gt;
&lt;p&gt;Better to move and get it wrong than to stay still. If you move, you learn. If you stay still, you’re stuck for who knows how long.&lt;/p&gt;
&lt;p&gt;Have you considered what costs you’re incurring by staying still? These costs are collectively called the cost of inaction. It can cost you a ton.&lt;/p&gt;
&lt;p&gt;So take action. Take the wrong action if that’s the only thing you know now. You’ll learn to course correct as you go. Once you get it right, you’re set.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this lesson, you learned how to fight fear, confusion and overwhelm as they surface through your learning journey.&lt;/p&gt;
&lt;p&gt;Take note of the learning traps – the victim trap, the learn fast trap and the paralysis trap. Don’t fall into them. But if you do fall in, you have the tools to get out now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I encourage you to strengthen your awareness against the traps. You’ll be in a better position if you don’t fall into them as easily as before&lt;/strong&gt;. (They’ll come. And they’ll hit you hard).&lt;/p&gt;
&lt;p&gt;To do so, leave a comment below and answer the following questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What traps did you fall into?&lt;/li&gt;
&lt;li&gt;What made you fall into these traps?&lt;/li&gt;
&lt;li&gt;What are possible action steps you could use to get yourself out of the trap(s)?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have any questions about mindset or how you should position yourself best to learn JavaScript, don’t hesitate to send your questions over. I’m here to help.&lt;/p&gt;
&lt;p&gt;If you found this article useful, consider joining [JavaScript Roadmap](JavaScript Roadmap). I’m giving it to you for free to help you learn JavaScript quickly without feeling afraid, confused and overwhelmed.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to get hired as a junior web developer</title>
    <link href="https://zellwk.com/blog/get-hired/"/>
    <updated>2017-10-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/get-hired/</id>
    <content type="html">&lt;p&gt;It seems impossible to get a job as a web developer. Each job ad you see says need to know React, Vue, Angular, Node, Gulp, Webpack, Sass and plethora of skills you may have heard about, but don’t understand at all!&lt;/p&gt;
&lt;p&gt;Is it possible to get hired without knowing all of them? Can you learn on the job? Will you get rejected for not having enough experience? And how much experience do you really need? 2 years? 5 years? Or more?&lt;/p&gt;
&lt;p&gt;Can you even get a job without spending three years coding things yourself? Can you win boot camp graduates without going to school yourself? Why is it so hard to get a job as a web developer?&lt;/p&gt;
&lt;p&gt;In this article, you’ll find my thoughts about getting a job as a web developer. You’ll also hear how I found my first job as a developer.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;first%2C-it%E2%80%99s-not-about-getting-a-job.&quot;&gt;First, it’s not about getting a job.&lt;/h2&gt;
&lt;p&gt;This may sound contradictory, but it’s not about getting any job. &lt;strong&gt;Before you look for your job, you want to know what you want to work as, and where you want to work in.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Do you want to be a developer in a creative agency, where you make beautiful websites that are designed by the most creative people you’ve ever seen?&lt;/p&gt;
&lt;p&gt;Do you want to be a developer in a startup, where you build cool shit (like apps) and hopefully create something that makes the world a better place?&lt;/p&gt;
&lt;p&gt;Do you want to freelance as a developer and help people make websites while you travel from place to place as you do so?&lt;/p&gt;
&lt;p&gt;Do you want to work as a developer in a large company, so you have the stability and salary a large company can offer, but still do something meaningful with your work?&lt;/p&gt;
&lt;p&gt;What kind of developer do you want to be? You must first know where you want to go before you can get there. If you want to get just any job, you’ll end up trying to learn everything and getting nowhere.&lt;/p&gt;
&lt;p&gt;So, first, begin with the end in mind. &lt;strong&gt;Ask yourself – what do you want as your first job?&lt;/strong&gt; When you do so, bear in mind that you can change your job afterward. You can get a job in a creative agency first, then freelance or create a startup later if you want to. Your answer is important, because it’ll inform your path as a developer going forward.&lt;/p&gt;
&lt;h2 id=&quot;learn-the-necessary-skills&quot;&gt;Learn the necessary skills&lt;/h2&gt;
&lt;p&gt;Once you’ve decided where you want to go, you need to learn the necessary skills to get there.&lt;/p&gt;
&lt;p&gt;If you want to be a developer in an agency, you need to have a keen eye for design. You need to be able to perfectly convert PSD, AI or Sketch files into websites. You may also need some JavaScript skills to provide animations and interactions that fall in line with the design.&lt;/p&gt;
&lt;p&gt;If you want to be a developer in a startup, you need to have a somewhat of a business sense. You need to know what features are important and what aren’t. You also need to be able to make applications for your startup (which means good-enough JavaScript skills), and you need to be able to communicate your thoughts and ideas with your colleagues.&lt;/p&gt;
&lt;p&gt;If you want to freelance as a web developer, you need to know both frontend and backend (Wordpress, at least), so you can take on jobs for agencies, startups and your own clients. Freelancing right from the bat can be a difficult thing to do because you need to learn the business side of things along with the technical side of things at the same time.&lt;/p&gt;
&lt;p&gt;If you want to become a developer in a large company, I don’t have any advice for you. I don’t know what a developer in a large company does because I’ve never been in that situation myself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before you apply for the position you want to be in, you need to demonstrate that you have the necessary skills and attitude to work independently without supervision.&lt;/strong&gt; That means you need to create a portfolio.&lt;/p&gt;
&lt;p&gt;No, I’m not talking about a portfolio where you put on your website. I’m talking about a portfolio of work you’re proud of. It doesn’t matter where you keep this, but you need to be able to bring it up and talk about the things you made. Your portfolio should contain at least one (preferably more) work that you can show your potential employer.&lt;/p&gt;
&lt;p&gt;Once you have this, begin applying for a job.&lt;/p&gt;
&lt;h2 id=&quot;but-what-about-the-high-requirements-in-job-ads%3F&quot;&gt;But what about the high requirements in job ads?&lt;/h2&gt;
&lt;p&gt;I’m afraid I can’t help you with the requirements stated in job ads. I’ve never been a fan of finding a job through advertisements. I’ve never been successful at it. Besides, finding jobs through advertisements stresses me up so much that I feel like I’m a worthless piece of shit for not knowing enough.&lt;/p&gt;
&lt;p&gt;Even today, if I look at the job ad you’re looking at, I can safely say for sure I don’t meet the requirements – I don’t know enough to be dangerous with React, Angular and Vue at the same time.&lt;/p&gt;
&lt;p&gt;But that didn’t stop me from finding my way into web development, and that doesn’t have to stop you too. You can do so much more after applying for jobs through advertisements.&lt;/p&gt;
&lt;p&gt;Here’s what I’d recommend: hustle your way into a job.&lt;/p&gt;
&lt;h2 id=&quot;hustle-your-way-into-the-job.&quot;&gt;Hustle your way into the job.&lt;/h2&gt;
&lt;p&gt;While I first learned web development, I worked at as an intern in a small startup. I was mostly doing administrative work at that time. In about a month, I built my first Wordpress site. I designed and built in myself. It was hard for me to contain my excitement. I was so proud of it!&lt;/p&gt;
&lt;p&gt;I can’t stop myself. I wanted to tell everyone about the Wordpress site I made (spoiler alert, it’s my blog, the very first version). I showed my manager my blog and talked excitedly about how I’m learning this web development thing and how I’m able to build this in about a month.&lt;/p&gt;
&lt;p&gt;To my surprise, she started asking me questions about the company’s Wordpress site like, whether its possible to change the colors in a Wordpress WYSIWYG editor. I answered yes, showed her how to do it (inline styles FTW! This shows you how bad I was then!).&lt;/p&gt;
&lt;p&gt;I answered all her questions, and I asked if they wanted more functionality for the Wordpress site, like a Datepicker that properly links visitors to their hotel booking API. She was excited and elated about this idea, and I spent the next month or two pushing away my admin tasks, learned some jQuery and got the job done 😎.&lt;/p&gt;
&lt;p&gt;You see, you don’t need super awesome skills to get into the web development field. You can begin almost anywhere! Possibly even in your job now!&lt;/p&gt;
&lt;p&gt;Aside from hustling within your company, you can also go to meetups. It’s the best place to look for jobs, as far as I know.&lt;/p&gt;
&lt;h2 id=&quot;go-to-meetups&quot;&gt;Go to meetups&lt;/h2&gt;
&lt;p&gt;Many companies hire people from meetups. I got my first part-time job as a frontend developer while I was still in school this way. I simply walked into every meetup I could think of, introduced myself and talked to people. That’s it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But Zell, what if I’m shy and I don’t know what to say?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You already have things you want to say, don’t you? You’re excited about web dev. You want to share your excitement with everyone. You want to talk about what you’ve done. You want to learn so much more. You want to get a job. You want to get hired as a developer. You want to…&lt;/p&gt;
&lt;p&gt;Express yourself. Say whatever is in your mind. You’ve kept it bottled up inside of you because you’re afraid that nobody wants to hear about your boring life story. You’re afraid that people would frown on you. You’re afraid that people will ignore you.&lt;/p&gt;
&lt;p&gt;But your life story is the thing that companies want to hear! They want to hear from you to make sure they hire the right person! So feel free to share!&lt;/p&gt;
&lt;p&gt;Yes, you will be ignored. Yes, you will get rejections. So what? If you stay at a corner without talking to anyone, you’re rejecting everyone before they reject you. But what’s the point of going then?&lt;/p&gt;
&lt;p&gt;You need to step out of your comfort zone, be honest with yourself and the people around you. Say what you want to say, share what you’re excited about. Speak your mind. Miracles will happen sooner or later. I guarantee it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who should you talk to?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Practically everyone! It doesn’t matter who you talk to. If people resonate with you, they’ll ask questions and let you talk more. If they’re not interested, they’ll find a way to escape, and that’ll prompt you to talk to someone else.&lt;/p&gt;
&lt;p&gt;All it takes to start the conversation is this: “Hi! I’m Zell!”.&lt;/p&gt;
&lt;p&gt;From there, it doesn’t take much for people to ask you who you are, what you do, or what you’re doing here. You can then start sharing about yourself and asking them about themselves. Remember to listen when they talk! It’s only polite to return the favor if you want others to listen to you!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What if you don’t get any success?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t expect any success. You won’t land a job with everyone you meet. Don’t even expect to land a job with ANYONE you meet. You’re just there to share who you are, meet people and hopefully make some friends. Don’t expect anything, but welcome it if anything happens!&lt;/p&gt;
&lt;p&gt;(And things will start to open up for you. Try it!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow up&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you found anyone you want to continue a conversation with, make sure you follow up. Send them an email after the event. Say Hi. Try to help them out if possible (like look at their website and tell them about stuff). Some people don’t take this well, but others will appreciate you for trying to help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You don’t have to be extroverted to do this&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hate crowds. I still do. If you find me at a meetup today, you’ll think I’m an antisocial who only cares about free food. If I can do it, you can too.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Is it hard to get a job as a web developer?&lt;/p&gt;
&lt;p&gt;Yes, it is hard to get a job if you’re trying to get hired through job advertisements. You’re comparing yourself with thousands of other people, which is why it’s hard!&lt;/p&gt;
&lt;p&gt;Besides applying for jobs through advertisements, try talking to people and sharing what you’ve built. You might find your way into web dev without knowing how you did it. I still don’t know what happened, but I’m happy and grateful for the things that have happened along the way as I shared my journey with others.&lt;/p&gt;
&lt;p&gt;I hope you’ll get into web development and I hope you have fun while doing so! :)&lt;/p&gt;
&lt;p&gt;By the way, do you want to learn JavaScript but don’t know how to start? If you are, try going through this &lt;a href=&quot;https://jsroadmap.com/&quot;&gt;JavaScript Roadmap&lt;/a&gt; that I’ve built for you. In it, you’ll learn how to overcome your barriers to learning JavaScript, and you’ll get a roadmap to follow to learn JavaScript properly. Have fun!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Typi—case study</title>
    <link href="https://zellwk.com/blog/typi-case-study/"/>
    <updated>2017-10-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/typi-case-study/</id>
    <content type="html">&lt;p&gt;Web typography is complicated. We, as designers and developers, need to design/build for a fluid canvas that change depending on what a user uses to interact with our sites. For many years, we have looked into web typography’s predecessor – print typography – to find hints on what good web typography should be.&lt;/p&gt;
&lt;p&gt;Unfortunately, many typography enthusiasts tried to impose print typography principles that were impractical for the web era – they required too much code, code that’s unmaintainable for a reasonably-sized website. Some don’t think enough, believing it’s alright to imprint whatever traditions we have in print typography directly into web typography. Some even go to a point to claim that web typography is broken.&lt;/p&gt;
&lt;p&gt;As a beginner to typography then, I found tonnes of information about print theories and how people claim it should be applied to the web, but I wasn’t able to find anyone who applies these theories in a way that’s easy to code, and easy to change – which my definition of maintainable.&lt;/p&gt;
&lt;p&gt;So, I set out to research typography. Typi is the result from a few months of research on both typography principles and the integration of relevant principles into code.&lt;/p&gt;
&lt;p&gt;In this case study, you’ll hear about why Typi is designed the way it is and how I created it.&lt;/p&gt;
&lt;h2 id=&quot;designing-the-typi-api&quot;&gt;Designing the Typi API&lt;/h2&gt;
&lt;p&gt;The design process began by understanding print typography principles, figuring out which ones are important for web typography and why they matter. This meant I had to find an answer for the big question – what is good typography?&lt;/p&gt;
&lt;p&gt;Good typography is typography that lets one read without distractions. Good typography, at the basic level, is invisible to the user as they read through the text on a page. Great typography is able to depict the emotions and captivate the reader while they read.&lt;/p&gt;
&lt;p&gt;To create great typography, you need to know how typefaces evoke different emotions. It was something way out of my reach when I began the research; so, I focused my energies on creating good typography instead. This research led me to discover that typesetting – the process to setting font-size, leading and measure – is the most important part of typography.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typi focuses directly on typesetting.&lt;/strong&gt; I believe the key to maintainable typography is to allow designers and developers to change the font-size and line-height (what we use to determine leading on the web) of any text element easily. The measure (width of text) can be constrained with layouts, so that’s not too much of a problem.&lt;/p&gt;
&lt;h2 id=&quot;the-typi-api&quot;&gt;The Typi API&lt;/h2&gt;
&lt;p&gt;Typi relies on Sass – a CSS preprocessor language that’s incredibly prolific at the time I wrote the library. It uses Sass maps, which contains key-value pairs. Each key gives meaning to the value it holds, and it allows users to easily understand what’s going on.&lt;/p&gt;
&lt;p&gt;At the bare minimum, Typi looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  base: (
    null: (16px, 1.4),
  )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key, &lt;code&gt;base&lt;/code&gt;, indicates that you’re creating a sass map for the base font-size and line-height values you’d use for your body text.&lt;/p&gt;
&lt;p&gt;The key, &lt;code&gt;null&lt;/code&gt;, tells Typi to create the font-size and line-height values without media queries (which is often needed for responsive websites).&lt;/p&gt;
&lt;p&gt;The first number, &lt;code&gt;16px&lt;/code&gt;, is the font-size to create at the &lt;code&gt;null&lt;/code&gt; breakpoint.&lt;/p&gt;
&lt;p&gt;The second number, &lt;code&gt;1.4&lt;/code&gt;, is the line-height value to use at the &lt;code&gt;null&lt;/code&gt; breakpoint.&lt;/p&gt;
&lt;h2 id=&quot;accessible-typography&quot;&gt;Accessible typography&lt;/h2&gt;
&lt;p&gt;Good typography is also accessible typography – readers should be able to read without squinting their eyes.&lt;/p&gt;
&lt;p&gt;Since we use multiple devices to view sites, and we usually place larger devices further away from our eyes, we need to increase the base font-size for larger devices. This process is often done with media queries, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 16px;
  line-height: 1.4;
}

@media screen and (min-width: 600px) {
  html {
    font-size: 18px;
  }
}

@media screen and (min-width: 800px) {
  html {
    font-size: 19px;
    line-height: 1.45;
  }
}

@media screen and (min-width: 1200px) {
  html {
    font-size: 21px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the process is a downright chore, which is why many developers hate media queries when working with typography.&lt;/p&gt;
&lt;p&gt;With Typi, the process can be completed with a few key-value pairs, like the ones you’ll see below. If you see only a single &lt;code&gt;font-size&lt;/code&gt; value, that means Typi should not write a &lt;code&gt;line-height&lt;/code&gt; value, but instead allow CSS to cascade downwards.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Typi map holds font configurations
$typi: (
  base: (
    null: (16px, 1.4)
    medium: (18px),
    large: (19px, 1.45),
    huge: (21px)
  )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The keys (&lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;large&lt;/code&gt; and &lt;code&gt;huge&lt;/code&gt;) are media query breakpoints that must be predetermined with another Sass map – the &lt;code&gt;$breakpoints&lt;/code&gt; map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Creating breakpoints for media queries
$breakpoints: (
  medium: 600px,
  large: 800px,
  huge: 1200px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, switching font-sizes and line-heights across breakpoints become easy – you simply change a value in your &lt;code&gt;$typi&lt;/code&gt; map.&lt;/p&gt;
&lt;p&gt;Another point about accessible typefaces is this – as developers, we want to accommodate users with not-so-good eyesight. These users may opt to increase the browser font-size from the default &lt;code&gt;16px&lt;/code&gt; to &lt;code&gt;20px&lt;/code&gt;. To accommadate these users, we have to use relative units (like &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;) whenever we write font-size values for typographic elements. Typi does this conversion for you automatically.&lt;/p&gt;
&lt;p&gt;More information about using Typi can be found in &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;its Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;contrast-and-rhythm&quot;&gt;Contrast and Rhythm&lt;/h2&gt;
&lt;p&gt;Music is beautiful. It flows. We enjoy it. The reason we enjoy music is because it follows a rhythm. Likewise, good typography allows a reader to flow through the text when it follows a rhythm. On the web, we often call this rhythm &lt;strong&gt;vertical rhythm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vertical rhythm is the downwards motion of text. It’s the amount of space between each line, between each paragraph, and between any two elements on the page. This rhythm needs to be consistent enough to induce a flow. For that, the greatest repeating number – the line height of the body text – creates the rhythm that the rest of the page flows with. To understand more about vertical rhythm, you might want to read &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;“what is vertical rhythm”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typi provides a rhythm function that allows you to calculate and use the line height value (the most commonly repeated value) easily. Here’s a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  base: (
    null: (16px, 1.4)
  )
);

// The line-height value is 16px * 1.4 = 22.4.x
.selector {
  // This means 4 * 22.4px, but in written in rem for accessibility and maintainability purposes
  margin-top: vr(4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information about Typi’s rhythm function, be sure to check out the Typi’s &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, music would be boring if you listen to a note with same beat, pitch, and texture on repeat. It’ll be similar to listening to a monk knock a wooden fish without the chanting the sutras – it’s boring.&lt;/p&gt;
&lt;p&gt;Music is beautiful because there’s contrast. The contrast – the difference between high and the lows – catch our attention and allows us to differentiate one part of the music from another. In typography, we also need contrast, and we often create contrast between headings and text font-sizes through a technique called Modular Scale. For more information, you might want to read &lt;a href=&quot;https://alistapart.com/article/more-meaningful-typography&quot;&gt;“More Meaningful Typography”&lt;/a&gt; by Tim Brown.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/case-studies/typi/modular-scale.png&quot; alt=&quot;An example of a Modular Scale&quot;&gt;
  &lt;figcaption&gt;An example of a Modular Scale&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To make it easy to code, Typi lets you to use &lt;a href=&quot;https://github.com/modularscale/modularscale-sass&quot;&gt;Modular Scale Sass library&lt;/a&gt; directly in the &lt;code&gt;$typi&lt;/code&gt; map. You simply have to substitute the font-size with a modular scale function, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  base: (
    null: (16px, 1.4)
  ),
  h1: (
    null: ms(3)
  )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-course-on-typography&quot;&gt;A course on typography&lt;/h2&gt;
&lt;p&gt;What else goes into good typography?&lt;/p&gt;
&lt;p&gt;Other than the things I mentioned in this case study, nothing much. What’s important is to learn to typeset, internalize the process, understand why typesetting is important, and how the principles of design (repetition, contrast, alignment and proximity) play in typography. Once you understand these, web typography becomes a fun playground for you instead of a stress-filled zone. (Oh, of course, you need to be able to translate these principles to the web!).&lt;/p&gt;
&lt;p&gt;For me, learning about web typography and creating scalable typography was a lot of fun, but also a lot of frustration. I summarized my findings and learnings (both design and code) into a course – Mastering Responsive Typography – that would help you learn everything I know today.&lt;/p&gt;
&lt;p&gt;If you’re interested, you can get the first four lessons of Mastering Responsive Typography for free through the link below. I invite you to check it out.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Get the first four lessons of Mastering Responsive Typography for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Creating Typi was a tough process. It taught me how to research about a touchy topic that people have different opinions on. It taught me to understand best practices from the founding principles so I know how to use them properly. It also taught me how to design a clean API that focuses on the principles while integrating existing approaches in the market.&lt;/p&gt;
&lt;p&gt;Creating the library itself also taught me the ins-and-outs of writing a library in Sass. The process and functions used are totally different from how you might do it with JavaScript. I’m glad I made Typi, and I’m glad to hear how many people are using it to help with their development efforts.&lt;/p&gt;
&lt;p&gt;Once again, if you’re curious about Typi, you can check out the &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Github repo&lt;/a&gt;. Admittedly, I should also have created a microsite to explain the benefits of Typi, but I’ve since moved past that and I’m focusing on something else now. I hope you find Typi useful! (And please let me know if you ever want to contribute to Typi!).&lt;/p&gt;
&lt;p&gt;If you’re interested to hire me to help you design and simplify an existing workflow within your company (like creating Typi, using Webpack, or any other possible variations), I’d love to chat! The idea is you feel that something can be done better, and should be done better. If you feel this way, please feel free to tell me more about your project and how I can help you over at the &lt;a href=&quot;https://zellwk.com/apply/&quot;&gt;application page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Note: I’m currently accepting project requests for  April – Jun, 2018. I can only take up to 2 clients during this period, so please apply now if you’re interested to work together with me!)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript Scope and Closures</title>
    <link href="https://zellwk.com/blog/https:/css-tricks.com/javascript-scope-closures/"/>
    <updated>2017-08-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/css-tricks.com/javascript-scope-closures/</id>
    <content type="html">&lt;p&gt;Scopes and closures are important in JavaScript. But, they were confusing for me when I first started. Here’s an explanation of scopes and closures to help you understand what they are.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Should you use this in JavaScript?</title>
    <link href="https://zellwk.com/blog/should-you-use-this/"/>
    <updated>2017-08-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/should-you-use-this/</id>
    <content type="html">&lt;p&gt;Many people feel that &lt;code&gt;this&lt;/code&gt; is incredibly confusing. Because it’s so confusing, they argue that &lt;code&gt;this&lt;/code&gt; makes JavaScript complicated, and you should avoid them like a plague.&lt;/p&gt;
&lt;p&gt;But does &lt;code&gt;this&lt;/code&gt; really make your JavaScript complicated? Should you avoid using &lt;code&gt;this&lt;/code&gt;?&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;don%E2%80%99t-avoid-this&quot;&gt;Don’t avoid this&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; doesn’t make JavaScript complicated like what people have suggested. These people only feel that &lt;code&gt;this&lt;/code&gt; is complicated because they don’t fully understand it. Because they don’t understand &lt;code&gt;this&lt;/code&gt;, they dissuade people from using it under the pretext of complexity and confusion.&lt;/p&gt;
&lt;p&gt;As I explained in &lt;a href=&quot;https://zellwk.com/blog/this/&quot;&gt;a separate article&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; can take six possible values depending its context. Six is a relatively easy number to conquer, isn’t it?&lt;/p&gt;
&lt;p&gt;If you can’t understand &lt;code&gt;this&lt;/code&gt;, you’ll likely find it difficult to understand JavaScript frameworks like React or Angular. You’ll find it hard to become fluent in JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a JavaScript fundamental. Don’t shy away from it. Give yourself the chance to understand it.&lt;/p&gt;
&lt;h2 id=&quot;learn-this-regardless-of-what-people-say&quot;&gt;Learn this regardless of what people say&lt;/h2&gt;
&lt;p&gt;JavaScript is a language that supports two main programming styles – object oriented programming (OOP) and functional programming (FP).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Object oriented programming&lt;/strong&gt; is a style that revolves around creating “objects”. It uses &lt;code&gt;this&lt;/code&gt; heavily to access properties and methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Obj = function () {
  return {
    prop: &#39;yay&#39;,
    method: function () {
      // access prop in the same object
      console.log(this.prop)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; is a style that revolves around performing actions through function calls. It doesn’t use &lt;code&gt;this&lt;/code&gt; at all.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const partialResult = someFunction(data)
const finalResult = anotherFunction(partialResult)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When viewed this way, whether to use &lt;code&gt;this&lt;/code&gt; becomes a bigger question of whether to use OOP or FP. Both approaches has their merits and are favored by many experts.&lt;/p&gt;
&lt;p&gt;If you choose FP over OOP because you’re afraid of &lt;code&gt;this&lt;/code&gt;, you’re effectively condemning half of the JS population without even understanding why.&lt;/p&gt;
&lt;p&gt;To make a conscious choice, you need to start by understanding wtf &lt;code&gt;this&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;Besides, OOP is so popular in JavaScript that you’ll definitely encounter instances of &lt;code&gt;this&lt;/code&gt; in libraries. If you don’t understand &lt;code&gt;this&lt;/code&gt;, you’ll likely have a hard time understanding the library. Examples of popular libraries that use &lt;code&gt;this&lt;/code&gt; include React and Mongoose.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot; data-should-not-clone=&quot;&quot;&gt;&lt;/div&gt;
&lt;h2 id=&quot;when-do-you-use-this%3F&quot;&gt;When do you use this?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is crucial in OOP. So, when you use OOP, you definitely need to rely on &lt;code&gt;this&lt;/code&gt;. When you don’t write OOP, you don’t use &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this constrain in place, you only need to know four of six possible contexts. Do you know what they are?&lt;/p&gt;
&lt;p&gt;Have a guess :)&lt;/p&gt;
&lt;p&gt;You might want to refer back to &lt;a href=&quot;https://zellwk.com/blog/this&quot;&gt;this article&lt;/a&gt; to help you figure it out.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Learn &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Learn it even though others tell you it’s complicated. Learn it, because it sounds confusing. Learn it and give yourself the chance to fully understand what &lt;code&gt;this&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;Don’t shy away from &lt;code&gt;this&lt;/code&gt;. Don’t shy away from the chance to become a better developer.&lt;/p&gt;
&lt;p&gt;Learn &lt;code&gt;this&lt;/code&gt; so you can use it effectively when you encounter it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to think like a programmer</title>
    <link href="https://zellwk.com/blog/think/"/>
    <updated>2017-08-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/think/</id>
    <content type="html">&lt;p&gt;“I don’t get JavaScript. I can’t make components from scratch. My mind goes blank when I stare at a blank JavaScript file. I guess I can’t do it because I don’t know how to think like a programmer”.&lt;/p&gt;
&lt;p&gt;Sounds familiar? You’re not alone, my friend. Many people who tried to pick up JavaScript as their first programming language faced the same problem.&lt;/p&gt;
&lt;p&gt;Heck, even developers who are already coding in another language face the same issue with JavaScript too. Instead of “I can’t think like a programmer”, they say “I can’t think in JavaScript”.&lt;/p&gt;
&lt;p&gt;But no more. Let today be the day where you learn to think like a programmer.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;you-can-already-think-like-a-programmer.&quot;&gt;You can already think like a programmer.&lt;/h2&gt;
&lt;p&gt;Have you tried simple exercises on about JavaScript on places like Free Code Camp, Code Academy or Code Wars?&lt;/p&gt;
&lt;p&gt;If you did, you already know how to think like a programmer.&lt;/p&gt;
&lt;p&gt;The real reason your mind blanks out when you face your JavaScript file is likely because of &lt;em&gt;coder’s block&lt;/em&gt;. You’re scared to write JavaScript that doesn’t work. You’re scared to face the errors. You don’t know how to begin.&lt;/p&gt;
&lt;p&gt;Overcoming coder’s block is simple. You can follow these four steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Break down the problem into small problems&lt;/li&gt;
&lt;li&gt;Find solutions to your small problems&lt;/li&gt;
&lt;li&gt;Assemble the solutions in a coherent manner&lt;/li&gt;
&lt;li&gt;Refactor and improve&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-1%3A-break-down-the-problem-into-smaller-problems.&quot;&gt;Step 1: Break down the problem into smaller problems.&lt;/h2&gt;
&lt;p&gt;How do you put an elephant into the fridge?&lt;/p&gt;
&lt;p&gt;Here’s what most people would answer:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the fridge&lt;/li&gt;
&lt;li&gt;Put the elephant in&lt;/li&gt;
&lt;li&gt;Close the fridge&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Problem solved.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/think/ele-in-fridge.jpg&quot; alt=&quot;Image of an elephant in the fridge&quot;&gt;
  &lt;figcaption&gt;Poor elephant. It looks so sad in the fridge :(&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This answer is the best example of why you get stuck when you face a blank JavaScript file. &lt;strong&gt;It skips steps&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you think logically about the question, you’ll see a few glaring problems that remains unanswered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What fridge are we talking about?&lt;/li&gt;
&lt;li&gt;What kind of elephant are we talking about?&lt;/li&gt;
&lt;li&gt;If the elephant is too huge to fit into the fridge, what do you do?&lt;/li&gt;
&lt;li&gt;Where do you find the elephant in the first place?&lt;/li&gt;
&lt;li&gt;How do you transport the elephant to your fridge?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you code, you need to answer every small question you can think of. That’s why the first step is to break your problem into smaller pieces.&lt;/p&gt;
&lt;h2 id=&quot;step-2%3A-find-solutions-to-your-small-problems.&quot;&gt;Step 2: Find solutions to your small problems.&lt;/h2&gt;
&lt;p&gt;The second step is to find a solution to each of your small problems. Here, it’s important to be as detailed as possible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What fridge? – the fridge that sits in your kitchen&lt;/li&gt;
&lt;li&gt;What kind of elephant? – the &lt;a href=&quot;https://en.wikipedia.org/wiki/African_elephant&quot;&gt;african bush elephant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What if the elephant is too big? – Get a shrink gun (🔫) to shrink the elephant (😎).&lt;/li&gt;
&lt;li&gt;Where do you find the elephant? – Africa&lt;/li&gt;
&lt;li&gt;How do you transport the elephant? – Put it in your bag after you’ve shrunk it, then take a plane back home.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, you need to dig a few layers in to get the answer you need. In the example above, we can dig deeper into answers 3 and 4.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where do you get the shrink gun? – Borrow from the mad scientist next door.&lt;/li&gt;
&lt;li&gt;Where in Africa can you find your elephant? – Addo Elephant Park in South Africa.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have answers to all your smaller problems, you piece them together to solve your big problem.&lt;/p&gt;
&lt;h2 id=&quot;step-3%3A-assemble-the-solutions-in-a-coherent-manner.&quot;&gt;Step 3: Assemble the solutions in a coherent manner.&lt;/h2&gt;
&lt;p&gt;So, in the put-elephant-in-fridge example, you can probably follow the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a shrink gun from the scientist next door&lt;/li&gt;
&lt;li&gt;Fly to South Africa&lt;/li&gt;
&lt;li&gt;Travel to Addo Elephant Park&lt;/li&gt;
&lt;li&gt;Find an elephant in the park&lt;/li&gt;
&lt;li&gt;Shoot the elephant with the shrink gun&lt;/li&gt;
&lt;li&gt;Put the shrunk elephant in your bag&lt;/li&gt;
&lt;li&gt;Travel back to the airport&lt;/li&gt;
&lt;li&gt;Fly back to your country&lt;/li&gt;
&lt;li&gt;Travel to your house&lt;/li&gt;
&lt;li&gt;Put the elephant in your fridge&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Problem solved.&lt;/p&gt;
&lt;p&gt;As interesting at is sounds, you most probably wouldn’t be capturing elephants and putting them into fridges with JavaScript. Let’s go through a real example instead.&lt;/p&gt;
&lt;h2 id=&quot;let%E2%80%99s-use-a-real-example.&quot;&gt;Let’s use a real example.&lt;/h2&gt;
&lt;p&gt;Let’s say you want to a create button that, when clicked, shows you a sidebar.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;zdqmLe&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Sidebar for Thinking like a programmer article&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/zdqmLe/&quot;&gt;Sidebar for Thinking like a programmer article&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The first step to building this button-and-sidebar component is to break down the component into smaller pieces. Here are a few problems you may identify:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the markup of this button?&lt;/li&gt;
&lt;li&gt;How should the button look?&lt;/li&gt;
&lt;li&gt;What happens when the button gets clicked once?&lt;/li&gt;
&lt;li&gt;What happens when the button gets clicked again?&lt;/li&gt;
&lt;li&gt;What happens when the button gets clicked a third time?&lt;/li&gt;
&lt;li&gt;What is the markup of this sidebar?&lt;/li&gt;
&lt;li&gt;How does the sidebar look when it is shown?&lt;/li&gt;
&lt;li&gt;How does the sidebar look when it is hidden?&lt;/li&gt;
&lt;li&gt;How does the sidebar show up?&lt;/li&gt;
&lt;li&gt;How does the sidebar go away?&lt;/li&gt;
&lt;li&gt;Should the sidebar show up when the page loads?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-second-step-%E2%80%93-creating-solutions-for-problems&quot;&gt;The second step – creating solutions for problems&lt;/h3&gt;
&lt;p&gt;To create solutions, you need to have knowledge about the medium you’re creating for. In our case, you need to know sufficient HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;Don’t worry if you don’t know the answer to any of these questions. If you’ve broken them down sufficiently, you should be able to find an answer through Google in five minutes.&lt;/p&gt;
&lt;p&gt;Let’s answer each of the questions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the markup of this button?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The markup is an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag with a class of &lt;code&gt;.button&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;button&amp;quot;&amp;gt;Click me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How should this button look?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This button should have the following CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.btn {
  display: inline-block;
  font-size: 2em;
  padding: 0.75em 1em;
  background-color: #1ce;
  color: #fff;
  text-transform: uppercase;
  text-decoration: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What happens when the button gets clicked once? Twice? Three times?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sidebar should show up when the button is clicked once. This sidebar then goes away when the button is clicked another time. It shows up again when the button is clicked again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the markup of this sidebar?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sidebar should be a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; that contains a list of links:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link 5&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How does the sidebar look when it is shown?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sidebar should be placed at the right of the window. It needs to be fixed in place so the user sees it. It should be 300px wide…&lt;/p&gt;
&lt;p&gt;When you finish solving the problem, you may end up with CSS that looks similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.sidebar {
  position: fixed;
  top: 0;
  bottom: 0;
  right: 0;
  width: 300px;
  background-color: #333;
}

.sidebar ul {
  margin: 0;
  padding: 0;
}

.sidebar li {
  list-style: none;
}

.sidebar li + li {
  border-top: 1px solid white;
}

.sidebar a {
  display: block;
  padding: 1em 1.5em;
  color: #fff;
  text-decoration: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How does the sidebar look when it is hidden?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sidebar should be shifted 300px to the right, so it is off the screen.&lt;/p&gt;
&lt;p&gt;When you answer this question, another two may pop into your mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How do you know whether the sidebar is shown or hidden?&lt;/li&gt;
&lt;li&gt;How do you style the hidden sidebar?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s answer them as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do you know whether the sidebar is shown or hidden?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the sidebar has a &lt;code&gt;.is-hidden&lt;/code&gt; class, the sidebar should be hidden from view. Otherwise, it should be visible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do you style the hidden sidebar?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;translateX&lt;/code&gt; to shift the sidebar 300px to the right since &lt;code&gt;transform&lt;/code&gt; is one of the better properties for animation. Your styles then becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.sidebar.is-hidden {
  transform: translateX(300px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How does the sidebar show up?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sidebar cannot appear immediately. It needs to move from the right, where it’s hidden from view, to the left, where it’s visible.&lt;/p&gt;
&lt;p&gt;If you know your CSS, you’ll be able to use the &lt;code&gt;transition&lt;/code&gt; property. If you don’t, you’ll be able to find your answer through Google.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.sidebar {
  /* other properties */
  transition: transform 0.3s ease-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How does the sidebar disappear?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It should disappear the same way it appears, in the opposite direction. With this, you don’t have to write any additional CSS code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Should the sidebar show up when the page loads?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nope. Given what we have, we can add a &lt;code&gt;is-hidden&lt;/code&gt; class in the sidebar markup and the sidebar should remain hidden.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;sidebar is-hidden&amp;quot;&amp;gt;
  &amp;lt;!-- links --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now, we’ve answered almost everything, except one – what happens when the button gets clicked once? Twice? Three times?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our answer above was too vague. We know the sidebar should appear when you click on it, but how? The sidebar should disappear when you click on it again, but how?&lt;/p&gt;
&lt;p&gt;At this point, we can answer this question again with much more details. But before that, how do know when you clicked on a button?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to know when you click on a button&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you know your JavaScript, you know you can add an event listener to the button and listen for a &lt;code&gt;click&lt;/code&gt; event. If you don’t know, you’ll be able to google it.&lt;/p&gt;
&lt;p&gt;Before you add an event listener, you need to find the button from the markup with &lt;code&gt;querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;.btn&#39;)

button.addEventListener(&#39;click&#39;, function() {
  console.log(&#39;button is clicked!&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What happens when the button is clicked once?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the button is clicked once, we should remove the &lt;code&gt;is-hidden&lt;/code&gt; class so the button shows up. To remove a class in JavaScript, we use &lt;code&gt;Element.classList.remove&lt;/code&gt;. This means we need to select the sidebar first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;.btn&#39;)
const sidebar = document.querySelector(&#39;.sidebar&#39;)

button.addEventListener(&#39;click&#39;, function() {
  sidebar.classList.remove(&#39;is-hidden&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;What happens when the button is clicked twice?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the button is clicked again, we should add the &lt;code&gt;is-hidden&lt;/code&gt; class back to the sidebar so it disappears.&lt;/p&gt;
&lt;p&gt;Unfortunately, we can’t detect how many times a button is clicked with an event listener. The best way, then, is to check if the class &lt;code&gt;is-hidden&lt;/code&gt; is present on the sidebar already. If it is, we remove it. If it’s not, we add it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;.btn&#39;)
const sidebar = document.querySelector(&#39;.sidebar&#39;)

button.addEventListener(&#39;click&#39;, function() {
  if (sidebar.classList.contains(&#39;is-hidden&#39;)) {
    sidebar.classList.remove(&#39;is-hidden&#39;)
  } else {
    sidebar.classList.add(&#39;is-hidden&#39;)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with this, you have a initial prototype of the component.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;zdqmLe&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Sidebar for Thinking like a programmer article&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/zdqmLe/&quot;&gt;Sidebar for Thinking like a programmer article&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;step-4%3A-refactor-and-improve.&quot;&gt;Step 4: Refactor and improve.&lt;/h2&gt;
&lt;p&gt;The final step is to refactor and improve your code. This step may not come naturally to you right now. It takes effort and practice before you can tell whether your code can be improved.&lt;/p&gt;
&lt;p&gt;So, once you’re done with the three steps, take a break and work on something else. When you get better with JavaScript, you may notice you missed a few details when you come back.&lt;/p&gt;
&lt;p&gt;In this example above, you can ask a few more questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How do you make this sidebar component accessible to users who have visual disabilities?&lt;/li&gt;
&lt;li&gt;How do you make this sidebar component easier to use for people with keyboards?&lt;/li&gt;
&lt;li&gt;Can you improve the code in any way?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the third point, if you googled a little further, you may notice there’s a &lt;code&gt;toggle&lt;/code&gt; method that removes a class if it’s present. If the class isn’t present, the &lt;code&gt;toggle&lt;/code&gt; method adds it for us:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;.btn&#39;)
const sidebar = document.querySelector(&#39;.sidebar&#39;)

button.addEventListener(&#39;click&#39;, function() {
  sidebar.classList.toggle(&#39;is-hidden&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Thinking like a programmer is simple. The key is to know how to break problems down into smaller ones.&lt;/p&gt;
&lt;p&gt;When you’re done breaking the problem down, find solutions for your small problems and code them up. Along the way, you’ll discover more problems you didn’t think of before. Solve them too.&lt;/p&gt;
&lt;p&gt;By the time you’re done with writing your answers to each small problem, you’ll have the answer to your large problem. Sometimes, you may need to join up the steps you’ve wrote for your smaller problems as well.&lt;/p&gt;
&lt;p&gt;Finally, the work isn’t done when you create your first solution. There’s always going to be room for improvement. However, you most likely won’t be able to see the improvements right now. Take a break, work on something else and come back later. You’ll be able to ask even better questions then.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Remembering what you learned</title>
    <link href="https://zellwk.com/blog/remember/"/>
    <updated>2017-08-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/remember/</id>
    <content type="html">&lt;p&gt;Have you had instances where you wanted learn something, but it completely eludes you?&lt;/p&gt;
&lt;p&gt;I’ve had some of them. One instance was when I tried to learn JavaScript. Another was when I wanted to learn Node and Express.&lt;/p&gt;
&lt;p&gt;In each of these cases, no matter how hard I tried, I can’t seem to make the knowledge click on a deeper level. I read books, articles, and tutorials, but the knowledge I gained simply vanishes into thin air the very next moment.&lt;/p&gt;
&lt;p&gt;Should I give up? I would ask myself occasionally. Am I just stupid?&lt;/p&gt;
&lt;p&gt;But I never gave up on learning JavaScript, nor Node and Express. After spending god knows how many hours trying, I could magically remember the knowledge.&lt;/p&gt;
&lt;p&gt;For a long time, I wondered why this pattern kept going on. I finally understand now.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;i-didn%E2%80%99t-believe-myself&quot;&gt;I didn’t believe myself&lt;/h2&gt;
&lt;p&gt;I didn’t believe I could learn to code deep down inside because I don’t have a CS degree. This belief stayed with me as I tried to learn JavaScript. It surfaced again when I tried to learn Node, Express and MongoDB.&lt;/p&gt;
&lt;p&gt;Because I didn’t believe I could learn, my mind would blank out the moment I can’t understand the material I was reading. I’ll get confused. I’ll hear myself say “this is too hard”.&lt;/p&gt;
&lt;p&gt;Sometimes, I wonder if I should get a formal CS degree in order to understand this damn coding thing. But I’d get depressed. I don’t have the time nor money to put myself through four more years of education.&lt;/p&gt;
&lt;p&gt;Some time later, after countless hours feeling stupid about the subject, things would suddenly click for me. Usually, it’s when I said “fuck it”.&lt;/p&gt;
&lt;h2 id=&quot;fuck-it&quot;&gt;Fuck it&lt;/h2&gt;
&lt;p&gt;One day, when I was still lousy with JavaScript, I found myself under immense pressure to make a jQuery plugin. I didn’t know enough about JavaScript to build one. But I was in a situation I can’t refuse. I had to deliver in four days.&lt;/p&gt;
&lt;p&gt;I said “fuck it”, got down to work and built a plugin in four days. It was something I deemed impossible previously, given my sucky JavaScript.&lt;/p&gt;
&lt;p&gt;Another time, I found myself having to teach people how to use Express, Node and MongoDB in a class. I had three hours to learn enough of it. I had been learning these things for a year already, but I can’t seem to get it.&lt;/p&gt;
&lt;p&gt;With only three hours, I decided to fuck it the extra questions I had. What mattered then, was getting it to work.&lt;/p&gt;
&lt;p&gt;Three hours later, I was teaching Express, Node and MongoDB.&lt;/p&gt;
&lt;h2 id=&quot;the-magic&quot;&gt;The magic&lt;/h2&gt;
&lt;p&gt;There’s something magical about this “fuck it” moment.&lt;/p&gt;
&lt;p&gt;In this moment, you let go of all limiting fears and beliefs you’ve held on to over the years. You only care about getting it to work. Everything else flies out of the window.&lt;/p&gt;
&lt;p&gt;That’s magical. Because once you release your fears and beliefs, you gain the ability to immerse yourself in what you’re trying to do.&lt;/p&gt;
&lt;p&gt;You start paying attention. You start doing the work.&lt;/p&gt;
&lt;h2 id=&quot;attention&quot;&gt;Attention&lt;/h2&gt;
&lt;p&gt;Once you start paying attention, you read materials carefully. You pick up cues you missed previously. Cues that contain the vital information to make everything click.&lt;/p&gt;
&lt;p&gt;When I tried to learn React for the first time, I thought it’ll be easy. It wasn’t. The documentation was written in a way that didn’t agree with my brain. I was thrown off instantly and I felt React was beyond my reach.&lt;/p&gt;
&lt;p&gt;Some time later, I came back to React. This time, I braced myself to go through each step of the documentation carefully. To my surprised, things were easier than I thought they would be. I understood stuff (like lifecycle stages) that I couldn’t before.&lt;/p&gt;
&lt;p&gt;These cues you need to make things click can come in any form.&lt;/p&gt;
&lt;p&gt;Sometimes, all you need is a phase to tell you what it does. If you already know Photoshop, you probably know what GIMP is when you hear the label “Poor Man’s Photoshop” without going all out to learn it.&lt;/p&gt;
&lt;p&gt;Sometimes, you need an analogy to understand a concept. These concepts may be found through your teacher or in the text. You may also concoct them yourself.&lt;/p&gt;
&lt;p&gt;If you manage to craft your own analogies, you’ll learn and remember even better, because our brain learn by linking what we’re learning to what we already know.&lt;/p&gt;
&lt;p&gt;Sometimes, the look and feel of things can get ingrained in your brain too. For example, arrow functions are easy for me to recognize because I’ve already committed its syntax to my brain. I’ve seen too many of it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function nameOfFunction () { /* do something */ }
const arrowFunction = _ =&amp;gt; { /* do something */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sometimes, colors help with memory too. When you code, make sure to use a good syntax highlighter, because you’ll immediately know that things are off when the color looks off.&lt;/p&gt;
&lt;p&gt;Finally, one cool trick that helps with learning is to type every letter by hand when you learn to code. Do not copy-paste anything.&lt;/p&gt;
&lt;p&gt;This method forces you to pay attention to what you’re typing, spotting any mistakes along the way. You’d also remember what you’ve typed, engaging your muscle memory as you learn, which helps you reproduce your code later.&lt;/p&gt;
&lt;h2 id=&quot;yes%2C-it%E2%80%99s-a-lot-of-work&quot;&gt;Yes, it’s a lot of work&lt;/h2&gt;
&lt;p&gt;Learning is hard work. There are no real shortcuts to learning, except to let your brain simmer in the information as you collect cues for building associations.&lt;/p&gt;
&lt;p&gt;The only shortcut is to buy books and courses so you learn from a source that’s smarter and more coherent than you.&lt;/p&gt;
&lt;p&gt;But even if you go through courses and books, you still need to be patient. You need to observe. You need to do the work and let your brain simmer in the cues.&lt;/p&gt;
&lt;p&gt;The good news is, if you discard (or temporarily suspend) your fears and beliefs, and you pay attention, you would learn quickly. You would also remember most of what you learned.&lt;/p&gt;
&lt;p&gt;Once you’ve learned it, the most importing thing afterwards is to use it.&lt;/p&gt;
&lt;h2 id=&quot;use-it&quot;&gt;Use it&lt;/h2&gt;
&lt;p&gt;Humans can hold roughly seven things in the short-term memory at once. When you learn, it’s best for you to use the thing right away, so you trigger a better chance of recall.&lt;/p&gt;
&lt;p&gt;That’s why the “typing letter by letter” trick works; you use it while you’re learning it.&lt;/p&gt;
&lt;p&gt;After going through your materials, you should test what you learned a second time. Maybe a third time if you can manage it. When you do so, try your hardest not to refer to the material. Doing so helps you create associations which leads to better recall later too.&lt;/p&gt;
&lt;p&gt;There’s no need to be 100% right. You can always check you work when you’re done, then correct as necessary. Make sure to correct afterwards though! You don’t want to remember the wrong things.&lt;/p&gt;
&lt;p&gt;As you use the stuff you learned, you’ll slowly store them into your long-term memory. JavaScript then becomes a skill you would never forget, like riding a bicycle.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So, let go of your fears and beliefs. If you can’t, at least try to temporarily suspend them and pay attention to what you’re learning.&lt;/p&gt;
&lt;p&gt;Then, use what you’ve learned you slowly but surely put them into your memory.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>5 top tips for speedy learning</title>
    <link href="https://zellwk.com/blog/https:/www.creativebloq.com/advice/5-top-tips-for-speedy-learning/"/>
    <updated>2017-07-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.creativebloq.com/advice/5-top-tips-for-speedy-learning/</id>
    <content type="html">&lt;p&gt;Picking up a new tool or technique doesn’t have to take forever. Here’s how to fast-track your learning.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>This in JavaScript</title>
    <link href="https://zellwk.com/blog/this/"/>
    <updated>2017-06-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/this/</id>
    <content type="html">&lt;p&gt;Are you confused by the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript? It confuses everyone in the beginning, so don’t worry about it. You’re not alone.&lt;/p&gt;
&lt;p&gt;But that doesn’t mean you can go on without understanding &lt;code&gt;this&lt;/code&gt; forever. It is used so much in JavaScript and in tutorials everywhere that you need to grasp what &lt;code&gt;this&lt;/code&gt; is sooner or later. Once you understand &lt;code&gt;this&lt;/code&gt;, you’ll realize that it’s much simpler than you think it is.&lt;/p&gt;
&lt;p&gt;By the end of this article, you would have demystified &lt;code&gt;this&lt;/code&gt; for yourself. You’ll know what it is, what it does and how to use it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;so%2C-what-is-this%3F&quot;&gt;So, what is this?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a keyword whose value changes depending on how a function gets called. There six different ways where &lt;code&gt;this&lt;/code&gt; can take on new values. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in global context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in object construction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in an object method&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in a simple function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in an arrow function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; in an event listener&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You may wonder what &lt;code&gt;this&lt;/code&gt; is in each context and why there’s a need to change &lt;code&gt;this&lt;/code&gt; in the first place. To answer your question, let look at how &lt;code&gt;this&lt;/code&gt; changes in each of the six contexts.&lt;/p&gt;
&lt;h3 id=&quot;this-in-a-global-context&quot;&gt;This in a global context&lt;/h3&gt;
&lt;p&gt;When &lt;code&gt;this&lt;/code&gt; is called outside of any function, in a global context, this defaults to the &lt;code&gt;Window&lt;/code&gt; object in the browser.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(this) // Window
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/window.png&quot; alt=&quot;This defaults to window object in browsers&quot;&gt;
  &lt;figcaption&gt;This defaults to window object in browsers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Usually, you wouldn’t use &lt;code&gt;this&lt;/code&gt; in a global context anyway, so the value of &lt;code&gt;this&lt;/code&gt; here doesn’t really matter. Let’s move on to the next context.&lt;/p&gt;
&lt;h3 id=&quot;this-in-object-construction&quot;&gt;This in object construction&lt;/h3&gt;
&lt;p&gt;When you create a new instance of an object with the &lt;code&gt;new&lt;/code&gt; keyword, &lt;code&gt;this&lt;/code&gt; refers to the instance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Human (age) {
  this.age = age
}

let greg = new Human(22)
let thomas = new Human(24)

console.log(greg) // this.age = 22
console.log(thomas) // this.age = 24
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/constructor.png&quot; alt=&quot;This refers to the instance&quot;&gt;
  &lt;figcaption&gt;This refers to the instance&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can see that &lt;code&gt;greg&lt;/code&gt; is an instance of &lt;code&gt;Human&lt;/code&gt; in the code above. Now, whenever you reference &lt;code&gt;greg&lt;/code&gt;, you won’t accidentally get &lt;code&gt;thomas&lt;/code&gt;. So, setting &lt;code&gt;this&lt;/code&gt; to be the instance makes perfect sense.&lt;/p&gt;
&lt;p&gt;Let’s look at a closely related context next – &lt;code&gt;this&lt;/code&gt; in an object method.&lt;/p&gt;
&lt;h3 id=&quot;this-in-an-object-method&quot;&gt;This in an object method&lt;/h3&gt;
&lt;p&gt;Methods are fancy words for functions that are associated with an object, like this:&lt;/p&gt;
&lt;p&gt;(Note: Methods here are defined with the ES6 object literal shorthand. Check out &lt;a href=&quot;https://zellwk.com/blog/es6#enhanced-object-literals&quot;&gt;this article&lt;/a&gt; if you’re unsure what it does).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  // A method
  aMethod () {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; within any method refers to the object itself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  sayThis () {
    console.log(this)
  }
}

o.sayThis() // o
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/object.png&quot; alt=&quot;this in a method refers to the object itself&quot;&gt;
  &lt;figcaption&gt;this refers to the object&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since &lt;code&gt;this&lt;/code&gt; refers to the object, you can use methods to get the instance of an object, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Human (name) {
  return {
    name,
    getName() {
      return this.name
    }
  }
}

const zell = new Human(&#39;Zell&#39;)
const vincy = new Human(&#39;Vincy&#39;)

console.log(zell.getName()) // Zell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In these two object contexts, you can see that the changed value of &lt;code&gt;this&lt;/code&gt; lets you get the right instance, which is the basis for Object-oriented programming. That’s a topic for another day though.&lt;/p&gt;
&lt;p&gt;Let’s move on to the next context.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;this-in-a-simple-function&quot;&gt;This in a simple function&lt;/h3&gt;
&lt;p&gt;Simple functions are functions you know extremely well; like the one below. Anonymous functions written in the same form are also considered simple functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function hello () {
  // say hello!
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On browsers, &lt;code&gt;this&lt;/code&gt; is always set to &lt;code&gt;Window&lt;/code&gt; in a simple function. The same is true even if you call a simple function in an object method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function simpleFunction () {
  console.log(this)
}

const o = {
  sayThis () {
    simpleFunction()
  }
}

simpleFunction() // Window
o.sayThis() // Window
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, the change in &lt;code&gt;this&lt;/code&gt; is unexpected for beginners. They expect &lt;code&gt;this&lt;/code&gt; to remain the same within object methods. I got caught in it too.&lt;/p&gt;
&lt;p&gt;To see why, consider the following code. Here, a &lt;code&gt;this.speakLeet&lt;/code&gt; function is executed later within a &lt;code&gt;setTimeout&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const o = {
  doSomethingLater () {
    setTimeout(function() {
      this.speakLeet() // Error
    }, 1000)
  },
  speakLeet() {
    console.log(`1337 15 4W350M3`)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, the code above results in an error. The error occurs because &lt;code&gt;this&lt;/code&gt; is set to &lt;code&gt;Window&lt;/code&gt; in the &lt;code&gt;setTimeout&lt;/code&gt; function. &lt;code&gt;Window&lt;/code&gt; does not have a &lt;code&gt;speakLeet&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;One quick fix is to create a variable that stores the reference to the &lt;code&gt;this&lt;/code&gt;. This variable is often called &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;that&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const o = {
  doSomethingLater () {
    const self = this
    setTimeout(function() {
      self.speakLeet()
    }, 1000)
  },
  speakLeet() {
    console.log(`1337 15 4W350M3`)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A second way to fix this problem is to use the new ES6 arrow functions, which brings us to the next context.&lt;/p&gt;
&lt;h3 id=&quot;this-in-arrow-functions&quot;&gt;This in arrow functions&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; in an arrow function is always the same as &lt;code&gt;this&lt;/code&gt; around it (in its immediate scope). So, if you use arrow functions within an object method, the &lt;code&gt;this&lt;/code&gt; context stays as the object, not &lt;code&gt;Window&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With arrow functions, the &lt;code&gt;speakLeet&lt;/code&gt; example could be written in the following way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const o = {
  doSomethingLater () {
    setTimeout(() =&amp;gt; this.speakLeet(), 1000)
  },
  speakLeet() {
    console.log(`1337 15 4W350M3`)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(For more info on arrow functions, read &lt;a href=&quot;https://zellwk.com/blog/es6#arrow-functions&quot;&gt;this article&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A third way to change the value of &lt;code&gt;this&lt;/code&gt; within any function is to use either &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt;. We’ll look at &lt;code&gt;bind&lt;/code&gt; later in the article, and &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; another time. But first, let’s go through the final context — event listeners.&lt;/p&gt;
&lt;h3 id=&quot;this-in-event-listeners&quot;&gt;This in event listeners&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is set to the element that fired the event in an event listener:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let button = document.querySelector(&#39;button&#39;)

button.addEventListener(&#39;click&#39;, function() {
  console.log(this) // button
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When creating more complex components, you may find yourself creating event listeners within methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function LeetSpeaker (elem) {
  return {
    listenClick () {
      elem.addEventListener(&#39;click&#39;, function () {
        // Do something here
      })
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;this&lt;/code&gt; refers to the element in the event listener, if you need to activate another method, you need to provide a reference to the object with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function LeetSpeaker (elem) {
  return {
    listenClick () {
      const self = this
      elem.addEventListener(&#39;click&#39;, function () {
        self.speakLeet()
      })
    },
    speakLeet() { console.log(`1337 15 4W350M3`) }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can use an arrow function. If you do so, you can still get the element with &lt;code&gt;event.currentTarget&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function LeetSpeaker (elem) {
  return {
    listenClick () {
      elem.addEventListener(&#39;click&#39;, (e) =&amp;gt; {
        console.log(e.currentTarget) // elem
        this.speakLeet()
      })
    },
    speakLeet() { console.log(`1337 15 4W350M3`) }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But both methods aren’t good enough to help you remove event listeners when the need arises, both are anonymous functions.&lt;/p&gt;
&lt;p&gt;To remove an event listener, the callback passed as the second value needs to be a named function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function someFunction () {
  console.log(&#39;do something&#39;)

  // Removes the event listener.
  document.removeEventListener(&#39;click&#39;, someFunction)
}

document.addEventListener(&#39;click&#39;, someFunction)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Here’s &lt;a href=&quot;https://zellwk.com/blog/callbacks&quot;&gt;more on callbacks&lt;/a&gt; if you need help with them).&lt;/p&gt;
&lt;p&gt;If you need &lt;code&gt;this&lt;/code&gt; to reference the object in an event listener, you need to use &lt;code&gt;bind&lt;/code&gt; to manually create a &lt;code&gt;this&lt;/code&gt; context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function LeetSpeaker (elem) {
  return {
    listenClick () {
      this.listener = this.speakLeet.bind(this)
      elem.addEventListener(&#39;click&#39;, this.listener)
    },

    speakLeet(e) {
      const elem = e.currentTarget
      console.log(`1337 15 4W350M3`)
      elem.removeEventListener(&#39;click&#39;, this.listener)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above may confuse you if you’ve don’t understand &lt;code&gt;bind&lt;/code&gt;. So, before I show you what is happening, let’s take a detour and understand what &lt;code&gt;bind&lt;/code&gt; does.&lt;/p&gt;
&lt;h2 id=&quot;changing-this-with-bind&quot;&gt;Changing this with bind&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;bind&lt;/code&gt; is a method that is present in every function. It allows you to change the &lt;code&gt;this&lt;/code&gt; context. This method takes in any number of arguments and returns the bound function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayThis () {
  console.log(this)
}
const boundFunc = sayThis.bind(/* arguments...*/)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first parameter you pass into &lt;code&gt;bind&lt;/code&gt; becomes &lt;code&gt;this&lt;/code&gt; in the bound function. Once you have created a bound function, you can call it anytime you wish:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayThis () {
  console.log(this)
}
const boundFunc = sayThis.bind({hippy: &#39;hipster&#39;})
boundFunc()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/this/bound.png&quot; alt=&quot;Bind helps to change this&quot;&gt;
  &lt;figcaption&gt;Bind helps to change this&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The other parameters you pass to &lt;code&gt;bind&lt;/code&gt; will be passed as arguments to the original function&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayParams (...args) {
  console.log(...args)
}
const boundFunc = sayParams.bind(null, 1, 2, 3, 4, 5)
boundFunc()
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/this/boundargs.png&quot; alt=&quot;Other params passed to bind become arguments in the function&quot;&gt;
  &lt;figcaption&gt;Other params passed to bind become arguments in the function&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note: &lt;code&gt;bind&lt;/code&gt; doesn’t work with arrow functions.&lt;/p&gt;
&lt;p&gt;That’s really all you need to know about &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let’s look back at the code to remove event listeners and dissect what is happening:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function LeetSpeaker (elem) {
  return {
    listenClick () {
      // Binds this.speakLeet with a reference to the instance.
      // Sets bound function to this.listener, so we can remove it later.
      this.listener = this.speakLeet.bind(this)
      elem.addEventListener(&#39;click&#39;, this.listener)
    },

    speakLeet(e) {
      console.log(`1337 15 4W350M3`)

      // Gets the element so we can remove the event listener.
      const elem = e.currentTarget

      // Removes the event listener.
      elem.removeEventListener(&#39;click&#39;, this.listener)
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen for you to see the code in action.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;VWbQJe&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;SpeakLeetOnce?&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/VWbQJe/&quot;&gt;SpeakLeetOnce?&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And that’s all you need to know about &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s wrap up.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a crucial keyword in JavaScript. It appears in many JavaScript frameworks, so you have to know what it does.&lt;/p&gt;
&lt;p&gt;In this article, you learned about the six different contexts where &lt;code&gt;this&lt;/code&gt; takes on different values. You also learned how to change the &lt;code&gt;this&lt;/code&gt; context with functions like &lt;code&gt;bind&lt;/code&gt;. Additionally, you also learned to remove event listeners properly.&lt;/p&gt;
&lt;p&gt;That’s all you need to know about this. Just master the concepts taught in this article and you won’t ever get confused anymore.&lt;/p&gt;
&lt;p&gt;Before we end off the article, you may have heard people suggest you don’t use &lt;code&gt;this&lt;/code&gt; because it’s confusing. I implore you to you to consider reading &lt;a href=&quot;https://zellwk.com/blog/should-you-use-this/&quot;&gt;this article&lt;/a&gt;. It might change your view of learning JavaScript.&lt;/p&gt;
&lt;p&gt;If you have any questions, just hit me up in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Promises in JavaScript</title>
    <link href="https://zellwk.com/blog/js-promises/"/>
    <updated>2017-06-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-promises/</id>
    <content type="html">&lt;p&gt;Have you encountered promises in JavaScript and wondered what they are? Why are they called promises? Are they related to a promise you make to another person in any way?&lt;/p&gt;
&lt;p&gt;Furthermore, why do you use promises? What benefits do they have over traditional callbacks for asynchronous JavaScript operations?&lt;/p&gt;
&lt;p&gt;In this article, you’re going to learn all about JavaScript promises. You’ll understand what they are, how to use them and why they’re preferred over callbacks.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;so%2C-what-is-a-promise%3F&quot;&gt;So, what is a promise?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;promise&lt;/strong&gt; is an object that will &lt;em&gt;return a value in future&lt;/em&gt;. Because of this “in future” thing, Promises are well suited for asynchronous JavaScript operations.&lt;/p&gt;
&lt;p&gt;(If you’re unsure what asynchronous JavaScript means, you might not be ready for this article. I suggest you go through &lt;a href=&quot;https://zellwk.com/blog/callbacks&quot;&gt;this article on callbacks&lt;/a&gt; first before coming back here).&lt;/p&gt;
&lt;p&gt;The concept of a JavaScript promise is better explained through an analogy, so let’s do just that to help make the concept clearer.&lt;/p&gt;
&lt;p&gt;Imagine you’re preparing for a birthday party for your niece next week. As you speak about the party, you friend, Jeff, offered to help. Delighted, you asked him to buy a black forest birthday cake. Jeff said okay.&lt;/p&gt;
&lt;p&gt;Here, Jeff has given you his word that he’ll buy you a black forest birthday cake. It’s a promise. In JavaScript, a promise works the same way as a promise in real life. The JavaScript version of scenario can be written in the following way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// jeffBuysCake is a promise
const promise = jeffBuysCake(&#39;black forest&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(You’ll learn how to construct &lt;code&gt;jeffBuysCake&lt;/code&gt; later. For now, take it that its a promise).&lt;/p&gt;
&lt;p&gt;Right now, Jeff hasn’t acted on his promise yet. In JavaScript, we say the promise is &lt;code&gt;pending&lt;/code&gt;. You can verify this if you &lt;code&gt;console.log&lt;/code&gt; a promise object.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/promises/pending.png&quot; alt=&quot;Logging jeffBuysCake shows that the promise is pending.&quot;&gt;
  &lt;figcaption&gt;Logging jeffBuysCake shows that the promise is pending.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(When we construct &lt;code&gt;jeffBuysCake&lt;/code&gt; together later, you will be able to verify this console.log statement for yourself).&lt;/p&gt;
&lt;p&gt;You begin to plan your next steps after talking to Jeff. You realize that you can carry on the party as planned if Jeff keeps to his words and buys you a black forest cake in time for the party.&lt;/p&gt;
&lt;p&gt;If Jeff does buy the cake, we say the promise is &lt;code&gt;resolved&lt;/code&gt; in JavaScript. When a promise gets resolved, you do the next thing in a &lt;code&gt;.then&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jeffBuysCake(&#39;black forest&#39;)
  .then(partyAsPlanned) // Woohoo! 🎉🎉🎉
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But if Jeff doesn’t buy you the cake, you got to run to the bakery yourself. (Damn you, Jeff!). If this happens, we say the promise is &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When a promise gets rejected, you do your contingency plan in a &lt;code&gt;.catch&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jeffBuysCake(&#39;black forest&#39;)
  .then(partyAsPlanned)
  .catch(buyCakeYourself) // Grumble Grumble... #*$%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This, my friend, is an anatomy of a Promise.&lt;/p&gt;
&lt;p&gt;In JavaScript, we usually use promises to get or modify a piece of information. When the promise resolves, we do something with the data that comes back. When the promise rejects, we handle the error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;getSomethingWithPromise()
  .then(data =&amp;gt; {/* do something with data */})
  .catch(err =&amp;gt; {/* handle the error */})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you know how a promise work. Let’s dive in further and examine how to construct a promise.&lt;/p&gt;
&lt;h2 id=&quot;constructing-a-promise&quot;&gt;Constructing a promise&lt;/h2&gt;
&lt;p&gt;You can make a promise by using &lt;code&gt;new Promise&lt;/code&gt;. This Promise constructor takes in a function that contains two arguments — &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const promise = new Promise((resolve, reject) =&amp;gt; {
  /* Do something here */
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;resolve&lt;/code&gt; is called, the promise succeeds and continues into the &lt;code&gt;then&lt;/code&gt; chain. The parameter you pass into &lt;code&gt;resolve&lt;/code&gt; would be the argument in the next &lt;code&gt;then&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const promise = new Promise((resolve, reject) =&amp;gt; {
  // Note: only 1 param allowed
  return resolve(27)
})

// Parameter passed resolve would be the arguments passed into then.
promise.then(number =&amp;gt; console.log(number)) // 27
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;reject&lt;/code&gt; is called, the promise fails and continues into the &lt;code&gt;catch&lt;/code&gt; chain. Likewise, the parameter you pass into &lt;code&gt;reject&lt;/code&gt; would be the argument in the &lt;code&gt;catch&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const promise = new Promise((resolve, reject) =&amp;gt; {
  // Note: only 1 param allowed
  return reject(&#39;💩💩💩&#39;)
})

// Parameter passed into reject would be the arguments passed into catch.
promise.catch(err =&amp;gt; console.log(err)) // 💩💩💩
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Can you see that both resolve and reject are callbacks? 😉).&lt;/p&gt;
&lt;p&gt;Let’s practice a little and try to construct &lt;code&gt;jeffBuysCake&lt;/code&gt; promise.&lt;/p&gt;
&lt;p&gt;First of all, you know that Jeff says he’ll buy a cake. That’s a promise. So, let’s begin with an empty promise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const jeffBuysCake = cakeType =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // Do something here
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, Jeff says he’s going to buy the cake in a week. Let’s use a &lt;code&gt;setTimeout&lt;/code&gt; function to simulate this wait for seven days. Instead of seven days, we’ll wait for one second:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const jeffBuysCake = cakeType =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    setTimeout(()=&amp;gt; {
      // Checks if Jeff buys a black forest cake
    }, 1000)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If Jeff bought a black forest cake after one second, we return the promise and pass the black forest cake into &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If Jeff bought another type of cake, we reject the promise and say &lt;code&gt;no cake&lt;/code&gt;, which causes the promise to go into &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const jeffBuysCake = cakeType =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    setTimeout(()=&amp;gt; {
      if (cakeType
 === &#39;black forest&#39;) {
        resolve(&#39;black forest cake!&#39;)
      } else {
        reject(&#39;No cake 😢&#39;)
      }
    }, 1000)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s test this promise out. When you &lt;code&gt;console.log&lt;/code&gt; the promise below, you should see that the promise is pending. (The status would only be pending if you checked the console immediately. Feel free to extend the timeout to ten seconds if you need more time to check the console).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const promise = jeffBuysCake(&#39;black forest&#39;)
console.log(promise)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/promises/pending.png&quot; alt=&quot;Logging jeffBuysCake shows that the promise is pending.&quot;&gt;
  &lt;figcaption&gt;Logging jeffBuysCake shows that the promise is pending.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you add &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; into the promise chain, you’ll also see &lt;code&gt;black forest cake!&lt;/code&gt; or &lt;code&gt;no cake 😢&lt;/code&gt; depending on the type of cake you passed into &lt;code&gt;jeffBuysCake&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const promise = jeffBuysCake(&#39;black forest&#39;)
  .then(cake =&amp;gt; console.log(cake))
  .catch(nocake =&amp;gt; console.log(nocake))
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/promises/hascake.png&quot; alt=&quot;The console shows either black forest cake or no cake, depending on what you pass into jeffBuysCake.&quot;&gt;
  &lt;figcaption&gt;The console shows either black forest cake or no cake, depending on what you pass into jeffBuysCake.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Not too hard to make a promise, isn’t it? 😉.&lt;/p&gt;
&lt;p&gt;Since you know what is a promise, how to make one and how to use one, let’s answer the next question — why use a promise instead of a callback for asynchronous JavaScript?&lt;/p&gt;
&lt;h2 id=&quot;promises-vs.-callbacks&quot;&gt;Promises vs. Callbacks&lt;/h2&gt;
&lt;p&gt;There are three reasons why developers prefer promises over callbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Promises reduces the amount of nested code&lt;/li&gt;
&lt;li&gt;Promises allow you to visualize the execution flow easily&lt;/li&gt;
&lt;li&gt;Promises let you handle all errors at once at the end of the chain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To see these three benefits in action, let’s write some JavaScript code that does some asynchronous things with both callbacks and promises.&lt;/p&gt;
&lt;p&gt;For this process, imagine you’re running an online shop. You need to charge a customer whenever he buys something, then, you enter their information into your database. Lastly, you’ll send them an email:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Charge a customer&lt;/li&gt;
&lt;li&gt;Add customer to database&lt;/li&gt;
&lt;li&gt;Send email to customer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s break in down step by step. First of all, you need a way to get information from your frontend to your backend. Normally, you’d use a post request for these operations.&lt;/p&gt;
&lt;p&gt;If you use Express and Node, your initial code might look like the following. Don’t worry if you don’t know any Node or Express. They’re not the main part of the article. Just follow along:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// A little bit of NodeJS here. This is how you&#39;ll get data from the frontend through your API.
app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  // Charge customer here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through the first step with callback-based code first. Here, you want to charge a customer. If this charge is successful, you add their information to a database. If the charge fails, you throw an error, so your server can handle the error.&lt;/p&gt;
&lt;p&gt;The code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Callback based code
app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  // First operation: charge the customer
  chargeCustomer(customer, (err, charge) =&amp;gt; {
    if (err) throw err

    // Add to database here
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s switch to promise-based code. Likewise, you charge a customer. If the charge is successful, you add their information to the database with a &lt;code&gt;then&lt;/code&gt; call. If the charge fails, you handle it automatically within the &lt;code&gt;catch&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Promised based code
app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  // First operation: charge the customer
  chargeCustomer(customer)
    .then(/* Add to database */)
    .catch(err =&amp;gt; console.log(err))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moving on, you add your customer information to your database when the charge succeeds. If your database operation succeeds, you send an email to your customer. Otherwise, you throw an error.&lt;/p&gt;
&lt;p&gt;With these steps in mind, the callback-based code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Callback based code
app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  chargeCustomer(customer, (err, charge) =&amp;gt; {
    if (err) throw err

    // Second operation: Add to database
    addToDatabase(customer, (err, document) =&amp;gt; {
      if (err) throw err

      // Send email here
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the promised-based code, if your database operation succeeds, you send the email in the next &lt;code&gt;then&lt;/code&gt; call. If your database operation fails, the error automatically gets handled in the final &lt;code&gt;catch&lt;/code&gt; statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Promised based code
app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  chargeCustomer(customer)
    // Second operation: Add to database
    .then(_ =&amp;gt; addToDatabase(customer))
    .then(/* Send email */)
    .catch(err =&amp;gt; console.log(err))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moving on to the last step, you send an email to your customer when the database operation succeeds. If this emails is sent successfully, you notify your frontend with a success message. Otherwise, you throw an error:&lt;/p&gt;
&lt;p&gt;Here’s how the callback-based code looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  chargeCustomer(customer, (err, charge) =&amp;gt; {
    if (err) throw err

    addToDatabase(customer, (err, document) =&amp;gt; {
      if (err) throw err

      sendEmail(customer, (err, result) =&amp;gt; {
        if (err) throw err

        // Tells frontend success message.
        res.send(&#39;success!&#39;)
      })
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here’s how the promise-based code looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/buy-thing&#39;, (req, res) =&amp;gt; {
  const customer = req.body

  chargeCustomer(customer)
    .then(_ =&amp;gt; addToDatabase(customer))
    .then(_ =&amp;gt; sendEmail(customer) )
    .then(result =&amp;gt; res.send(&#39;success!&#39;)))
    .catch(err =&amp;gt; console.log(err))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See why it’s much easier to write asynchronous code with promises instead of callbacks? You switch from callback hell into the happy-chain-land 😂.&lt;/p&gt;
&lt;h2 id=&quot;firing-off-multiple-promises-at-once.&quot;&gt;Firing off multiple promises at once.&lt;/h2&gt;
&lt;p&gt;An additional benefit promises have over callbacks is that you can fire off two (or many) promises at the same time if the operations aren’t dependent on each other, but both results are needed to perform a third action.&lt;/p&gt;
&lt;p&gt;To do so, you use the &lt;code&gt;Promise.all&lt;/code&gt; method, then pass in an array of promises you’d like to wait for. Your &lt;code&gt;then&lt;/code&gt; argument would then be an array that contains the results from your promises:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const friesPromise = getFries()
const burgerPromise = getBurger()
const drinksPromise = getDrinks()

const eatMeal = Promise.all([
  friesPromise,
  burgerPromise,
  drinksPromise
])
  .then([fries, burger, drinks] =&amp;gt; {
    console.log(`Chomp. Awesome ${burger}! 🍔`)
    console.log(`Chomp. Delicious ${fries}! 🍟`)
    console.log(`Slurp. Ugh, shitty drink ${drink} 🤢 `)
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note: there’s also a method called &lt;code&gt;Promise.race&lt;/code&gt;, but I haven’t found a proper use case for it. You can check it out &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise/race&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Finally, let’s talk about browser support! Why learn promises if you can’t use it in production. Right?&lt;/p&gt;
&lt;h2 id=&quot;browser-support-for-promise&quot;&gt;Browser support for Promise&lt;/h2&gt;
&lt;p&gt;The awesome news is: &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot;&gt;promises are supported in all major browsers&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;If you need to support IE 11 and below, you can use &lt;a href=&quot;https://www.npmjs.com/package/promise-polyfill&quot;&gt;Promise Polyfill&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/TaylorHakes&quot;&gt;Taylor Hakes&lt;/a&gt;. It supports promises up to IE8! 😮.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;You learned all about promises in this article. In short, promises are rad. It helps you write asynchronous code without taking a step into callback hell.&lt;/p&gt;
&lt;p&gt;Although you probably want to use promises whenever you can, there are cases where callbacks makes sense too. Don’t forget about callbacks 😉.&lt;/p&gt;
&lt;p&gt;If you have a question, leave it in the comments below and I’ll get back to you as soon as I can.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Callbacks in JavaScript</title>
    <link href="https://zellwk.com/blog/callbacks/"/>
    <updated>2017-06-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/callbacks/</id>
    <content type="html">&lt;p&gt;Have you come across the term “callback” but don’t know what it means? Don’t worry, you’re not alone. Many newcomers to JavaScript find callbacks hard to understand too.&lt;/p&gt;
&lt;p&gt;Although callbacks can be confusing, you still need to learn them thoroughly as they form a critical concept in JavaScript. You can’t get very far without knowing callbacks 🙁.&lt;/p&gt;
&lt;p&gt;That’s what today’s article is for! You’ll learn what callbacks are, why they’re important, and how to use them. 😄&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;(Note: You’ll see ES6 arrow functions in this article. If you’re unfamiliar with them, I suggest checking out this &lt;a href=&quot;https://zellwk.com/blog/es6&quot;&gt;ES6 post&lt;/a&gt; before continuing. (Just read the arrow functions part)).&lt;/p&gt;
&lt;h2 id=&quot;what-are-callbacks%3F&quot;&gt;What are callbacks?&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;callback&lt;/strong&gt; is a &lt;em&gt;function&lt;/em&gt; that is &lt;em&gt;passed into another function&lt;/em&gt; as an &lt;em&gt;argument&lt;/em&gt; to be &lt;em&gt;executed later&lt;/em&gt;. (Developers say you “call” a function when you execute a function, which is why callbacks are named callbacks).&lt;/p&gt;
&lt;p&gt;They’re so common in JavaScript that you probably used callbacks yourself without knowing they’re called callbacks.&lt;/p&gt;
&lt;p&gt;One example of a function that accepts a callback is &lt;code&gt;addEventLisnter&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;button&#39;)
button.addEventListener(&#39;click&#39;, function(e) {
  // Adds clicked class to button
  this.classList.add(&#39;clicked&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don’t see why this is a callback? What about this then?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const button = document.querySelector(&#39;button&#39;)

// Function that adds &#39;clicked&#39; class to the element
function clicked (e) {
  this.classList.add(&#39;clicked&#39;)
}

// Adds click function as a callback to the event listener
button.addEventListener(&#39;click&#39;, clicked)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we told JavaScript to listen for the &lt;code&gt;click&lt;/code&gt; event on a button. If a click is detected, JavaScript should fire the &lt;code&gt;clicked&lt;/code&gt; function. So, in this case, &lt;code&gt;clicked&lt;/code&gt; is the callback while &lt;code&gt;addEventListener&lt;/code&gt; is a function that accepts a callback.&lt;/p&gt;
&lt;p&gt;See what a callback is now? :)&lt;/p&gt;
&lt;p&gt;Let’s go through another example. This time, let’s say you wanted to filter an array of numbers to get a list that’s less than five. Here, you pass a callback into the &lt;code&gt;filter&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [3, 4, 10, 20]
const lesserThanFive = numbers.filter(num =&amp;gt; num &amp;lt; 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you do the above code with named functions, filtering the array would look like this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [3, 4, 10, 20]
const getLessThanFive = num =&amp;gt; num &amp;lt; 5

// Passing getLessThanFive function into filter
const lesserThanFive = numbers.filter(getLessThanFive)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;code&gt;getLessThanFive&lt;/code&gt; is the callback. &lt;code&gt;Array.filter&lt;/code&gt; is a function that accepts a callback function.&lt;/p&gt;
&lt;p&gt;See why now? Callbacks are everywhere once you know what they are!&lt;/p&gt;
&lt;p&gt;The example below shows you how to write a callback function and a callback-accepting function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Create a function that accepts another function as an argument
const callbackAcceptingFunction = (fn) =&amp;gt; {
  // Calls the function with any required arguments
  return fn(1, 2, 3)
}

// Callback gets arguments from the above call
const callback = (arg1, arg2, arg3) =&amp;gt; {
  return arg1 + arg2 + arg3
}

// Passing a callback into a callback accepting function
const result = callbackAcceptingFunction(callback)
console.log(result) // 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that, when you pass a callback into another function, you only pass the reference to the function (without executing it, thus without the parenthesis &lt;code&gt;()&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const result = callbackAcceptingFunction(callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You only invoke (call) the callback in the &lt;code&gt;callbackAcceptingFunction&lt;/code&gt;. When you do so, you can pass any number of arguments that the callback may require:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const callbackAcceptingFunction = (fn) =&amp;gt; {
  // Calls the callback with three args
  fn(1, 2, 3)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These arguments passed into callbacks by the &lt;code&gt;callbackAcceptingFunction&lt;/code&gt; then makes their way through the callback:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Callback gets arguments from callbackAcceptingFunction
const callback = (arg1, arg2, arg3) =&amp;gt; {
  return arg1 + arg2 + arg3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s the anatomy of a callback. Now, you know &lt;code&gt;addEventListener&lt;/code&gt; contains an &lt;code&gt;event&lt;/code&gt; argument. :)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Now you know where this event object comes from! :)
button.addEventListener(&#39;click&#39;, (event) =&amp;gt; {
  event.preventDefault()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew! That’s the basic idea for callbacks! Just remember the keyword: &lt;strong&gt;passing a function into another function&lt;/strong&gt; and you’ll recall the mechanics I mentioned above.&lt;/p&gt;
&lt;p&gt;(Side note: This ability to pass functions around is a big thing. It’s so big that functions in JavaScript are considered &lt;em&gt;higher order functions&lt;/em&gt;. Higher order functions are also a big thing in a programming paradigm called Functional Programming).&lt;/p&gt;
&lt;p&gt;But that’s a topic for another day. Now, I’m sure you’re beginning to see what callbacks are and how they’re used. But why? Why do you need callbacks?&lt;/p&gt;
&lt;h2 id=&quot;why-use-callbacks%3F&quot;&gt;Why use callbacks?&lt;/h2&gt;
&lt;p&gt;Callbacks are used in two different ways — in &lt;em&gt;synchronous&lt;/em&gt; functions and &lt;em&gt;asynchronous&lt;/em&gt; functions.&lt;/p&gt;
&lt;h3 id=&quot;callbacks-in-synchronous-functions&quot;&gt;Callbacks in synchronous functions&lt;/h3&gt;
&lt;p&gt;If your code executes in a &lt;em&gt;top to bottom&lt;/em&gt;, &lt;em&gt;left to right&lt;/em&gt; fashion, &lt;em&gt;sequentially&lt;/em&gt;, and &lt;em&gt;waiting&lt;/em&gt; until one code has &lt;em&gt;finished&lt;/em&gt; before the next line begins, then your code is &lt;strong&gt;synchronous&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at an example to make it easier to understand:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const addOne = (n) =&amp;gt; n + 1
addOne(1) // 2
addOne(2) // 3
addOne(3) // 4
addOne(4) // 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, &lt;code&gt;addOne(1)&lt;/code&gt; executes first. Once it’s done, &lt;code&gt;addOne(2)&lt;/code&gt; begins to execute. Once &lt;code&gt;addOne(2)&lt;/code&gt; is done, &lt;code&gt;addOne(3)&lt;/code&gt; executes. This process goes on until the last line of code gets executed.&lt;/p&gt;
&lt;p&gt;Callbacks are used in &lt;strong&gt;synchronous&lt;/strong&gt; functions when you want a part of the code to be &lt;em&gt;easily swapped&lt;/em&gt; with something else.&lt;/p&gt;
&lt;p&gt;So, back in the &lt;code&gt;Array.filter&lt;/code&gt; example above, although we filtered the array to contain numbers that are less than five, you could easily reuse &lt;code&gt;Array.filter&lt;/code&gt; to obtain an array of numbers that are greater than ten:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [3, 4, 10, 20]
const getLessThanFive = num =&amp;gt; num &amp;lt; 5
const getMoreThanTen = num =&amp;gt; num &amp;gt; 10

// Passing getLessThanFive function into filter
const lesserThanFive = numbers.filter(getLessThanFive)

// Passing getMoreThanTen function into filter
const moreThanTen = numbers.filter(getMoreThanTen)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is why you’d use callbacks in a synchronous function. Now, let’s move on and look at why we use callbacks in asynchronous functions.&lt;/p&gt;
&lt;div class=&quot;jsCkClone&quot;&gt;&lt;/div&gt;
&lt;h3 id=&quot;callbacks-in-asynchronous-functions&quot;&gt;Callbacks in asynchronous functions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt; here means that, if JavaScript needs to wait for something to complete, it will &lt;em&gt;execute the rest&lt;/em&gt; of the tasks given to it &lt;em&gt;while waiting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An example of an asynchronous function is &lt;code&gt;setTimeout&lt;/code&gt;. It takes in a callback function to execute at a later time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Calls the callback after 1 second
setTimeout(callback, 1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see how &lt;code&gt;setTimeout&lt;/code&gt; works if you give JavaScript another task to complete:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const tenSecondsLater = _ = &amp;gt; console.log(&#39;10 seconds passed!&#39;)

setTimeout(tenSecondsLater, 10000)
console.log(&#39;Start!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the code above, JavaScript executes &lt;code&gt;setTimeout&lt;/code&gt;. Then, it waits for ten second and logs “10 seconds passed!”.&lt;/p&gt;
&lt;p&gt;Meanwhile, while waiting for &lt;code&gt;setTimeout&lt;/code&gt; to complete in 10 seconds, JavaScript executes &lt;code&gt;console.log(&amp;quot;Start!&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, this is what you’ll see if you log the above code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// What happens:
// &amp;gt; Start! (almost immediately)
// &amp;gt; 10 seconds passed! (after ten seconds)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh. Asynchronous operations sound complicated, aren’t they? But why do we use them everywhere in JavaScript?&lt;/p&gt;
&lt;p&gt;To see why asynchronous operations are important, imagine JavaScript is a robot helper you have in your house. This helper is pretty dumb. It can only do one thing at a time. (This behavior is called &lt;em&gt;single-threaded&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Let’s say you tell the robot helper to order some pizza for you. But, the robot is so dumb, that after calling the pizza house, the robots sits at your front door and waits for the pizza to be delivered. It can’t do anything else in the meantime.&lt;/p&gt;
&lt;p&gt;You can’t get it to iron clothes, mop the floor, or do anything while it’s waiting. You need to wait 20 minutes till the pizza arrives before it’s willing to do anything else…&lt;/p&gt;
&lt;p&gt;(This behavior is called &lt;em&gt;blocking&lt;/em&gt;. Other operations are blocked when you wait for something to complete).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const orderPizza = flavour =&amp;gt; {
  callPizzaShop(`I want a ${flavour} pizza`)
  waits20minsForPizzaToCome() // Nothing else can happen here
  bringPizzaToYou()
}

orderPizza(&#39;Hawaiian&#39;)

// These two only starts after orderPizza is completed
mopFloor()
ironClothes()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, blocking operations are a bummer. 🙁.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Let’s put the dumb robot helper into the context of a browser. Imagine you tell it to change the color of a button when the button is clicked.&lt;/p&gt;
&lt;p&gt;What would this dumb robot do?&lt;/p&gt;
&lt;p&gt;It stares intently at the button, ignoring every other command that comes, until the button gets clicked. Meanwhile, the user can’t select anything else. See where it goes now? That’s why asynchronous programming is such a big thing in JavaScript.&lt;/p&gt;
&lt;p&gt;But to really understand what’s happening during asynchronous operations, we need to bring in another thing – the event loop.&lt;/p&gt;
&lt;h3 id=&quot;the-event-loop&quot;&gt;The event loop&lt;/h3&gt;
&lt;p&gt;To envision the event loop, imagine JavaScript is a butler that carries around a &lt;strong&gt;todo-list&lt;/strong&gt;. This list contains everything you told it to do. JavaScript will then go through the list, one by one, in the order you gave it.&lt;/p&gt;
&lt;p&gt;Let’s say you give JavaScript five commands as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const addOne = (n) =&amp;gt; n + 1

addOne(1) // 2
addOne(2) // 3
addOne(3) // 4
addOne(4) // 5
addOne(5) // 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is what would appear on JavaScript’s todo-list.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/todo.png&quot; alt=&quot;Commands appear synchronously on JavaScript&#39;s todo list&quot;&gt;
  &lt;figcaption&gt;Commands appear synchronously on JavaScript&#39;s todo list&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In addition to a todo-list, JavaScript also keeps a &lt;strong&gt;waiting-list&lt;/strong&gt; where it tracks things it needs to wait for. If you tell JavaScript to order a pizza, it will call the pizza shop and adds “wait for pizza to arrive” in the waiting list. Meanwhile, it does other things that are already on the todo-list.&lt;/p&gt;
&lt;p&gt;So, imagine you have this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const orderPizza (flavor, callback) {
  callPizzaShop(`I want a ${flavor} pizza`)

  // Note: these three lines is pseudo code, not actual JavaScript
  whenPizzaComesBack {
    callback()
  }
}

const layTheTable = _ =&amp;gt; console.log(&#39;laying the table&#39;)

orderPizza(&#39;Hawaiian&#39;, layTheTable)
mopFloor()
ironClothes()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript’s initial todo-list would be:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/todo2.png&quot; alt=&quot;JavaScript&#39;s todo list&quot;&gt;
  &lt;figcaption&gt;Order pizza, mop floor and iron clothes! 😄&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then, while going through &lt;code&gt;orderPizza&lt;/code&gt;, JavaScript knows it needs to wait for the pizza to arrive. So, it adds “waiting for pizza to arrive” to its waiting list while it tackles the rest of its jobs.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/waiting.png&quot; alt=&quot;JavaScript waits for pizza to arrive&quot;&gt;
  &lt;figcaption&gt;JavaScript waits for pizza to arrive&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When the pizza arrives, JavaScript gets notified by the doorbell and it makes a &lt;strong&gt;mental note&lt;/strong&gt; to execute &lt;code&gt;layTheTable&lt;/code&gt; when it’s done with the other chores&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/mental-note.png&quot; alt=&quot;JavaScript knows it needs to execute layTheTable by adding the command to its mental note&quot;&gt;
  &lt;figcaption&gt;JavaScript knows it needs to execute layTheTable by adding the command to its mental note&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then, once it’s done with the other chores, JavaScript executes the callback function, &lt;code&gt;layTheTable&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/lay-table.png&quot; alt=&quot;JavaScript lays the table when everything else is completed&quot;&gt;
  &lt;figcaption&gt;JavaScript lays the table when everything else is completed&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This, my friend, is called the Event Loop. You can substitute our butler analogy with actual keywords in the Event loop to understand everything:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Todo-list&lt;/strong&gt; -&amp;gt; Call stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waiting-list&lt;/strong&gt; -&amp;gt; Web apis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mental note&lt;/strong&gt; -&amp;gt; Event queue&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/callbacks/event-loop.png&quot; alt=&quot;JavaScript&#39;s event loop&quot;&gt;
  &lt;figcaption&gt;JavaScript&#39;s event loop&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I highly recommend you watch &lt;a href=&quot;https://twitter.com/philip_roberts&quot;&gt;Philip Roberts&lt;/a&gt; JSConf talk about event loops if you got 20 mins to spare. It’ll help you understand the nitty gritty of event loops.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;uhh%E2%80%A6-so%2C-why-are-callbacks-important-again%3F&quot;&gt;Uhh… So, why are callbacks important again?&lt;/h2&gt;
&lt;p&gt;Ooh. We went a big round into event loops. Let’s come back 😂.&lt;/p&gt;
&lt;p&gt;Previously, we mentioned that it would be bad if JavaScript stares intently at a button and ignores all other commands. Yes?&lt;/p&gt;
&lt;p&gt;With asynchronous callbacks, we can &lt;strong&gt;give JavaScript instructions in advance without stopping the entire operation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, when you ask JavaScript to watch a button for a click, it puts the “watch button” into the waiting-list and goes on with its chores. When the button finally gets a click, JavaScript activates the callback, then goes on with life.&lt;/p&gt;
&lt;p&gt;Here are some common uses of callbacks to tell JavaScript what to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When an event fires (like &lt;code&gt;addEventListener&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;After AJAX calls (like &lt;code&gt;jQuery.ajax&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;After reading or writing to files (like &lt;code&gt;fs.readFile&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Callbacks in event listeners
document.addEventListener(button, highlightTheButton)
document.removeEventListener(button, highlightTheButton)

// Callbacks in jQuery&#39;s ajax method
$.ajax(&#39;some-url&#39;, {
  success (data) { /* success callback */ },
  error (err) { /* error callback */}
});

// Callbacks in Node
fs.readFile(&#39;pathToDirectory&#39;, (err, data) =&amp;gt; {
  if (err) throw err
  console.log(data)
})

// Callbacks in ExpressJS
app.get(&#39;/&#39;, (req, res) =&amp;gt; res.sendFile(index.html))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s callbacks! 😄&lt;/p&gt;
&lt;p&gt;Hopefully, you’re clear what callbacks are for and how to use them now. You won’t create a lot of callbacks yourself in the beginning, so focus on learning how to use the available ones.&lt;/p&gt;
&lt;p&gt;Now, before we wrap up, let’s look at the #1 problem developers have with callbacks: callback hell.&lt;/p&gt;
&lt;h2 id=&quot;callback-hell&quot;&gt;Callback hell&lt;/h2&gt;
&lt;p&gt;Callback hell is a phenomenon where multiple callbacks are nested after each other. It can happen when you do an asynchronous activity that’s dependent on a previous asynchronous activity. These nested callbacks make code much harder to read.&lt;/p&gt;
&lt;p&gt;In my experience, you’ll only see callback hell in Node. You’ll almost never encounter callback hell when working in on frontend JavaScript.&lt;/p&gt;
&lt;p&gt;Here’s an example of callback hell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Look at three layers of callback in this code!
app.get(&#39;/&#39;, function (req, res) {
  Users.findOne({ _id:req.body.id }, function (err, user) {
    if (user) {
      user.update({/* params to update */}, function (err, document) {
        res.json({user: document})
      })
    } else {
      user.create(req.body, function(err, document) {
        res.json({user: document})
      })
    }
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now, a challenge for you: try to decipher the code above at a glance. Pretty hard, isn’t it? No wonder developers shudder at the sight of nested callbacks.&lt;/p&gt;
&lt;p&gt;One solution to overcome callback hell is to break the callback functions into smaller pieces to reduce the amount of nested code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const updateUser = (req, res) =&amp;gt; {
  user.update({/* params to update */}, function () {
    if (err) throw err;
    return res.json(user)
  })
}

const createUser = (req, res, err, user) =&amp;gt; {
  user.create(req.body, function(err, user) {
    res.json(user)
  })
}

app.get(&#39;/&#39;, function (req, res) {
  Users.findOne({ _id:req.body.id }, (err, user) =&amp;gt; {
    if (err) throw err
    if (user) {
      updateUser(req, res)
    } else {
      createUser(req, res)
    }
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much easier to read, isn’t it?&lt;/p&gt;
&lt;p&gt;There are other solutions to combat callback hell in newer versions of JavaScript like promises and async/await. But well, explaining them would be a topic for another day too.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Today, you learned what callbacks are, why they’re so important in JavaScript and how to use them. You also learned about callback hell and a way to combat against it. Hopefully, callbacks no longer scare you now 😉.&lt;/p&gt;
&lt;p&gt;Do you still have any questions about callbacks? Feel free to leave a comment down below if you do and I’ll get back to you as soon as I can.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to set up your development environment to learn JavaScript</title>
    <link href="https://zellwk.com/blog/js-env/"/>
    <updated>2017-05-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-env/</id>
    <content type="html">&lt;p&gt;Have you encountered any of these three problems when learning JavaScript?&lt;/p&gt;
&lt;p&gt;You get confused with the JavaScript syntax. It’s unfamiliar to you. There are so many variations you don’t even know what is what.&lt;/p&gt;
&lt;p&gt;You keep getting errors whenever you write JavaScript because of stupid typo mistakes.&lt;/p&gt;
&lt;p&gt;You cannot remember what methods are available. You need to search google even for something as simple as &lt;code&gt;addEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’d love today’s article if you had these problems. I’ll show you how to tackle them all in one swoop by setting up your development environment.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;make-syntax-easy-with-a-syntax-highlighter&quot;&gt;Make syntax easy with a syntax highlighter&lt;/h2&gt;
&lt;p&gt;A syntax highlighter is a tool that differentiates keywords and types of content through colors.&lt;/p&gt;
&lt;p&gt;Here’s an example of a text that’s not highlighted:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/no-highlight.png&quot; alt=&quot;Code that&#39;s not highlighted&quot;&gt;
  &lt;figcaption&gt;Code that&#39;s not highlighted&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Compare this version with one that’s highlighted:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/highlight.png&quot; alt=&quot;Highlighted code is easier to read&quot;&gt;
  &lt;figcaption&gt;Highlighted code is easier to read&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Which is easier to read?&lt;/p&gt;
&lt;p&gt;At first, syntax highlighting may throw you off. You may not get used to the dizzying number of colors. But once you get used to it, syntax highlighting helps you make lesser mistakes.&lt;/p&gt;
&lt;p&gt;For example, I know at a glance that &lt;code&gt;const&lt;/code&gt; is a keyword since it’s &lt;em&gt;purple&lt;/em&gt; in color, &lt;code&gt;sayText&lt;/code&gt; is a function since it’s &lt;em&gt;blue&lt;/em&gt; in color, and &lt;code&gt;Hello world&lt;/code&gt; is a string since it’s &lt;em&gt;green&lt;/em&gt; in color.&lt;/p&gt;
&lt;p&gt;So, &lt;strong&gt;your first step&lt;/strong&gt; to learning JavaScript is to &lt;strong&gt;pick a code editor&lt;/strong&gt; that supports decent JavaScript syntax highlighting. If you’re unsure what to go for, I highly recommend either &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; or &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One more thing. You can customize the theme your text editor comes with. There are many popular themes out there, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Monokai&lt;/li&gt;
&lt;li&gt;Tomorrow&lt;/li&gt;
&lt;li&gt;Cobalt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’re thinking about choosing a theme, remember that no theme is better than others. Different people have different sensitivity to colors and would hence prefer different themes.&lt;/p&gt;
&lt;p&gt;For instance, &lt;a href=&quot;http://wesbos.com/&quot;&gt;Wes Bos&lt;/a&gt;, a developer I actively follow and respect, uses &lt;em&gt;Cobalt&lt;/em&gt;. On the other hand, I’ll go bonkers if I used &lt;em&gt;Cobalt&lt;/em&gt;. So far, the best theme I found for myself is &lt;em&gt;Tomorrow night eighties&lt;/em&gt;. That’s what I used for my code editor (Sublime Text) and the code snippets on this blog.&lt;/p&gt;
&lt;p&gt;The key idea here is to get syntax highlighting setup. Don’t worry about choosing a theme if it stresses you out.&lt;/p&gt;
&lt;p&gt;Next, I’m going to show you how to install a theme with Sublime Text. (If you use Atom, google for similar instructions out there).&lt;/p&gt;
&lt;h3 id=&quot;installing-a-theme-with-sublime-text&quot;&gt;Installing a theme with sublime text&lt;/h3&gt;
&lt;p&gt;The easiest way to install anything in Sublime Text is to first install &lt;a href=&quot;https://packagecontrol.io/&quot;&gt;Package Control&lt;/a&gt;. Package Control is a Sublime Text plugin that helps you find and install Sublime plugins easily.&lt;/p&gt;
&lt;p&gt;To install Package Control, you need to go to &lt;code&gt;view &amp;gt; console&lt;/code&gt; and paste the following code in (if you use Sublime Text 3).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import urllib.request,os,hashlib; h = &#39;df21e130d211cfc94d9b0905775a7c0f&#39; + &#39;1e3d39e33b79698005270310898eea76&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the above code doesn’t work for some reason, you can refer to &lt;a href=&quot;https://packagecontrol.io/installation#st3&quot;&gt;Package Control’s installation page&lt;/a&gt; for up-to-date details.&lt;/p&gt;
&lt;p&gt;Note: It’s super worth it to install Package Control, because you’ll be using it to install almost everything you use with Sublime Text.&lt;/p&gt;
&lt;p&gt;Moving on, here are the steps to install a theme with Sublime Text:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bring up Package Control by typing &lt;code&gt;cmd + shift + p&lt;/code&gt;. (For windows users, I believe it’s &lt;code&gt;ctrl + shift + p&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Type install package&lt;/li&gt;
&lt;li&gt;Type the theme you want to install&lt;/li&gt;
&lt;li&gt;Select the theme from &lt;code&gt;Sublime Text &amp;gt; Preferences &amp;gt; Color Scheme &amp;gt; your theme&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s a little video to help you through the steps. (Note: I typed &lt;code&gt;cmd + shift + L&lt;/code&gt; in the video below because I used the Dvorak keyboard with Qwerty shorcuts).&lt;/p&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/219461142&quot; width=&quot;640&quot; height=&quot;400&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Next, let’s make your text editor better by setting up a linter to catch typos.&lt;/p&gt;
&lt;h2 id=&quot;catch-typos-with-a-linter&quot;&gt;Catch typos with a linter&lt;/h2&gt;
&lt;p&gt;A linter is a tool that tells you if certain parts of your code looks wrong. For example, the linter would let you know immediately if you missed a closing parenthesis in your code. It helps you catch errors before they make it to the browser.&lt;/p&gt;
&lt;p&gt;Here’s an example of a linter at work:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/lint.png&quot; alt=&quot;The linter shows something is wrong with my code&quot;&gt;
  &lt;figcaption&gt;The linter shows something is wrong with my code&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Once you’ve your linter to work properly, you can even tell it to highlight areas where code formatting can be improved.&lt;/p&gt;
&lt;p&gt;For example, in the picture below, I have setup the linter tell me when the code indentation is off, and when there are too many spaces before a closing parenthesis.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/lint-format.png&quot; alt=&quot;Linters can point out formatting errors in your code&quot;&gt;
  &lt;figcaption&gt;Linters can point out formatting errors in your code&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are many linters in the history of JavaScript. The most popular one right now is &lt;a href=&quot;http://eslint.org/&quot;&gt;ES Lint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re totally new to ES Lint, just looking at the configuration options can be overwhelming. You can pick and choose from over 200 &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;rules&lt;/a&gt; 😱.&lt;/p&gt;
&lt;p&gt;So instead of going with ESLint and choosing rules yourself, I highly recommend you use a widely-used style guide like &lt;a href=&quot;https://www.npmjs.com/package/standard&quot;&gt;Standard&lt;/a&gt;. In fact, Standard is so popular right now that it’s really easy to set up Standard with your text editor.&lt;/p&gt;
&lt;p&gt;(You can also choose from multiple other &lt;a href=&quot;http://eslint.org/docs/user-guide/migrating-from-jscs#converting-presets&quot;&gt;style guides&lt;/a&gt; with ESLint if you desire).&lt;/p&gt;
&lt;h3 id=&quot;setting-up-a-standard-in-sublime-text&quot;&gt;Setting up a standard in sublime text&lt;/h3&gt;
&lt;p&gt;To set up Standard with Sublime Text, you need to have Node installed. If you haven’t done so already, the easiest way is to download the installer from &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;this page&lt;/a&gt; and run it.&lt;/p&gt;
&lt;p&gt;Once you’re done with installing Node, fire up your Terminal and run the following command. It installs Standard into your system through Node’s package manager, npm:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Installs Standard with npm
$ sudo npm -g install standard
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note: sudo is only required for Mac users).&lt;/p&gt;
&lt;p&gt;Once you have standard installed, go ahead and install &lt;a href=&quot;http://www.sublimelinter.com/&quot;&gt;SublimeLinter&lt;/a&gt; and &lt;a href=&quot;https://github.com/Flet/SublimeLinter-contrib-standard&quot;&gt;SublimeLinter-contrib-standard&lt;/a&gt; from Sublime Text’s Package Control.&lt;/p&gt;
&lt;p&gt;You may have to restart Sublime Text after installing the linters, but you should be able rewarded with a linted error whenever you make a mistake now :)&lt;/p&gt;
&lt;p&gt;By the way, here’s one good news if you’re on a newer version of Sublime Text 3. You can hover over any error and you’ll see what’s wrong immediately:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/lint-hover.png&quot; alt=&quot;You can hover on linted areas to see what&#39;s wrong&quot;&gt;
  &lt;figcaption&gt;You can hover on linted areas to see what&#39;s wrong&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;fixing-formatting-issues-automatically&quot;&gt;Fixing formatting issues automatically&lt;/h3&gt;
&lt;p&gt;Now, wouldn’t it be nice if Sublime Text could help you fix code formatting issues like indentation automatically?&lt;/p&gt;
&lt;p&gt;Good news: it can! You just have to install &lt;a href=&quot;https://packagecontrol.io/packages/StandardFormat&quot;&gt;Standard Format&lt;/a&gt; through the package control.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/lint-formatting.gif&quot; alt=&quot;Autoformatting syntax issues with Standard Format&quot;&gt;
  &lt;figcaption&gt;Autoformatting syntax issues with Standard Format&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, let’s move on to the final issue: remembering methods easily.&lt;/p&gt;
&lt;h2 id=&quot;remember-methods-easily-with-snippets&quot;&gt;Remember methods easily with snippets&lt;/h2&gt;
&lt;p&gt;The human memory works in a simple way – the more you see or use something, the more you’ll remember it. So, the quickest solution to remembering what you can do with JavaScript is to use more JavaScript. 😎&lt;/p&gt;
&lt;p&gt;But typing JavaScript isn’t the problem here. What if you could only remember part of a method, but not the other half? You’d probably have to google for the method, which is 💩.&lt;/p&gt;
&lt;p&gt;Let’s say you wanted to add an event listener to an element. The correct method is &lt;code&gt;addEventListener&lt;/code&gt;. Unfortunately, you could only remember the terms &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;listener&lt;/code&gt; 😞.&lt;/p&gt;
&lt;p&gt;The good news is, snippets are here to the rescue. In this below example, I’ve only entered &lt;code&gt;addl&lt;/code&gt; (part of typing add listener) and &lt;code&gt;addEventListener&lt;/code&gt; pops out!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/jsenv/snippets.png&quot; alt=&quot;Snippets can help recall methods and also write faster&quot;&gt;
  &lt;figcaption&gt;Snippets can help recall methods and also write faster&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Yay :)&lt;/p&gt;
&lt;p&gt;You snippet I used above is called &lt;a href=&quot;https://packagecontrol.io/packages/JavaScript%20Completions&quot;&gt;JavaScript Completions&lt;/a&gt;. You can install it through Sublime Text’s package control. (Note: this package doesn’t contain 100% of all available methods, but its much better than have no snippets at all :))&lt;/p&gt;
&lt;p&gt;If you run into a situation where no packages out there contains snippets of a piece of code you consistently write, it may be beneficial for you to create your own snippet. But I’ll leave that for another day.&lt;/p&gt;
&lt;p&gt;(Finally, when you get better at coding, you might want to consider Wes Bos’s book on &lt;a href=&quot;https://sublimetextbook.com/&quot;&gt;Sublime Text&lt;/a&gt; to help you 🚀 your coding efficiency).&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Learning JavaScript isn’t going to be as hard as you think it is from now on. You’ve already set up necessary measures to help you cope with stupid typos and errors that may slip out of your fingers. So, here’s to you becoming better at JavaScript 🍺.&lt;/p&gt;
&lt;p&gt;What did you think of this article? Did it help? I’d love to hear your comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The rules of responsive web typography</title>
    <link href="https://zellwk.com/blog/https:/www.creativebloq.com/how-to/the-rules-of-responsive-web-typography/"/>
    <updated>2017-05-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.creativebloq.com/how-to/the-rules-of-responsive-web-typography/</id>
    <content type="html">&lt;p&gt;All the principles and systems you need to know to take the mystery out of responsive web typography.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Introduction to commonly used ES6 features</title>
    <link href="https://zellwk.com/blog/es6/"/>
    <updated>2017-05-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/es6/</id>
    <content type="html">&lt;p&gt;JavaScript has progressed a ton in the recent years. If you’re learning JavaScript in 2017 and you haven’t touched ES6, you’re missing out on an easier way to read and write JavaScript.&lt;/p&gt;
&lt;p&gt;Don’t worry if you’re not a master at JavaScript yet. You don’t need to be awesome at JavaScript to take advantage of the added bonuses ES6 gives you. In this article, I want to share with you eight ES6 features I use daily as a developer to help you ease into the new syntax.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;a-list-of-es6-features&quot;&gt;A list of ES6 features&lt;/h2&gt;
&lt;p&gt;First off, ES6 is a huge update to JavaScript. Here’s a &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;big list of features&lt;/a&gt; if you’re curious about what’s new, thanks to &lt;a href=&quot;https://twitter.com/lukehoban?lang=en&quot;&gt;Luke Hoban&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrows&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Enhanced object literals&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;li&gt;Default + rest + spread&lt;/li&gt;
&lt;li&gt;Let + const&lt;/li&gt;
&lt;li&gt;Iterators + for…of&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;li&gt;Unicode&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;Module loaders&lt;/li&gt;
&lt;li&gt;Map + set + weakmap + weakset&lt;/li&gt;
&lt;li&gt;Proxies&lt;/li&gt;
&lt;li&gt;Symbols&lt;/li&gt;
&lt;li&gt;Subclassable built-ins&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Math + number + string + array + object apis&lt;/li&gt;
&lt;li&gt;Binary and octal literals&lt;/li&gt;
&lt;li&gt;Reflect api&lt;/li&gt;
&lt;li&gt;Tail calls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t let this big list of features scare you away from ES6. You don’t need to know everything right away. I’m going to share with you eight of these features that I use on a daily basis. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#let-and-const&quot;&gt;Let and const&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#arrow-functions&quot;&gt;Arrow functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#default-parameters&quot;&gt;Default parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#destructuring&quot;&gt;Destructuring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-rest-parameter-and-spread-operator&quot;&gt;Rest parameter and spread operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#enhanced-object-literals&quot;&gt;Enhanced object literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#template-literals&quot;&gt;Template literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/js-promises&quot;&gt;Promises&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll go through the eight features in the follow sections. For now, I’ll go through the first five features. I’ll add the rest as I go along in the next couple of weeks.&lt;/p&gt;
&lt;p&gt;By the way, browser support for ES6 is amazing. &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot;&gt;Almost everything is supported natively&lt;/a&gt; if you code for the latest browsers (Edge, and latest versions of FF, Chrome and Safari).&lt;/p&gt;
&lt;p&gt;You don’t need fancy tooling like Webpack if you wanted to write ES6. If browser support is lacking in your case, you can always fall back on polyfills created by the community. Just google them :)&lt;/p&gt;
&lt;p&gt;With that, let’s jump into the first feature.&lt;/p&gt;
&lt;h2 id=&quot;let-and-const&quot;&gt;Let and const&lt;/h2&gt;
&lt;p&gt;In ES5 (the old JavaScript), we’re used to declaring variables with the &lt;code&gt;var&lt;/code&gt; keyword. In ES6, this &lt;code&gt;var&lt;/code&gt; keyword can be replaced by &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;, two powerful keywords that make developing simpler.&lt;/p&gt;
&lt;p&gt;Let’s first look at the difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; to understand why &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are better.&lt;/p&gt;
&lt;h3 id=&quot;let-vs-var&quot;&gt;Let vs var&lt;/h3&gt;
&lt;p&gt;Let’s talk about &lt;code&gt;var&lt;/code&gt; first since we’re familiar with it.&lt;/p&gt;
&lt;p&gt;First of all, we can declare variables with the &lt;code&gt;var&lt;/code&gt; keyword. Once declared, this variable can be used anywhere in the current scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var me = &#39;Zell&#39;
console.log(me) // Zell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, I’ve declared &lt;code&gt;me&lt;/code&gt; as a global variable. This global &lt;code&gt;me&lt;/code&gt; variable can also be used in a function, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var me = &#39;Zell&#39;
function sayMe () {
  console.log(me)
}

sayMe() // Zell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, the reverse is not true. If I declare a variable in a function, I cannot use it outside the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayMe() {
  var me = &#39;Zell&#39;
  console.log(me)
}

sayMe() // Zell
console.log(me) // Uncaught ReferenceError: me is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, we can say that &lt;code&gt;var&lt;/code&gt; is &lt;strong&gt;function-scoped&lt;/strong&gt;. This means whenever a variable is created with &lt;code&gt;var&lt;/code&gt; in a function, &lt;strong&gt;it will only exist within the function&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If the variable is created outside of the function, it’ll exist in the outer scope.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var me = &#39;Zell&#39; // global scope

function sayMe () {
  var me = &#39;Sleepy head&#39; // local scope
  console.log(me)
}

sayMe() // Sleepy head
console.log(me) // Zell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt;, on the other hand, is &lt;strong&gt;block-scoped&lt;/strong&gt;. This means whenever a variable is created with &lt;code&gt;let&lt;/code&gt;, it will only exist within its block.&lt;/p&gt;
&lt;p&gt;But wait, what’s a block?&lt;/p&gt;
&lt;p&gt;A block in JavaScript is anything within a pair of curly braces. The following are examples of blocks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  // new scope block
}

if (true) {
  // new scope block
}

while (true) {
  // new scope block
}

function () {
  // new block scope
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference between block-scope and function-scoped variables are huge. When you use a function-scoped variable, you may accidentally overwrite a variable without intending to do so. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var me = &#39;Zell&#39;

if (true) {
  var me = &#39;Sleepy head&#39;
}

console.log(me) // &#39;Sleepy head&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, you can see that &lt;code&gt;me&lt;/code&gt; becomes &lt;code&gt;Sleepy head&lt;/code&gt; after running through the &lt;code&gt;if&lt;/code&gt; block. This example will likely not cause any problems for you since you probably won’t be declaring variables with the same name.&lt;/p&gt;
&lt;p&gt;But anyone who works with &lt;code&gt;var&lt;/code&gt; in a &lt;code&gt;for&lt;/code&gt; loop situation may run into some weirdness because of the way variables are scoped. Consider the following code that logs the variable &lt;code&gt;i&lt;/code&gt; four times, then logs &lt;code&gt;i&lt;/code&gt; again with a &lt;code&gt;setTimeout&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (var i = 1; i &amp;lt; 5; i++) {
  console.log(i)
  setTimeout(function () {
    console.log(i)
  }, 1000)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What would you expect this code to do? Here’s what actually happens&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/loop-wrong.png&quot; alt=&quot;i was logged as 5 four times in the timeout function&quot;&gt;
  &lt;figcaption&gt;i was logged as 5 four times in the timeout function&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;How the heck did &lt;code&gt;i&lt;/code&gt; become &lt;code&gt;5&lt;/code&gt; for four times inside the timeout function? Well, turns out, because &lt;code&gt;var&lt;/code&gt; is function-scoped, the value of &lt;code&gt;i&lt;/code&gt; became &lt;code&gt;4&lt;/code&gt; even before the timeout function runs.&lt;/p&gt;
&lt;p&gt;To get the correct &lt;code&gt;i&lt;/code&gt; value within &lt;code&gt;setTimeout&lt;/code&gt;, which executes later, we need to create another function, say &lt;code&gt;logLater&lt;/code&gt;, to ensure the &lt;code&gt;i&lt;/code&gt; value doesn’t get changed by the &lt;code&gt;for&lt;/code&gt; loop before &lt;code&gt;setTimeout&lt;/code&gt; executes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function logLater (i) {
  setTimeout(function () {
    console.log(i)
  })
}

for (var i = 1; i &amp;lt; 5; i++) {
  console.log(i)
  logLater(i)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/loop-right.png&quot; alt=&quot;i was correctly logged as 1, 2 3 and 4&quot;&gt;
  &lt;figcaption&gt;i was correctly logged as 1, 2 3 and 4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(By the way, this is called a closure).&lt;/p&gt;
&lt;p&gt;The good news is, function-scoped weirdness like the for loop example I’ve just shown you doesn’t happen with &lt;code&gt;let&lt;/code&gt;. The same timeout example we’ve written earlier could be written as this, and it’ll work right out of the box without writing additional functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;for (let i = 1; i &amp;lt; 5; i++) {
  console.log(i)
  setTimeout(function () {
    console.log(i)
  }, 1000)
};
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/loop-right.png&quot; alt=&quot;i was correctly logged as 1, 2 3 and 4&quot;&gt;
  &lt;figcaption&gt;i was correctly logged as 1, 2 3 and 4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, &lt;strong&gt;block-scoped&lt;/strong&gt; variables make development much simpler by removing common gotchas with &lt;strong&gt;function-scoped&lt;/strong&gt; variables. To make life simple, I recommend you use &lt;code&gt;let&lt;/code&gt; over &lt;code&gt;var&lt;/code&gt; whenever you declare JavaScript variables from now on. (ES6 is the new JavaScript already 😎).&lt;/p&gt;
&lt;p&gt;Now we know what &lt;code&gt;let&lt;/code&gt; does, let’s move on to the difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;let-vs-const&quot;&gt;Let vs const&lt;/h3&gt;
&lt;p&gt;Like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; is also &lt;strong&gt;blocked-scoped&lt;/strong&gt;. The difference is that &lt;code&gt;const&lt;/code&gt; cannot be reassigned once declared.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const name = &#39;Zell&#39;
name = &#39;Sleepy head&#39; // TypeError: Assignment to constant variable.

let name1 = &#39;Zell&#39;
name1 = &#39;Sleepy head&#39;
console.log(name1) // &#39;Sleepy head&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;const&lt;/code&gt; cannot be reassigned, they’re &lt;strong&gt;good for variables would not change&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say I have a button that launches a modal on my website. I know that there’s only going to be one button, and it wouldn’t change. In this case, I can use &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const modalLauncher = document.querySelector(&#39;.jsModalLauncher&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When declaring variables, I always &lt;strong&gt;prefer&lt;/strong&gt; &lt;code&gt;const&lt;/code&gt; &lt;strong&gt;over&lt;/strong&gt; &lt;code&gt;let&lt;/code&gt; whenever possible because I receive the extra cue that the variable would not get reassigned. Then, I use &lt;code&gt;let&lt;/code&gt; for &lt;strong&gt;all other situations&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Next, let’s move on and talk about arrow functions.&lt;/p&gt;
&lt;h2 id=&quot;arrow-functions&quot;&gt;Arrow Functions&lt;/h2&gt;
&lt;p&gt;Arrow functions are denoted by the fat arrow (&lt;code&gt;=&amp;gt;&lt;/code&gt;) you see everywhere in ES6 code. It’s a shorthand to make anonymous functions. They can be used anywhere the &lt;code&gt;function&lt;/code&gt; keyword is used. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array = [1,7,98,5,4,2]

// ES5 way
var moreThan20 = array.filter(function (num) {
  return num &amp;gt; 20
})

// ES6 way
let moreThan20 = array.filter(num =&amp;gt; num &amp;gt; 20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arrow functions are pretty cool. They help make code shorter, which gives fewer room for errors to hide. They also help you write code that’s easier to understand once you get used to the syntax.&lt;/p&gt;
&lt;p&gt;Let’s dive into the nitty-gritty of arrow functions so you learn to recognize and use them.&lt;/p&gt;
&lt;h3 id=&quot;the-nitty-gritty-of-arrow-functions&quot;&gt;The nitty-gritty of arrow functions&lt;/h3&gt;
&lt;p&gt;First off, let’s talk about creating functions. In JavaScript, you’re probably used to creating functions this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function namedFunction() {
  // Do something
}

// using the function
namedFunction()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a second method to create functions. You can create an anonymous function and assign it to a variable. To create an anonymous function, we leave its name out of the function declaration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var namedFunction = function() {
  // Do something
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A third way to create functions is to create them directly as an argument to another function or method. This third use case is the most common one for anonymous functions. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Using an anonymous function in a callback
button.addEventListener(&#39;click&#39;, function() {
  // Do something
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since ES6 arrow functions are shorthand for anonymous functions, you can substitute arrow functions anywhere you create an anonymous function.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Normal Function
const namedFunction = function (arg1, arg2) { /* do your stuff */}

// Arrow Function
const namedFunction2 = (arg1, arg2) =&amp;gt; {/* do your stuff */}

// Normal function in a callback
button.addEventListener(&#39;click&#39;, function () {
  // Do something
})

// Arrow function in a callback
button.addEventListener(&#39;click&#39;, () =&amp;gt; {
  // Do something
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the similarity here? Basically, you remove the &lt;code&gt;function&lt;/code&gt; keyword and replace it with &lt;code&gt;=&amp;gt;&lt;/code&gt; at a slightly different location.&lt;/p&gt;
&lt;p&gt;But what’s the big deal with arrow functions? Aren’t we just substituting &lt;code&gt;function&lt;/code&gt; with &lt;code&gt;=&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, it turns out that we’re not just substituting &lt;code&gt;function&lt;/code&gt; with &lt;code&gt;=&amp;gt;&lt;/code&gt;. An arrow function’s syntax can change depending on two factors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;number of arguments&lt;/strong&gt; required&lt;/li&gt;
&lt;li&gt;Whether you’d like an &lt;strong&gt;implicit return&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;first factor&lt;/strong&gt; is the &lt;strong&gt;number of arguments&lt;/strong&gt; supplied to the arrow function. If you only supply one argument, you can remove the parenthesis that surrounds the arguments. If no arguments are required, you can substitute the parenthesis (&lt;code&gt;()&lt;/code&gt;) for an underscore (&lt;code&gt;_&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All of the following are valid arrow functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const zeroArgs = () =&amp;gt; {/* do something */}
const zeroWithUnderscore = _ =&amp;gt; {/* do something */}
const oneArg = arg1 =&amp;gt; {/* do something */}
const oneArgWithParenthesis = (arg1) =&amp;gt; {/* do something */}
const manyArgs = (arg1, arg2) =&amp;gt; {/* do something */}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;second factor&lt;/strong&gt; for arrow functions is whether you’d like an &lt;strong&gt;implicit return&lt;/strong&gt;. Arrow functions, by default, automatically create a &lt;code&gt;return&lt;/code&gt; keyword if the &lt;strong&gt;code only takes up one line&lt;/strong&gt;, and is &lt;strong&gt;not enclosed in a block&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, these two are equivalent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const sum1 = (num1, num2) =&amp;gt; num1 + num2
const sum2 = (num1, num2) =&amp;gt; { return num1 + num2 }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two factors are the reason why you can write shorter code like the &lt;code&gt;moreThan20&lt;/code&gt; you’ve seen above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array = [1,7,98,5,4,2]

// ES5 way
var moreThan20 = array.filter(function (num) {
  return num &amp;gt; 20
})

// ES6 way
let moreThan20 = array.filter(num =&amp;gt; num &amp;gt; 20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In summary, arrow functions are pretty cool. They take a bit of time to get used to, so give it a try and you’ll be using it everywhere pretty soon.&lt;/p&gt;
&lt;p&gt;But before you jump onto the arrow functions FTW bandwagon, I want to let you know about another nitty-gritty feature of the ES6 arrow function that cause a lot of confusion – &lt;strong&gt;the lexical&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-lexical-this&quot;&gt;The lexical this&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a unique keyword whose value changes depending on how it is called. When it’s called &lt;strong&gt;outside of any function&lt;/strong&gt;, &lt;code&gt;this&lt;/code&gt; defaults to the &lt;code&gt;Window&lt;/code&gt; object in the browser.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(this) // Window
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/window.png&quot; alt=&quot;This defaults to window object in browsers&quot;&gt;
  &lt;figcaption&gt;This defaults to window object in browsers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When &lt;code&gt;this&lt;/code&gt; is called in a &lt;strong&gt;simple function call&lt;/strong&gt;, &lt;code&gt;this&lt;/code&gt; is set to the global object. In the case of browsers, &lt;code&gt;this&lt;/code&gt; will always be &lt;code&gt;Window&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function hello () {
  console.log(this)
}

hello() // Window
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript always sets &lt;code&gt;this&lt;/code&gt; to the window object within a simple function call. This explains why the &lt;code&gt;this&lt;/code&gt; value within functions like &lt;code&gt;setTimeout&lt;/code&gt; is always &lt;code&gt;Window&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;this&lt;/code&gt; is called in an &lt;strong&gt;object method&lt;/strong&gt;, &lt;code&gt;this&lt;/code&gt; would be the object itself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  sayThis: function() {
    console.log(this)
  }
}

o.sayThis() // o
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/object.png&quot; alt=&quot;This refers to the object when the function is called in an object method.&quot;&gt;
  &lt;figcaption&gt;This refers to the object when the function is called in an object method.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When the function is called as a &lt;strong&gt;constructor&lt;/strong&gt;, &lt;code&gt;this&lt;/code&gt; refers to the &lt;strong&gt;newly constructed object&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Person (age) {
  this.age = age
}

let greg = new Person(22)
let thomas = new Person(24)

console.log(greg) // this.age = 22
console.log(thomas) // this.age = 24
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/constructor.png&quot; alt=&quot;This refers to the constructed object called with the new keyword or Object.create().&quot;&gt;
  &lt;figcaption&gt;This refers to the constructed object called with the new keyword or Object.create().&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When used in an event listener, &lt;code&gt;this&lt;/code&gt; is set to the element that fired the event.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let button = document.querySelector(&#39;button&#39;)

button.addEventListener(&#39;click&#39;, function() {
  console.log(this) // button
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see in the above situations, the value of &lt;code&gt;this&lt;/code&gt; is set by the function that calls it. Every function defines it’s own &lt;code&gt;this&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;fat arrow functions&lt;/strong&gt;, &lt;code&gt;this&lt;/code&gt; &lt;strong&gt;never gets bound to a new value&lt;/strong&gt;, no matter how the function is called. &lt;code&gt;this&lt;/code&gt; will always be the same &lt;code&gt;this&lt;/code&gt; value as its surrounding code. (By the way, lexical means relating to, which I guess, is how the lexical &lt;code&gt;this&lt;/code&gt; got its name).&lt;/p&gt;
&lt;p&gt;Okay, that sounds confusing, so let’s go through a few real examples.&lt;/p&gt;
&lt;p&gt;First, you &lt;strong&gt;never want to use arrow functions to declare object methods&lt;/strong&gt;, because you can’t reference the object with &lt;code&gt;this&lt;/code&gt; anymore.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  // Don&#39;t do this
  notThis: () =&amp;gt; {
    console.log(this) // Window
    this.objectThis() // Uncaught TypeError: this.objectThis is not a function
  },
  // Do this
  objectThis: function () {
    console.log(this) // o
  }
  // Or this, which is a new shorthand
  objectThis2 () {
    console.log(this) // o
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second, you &lt;em&gt;may not&lt;/em&gt; want to use arrow functions to create event listeners because &lt;code&gt;this&lt;/code&gt; no longer binds to the element you attached your event listener to.&lt;/p&gt;
&lt;p&gt;However, you can always get the right &lt;code&gt;this&lt;/code&gt; context with &lt;code&gt;event.currentTarget&lt;/code&gt;. Which is why I said &lt;em&gt;may not&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;button.addEventListener(&#39;click&#39;, function () {
  console.log(this) // button
})

button.addEventListener(&#39;click&#39;, e =&amp;gt; {
  console.log(this) // Window
  console.log(event.currentTarget) // button
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Third, you &lt;strong&gt;may want&lt;/strong&gt; to use the lexical &lt;code&gt;this&lt;/code&gt; in places where the &lt;code&gt;this&lt;/code&gt; &lt;strong&gt;binding changes without you wanting it to&lt;/strong&gt;. An example is the timeout function, so you never have to deal with the &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;that&lt;/code&gt; or &lt;code&gt;self&lt;/code&gt; nonsense.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  // Old way
  oldDoSthAfterThree: function () {
    let that = this
    setTimeout(function () {
      console.log(this) // Window
      console.log(that) // o
    })
  },
  // Arrow function way
  doSthAfterThree: function () {
    setTimeout(() =&amp;gt; {
      console.log(this) // o
    }, 3000)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This use case is particularly helpful if you needed to add or remove a class after some time has elapsed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let o = {
  button: document.querySelector(&#39;button&#39;)
  endAnimation: function () {
    this.button.classList.add(&#39;is-closing&#39;)
    setTimeout(() =&amp;gt; {
      this.button.classList.remove(&#39;is-closing&#39;)
      this.button.classList.remove(&#39;is-open&#39;)
    }, 3000)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, feel free to use the fat arrow function anywhere else to help make your code neater and shorter, like the &lt;code&gt;moreThan20&lt;/code&gt; example we had above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array = [1,7,98,5,4,2]
let moreThan20 = array.filter(num =&amp;gt; num &amp;gt; 20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;default-parameters&quot;&gt;Default Parameters&lt;/h2&gt;
&lt;p&gt;Default parameters in ES6… well, gives us a way to specify default parameters when we define functions. Let’s go through an example and you’ll see how helpful it is.&lt;/p&gt;
&lt;p&gt;Let’s say we’re creating a function that announces the name of a player from a team. If you write this function in ES5, it’ll be similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function announcePlayer (firstName, lastName, teamName) {
  console.log(firstName + &#39; &#39; + lastName + &#39;, &#39; + teamName)
}

announcePlayer(&#39;Stephen&#39;, &#39;Curry&#39;, &#39;Golden State Warriors&#39;)
// Stephen Curry, Golden State Warriors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first glance, this code looks ok. But what if we had to announce a player that’s unaffiliated with any team?&lt;/p&gt;
&lt;p&gt;The current code fails embarrassingly if we left &lt;code&gt;teamName&lt;/code&gt; out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;announcePlayer(&#39;Zell&#39;, &#39;Liew&#39;)
// Zell Liew, undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m pretty sure undefined isn’t a team 😉.&lt;/p&gt;
&lt;p&gt;If the player is unaffiliated, announcing &lt;code&gt;Zell Liew, unaffiliated&lt;/code&gt; would make more sense that &lt;code&gt;Zell Liew, undefined&lt;/code&gt;. Don’t you agree?&lt;/p&gt;
&lt;p&gt;To get &lt;code&gt;announcePlayer&lt;/code&gt; to announce &lt;code&gt;Zell Liew, unaffiliated&lt;/code&gt;, we one way is to pass the &lt;code&gt;unaffiliated&lt;/code&gt; string as the &lt;code&gt;teamName&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;announcePlayer(&#39;Zell&#39;, &#39;Liew&#39;, &#39;unaffiliated&#39;)
// Zell Liew, unaffiliated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this works, we can do better by refactoring &lt;code&gt;unaffiliated&lt;/code&gt; into &lt;code&gt;announcePlayer&lt;/code&gt; by checking if &lt;code&gt;teamName&lt;/code&gt; is defined.&lt;/p&gt;
&lt;p&gt;In the ES5 version, you can refactor the code to something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function announcePlayer (firstName, lastName, teamName) {
  if (!teamName) {
    teamName = &#39;unaffiliated&#39;
  }
  console.log(firstName + &#39; &#39; + lastName + &#39;, &#39; + teamName)
}

announcePlayer(&#39;Zell&#39;, &#39;Liew&#39;)
// Zell Liew, unaffiliated

announcePlayer(&#39;Stephen&#39;, &#39;Curry&#39;, &#39;Golden State Warriors&#39;)
// Stephen Curry, Golden State Warriors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, if you’re savvier with ternary operators, you could have chosen a terser version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function announcePlayer (firstName, lastName, teamName) {
  var team = teamName ? teamName : &#39;unaffiliated&#39;
  console.log(firstName + &#39; &#39; + lastName + &#39;, &#39; + team)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ES6, with default parameters, we can add an equal sign (&lt;code&gt;=&lt;/code&gt;) whenever we define a parameter. If we do so, ES6 automatically defaults to that value when the parameter is undefined.&lt;/p&gt;
&lt;p&gt;So, in this code below, when &lt;code&gt;teamName&lt;/code&gt; is undefined, it defaults to &lt;code&gt;unaffiliated&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const announcePlayer = (firstName, lastName, teamName = &#39;unaffiliated&#39;) =&amp;gt; {
  console.log(firstName + &#39; &#39; + lastName + &#39;, &#39; + teamName)
}

announcePlayer(&#39;Zell&#39;, &#39;Liew&#39;)
// Zell Liew, unaffiliated

announcePlayer(&#39;Stephen&#39;, &#39;Curry&#39;, &#39;Golden State Warriors&#39;)
// Stephen Curry, Golden State Warriors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool, isn’t it? :)&lt;/p&gt;
&lt;p&gt;One more thing. If you want to invoke the default value, you can pass in &lt;code&gt;undefined&lt;/code&gt; manually. This manual passing in of &lt;code&gt;undefined&lt;/code&gt; helps when your default parameter isn’t the last argument of a function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;announcePlayer(&#39;Zell&#39;, &#39;Liew&#39;, undefined)
// Zell Liew, unaffiliated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to know about default parameters. It’s simple and very useful :)&lt;/p&gt;
&lt;h2 id=&quot;destructuring&quot;&gt;Destructuring&lt;/h2&gt;
&lt;p&gt;Destructuring is a &lt;strong&gt;convenient way to get values out of arrays and objects&lt;/strong&gt;. There are minor differences between destructuring array and objects, so let’s talk about them separately.&lt;/p&gt;
&lt;h3 id=&quot;destructuring-objects&quot;&gt;Destructuring objects&lt;/h3&gt;
&lt;p&gt;Let’s say you have the following object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const Zell = {
  firstName: &#39;Zell&#39;,
  lastName: &#39;Liew&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;Zell&lt;/code&gt;, you had to create two variables, then assign each variable to a value, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let firstName = Zell.firstName // Zell
let lastName = Zell.lastName // Liew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With destructuring, you can create and assign these variables with a single line of code. Here’s how you destructure objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let { firstName, lastName } = Zell

console.log(firstName) // Zell
console.log(lastName) // Liew
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See what happened here? By adding &lt;strong&gt;curly brackets&lt;/strong&gt; (&lt;code&gt;{}&lt;/code&gt;) while declaring variables, we’re telling JavaScript to create the aforementioned variables, then assign &lt;code&gt;Zell.firstName&lt;/code&gt; to &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;Zell.lastName&lt;/code&gt; to &lt;code&gt;lastName&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;This is what’s going under the hood:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// What you write
let { firstName, lastName } = Zell

// ES6 does this automatically
let firstName = Zell.firstName
let lastName = Zell.lastName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if a variable name is already used, we cannot declare the variable again (especially if you use &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The following fails to work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let name = &#39;Zell Liew&#39;
let course = {
  name: &#39;JS Fundamentals for Frontend Developers&#39;
  // ... other properties
}

let { name } = course // Uncaught SyntaxError: Identifier &#39;name&#39; has already been declared
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run into situations like the above, you can &lt;strong&gt;rename variables while destructuring with a colon&lt;/strong&gt; (&lt;code&gt;:&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In this example below, I’m creating a &lt;code&gt;courseName&lt;/code&gt; variable and assigning &lt;code&gt;course.name&lt;/code&gt; to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let { name: courseName } = course

console.log(courseName) // JS Fundamentals for Frontend Developers

// What ES6 does under the hood:
let courseName = course.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing.&lt;/p&gt;
&lt;p&gt;Don’t worry if you try to destructure a variable that’s not contained within an object. It will just return &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let course = {
  name: &#39;JS Fundamentals for Frontend Developers&#39;
}

let { package } = course

console.log(package) // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But wait, that’s not all. Remember &lt;a href=&quot;#default-parameters&quot;&gt;default parameters&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;You can write default parameters for your destructured variables as well. The syntax is the same as that when you define functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let course = {
  name: &#39;JS Fundamentals for Frontend Developers&#39;
}

let { package = &#39;full course&#39; } = course

console.log(package) // full course
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can even rename variables while providing defaults. Just combine the two. It’ll look a little funny at the beginning, but you’ll get used to it if you use it often:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let course = {
  name: &#39;JS Fundamentals for Frontend Developers&#39;
}

let { package: packageName = &#39;full course&#39; } = course

console.log(packageName) // full course
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for destructuring objects. Let’s move on and talk about destructuring arrays 😄.&lt;/p&gt;
&lt;h3 id=&quot;destructuring-arrays&quot;&gt;Destructuring arrays&lt;/h3&gt;
&lt;p&gt;Destructuring arrays and destructuring objects are similar. We use &lt;strong&gt;square brackets&lt;/strong&gt; (&lt;code&gt;[]&lt;/code&gt;) instead of curly brackets (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When you destructure an array,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your &lt;em&gt;first variable&lt;/em&gt; is the &lt;em&gt;first item&lt;/em&gt; in the array.&lt;/li&gt;
&lt;li&gt;Your &lt;em&gt;second variable&lt;/em&gt; is the &lt;em&gt;second item&lt;/em&gt; in the array.&lt;/li&gt;
&lt;li&gt;and so on…&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let [one, two] = [1, 2, 3, 4, 5]
console.log(one) // 1
console.log(two) // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is possible to destructure so many variables that you exceed the number of items in the given array. When this happens, the extra destructured variable will just be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let [one, two, three] = [1, 2]
console.log(one) // 1
console.log(two) // 2
console.log(three) // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When destructuring arrays, we often destructure only the variables we need. If you need the rest of the array, you can use the rest operator (&lt;code&gt;...&lt;/code&gt;), like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let scores = [&#39;98&#39;, &#39;95&#39;, &#39;93&#39;, &#39;90&#39;, &#39;87&#39;, &#39;85&#39;]
let [first, second, third, ...rest] = scores

console.log(first) // 98
console.log(second) // 95
console.log(third) // 93
console.log(rest) // [90, 87, 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll talk more about &lt;a href=&quot;#rest-and-spread-operators&quot;&gt;rest operators in the following section&lt;/a&gt;. But for now, let’s talk about a unique ability you get with destructured arrays – swapping variables.&lt;/p&gt;
&lt;h3 id=&quot;swapping-variables-with-destructured-arrays&quot;&gt;Swapping variables with destructured arrays&lt;/h3&gt;
&lt;p&gt;Let’s say you have two variables, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let a = 2
let b = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You wanted to swap these variables. So &lt;code&gt;a = 3&lt;/code&gt;  and &lt;code&gt;b = 2&lt;/code&gt;. In ES5, you need to use a temporary third variable to complete the swap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let a = 2
let b = 3
let temp

// swapping
temp = a // temp is now 2
a = b // a is now 3
b = temp // b is now 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this works, the logic can be fuzzy and confusing, especially with the introduction of a third variable.&lt;/p&gt;
&lt;p&gt;Now watch how you’ll do it the ES6 way with destructured arrays:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let a = 2
let b = 3; // semicolon required because next line begins with a square bracket

// Swapping with destructured arrays
[a, b] = [b, a]

console.log(a) // 3
console.log(b) // 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;💥💥💥. So much simpler compared to the previous method of swapping variables! :)&lt;/p&gt;
&lt;p&gt;Next, let’s talk about destructuring arrays and objects in a function.&lt;/p&gt;
&lt;h3 id=&quot;destructuring-arrays-and-objects-while-declaring-functions&quot;&gt;Destructuring arrays and objects while declaring functions&lt;/h3&gt;
&lt;p&gt;The coolest thing about destructuring is that you can use them anywhere. Literally. You can even destructure objects and arrays in functions.&lt;/p&gt;
&lt;p&gt;Let’s say we have a function that takes in an array of scores and returns an object with the top three scores. This function is similar to what we’ve done while destructuring arrays.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Note: You don&#39;t need arrow functions to use any other ES6 features
function topThree (scores) {
  let [first, second, third] = scores
  return {
    first: first,
    second: second,
    third: third
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An alternate way to write this function is to destructure &lt;code&gt;scores&lt;/code&gt; while declaring the function. In this case, there’s one less line of code to write. At the same time, we know we’re taking in an array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function topThree ([first, second, third]) {
  return {
    first: first,
    second: second,
    third: third
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Super cool, isn’t it? 😄.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, here’s a quick little quiz for you&lt;/strong&gt;. Since we can combine default parameters and destructuring while declaring functions, what does the following say?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sayMyName ({
  firstName = &#39;Zell&#39;,
  lastName = &#39;Liew&#39;
} = {}) {
 console.log(firstName + &#39; &#39; + lastName)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a tricky one. We’re combining a few features together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we can see that this function takes in &lt;em&gt;one argument&lt;/em&gt;, an object. This object is &lt;em&gt;optional&lt;/em&gt; and &lt;em&gt;defaults to&lt;/em&gt; &lt;code&gt;{}&lt;/code&gt; when undefined.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, we attempt to destructure &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; variables from the given object. If these properties are found, use them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, if &lt;code&gt;firstName&lt;/code&gt; or &lt;code&gt;lastName&lt;/code&gt; is undefined in the given object, we set it to &lt;code&gt;Zell&lt;/code&gt; and &lt;code&gt;Liew&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;So, this function produces the following results:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sayMyName() // Zell Liew
sayMyName({firstName: &#39;Zell&#39;}) // Zell Liew
sayMyName({firstName: &#39;Vincy&#39;, lastName: &#39;Zhang&#39;}) // Vincy Zhang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool to combine destructuring and default parameters in a function declaration eh? 😄. I love this.&lt;/p&gt;
&lt;p&gt;Next, let’s take a look at rest and spread.&lt;/p&gt;
&lt;h2 id=&quot;the-rest-parameter-and-spread-operator&quot;&gt;The rest parameter and spread operator&lt;/h2&gt;
&lt;p&gt;The rest parameter and spread operator look the same. They’re both signified with three dots (&lt;code&gt;...&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;What they do is different depending on what they’re used for. That’s why they’re named differently. So, let’s take a look at the rest parameter and spread operator separately.&lt;/p&gt;
&lt;h3 id=&quot;the-rest-parameter&quot;&gt;The rest parameter&lt;/h3&gt;
&lt;p&gt;Loosely translated, the &lt;strong&gt;rest parameter&lt;/strong&gt; means &lt;strong&gt;take the rest of the stuff and pack it into an array&lt;/strong&gt;. It &lt;em&gt;converts a comma separated list of arguments into an array&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the rest parameter in action. Imagine we have a function, &lt;code&gt;add&lt;/code&gt;, that sums up its arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) // 55
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ES5, we depended on the &lt;code&gt;arguments&lt;/code&gt; variable whenever we had to deal with a function that takes in an unknown number of variables. This &lt;code&gt;arguments&lt;/code&gt; variable is an array-like &lt;code&gt;Symbol&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function sum () {
  console.log(arguments)
}

sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/arguments.png&quot; alt=&quot;Arguments is a Symbol, not an array&quot;&gt;
  &lt;figcaption&gt;Arguments is a Symbol, not an array&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One way to calculate this sum of arguments is to convert it into an Array with &lt;code&gt;Array.prototype.slice.call(arguments)&lt;/code&gt;, then, loop through each number with an array method like &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;reduce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I’m sure you can do &lt;code&gt;forEach&lt;/code&gt; on your own, so here’s the &lt;code&gt;reduce&lt;/code&gt; example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES5 way
function sum () {
  let argsArray = Array.prototype.slice.call(arguments)
  return argsArray.reduce(function(sum, current) {
    return sum + current
  }, 0)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the ES6 rest parameter, we could &lt;strong&gt;pack all comma separated arguments straight into an array&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES6 way
const sum = (...args) =&amp;gt; args.reduce((sum, current) =&amp;gt; sum + current, 0)

// ES6 way if we didn&#39;t shortcut it with so many arrow functions
function sum (...args) {
  return args.reduce((sum, current) =&amp;gt; sum + current, 0)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much cleaner? 🙂.&lt;/p&gt;
&lt;p&gt;Now, we briefly encountered the rest parameter earlier in the &lt;a href=&quot;#destructuring&quot;&gt;destructuring&lt;/a&gt; section. There, we tried to destructure an array of scores into the top three scores:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let scores = [&#39;98&#39;, &#39;95&#39;, &#39;93&#39;, &#39;90&#39;, &#39;87&#39;, &#39;85&#39;]
let [first, second, third] = scores

console.log(first) // 98
console.log(second) // 95
console.log(third) // 93
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we wanted the rest of the scores, we could do so by &lt;strong&gt;packing the rest of the scores into an array&lt;/strong&gt; with the rest parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let scores = [&#39;98&#39;, &#39;95&#39;, &#39;93&#39;, &#39;90&#39;, &#39;87&#39;, &#39;85&#39;]
let [first, second, third, ...restOfScores] = scores

console.log(restOfScores) // [90, 87, 85]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re ever confused, just remember this — the &lt;strong&gt;rest parameter packs everything into an array&lt;/strong&gt;. It appears in function parameters and while destructuring arrays.&lt;/p&gt;
&lt;p&gt;Next, let’s move on to spread.&lt;/p&gt;
&lt;h3 id=&quot;the-spread-operator&quot;&gt;The spread operator&lt;/h3&gt;
&lt;p&gt;The spread operator behaves in the opposite way compared to the rest parameter. Loosely put, it &lt;strong&gt;takes an array and spreads it&lt;/strong&gt; (like jam) &lt;strong&gt;into a comma separated list of arguments&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]

// These two are exactly the same
console.log(...array) // one two three
console.log(&#39;one&#39;, &#39;two&#39;, &#39;three&#39;) // one two three
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The spread operator is often used to help concatenate arrays in a way that’s easier to read and understand.&lt;/p&gt;
&lt;p&gt;Say for example, you wanted to concatenate the following arrays:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array1 = [&#39;one&#39;, &#39;two&#39;]
let array2 = [&#39;three&#39;, &#39;four&#39;]
let array3 = [&#39;five&#39;, &#39;six&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The ES5 way of concatenating these two arrays is to use the &lt;code&gt;Array.concat&lt;/code&gt; method. You can chain multiple &lt;code&gt;Array.concat&lt;/code&gt; to concatenate any number of arrays, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES5 way
let combinedArray = array1.concat(array2).concat(array3)
console.log(combinedArray) // [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With ES6 spread operator, you could spread the arrays into a new array, like this, which is slightly easier to read once you get used to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES6 way
let combinedArray = [...array1, ...array2, ...array3]
console.log(combinedArray) // [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The spread operator can also be used to remove an item from an array without mutating the array. This method is commonly used in Redux. I highly recommend you watch &lt;a href=&quot;https://egghead.io/lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread&quot;&gt;this video by Dan Abramov&lt;/a&gt; if you’re interested in seeing how it works out.&lt;/p&gt;
&lt;p&gt;That’s it for spread :)&lt;/p&gt;
&lt;h2 id=&quot;enhanced-object-literals&quot;&gt;Enhanced object literals&lt;/h2&gt;
&lt;p&gt;Objects should be a familiar thing to you since you’re writing JavaScript. Just in case you don’t know about them, they look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const anObject = {
  property1: &#39;value1&#39;,
  property2: &#39;value2&#39;,
  property3: &#39;value3&#39;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ES6 enhanced object literals brings three sweet upgrades to the objects you know and love. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Property value shorthands&lt;/li&gt;
&lt;li&gt;Method shorthands&lt;/li&gt;
&lt;li&gt;The ability to use computed property names&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s look at each one of them. I promise this will be quick :)&lt;/p&gt;
&lt;h3 id=&quot;property-value-shorthands&quot;&gt;Property value shorthands&lt;/h3&gt;
&lt;p&gt;Have you noticed that you sometimes assign a variable that has the same name as an object property? You know, something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fullName = &#39;Zell Liew&#39;

const Zell = {
  fullName: fullName
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, wouldn’t you wish you could write this in a shorter way, since the property (&lt;code&gt;fullName&lt;/code&gt;) and value (&lt;code&gt;fullName&lt;/code&gt;)?&lt;/p&gt;
&lt;p&gt;(Oh you spoilt brat 😝).&lt;/p&gt;
&lt;p&gt;Here’s the good news. You can! :)&lt;/p&gt;
&lt;p&gt;ES6 enhances objects with &lt;strong&gt;property value shorthands&lt;/strong&gt;. This means: you can write only the variable if your variable name matches your property name. ES6 takes care of the rest.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const fullName = &#39;Zell Liew&#39;

// ES6 way
const Zell = {
  fullName
}

// Underneath the hood, ES6 does this:
const Zell = {
  fullName: fullName
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty neat, eh? Now, we have less words to write, and we all go home happy.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/dancing.gif&quot; alt=&quot;Happy, dancing star wars figure&quot;&gt;
  &lt;figcaption&gt;Wheeeee! Happy! :)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While I dance, please go on and move to more shorthand goodness. I’ll join you shortly.&lt;/p&gt;
&lt;h3 id=&quot;method-shorthands&quot;&gt;Method shorthands&lt;/h3&gt;
&lt;p&gt;Methods are functions that are associated with a property. They’re just named specially because they’re functions :)&lt;/p&gt;
&lt;p&gt;This is an example of a method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const anObject = {
  aMethod: function () { console.log(&amp;quot;I&#39;m a method!~~&amp;quot;)}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With ES6, we get to write methods with a shorthand. We can remove &lt;code&gt;: function&lt;/code&gt; from a method declaration and it will work like it used to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const anObject = {
  // ES6 way
  aShorthandMethod (arg1, arg2) {},

  // ES5 way
  aLonghandMethod: function (arg1, arg2) {},
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this upgrade, objects already get a shorthand method, so please please don’t use arrow functions when you define objects. You’ll break the &lt;code&gt;this&lt;/code&gt; context (see &lt;a href=&quot;#arrow-functions&quot;&gt;arrow functions&lt;/a&gt; if you can’t remember why).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const dontDoThis = {
  // Noooo. Don&#39;t do this
  arrowFunction: () =&amp;gt; {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it with object method shorthands. Let’s move on to the final upgrade we get for objects.&lt;/p&gt;
&lt;h3 id=&quot;computed-object-property-names&quot;&gt;Computed object property names&lt;/h3&gt;
&lt;p&gt;Sometimes you need a dynamic property name when you create objects. In the old JavaScript way, you’d have to create the object, then assign your property to in, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// ES5
const newPropertyName = &#39;smile&#39;

// Create an object first
const anObject = { aProperty: &#39;a value&#39; }

// Then assign the property
anObject[newPropertyName] = &#39;:D&#39;

// Adding a slightly different property and assigning it
anObject[&#39;bigger &#39; + newPropertyName] = &#39;XD&#39;

// Result
// {
//   aProperty: &#39;a value&#39;,
//   &#39;bigger smile&#39;: &#39;XD&#39;
//   smile: &#39;:D&#39;,
// }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ES6, you no longer need to do this roundabout way. You can assign dynamic property names directly when creating your object. The key is to enclose the dynamic property with square brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const newPropertyName = &#39;smile&#39;

// ES6 way.
const anObject = {
  aProperty: &#39;a value&#39;,
  // Dynamic property names!
  [newPropertyName]: &#39;:D&#39;,
  [&#39;bigger &#39; + newPropertyName]: &#39;XD&#39;,
}

// Result
// {
//   aProperty: &#39;a value&#39;,
//   &#39;bigger smile&#39;: &#39;XD&#39;
//   smile: &#39;:D&#39;,
// }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Schweeet! Isn’t it? :)&lt;/p&gt;
&lt;p&gt;And that’s it for enhanced object literals. Didn’t I say it’ll be quick? :)&lt;/p&gt;
&lt;p&gt;Let’s move on to another awesome feature I absolutely love: template literals.&lt;/p&gt;
&lt;h2 id=&quot;template-literals&quot;&gt;Template literals&lt;/h2&gt;
&lt;p&gt;Handling strings in JavaScript is an extremely clunky experience. You’ve experienced it yourself when we created the &lt;code&gt;announcePlayer&lt;/code&gt; function previously in &lt;a href=&quot;#default-parameters&quot;&gt;default parameters&lt;/a&gt;. There, we created spaces with empty strings and joined them with pluses:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function announcePlayer (firstName, lastName, teamName) {
  console.log(firstName + &#39; &#39; + lastName + &#39;, &#39; + teamName)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ES6, this problem goes away thanks to template literals! (In the specification, they were previously called template strings).&lt;/p&gt;
&lt;p&gt;To create a template literal in ES6, you &lt;strong&gt;enclose strings with backticks&lt;/strong&gt; (&lt;code&gt;`&lt;/code&gt;). Within backticks, you gain access to a special placeholder (&lt;code&gt;${}&lt;/code&gt;) where you can use JavaScript normally.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like in action:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const firstName = &#39;Zell&#39;
const lastName = &#39;Liew&#39;
const teamName = &#39;unaffiliated&#39;

const theString = `${firstName} ${lastName}, ${teamName}`

console.log(theString)
// Zell Liew, unaffiliated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See that? We can group everything with template literals! Within template literals, it’s English as normal. Almost as if we’re using a &lt;a href=&quot;https://zellwk.com/blog/nunjucks-with-gulp/&quot;&gt;template engine&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;The best part about template literals is that you can create multi-line strings easily. This works out of the box:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const multi = `One upon a time,
In a land far far away,
there lived a witich,
who could change night into day`
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/es6/multiline.png&quot; alt=&quot;Multi-line strings!&quot;&gt;
  &lt;figcaption&gt;Multi-line strings works! Woot!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One neat trick is to use these strings to create HTML elements in JavaScript if you need them. (Note: This may not be best way to make HTML elements, but its still way better than creating them one by one!).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const container = document.createElement(&#39;div&#39;)
const aListOfItems =
  `&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;Point number one&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Point number two&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Point number three&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;Point number four&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;`

container.innerHTML = aListOfItems

document.body.append(container)
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;JNzMdb&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Using multi-line strings to create more complicated HTML elements&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/JNzMdb/&quot;&gt;Using multi-line strings to create more complicated HTML elements&lt;/a&gt; by Zell Liew (&lt;a href=&quot;https://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Another feature of template literals is called &lt;strong&gt;tags&lt;/strong&gt;. Tags are functions that allow you manipulate the template literal, if you wanted to substitute any string.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const animal = &#39;lamb&#39;

// This a tag
const tagFunction = () =&amp;gt; {
  // Do something here
}

// This tagFunction allows you to manipulate the template literal.
const string = tagFunction `Mary had a little ${animal}`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To be honest, even though template tags looks cool, I haven’t had a use case for them yet. If you want to learn more about template tags, I suggest you read &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;this reference&lt;/a&gt; on MDN.&lt;/p&gt;
&lt;p&gt;That’s it for template literals.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Woo! That’s almost all the awesome ES6 features I use on a regular basis. ES6 is awesome. It’s definitely worth it to take a bit of your time and learn about them, so you can understand what everyone else is writing about.&lt;/p&gt;
&lt;p&gt;Was this article helpful for you? Let me know in the comments below if you have any questions or thoughts! I’d love to hear them :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Fetch</title>
    <link href="https://zellwk.com/blog/https:/css-tricks.com/using-fetch/"/>
    <updated>2017-05-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/css-tricks.com/using-fetch/</id>
    <content type="html">&lt;p&gt;Whenever we send or retrieve information with JavaScript, we initiate a thing known as an Ajax call. Ajax is a technique to send and retrieve information behind the scenes without needing to refresh the page. It allows browsers to send and retrieve information, then do things with what it gets back, like add or change HTML on the page.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Altering the DOM with JavaScript</title>
    <link href="https://zellwk.com/blog/js-in-dom/"/>
    <updated>2017-04-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/js-in-dom/</id>
    <content type="html">&lt;p&gt;If you’re learning JavaScript, the first thing you should learn (after understanding the basics like variables, functions, etc.) is to alter the DOM. This is one of the things you do daily as a frontend developer.&lt;/p&gt;
&lt;p&gt;Changing the DOM used to be difficult. We needed jQuery to make things easier. Luckily, there’s no need for jQuery anymore.&lt;/p&gt;
&lt;p&gt;In this article, I’ll show you the things you need to be familiar with as a frontend developer.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-do-you-do-with-the-dom%3F&quot;&gt;What do you do with the DOM?&lt;/h2&gt;
&lt;p&gt;When you work with the DOM, you’ll find yourself needing to do one or more of the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Selecting HTML elements&lt;/li&gt;
&lt;li&gt;Adding or removing event listeners&lt;/li&gt;
&lt;li&gt;Adding or removing classes&lt;/li&gt;
&lt;li&gt;Adding, changing or removing attributes&lt;/li&gt;
&lt;li&gt;Adding or removing HTML elements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll explain what each of these things are, why you use them and how to do them in the following sections. Let’s jump into the very first one — selecting HTML elements.&lt;/p&gt;
&lt;h2 id=&quot;selecting-html-elements&quot;&gt;Selecting HTML elements&lt;/h2&gt;
&lt;p&gt;Knowing how to select HTML elements is the first step before you do anything else with the DOM. Once you’ve selected an element, you’ll be able to add event listeners, change classes, and do other fancy things.&lt;/p&gt;
&lt;p&gt;You only need to know two methods to select anything you want — &lt;code&gt;querySelector&lt;/code&gt; and &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;queryselector&quot;&gt;querySelector&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;querySelector&lt;/code&gt; helps you &lt;strong&gt;select one HTML element&lt;/strong&gt;. If multiple HTML elements are found with your selection, &lt;code&gt;querySelector&lt;/code&gt; always returns the first element. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelector(selector)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can select an element by its id, class or even tag with &lt;code&gt;querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s walk through a quick example. Say you have the following HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div id=&amp;quot;the-one&amp;quot;&amp;gt;ID&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;an-awesome-class&amp;quot;&amp;gt;Class&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;A tag&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To &lt;strong&gt;select the element with an id&lt;/strong&gt;, you prepend the id with a &lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;select the element with a class&lt;/strong&gt;, you prepend the class with a &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;select the element with a tag&lt;/strong&gt;, you simply write the tag as your selector.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelector(&#39;#the-one&#39;)
// =&amp;gt; &amp;lt;div id=&amp;quot;id&amp;quot;&amp;gt;ID&amp;lt;/div&amp;gt;

document.querySelector(&#39;.an-awesome-class&#39;)
// =&amp;gt; &amp;lt;div class=&amp;quot;an-awesome-class&amp;quot;&amp;gt;Class&amp;lt;/div&amp;gt;

document.querySelector(&#39;p&#39;)
// =&amp;gt; &amp;lt;p&amp;gt;A tag&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;complicated-selections&quot;&gt;Complicated selections&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;querySelector&lt;/code&gt; is incredibly powerful. You can perform complicated selections by chaining ids, classes and tags together, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelector(&#39;div#the-one&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although it’s possible to chain selectors, I recommend you don’t do this because it’s unnecessary most of the time.&lt;/p&gt;
&lt;h3 id=&quot;selecting-elements-within-elements&quot;&gt;Selecting elements within elements&lt;/h3&gt;
&lt;p&gt;Here’s one thing great about &lt;code&gt;querySelector&lt;/code&gt;. You can instruct it to look for an element within another element, which reduces the time needed to lookup a deep selector.&lt;/p&gt;
&lt;p&gt;To do so, you add a space between your classes, ids or tags. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;inner-item&amp;quot;&amp;gt;Inner item!&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let innerItem = document.querySelector(&#39;.container .inner-item&#39;)
// =&amp;gt; &amp;lt;div class=&amp;quot;inner-item&amp;quot;&amp;gt;Inner item!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, if you’ve already selected an element with &lt;code&gt;querySelector&lt;/code&gt; you can also use that element to perform another &lt;code&gt;querySelector&lt;/code&gt; call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let container = document.querySelector(&#39;.container&#39;)
let innerItem = container.querySelector(&#39;.inner-item&#39;)
// =&amp;gt; innerItem is &amp;lt;div class=&amp;quot;inner-item&amp;quot;&amp;gt;Inner item!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to know about &lt;code&gt;querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, what if you needed to select more than one element? This is where &lt;code&gt;querySelectorAll&lt;/code&gt; comes in.&lt;/p&gt;
&lt;h3 id=&quot;queryselectorall&quot;&gt;querySelectorAll&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;querySelectorAll&lt;/code&gt; is a method that helps you select multiple elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let allELements = document.querySelectorAll(selectors);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;selectors&lt;/code&gt;, in this case, has the same syntax as &lt;code&gt;querySelector&lt;/code&gt;. The only exception is that you can perform multiple selections by separating selections with a comma (&lt;code&gt;,&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;thing&amp;quot;&amp;gt;A thing&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;thing&amp;quot;&amp;gt;A thing&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;another-thing&amp;quot;&amp;gt;Another thing&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let allThings = document.querySelectorAll(&#39;.thing, .another-thing&#39;)
// =&amp;gt; [
//   &amp;lt;div class=&amp;quot;thing&amp;quot;&amp;gt;A thing&amp;lt;/div&amp;gt;,
//   &amp;lt;div class=&amp;quot;thing&amp;quot;&amp;gt;A thing&amp;lt;/div&amp;gt;,
//   &amp;lt;div class=&amp;quot;another-thing&amp;quot;&amp;gt;Another thing&amp;lt;/div&amp;gt;
// ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the important part.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;querySelectorAll&lt;/code&gt; returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;NodeList&lt;/a&gt; (even though it looks like an array).&lt;/p&gt;
&lt;p&gt;If you’re only working with modern browsers, you can get individual elements within the Nodelist with a &lt;code&gt;NodeList.forEach&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;If you’re working with older browsers, you need to convert the NodeList into an Array before looping through it with a forEach call. The easiest way to do so is to use &lt;code&gt;Array.from()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Modern browsers
let allThings = document.querySelectorAll(&#39;.thing, .another-thing&#39;)
allThings.forEach(el =&amp;gt; {/* do something with element */})

// Older browsers
let allThings = document.querySelectorAll(&#39;.thing, .another-thing&#39;)
// You might need a polyfill for Array.from.
// Alternatively, use Array.prototype.slice.call(allThings);
let allThingsArray = Array.from(allThings)
allThingsArray.forEach(el =&amp;gt; {/* do something with element */})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s move on to adding and removing event listeners.&lt;/p&gt;
&lt;h2 id=&quot;adding-and-removing-event-listeners&quot;&gt;Adding and removing event listeners&lt;/h2&gt;
&lt;p&gt;Event listeners allow your JavaScript to perform an action whenever an event is triggered. This is how you know when a user has interacted with the DOM. One example is when they clicked a button:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;eWBLdZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Altering DOM with JS demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/eWBLdZ/&quot;&gt;Altering DOM with JS demo&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Here, you only need to know two methods — &lt;code&gt;addEventListener&lt;/code&gt; and &lt;code&gt;removeEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;adding-event-listeners&quot;&gt;Adding event listeners&lt;/h3&gt;
&lt;p&gt;To add your event listener, you first select your HTML element, then call the &lt;code&gt;addEventListener&lt;/code&gt; method. It accepts two parameters, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let thing = document.querySelector(&#39;.thing&#39;)
thing.addEventListener(event, callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;event&lt;/code&gt; is the name of the event you want to listen to. These events are already predetermined in the spec. Here’s a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;handy list of common event types&lt;/a&gt; you’ll want.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;callback&lt;/code&gt; is a function that does what you want whenever the event is triggered. It contains one parameter — the event object. Here’s what a typical callback looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;thing.addEventListener(&#39;click&#39;, callback)

function callback (e) {
  e.preventDefault() // Prevents default behavior. Only use this when necessary
  console.log(&#39;thing is clicked!&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can do &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Event&quot;&gt;a lot of stuff&lt;/a&gt; with the event object (&lt;code&gt;e&lt;/code&gt;), but that’s a topic for another day. Let’s move on to removing event listeners.&lt;/p&gt;
&lt;h3 id=&quot;removing-event-listeners&quot;&gt;Removing Event Listeners&lt;/h3&gt;
&lt;p&gt;Removing an event listener is similar to adding an event listener. Here, you call the &lt;code&gt;removeEventListener&lt;/code&gt; method, then pass in two parameters — the &lt;code&gt;event&lt;/code&gt; type and your callback.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;thing.removeEventListener(&#39;click&#39;, callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typically, you will only remove an eventListener after a task is completed. So, it’s common to find &lt;code&gt;removeEventListener&lt;/code&gt; within an &lt;code&gt;addEventListener&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;thing.addEventListener(&#39;click&#39;, callback)

function callback () {
  console.log(&#39;thing is clicked!&#39;)
  // removes event listener
  thing.removeEventListener(&#39;click&#39;, callback)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you remove an event listener, you no longer listen to the event. So, in the code above, the callback only triggers when &lt;code&gt;.thing&lt;/code&gt; gets clicked for the first time. Further clicks on &lt;code&gt;.thing&lt;/code&gt; will not trigger the callback.&lt;/p&gt;
&lt;p&gt;Note: you should remove an event listener when you have no more need for it. By doing so, you free up resources for other tasks.&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;adding-and-removing-classes&quot;&gt;Adding and removing classes&lt;/h2&gt;
&lt;p&gt;Remember button demo above?&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;eWBLdZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Altering DOM with JS demo&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/eWBLdZ/&quot;&gt;Altering DOM with JS demo&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Here’s what I did to make this demo work:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;.is-open&lt;/code&gt; to &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; when a user clicks on the button&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;.is-open&lt;/code&gt; from &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; if &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; is already open when the user clicks on the button.&lt;/li&gt;
&lt;li&gt;Transitioning the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; is done with CSS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This demo shows you the power of CSS when combined with JavaScript. You can create all sorts of interactions just by adding (or removing) a class.&lt;/p&gt;
&lt;p&gt;Here’s how you can add a class, remove a class or check if a class exists:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To &lt;strong&gt;add a class&lt;/strong&gt;, use &lt;code&gt;element.classList.add(&#39;classname&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;remove a class&lt;/strong&gt;, use &lt;code&gt;element.classList.remove(&#39;classname&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;check if a class exists&lt;/strong&gt;, use &lt;code&gt;element.classList.contains(&#39;classname&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the code to add or remove &lt;code&gt;.is-open&lt;/code&gt; from &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; when you click on the button.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let button = document.querySelector(&#39;button&#39;)
let nav = document.querySelector(&#39;nav&#39;)

button.addEventListener(&#39;click&#39;, toggleNav)

function toggleNav() {
  // Checks if nav has is-open class
  if (nav.classList.contains(&#39;is-open&#39;)) {
    // removes is-open class
    nav.classList.remove(&#39;is-open&#39;)
  } else {
    // adds is-open class
    nav.classList.add(&#39;is-open&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s move on to adding, changing and removing attributes&lt;/p&gt;
&lt;h2 id=&quot;adding%2C-changing-and-removing-attributes&quot;&gt;Adding, changing and removing attributes&lt;/h2&gt;
&lt;p&gt;Attributes are an important part of HTML elements. Sometimes, you need to extract information from these attributes to give context to your JavaScript. Other times, you can use these attributes to help write accessible interfaces.&lt;/p&gt;
&lt;p&gt;Here’s a demo of the above nav, written in an accessible way:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;aWBaME&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Altering DOM with JS demo (Accessible way)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/aWBaME/&quot;&gt;Altering DOM with JS demo (Accessible way)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;In this demo, two things changed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I added &lt;code&gt;aria-expanded&lt;/code&gt; to &lt;code&gt;button&lt;/code&gt; to tell screen readers if the menu is expanded.&lt;/li&gt;
&lt;li&gt;I added &lt;code&gt;aria-hidden&lt;/code&gt; to &lt;code&gt;nav&lt;/code&gt; to prevent screen readers from reading the menu when it’s hidden.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s how you can extract information from and attribute, set an attribute and remove an attribute:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To &lt;strong&gt;get an attribute&lt;/strong&gt;, use &lt;code&gt;getAttribute(&#39;attribute-name&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;change/set an attribute&lt;/strong&gt;, use &lt;code&gt;setAttribute(&#39;attribute-name&#39;, &#39;attribute-value&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;remove an attribute&lt;/strong&gt;, use &lt;code&gt;removeAttribute(&#39;attribute-name&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Get attribute
button.getAttribute(&#39;aria-expanded&#39;)

// Set attribute
button.setAttribute(&#39;aria-expanded&#39;, true)

// Remove attribute
button.removeAttribute(&#39;aria-expanded&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s move on to adding or removing elements.&lt;/p&gt;
&lt;h2 id=&quot;adding-or-removing-elements&quot;&gt;Adding or removing elements&lt;/h2&gt;
&lt;p&gt;Let’s start this section with a demo:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;EmNdWp&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Altering DOM with JS demo (Adding and removing elements)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/zellwk/pen/EmNdWp/&quot;&gt;Altering DOM with JS demo (Adding and removing elements)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;If you clicked on the prepend or append button above, you’d see I’ve added the text &lt;code&gt;Hello again, world!&lt;/code&gt; into the DOM as another list item.&lt;/p&gt;
&lt;h3 id=&quot;adding-elements-to-the-dom&quot;&gt;Adding elements to the DOM&lt;/h3&gt;
&lt;p&gt;There are three steps to adding this text into the DOM. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an HTML element with &lt;code&gt;document.createElement&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add content to the HTML element by setting the &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add it to the DOM with &lt;code&gt;parentNode.prepend&lt;/code&gt; or &lt;code&gt;parentNode.append&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let ul = document.querySelector(&#39;ul&#39;)

// Creating a &amp;lt;li&amp;gt; element
let li = document.createElement(&#39;li&#39;)

// Adding content to the &amp;lt;li&amp;gt; element
li.innerHTML = &#39;Hello again, world!&#39;

// Adding it to the DOM
ul.append(li)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;removing-elements-from-the-dom&quot;&gt;Removing elements from the DOM&lt;/h3&gt;
&lt;p&gt;To remove an element from the DOM, you need to call &lt;code&gt;parentNode.removeChild&lt;/code&gt;. This method takes in a parameter — the element to remove.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;ul.removeChild(li)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can’t simply say remove &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; and expect the JavaScript to know which list item to remove. We need to tell our JavaScript which one to remove explicitly.&lt;/p&gt;
&lt;p&gt;If you can use &lt;code&gt;querySelector&lt;/code&gt; to choose with element to remove, that’s going to be the easiest method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let parent = document.querySelector(&#39;.parent&#39;)
let elToRemove = document.querySelector(&#39;.element-to-remove&#39;)
parent.removeChild(elToRemove)

// Of if you don&#39;t want to write a separate querySelector
elToRemove.parentNode.removeChild(elToRemove)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the demo above, we can’t do this because there’s no way to tell which is the first or last list item with classes or ids.&lt;/p&gt;
&lt;p&gt;Instead, we can use &lt;code&gt;parentNode.children&lt;/code&gt; to get a NodeList of elements within &lt;code&gt;ul&lt;/code&gt;, then, use Array methods to get the specific element to remove.&lt;/p&gt;
&lt;p&gt;Here’s the code to remove the first child element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let list = document.querySelector(&#39;ul&#39;)
removeFirst.addEventListener(&#39;click&#39;, e =&amp;gt; {
  if (list.children.length) {
    let firstNode = list.children[0]
    list.removeChild(firstNode)
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Altering the DOM is one of the most important things you need to know as a frontend developer. You’ll be able to do all sorts of fancy stuff the moment you learn to work with the DOM.&lt;/p&gt;
&lt;p&gt;In this article, I’ve showed you five common ways you need to alter the DOM, plus the relevant code you need to know. Now, go and play with the DOM and create some magic 😎.&lt;/p&gt;
&lt;p&gt;What do you think of this article? I’d love to hear your thoughts in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Breaking the rules</title>
    <link href="https://zellwk.com/blog/breaking-the-rules/"/>
    <updated>2017-04-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/breaking-the-rules/</id>
    <content type="html">&lt;p&gt;If you read my past articles on CSS architecture, you would have noticed I took parts of techniques created by experts and mixed them into a set of rules that I follow. Some of my rules helped others understand how to use a technique, while others sparked public outrage (like my unconventional BEM usage. People exclaimed that I broke BEM rules).&lt;/p&gt;
&lt;p&gt;I’d like to confess today that I broke more rules than that. Breaking rules is my way of finding out what to take in from techniques mentioned by experts. It’s also my way of figuring what to change to adapt to my personal belief. Today, I’d like to dig into this rule-breaking process.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;when-should-you-break-rules%3F&quot;&gt;When should you break rules?&lt;/h2&gt;
&lt;p&gt;Techniques and practices are created by experts for only one reason — they found a solution to their problems. We only hear about them because they share it with the world. Then, only a handful that stays around as best practices are widely used by everyone.&lt;/p&gt;
&lt;p&gt;Before breaking these established rules and techniques, you should ideally have a firm grasp of the fundamentals of the medium. You should also have a firm understanding of the rule you’re trying to break.&lt;/p&gt;
&lt;p&gt;So, the first step of breaking rules is to use them religiously. Once you begin using the rules, you’ll start to see what works and what doesn’t. Then, you have a chance to change it.&lt;/p&gt;
&lt;p&gt;Here’s one example.&lt;/p&gt;
&lt;p&gt;Once, I tried to write BEM classes for every HTML element, because, we’re supposed to name everything with BEM, right? So, I did this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&amp;quot;nav&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;nav__link&amp;quot;&amp;gt; Link&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;nav__link&amp;quot;&amp;gt; Link&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;nav__link&amp;quot;&amp;gt; Link&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;nav__link&amp;quot;&amp;gt; Link&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;nav__link&amp;quot;&amp;gt; Link&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I felt it was redundant to write the &lt;code&gt;.nav__link&lt;/code&gt; class for every &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag because I’m already stating the obvious. Here, I broke the BEM rules again and styled links &lt;code&gt;.nav &amp;gt; a&lt;/code&gt; instead.&lt;/p&gt;
&lt;h3 id=&quot;you-probably-broke-some-rules-too&quot;&gt;You probably broke some rules too&lt;/h3&gt;
&lt;p&gt;You may not know it, but you’ve probably broken a few best practices yourself too. If you want to find out, just think back to when you feel that a rule felt cringe-worthy, and you decided to learn something new to change it.&lt;/p&gt;
&lt;p&gt;The most common example I can think of is people switching from HTML-classes based grids like the ones offered by Bootstrap and Foundation to &lt;a href=&quot;https://zellwk.com/blog/from-html-grids-to-css-grids&quot;&gt;creating their own CSS-based grids&lt;/a&gt; with Susy, Flexbox, or the newer CSS Grid spec.&lt;/p&gt;
&lt;p&gt;I went through the process myself too, and I never looked back. In this process of changing, I felt something was wrong. I wanted to change it, and I did.&lt;/p&gt;
&lt;p&gt;So, the first and foremost step to breaking rules is to use them religiously and notice what feels wrong. Once you know what feels wrong, you have the chance to change things up.&lt;/p&gt;
&lt;p&gt;But first, let’s talk about the psychology of breaking rules.&lt;/p&gt;
&lt;h2 id=&quot;should-you-be-breaking-rules%3F&quot;&gt;Should you be breaking rules?&lt;/h2&gt;
&lt;p&gt;“No, it’s not right to break rules”, you may think. You’re not alone. It’s a common thought because of two reasons.&lt;/p&gt;
&lt;p&gt;First, we’ve been conditioned to believe there’s a right answer to everything in the world thanks to our education system. If we break a rule, we feel that we’ll provide a wrong answer. A wrong answer can equate a failure, which sends shivers down our spines. So, we avoid breaking rules at all costs. (Besides, you’ve probably been punished for breaking rules before).&lt;/p&gt;
&lt;p&gt;Second, rules from best practices we hear often originate from experts in the field who have years of experience. Since we’re newer and relatively inexperienced compared to these veterans, what makes us believe that its possible to come up with solutions much better than theirs? It’s perfectly reasonable to be following rules laid out by others. It’s probably safer anyway.&lt;/p&gt;
&lt;p&gt;Unfortunately, experts’ answers, although good, may not be the best solution to your questions. Your circumstances are different from theirs. Technological improvements in today’s world may also have made certain practices obsolete.&lt;/p&gt;
&lt;p&gt;What you need is a critical mind. The ability to think critically and evaluate if a certain tool or technique is what you really need. A key ingredient of critical thinking is the ability to question and challenge assumptions so you emerge with a better answer.&lt;/p&gt;
&lt;p&gt;So, if not for a better solution, you should probably invest some time to figure rules out and try to change them for the better. It’ll make you a better developer eventually because you’ve thoroughly considered your options. (You’ll also become more opinionated, which apparently seems to be a good trait for coding interviews).&lt;/p&gt;
&lt;h2 id=&quot;the-rule-breaking-process&quot;&gt;The rule-breaking process&lt;/h2&gt;
&lt;p&gt;Rule-breaking is a process of trial and error. It’s an experiment where you test everything you can think of to find a better solution (or until you prove yourself wrong).&lt;/p&gt;
&lt;p&gt;To do so, you first need to isolate the problem and create a hypothesis to solve it. In the BEM example I gave above, I felt the need to write BEM selectors for links was redundant, and came up with a solution for it.&lt;/p&gt;
&lt;p&gt;Is my solution better than the previous one? Well, I won’t know. Not until I test my new rule and see if it works well. If it does, I’ll call it a day and maybe look for new rules to break.&lt;/p&gt;
&lt;p&gt;If it doesn’t, well, I go back to the drawing board and try to think of a better solution. Sometimes, it also helps to talk about your problems/solutions with other developers and see if they have better answers.&lt;/p&gt;
&lt;p&gt;The idea here isn’t to seek victory in successfully changing rules with your own hands. The idea is to go through the process of finding better solutions. The more you try finding better solutions, the better your solutions eventually become, the better you become as a developer. (And of course, the more sought after you become, if you need me to spell it out).&lt;/p&gt;
&lt;h2 id=&quot;should-you-be-breaking-rules-constantly%3F&quot;&gt;Should you be breaking rules constantly?&lt;/h2&gt;
&lt;p&gt;Er. You’ll become nuts if you look for things to break constantly. Careful that vase! 😂.&lt;/p&gt;
&lt;p&gt;But yeah, go ahead and change up your rules whenever you feel that something can be improved. That’s how you can learn and become better.&lt;/p&gt;
&lt;p&gt;What did you think of this article? Did it help change your mindset? I’d love to hear what you feel in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing modular CSS (Part 3) — CSS file structure</title>
    <link href="https://zellwk.com/blog/css-architecture-3/"/>
    <updated>2017-04-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-architecture-3/</id>
    <content type="html">&lt;p&gt;We’ve already talked about writing Modular CSS with BEM and namespaces in the past two articles. In this article, I want to veer away from the process of writing CSS selectors into the mystical art of file structure and organization.&lt;/p&gt;
&lt;p&gt;If you’ve ever wondered what’s the best practice for organizing files, how to find any CSS file easily and how big or small each file should be, this article is written for you.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let’s start off by looking at the two ways you can organize assets.&lt;/p&gt;
&lt;h2 id=&quot;you-can-organize-assets-in-two-ways.&quot;&gt;You can organize assets in two ways.&lt;/h2&gt;
&lt;p&gt;When I say assets in this article, I’m referring to CSS and JavaScript files. We cannot neglect either type, especially in today’s websites.&lt;/p&gt;
&lt;p&gt;There are two main ways you can use to store your CSS and JavaScript files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first way&lt;/strong&gt; is to store CSS and JavaScript files in distinct folders &lt;em&gt;according to their type&lt;/em&gt;. This is the traditional method that many developers are accustomed to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- project/
    |- js/
    |- sass/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The second way&lt;/strong&gt; is to store CSS and JavaScript files &lt;em&gt;according to their components&lt;/em&gt;. With this method, the file structure may resemble the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;-project/
    |- component-a/
        |- index.scss
        |- index.js
    |- component-b/
        |- index.scss
        |- index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method is commonly used by people who build webapps with tools like React, since HTML is usually written directly in JavaScript. You can easily &lt;code&gt;require&lt;/code&gt; only the needed styles with Webpack like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;import css from &#39;./index.scss&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;which-method-should-you-use%3F&quot;&gt;Which method should you use?&lt;/h3&gt;
&lt;p&gt;Honestly, there’s not too much of a difference between methods. The best method is one that gives you a clear picture of your components.&lt;/p&gt;
&lt;p&gt;At this point, I prefer the traditional method of storing CSS and JavaScript files in distinct folders because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I’m used to the structure.&lt;/li&gt;
&lt;li&gt;I can find components easily with my methods.&lt;/li&gt;
&lt;li&gt;It’s easier to keep everything consistent since I write both websites and webapps.&lt;/li&gt;
&lt;li&gt;I prefer to separate CSS and JavaScript as much as possible&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, I have my preferences. You can have yours too. It’s perfectly ok. So, pick either method and stick with it.&lt;/p&gt;
&lt;h2 id=&quot;how-i-structure-my-project&quot;&gt;How I structure my project&lt;/h2&gt;
&lt;p&gt;I prefer to keep my written code in a &lt;code&gt;src/&lt;/code&gt; (source) folder as much as possible. Files in the &lt;code&gt;src/&lt;/code&gt; folder will then be compiled and placed in a &lt;code&gt;dist/&lt;/code&gt; folder for production purposes. So, my initial project structure looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- project/
    |- dist/ # For production purposes
    |- src/  # All source code
        |- js/
        |- scss/
        # templates and other stuff as required
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this point on, I’m going to focus on the &lt;code&gt;scss/&lt;/code&gt; folder since the &lt;code&gt;js/&lt;/code&gt; folder mirrors it (but with much lesser stuff).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;scss/&lt;/code&gt; folder contains seven subfolders, along with one partial and one main scss file, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;- scss/
    |- lib/
    |- helpers/
    |- variables/
    |- base/
    |- layouts/
    |- objects/
    |- components/
    |- styles.scss
    |- _utilities.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me first explain what’s in my &lt;code&gt;styles.scss&lt;/code&gt; file. It’s the point of reference for mp projects. Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Libraries and helpers
// ---------
@import &#39;lib/lib&#39;;
@import &#39;helpers/helpers&#39;;

// Variables
// ---------
@import &#39;variables/colors&#39;;
@import &#39;variables/typography&#39;;
@import &#39;variables/breakpoints&#39;;
@import &#39;variables/themes&#39;; // only when necessary

// Reset and base files
// --------------------
@import &#39;base/base&#39;;

// Layouts
// -------
@import &#39;layouts/layouts&#39;;

// Objects
// -------
@import &#39;objects/buttons&#39;;
@import &#39;objects/input&#39;;
@import &#39;objects/typography&#39;;
// Other objects as necessary

// Components
// ----------
@import &#39;components/component-name-1&#39;;
@import &#39;components/component-name-2&#39;;
@import &#39;components/component-name-3&#39;;
@import &#39;components/component-name-4&#39;;
// Other components as necessary

// Utilities
// ----------
@import &#39;utilities&#39;;

// Shame
// -----
@import &#39;shame&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At a glance, you can tell from the &lt;code&gt;styles.scss&lt;/code&gt; file that there are &lt;em&gt;four types of variables&lt;/em&gt;, &lt;em&gt;three objects&lt;/em&gt; and &lt;em&gt;four components&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This declarative method of listing variables, objects and components, is the heart and soul of my scss structure. It lets me know what I’ve used for the project immediately.&lt;/p&gt;
&lt;p&gt;Whenever I need to search for a component, I can always refer to this &lt;code&gt;styles.scss&lt;/code&gt; file, look for the component and type &lt;code&gt;c component name&lt;/code&gt; in my Sublime Text’s file search field.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-3/search-file.gif&quot; alt=&quot;Searching for files with Sublime Text&quot;&gt;
  &lt;figcaption&gt;Searching for files with Sublime Text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is sweet because I’ll always find the right file without much searching. 😊&lt;/p&gt;
&lt;p&gt;Now, let me tell you what each subfolder contains.&lt;/p&gt;
&lt;h3 id=&quot;the-lib%2F-folder&quot;&gt;The lib/ folder&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;lib/&lt;/code&gt; folder contains a single file — &lt;code&gt;_lib.scss&lt;/code&gt;. This &lt;code&gt;_lib.scss&lt;/code&gt; declares all libraries I use for the project. In case you were wondering, the libraries I use are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Normalize.css&lt;/li&gt;
&lt;li&gt;Mappy-breakpoints (for breakpoints)&lt;/li&gt;
&lt;li&gt;Typi (for typography)&lt;/li&gt;
&lt;li&gt;Themify (if I’m working with themes)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-helpers%2F-folder&quot;&gt;The helpers/ folder&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;helpers/&lt;/code&gt; folder contains convenient mixins and functions I use in the project. Examples of such mixins include include the &lt;a href=&quot;https://css-tricks.com/snippets/css/clear-fix/&quot;&gt;clearfix hack&lt;/a&gt;, &lt;a href=&quot;https://snook.ca/archives/html_and_css/hiding-content-for-accessibility&quot;&gt;element-invisible&lt;/a&gt; and CSS shapes (like triangles).&lt;/p&gt;
&lt;h3 id=&quot;the-variables%2F-folder&quot;&gt;The variables/ folder&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;variables/&lt;/code&gt; folder is where I store variables used in the project. As you can tell from my &lt;code&gt;styles.scss&lt;/code&gt; file, I use only four types of variables:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;breakpoints&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;typography&lt;/li&gt;
&lt;li&gt;themes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I prefer to store these variables in Sass maps, which allow me to write functions and get values from them easily. For instance, here’s what my &lt;code&gt;_breakpoints.scss&lt;/code&gt; file looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 400px,
  med: 640px,
  large: 900px,
  wide: 1100px,
  mega: 1800px,
  ultra: 2800px,
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To extract breakpoints from the &lt;code&gt;$breakpoints&lt;/code&gt; map, I use a library I’ve created (&lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;Mappy breakpoints&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  @include mappy-breakpoint(small) {/* styles here */}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m not going to go through the other files since they’re mostly similar to the &lt;code&gt;_breakpoints&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h3 id=&quot;the-base%2F-folder&quot;&gt;The base/ folder&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;base/&lt;/code&gt; folder is where I write any resets in addition to Normalize.css. I’m pretty aggressive with resetting margins, paddings and the looks of input and button elements, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Resets margins and paddings for headers, ul, ol and p
h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
  margin: 0;
  padding: 0;
}

// Completely resets form items
// ----------------------------
// Super hard reset that removes all borders
// and radius of all form items.
//
 -
 -
 -
 -
 -
 -
 -
 -
 -
 -
 -
 -
 -
 -
input,
textarea,
button {
  border: 0;
  border-radius: 0;
  outline: none;
  appearance: none;

  &amp;amp;:hover,
  &amp;amp;:active,
  &amp;amp;:focus {
    outline: none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to resetting, I also write styles that apply throughout the project in this file. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Use border-box for everything
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

// Set Image and Objects to have a max-width of 100%
embed,
iframe,
img,
object,
video {
  max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you choose to put here is ultimately up to you. Feel free to ignore the entire &lt;code&gt;base/&lt;/code&gt; folder if you don’t want to reset as aggressive as I did.&lt;/p&gt;
&lt;h3 id=&quot;the-layouts%2F-folder&quot;&gt;The layouts/ folder&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;layouts/&lt;/code&gt; folder is where I write layouts that apply globally to my project. I explained what these are in my previous article so &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2#global-layouts&quot;&gt;check it out&lt;/a&gt; if you don’t know what I’m talking about&lt;/p&gt;
&lt;h3 id=&quot;the-objects%2F-and-components%2F-folders&quot;&gt;The objects/ and components/ folders&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;objects/&lt;/code&gt; and &lt;code&gt;components/&lt;/code&gt; folders are pretty self-explanatory. It’s where I write objects and components. Each object/component has it’s dedicated file. So, given the above &lt;code&gt;styles.scss&lt;/code&gt; file, I have three object files: &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;typography&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Note: my definition of objects and components are different from others’, be sure to &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2&quot;&gt;read my previous article&lt;/a&gt; if you haven’t read it yet).&lt;/p&gt;
&lt;p&gt;As far as objects and components are concerned, I’ll always begin by writing objects. Whenever objects grow to include another object or component, I’ll rename all instances of &lt;code&gt;.o-object&lt;/code&gt; with &lt;code&gt;.c-object&lt;/code&gt; with the help of Sublime Text’s find and replace tool.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-3/find-and-replace.png&quot; alt=&quot;Find and replace tool in Sublime Text&quot;&gt;
  &lt;figcaption&gt;Find and replace tool in Sublime Text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;the-utilities.scss-file&quot;&gt;The utilities.scss file&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;_utilities.scss&lt;/code&gt; file is where I write &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2#utility-classes-with-u-&quot;&gt;utility-namespaced classes&lt;/a&gt; like &lt;code&gt;.u-text-center&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-the-minimum%2Fmaximum-file-size%3F&quot;&gt;What’s the minimum/maximum file size?&lt;/h2&gt;
&lt;p&gt;Determining what to put in a file based on the number of lines of code is probably not the best practice. Some people hate to open a file, only to find two lines of code. Others hate going through 300 lines of code to correct what they’re there for.&lt;/p&gt;
&lt;p&gt;Instead of worrying about the minimum/maximum file size, I encourage you to write as much code in a file as it makes sense. For example, just write all the code you need to style &lt;code&gt;.c-component-a&lt;/code&gt; in &lt;code&gt;components/_component-a.scss&lt;/code&gt;. Modularity and clarity are more important than file length.&lt;/p&gt;
&lt;p&gt;With that, let’s wrap up!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;File structure and organization is subjective. Different people have different ideas on what it means to have a proper structure. Instead of getting stuck over what’s the best structure, pick one and go with it. Be consistent, and you’ll be able to find your files every single time.&lt;/p&gt;
&lt;p&gt;If your structure isn’t good enough, you’ll start to dislike certain parts anyway, and that’s when you have some room to change.&lt;/p&gt;
&lt;p&gt;Did you enjoy this article on file structure? What did you think of it? How did you organize your files? Would you do anything differently after reading my method? I’d love to hear your thoughts in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>20 things to consider when creating your first Node.js application</title>
    <link href="https://zellwk.com/blog/https:/www.heartinternet.uk/blog/20-things-to-consider-when-creating-your-first-node-js-application/"/>
    <updated>2017-03-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.heartinternet.uk/blog/20-things-to-consider-when-creating-your-first-node-js-application/</id>
    <content type="html">&lt;p&gt;With the advent of Node.js, JavaScript found its way into the server. In this article, I share 20 things you might want to consider when creating your first Node app.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing modular CSS (Part 2) — Namespaces</title>
    <link href="https://zellwk.com/blog/css-architecture-2/"/>
    <updated>2017-03-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-architecture-2/</id>
    <content type="html">&lt;p&gt;Last week, I shared how I use BEM to create a sensible CSS architecture. Although BEM is awesome, it’s only part of the solution. There’s another part I’ve yet to mention — namespaces.&lt;/p&gt;
&lt;p&gt;In this article today, I want to share with you why BEM isn’t enough and how I use namespaces to bridge the gap.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-bem-isn%E2%80%99t-enough&quot;&gt;Why BEM isn’t enough&lt;/h2&gt;
&lt;p&gt;The examples I showed you &lt;a href=&quot;https://zellwk.com/blog/css-architecture-1&quot;&gt;last week&lt;/a&gt; were pretty simple. I only showed you how to deal with different modifiers and children (or grandchildren) elements within a single block. What happens if there’s more than one block?&lt;/p&gt;
&lt;p&gt;Things get a little more complicated. Let’s use a site-wide navigation to illustrate the relationship between two blocks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&amp;quot;main-nav&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;button class=&amp;quot;button&amp;quot;&amp;gt;Menu&amp;lt;/button&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome. Now there are two blocks. One called &lt;code&gt;.main-nav&lt;/code&gt; while the other is called &lt;code&gt;.button&lt;/code&gt;. &lt;code&gt;.button&lt;/code&gt; exists within &lt;code&gt;.main-nav&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say you want to change the button color from blue to green. You also want to add some padding to the left of &lt;code&gt;.button&lt;/code&gt; so it separates itself from the &lt;code&gt;home&lt;/code&gt; link.&lt;/p&gt;
&lt;p&gt;The question is, how should you write the CSS code? Here are a few possible answers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add both &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt; to &lt;code&gt;.main-nav .button&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add both &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt; a &lt;code&gt;button--modifier&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;margin&lt;/code&gt; to &lt;code&gt;.main-nav .button&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt; a &lt;code&gt;button--modifier&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;margin&lt;/code&gt; to &lt;code&gt;.main-nav a&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt; a &lt;code&gt;.main-nav .button&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;margin&lt;/code&gt; to &lt;code&gt;.main-nav a&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt; a &lt;code&gt;button--modifier&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which one makes sense? How do you ensure every developer on your project feels the same way?&lt;/p&gt;
&lt;p&gt;Even if all your developers are clones of you (and therefore think the same way), how do you know if you did not introduce a side effect (that broke another part of the site)? 😱😱😱.&lt;/p&gt;
&lt;p&gt;Honestly, it’s hard to guarantee! There are too many possible factors that are open to interpretation if we only BEM.&lt;/p&gt;
&lt;p&gt;This is where namespaces come in. It helps you &lt;em&gt;create a structure that governs how CSS properties get written&lt;/em&gt;. If you follow the convention, you’ll be able to write CSS without being afraid of side effects.&lt;/p&gt;
&lt;p&gt;Here’s an example.&lt;/p&gt;
&lt;p&gt;Let’s say I switched the code above to one with namespaces. The HTML will be completely the same (less a few class prefixes). Pay special attention to &lt;code&gt;.o&lt;/code&gt; and &lt;code&gt;.c&lt;/code&gt; prefixes in this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&amp;quot;c-main-nav&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;button class=&amp;quot;o-button&amp;quot;&amp;gt;Menu&amp;lt;/button&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does &lt;code&gt;.o-&lt;/code&gt; and &lt;code&gt;.c-&lt;/code&gt; say? From this code, I know I can change the color of &lt;code&gt;.o-button&lt;/code&gt; if I want to, but I shouldn’t add any margins to &lt;code&gt;.o-button&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;How? Well, I’ll have to explain these namespaces, so let’s dive right in :)&lt;/p&gt;
&lt;h2 id=&quot;the-namespaces-i-use&quot;&gt;The namespaces I use&lt;/h2&gt;
&lt;p&gt;Here’s a list of namespaces I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.l-&lt;/code&gt;: layouts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.o-&lt;/code&gt;: objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.c-&lt;/code&gt;: components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.js&lt;/code&gt;: JavaScript hooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.is-&lt;/code&gt;|&lt;code&gt;.has-&lt;/code&gt;: state classes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.t1&lt;/code&gt;|&lt;code&gt;.s1&lt;/code&gt;: typography sizes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.u-&lt;/code&gt;: utility classes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s dive into what each namespace is, and what its supposed to do.&lt;/p&gt;
&lt;p&gt;Before moving on, if you remain unconvinced about namespaces, I highly recommend you to check out Harry Robert’s &lt;a href=&quot;https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/&quot;&gt;more transparent ui code with namespaces&lt;/a&gt;. (Fun fact: Harry’s inspired me to use namespaces).&lt;/p&gt;
&lt;p&gt;If you read his article, just note that I namespace differently from Harry. (I’ll share what’s different when we come to it).&lt;/p&gt;
&lt;p&gt;With that, let’s jump into the first namespace — layouts.&lt;/p&gt;
&lt;h2 id=&quot;layouts-with-.l-&quot;&gt;Layouts with .l-&lt;/h2&gt;
&lt;p&gt;I’m pretty sure you’ve heard of &lt;a href=&quot;https://github.com/stubbornella/oocss/wiki&quot;&gt;Object Oriented CSS&lt;/a&gt; (OOCSS) by &lt;a href=&quot;https://twitter.com/stubbornella&quot;&gt;Nicole Sullivan&lt;/a&gt;. If you have yet to dive into it, the main idea behind OOCSS is the &lt;em&gt;separation of skin and structure&lt;/em&gt;. In other words, &lt;em&gt;properties that affect the position of a block or its elements should be abstracted into a separate class for reusability&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In CSS, the act of positioning a block is also called laying out the block. In a general sense, positioning is given the term &lt;strong&gt;layout&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Maybe it’s just a happy coincidence (just maybe 😉), but &lt;a href=&quot;https://twitter.com/snookca&quot;&gt;Jonathan Snook&lt;/a&gt; recommends a &lt;code&gt;.l-&lt;/code&gt; prefix for layout rules in &lt;a href=&quot;https://smacss.com/&quot;&gt;SMACSS&lt;/a&gt;. These two paradigms share the same principles when it comes to layouts. As such, I happily stole &lt;code&gt;.l-&lt;/code&gt; from SMACSS as the layout namespace.&lt;/p&gt;
&lt;p&gt;Since you understand the origins of the namespace, it probably helps you understand how it’s used as well. When it comes to layouts, I split layouts into two different categories — &lt;strong&gt;global layouts&lt;/strong&gt; and &lt;strong&gt;block-level layouts&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;global-layouts&quot;&gt;Global layouts&lt;/h3&gt;
&lt;p&gt;Global layouts are layouts that are applied globally on all pages. (Duh 😑). In my use case, they are usually big grid containers that are used everywhere. An example is the &lt;code&gt;.l-wrap&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// I like to write in Sass :)
.l-wrap {
  padding-left: 1em;
  padding-right: 1em;

  @media (min-width: 1000px) {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll use this &lt;code&gt;.l-wrap&lt;/code&gt; class everywhere, like in the header and footer to align content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;site-header&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;l-wrap&amp;quot;&amp;gt;
    &amp;lt;!-- stuff --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;site-footer&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;l-wrap&amp;quot;&amp;gt;
    &amp;lt;!-- stuff --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since these classes are used globally, I prefer to write them in a &lt;code&gt;_layouts.scss&lt;/code&gt; partial.&lt;/p&gt;
&lt;h3 id=&quot;block-level-layouts&quot;&gt;Block-level layouts&lt;/h3&gt;
&lt;p&gt;Each block (either object or components, as we’ll discuss later) may have its own layouts. Through personal experience, I discovered that these layouts are often independent of the global layout.&lt;/p&gt;
&lt;p&gt;Let me give you an example.&lt;/p&gt;
&lt;p&gt;When I created the website for &lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Mastering Responsive Typography&lt;/a&gt;, I added a payment form that looks like the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-2/mrt-form-main.png&quot; alt=&quot;Payment form on Mastering Responsive Typography&quot;&gt;
  &lt;figcaption&gt;Payment form on Mastering Responsive Typography&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the design above, you can see that the form contains two rows of input elements. There are two equal-sized input fields in the first row, and two input fields of different sizes in the second row.&lt;/p&gt;
&lt;p&gt;To differentiate between the three different input sizes, I’ve opted to use a layout prefix:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form l-form&amp;quot; action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item--large&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item--small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Did you notice how I kept the BEM implementation even to layouts as well? This makes things much clearer for me. You can immediate see where my CSS would go to. It’s incredibly clear.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.l-form {/* container styles */}
.l-form__item {/* half-width styles */}
.l-form__item--large {/* larger-width styles */}
.l-form__item--small {/* smaller-width styles */}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;.l-form&lt;/code&gt;, &lt;code&gt;.l-form__item&lt;/code&gt;, &lt;code&gt;.l-form__item--small&lt;/code&gt; and &lt;code&gt;.l-form__item--large&lt;/code&gt; has nothing to do with other blocks, I write these classes in &lt;code&gt;_form.scss&lt;/code&gt; to keep context.&lt;/p&gt;
&lt;p&gt;By the way, some people disagreed with my thoughts on removing &lt;code&gt;.block&lt;/code&gt; when &lt;code&gt;.block--modifier&lt;/code&gt; is present in my &lt;a href=&quot;https://zellwk.com/blog/css-architecture-1&quot;&gt;previous article&lt;/a&gt;. Well, watch what happens if you insert all the “required” BEM classes in this case, you’ll notice the “HTML starts to bloat”:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form l-form&amp;quot; action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;!-- This HTML starts to get looooong 😢 --&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item l-form__item--large&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item l-form__item--small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One final note: Harry uses the object namespace (&lt;code&gt;.o-&lt;/code&gt;) to signify structural layouts like this. I just group them into &lt;code&gt;.l-&lt;/code&gt; and use &lt;code&gt;.o-&lt;/code&gt; for something else.&lt;/p&gt;
&lt;p&gt;With that, let’s move on to objects (my version 😜).&lt;/p&gt;
&lt;h2 id=&quot;objects-with-.o-&quot;&gt;Objects with .o-&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Objects&lt;/em&gt; (&lt;code&gt;.o-&lt;/code&gt;) &lt;em&gt;are the smallest building blocks of a website&lt;/em&gt;. Consider them to be Lego blocks where you can &lt;em&gt;copy-paste anywhere&lt;/em&gt; in your website. If you’ve heard of &lt;a href=&quot;http://atomicdesign.bradfrost.com/&quot;&gt;Atomic Design&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/brad_frost&quot;&gt;Brad Frost&lt;/a&gt;, consider objects to be a &lt;em&gt;hybrid of elements and molecules&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Objects have the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objects uses the &lt;code&gt;.o-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;cannot contain other objects or components&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;are context independent&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Certain objects can ignore the &lt;code&gt;.o-&lt;/code&gt; prefix when it makes sense.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;objects-cannot-contain-other-objects-or-components&quot;&gt;Objects cannot contain other objects or components&lt;/h3&gt;
&lt;p&gt;Objects can be small or large. The number of HTML elements within the object isn’t relevant. Let me explain.&lt;/p&gt;
&lt;p&gt;For example, buttons are objects. They’re small and they can be placed anywhere. It’s quite self-evident:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;o-button&amp;quot;&amp;gt;A button&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example of a larger object is the countdown timer I built for Mastering Responsive Typography:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-2/obj-countdown.png&quot; alt=&quot;Example of a large object&quot;&gt;
  &lt;figcaption&gt;Example of a large object. Still considered an object since it contains neither objects nor components&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The HTML of the countdown timer is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;o-countdown jsCountdown&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;days&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;day&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;hours&amp;quot;&amp;gt;21&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;hours&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;minutes&amp;quot;&amp;gt;41&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;minutes&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;seconds&amp;quot;&amp;gt;50&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;seconds&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice &lt;code&gt;.o-countdown&lt;/code&gt; contains three layers of HTML elements. It’s huge, but it’s still an object since there isn’t any other objects or components in it. The &lt;em&gt;actual number of elements&lt;/em&gt; within the &lt;code&gt;.o-countdown&lt;/code&gt; &lt;em&gt;is irrelevant&lt;/em&gt; because all inner elements can only exist when there’s &lt;code&gt;.o-countdown&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;objects-are-context-independent&quot;&gt;Objects are context independent&lt;/h3&gt;
&lt;p&gt;When I say objects are context independent, I mean they &lt;em&gt;don’t know where they’re used&lt;/em&gt;. You could pick any object up, throw it somewhere else and it won’t break the structure of your site.&lt;/p&gt;
&lt;p&gt;This also means objects &lt;em&gt;should not change any structure outside&lt;/em&gt; itself. So, object blocks cannot contain any of these properties/values:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt; position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;margin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding&lt;/code&gt; (unless you have a &lt;code&gt;background-color&lt;/code&gt; applied. In this case, it doesn’t interrupt break the alignment outside the object).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;etc…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since you know objects need to be context independent, you immediately know the &lt;code&gt;.button&lt;/code&gt; in our site-wide navigation example earlier cannot contain any margins.&lt;/p&gt;
&lt;p&gt;Here’s an example of a typical &lt;code&gt;.o-button&lt;/code&gt; object in my stylesheets:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Check back to the previous article if you don&#39;t understand this whacky selector. */
[class*=&#39;o-button&#39;]:not([class*=&#39;o-button__&#39;]) {
  display: inline-block;
  padding: 0.75em 1.25em;
  border-radius: 4px;
  background-color: green;
  color: white;
  font-size: inherit;
  line-height: inherit;
  transition: all 0.15s ease-in-out;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although objects cannot affect external structure, it can change it’s internal structure as it sees fit. For example, the &lt;code&gt;.o-countdown&lt;/code&gt; timer I mentioned could have the following HTML and CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;o-countdown l-countdown jsCountdown&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner l-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;days&amp;quot;&amp;gt;3&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;days&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner l-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;hours&amp;quot;&amp;gt;20&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;hours&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner l-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;minutes&amp;quot;&amp;gt;57&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;minutes&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;o-countdown__inner l-countdown__inner&amp;quot;&amp;gt;
    &amp;lt;span data-token=&amp;quot;seconds&amp;quot;&amp;gt;33&amp;lt;/span&amp;gt;
    &amp;lt;span&amp;gt;seconds&amp;lt;/span&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.l-countdown {
  display: flex;
}

.l-countdown__inner {
  /* Do as you please, maybe? */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The bottom line is, you can freely style an object as long as it doesn’t affect anything outside. (Also, make sure you don’t accidentally add &lt;code&gt;padding&lt;/code&gt; and make it look misaligned).&lt;/p&gt;
&lt;h3 id=&quot;certain-objects-can-ignore-the-.o--prefix-when-it-makes-sense.&quot;&gt;Certain objects can ignore the .o- prefix when it makes sense.&lt;/h3&gt;
&lt;p&gt;Whoa, are we breaking the rules already? Heck yes! 😈.&lt;/p&gt;
&lt;p&gt;It just doesn’t make sense for some objects to contain the &lt;code&gt;.o-&lt;/code&gt; prefix (or even a class for that matter) since they’re used so much. One such example is the input element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure, you can tag a class to the input if you want, but what happens if you can’t access the &lt;code&gt;input&lt;/code&gt; element to give it a class? Instead of modifying input classes, I’ll do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin input {
  padding: 0.5em 0.75em;
  font-size: inherit;
  line-height: inherit;
  font-family: inherit;
}


input[type=&amp;quot;text&amp;quot;],
input[type=&amp;quot;email&amp;quot;],
input[type=&amp;quot;textarea&amp;quot;] {
  @include input;
}

// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example of objects I feel shouldn’t require an &lt;code&gt;.o-&lt;/code&gt; prefixes are typefaces. They get special treatment (as I’ll explain later). Feel free to disagree on this point though.&lt;/p&gt;
&lt;h3 id=&quot;objects-in-summary&quot;&gt;Objects in summary&lt;/h3&gt;
&lt;p&gt;Objects (&lt;code&gt;.o-&lt;/code&gt;) are the &lt;em&gt;smallest building blocks of a website&lt;/em&gt;. They have the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objects uses the &lt;code&gt;.o-&lt;/code&gt; prefix.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;cannot contain other objects or components&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;are context independent&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Certain objects can ignore the &lt;code&gt;.o-&lt;/code&gt; prefix when it makes sense.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s move on to components&lt;/p&gt;
&lt;h2 id=&quot;components-with-.c-&quot;&gt;Components with .c-&lt;/h2&gt;
&lt;p&gt;If objects are the smallest build blocks, &lt;em&gt;components are larger building blocks&lt;/em&gt; that you can use throughout your site. If you’ve read Atomic Design, consider components to be organisms. (Except this organism can contain other organisms 😉).&lt;/p&gt;
&lt;p&gt;Components have the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Components uses a &lt;code&gt;.c-&lt;/code&gt; prefix.&lt;/li&gt;
&lt;li&gt;Components &lt;em&gt;can contain other objects and components&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Components are &lt;em&gt;context aware&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s dive into the properties and I’ll supplement you with much-needed examples 😜.&lt;/p&gt;
&lt;h3 id=&quot;components-can-contain-other-objects-and-components&quot;&gt;Components can contain other objects and components&lt;/h3&gt;
&lt;p&gt;Let’s go back to the form I described where I talked about layouts. It’s the perfect example of a component.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-2/mrt-form-main.png&quot; alt=&quot;Payment form on Mastering Responsive Typography&quot;&gt;
  &lt;figcaption&gt;Payment form on Mastering Responsive Typography&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Earlier, I mentioned the following HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form l-form&amp;quot; action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item--large&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;form__item l-form__item--small&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I actually omitted a lot of code to make it reasonable to look at in the layouts section. If we dig deeper, you’ll see there are &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;.o-button&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;c-form l-form&amp;quot; action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;c-form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;c-form__item l-form__item&amp;quot;&amp;gt;
      &amp;lt;label for=&amp;quot;fname&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;First Name&amp;lt;/span&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;fname&amp;quot; name=&amp;quot;fname&amp;quot;&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- ... the email input item --&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- ... other form_rows --&amp;gt;
  &amp;lt;div class=&amp;quot;c-form__row&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;o-button c-form__button&amp;quot;&amp;gt;Buy Mastering Responsive Typography!&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how &lt;code&gt;.c-form&lt;/code&gt; contains other objects now? :)&lt;/p&gt;
&lt;h3 id=&quot;components-are-context-aware-(usually)&quot;&gt;Components are context aware (usually)&lt;/h3&gt;
&lt;p&gt;Components are large enough that you want to take special care about positioning them in different places. For example, this &lt;code&gt;.c-form&lt;/code&gt; component can either be placed in a &lt;em&gt;full-width&lt;/em&gt; or &lt;em&gt;sidebar&lt;/em&gt; context.&lt;/p&gt;
&lt;p&gt;Here’s what the form looks like in a sidebar context:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture-2/mrt-form-sidebar.png&quot; alt=&quot;Form component in a sidebar context&quot;&gt;
  &lt;figcaption&gt;Form component in a sidebar context&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Immediately, you can see three things are altered:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Label gets hidden&lt;/li&gt;
&lt;li&gt;layout of &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;o-button&lt;/code&gt; objects becomes full-width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; of text becomes smaller on button objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The HTML for this altered form can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;c-form--sidebar l-form--sidebar&amp;quot; action=&amp;quot;#&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;c-form__row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;c-form__item l-form__item&amp;quot;&amp;gt;
      &amp;lt;label for=&amp;quot;fname&amp;quot;&amp;gt;
        &amp;lt;span&amp;gt;First Name&amp;lt;/span&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;fname&amp;quot; name=&amp;quot;fname&amp;quot;&amp;gt;
      &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- ... the email input row --&amp;gt;
  &amp;lt;div class=&amp;quot;c-form__row&amp;quot;&amp;gt;
    &amp;lt;button class=&amp;quot;o-button c-form__button&amp;quot;&amp;gt;Buy Mastering Responsive Typography!&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the respective (S)CSS changes are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-from--sidebar {
  .l-form__item { /* change to full width style */}
}

.c-form--sidebar {
  label {
    // http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
    @include is-invisible;
  }

  .c__button {
    font-size: 16px;
    line-height: 1.25;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing. Notice I mixed an object and component class in &lt;code&gt;.c-form__button&lt;/code&gt;? This is called a &lt;a href=&quot;https://en.bem.info/methodology/key-concepts/#mix&quot;&gt;BEM mix&lt;/a&gt;, which allows me to style an object with the component’s class without affecting the original button.&lt;/p&gt;
&lt;h3 id=&quot;components-in-summary&quot;&gt;Components in summary&lt;/h3&gt;
&lt;p&gt;Components (&lt;code&gt;.c-&lt;/code&gt;) are the &lt;em&gt;larger building blocks of a website&lt;/em&gt;. They have the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They use the &lt;code&gt;.c-&lt;/code&gt; prefix.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;can contain other objects or components&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;They &lt;em&gt;are context aware&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s move on to the next namespace&lt;/p&gt;
&lt;h2 id=&quot;javascript-hooks-with-.js&quot;&gt;JavaScript hooks with .js&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Javascript hooks&lt;/em&gt; (&lt;code&gt;.js&lt;/code&gt;) &lt;em&gt;indicate if an object/component requires JavaScript&lt;/em&gt;. An example is the countdown timer I mentioned earlier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;o-countdown jsCountdown&amp;quot;&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about using JavaScript namespaces is that you can separate JS functionality from styles, which makes them much easier to maintain.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;.jsCountdown&lt;/code&gt; class you’ve just seen tells me immediately that &lt;code&gt;.o-countdown&lt;/code&gt; requires JavaScript to work properly. If there’s a need to change &lt;code&gt;o-countdown&lt;/code&gt; to &lt;code&gt;c-countdown&lt;/code&gt; sometime in future, I can do so without worrying about breaking any JS functionality.&lt;/p&gt;
&lt;p&gt;JavaScript hooks are pretty straightforward, so let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;state-classes-with-.is--or-.has-&quot;&gt;State classes with .is- or .has-&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;State classes indicate the current state of the object/component&lt;/em&gt;. When a state class is applied, you immediately know if an object/component has a dropdown (&lt;code&gt;.has-dropdown&lt;/code&gt;) or is currently in the opened state (&lt;code&gt;.is-open&lt;/code&gt;). These lovely classes came from SMACSS (if you were wondering).&lt;/p&gt;
&lt;p&gt;When you style state classes in your CSS, I suggest you keep the styles as close as possible to the object/component in question. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Sass
.object {
  &amp;amp;.is-animating { /* styles */}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don’t use Sass, you can also opt to write your CSS this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.object.is-animating { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You probably know about state classes since they’ve been introduced long ago by Jonathan. I shall not bore you further :)&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;typography-classes-with-.t-or-.s&quot;&gt;Typography classes with .t or .s&lt;/h2&gt;
&lt;p&gt;One best practice in typography is to use only a handful of styles (sizes, typefaces, etc) on a webpage. Now, you’re probably writing typography styles in headings &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { /* styles */ }
h2 { /* styles */ }
h3 { /* styles */ }
h4 { /* styles */ }
h5 { /* styles */ }
h6 { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is great for a start if your website is simple, without the need to use the same heading styles for multiple objects/components.&lt;/p&gt;
&lt;p&gt;What if, for instance, you have a navigation with links that are styled exactly like your h5?&lt;/p&gt;
&lt;p&gt;Do you do this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- No! Don&#39;t do this! --&amp;gt;
&amp;lt;nav class=&amp;quot;c-nav&amp;quot;&amp;gt;
  &amp;lt;h5&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/h5&amp;gt;
  &amp;lt;h5&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/h5&amp;gt;
  &amp;lt;h5&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/h5&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously not. A better way is to change your CSS. So, maybe this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;nav a {
  font-size: 14px;
  line-height: 1.25;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the CSS version is slightly better, you no longer have one source of truth when it comes to typography styles. It’s only a matter of time before you end up with 30 different combinations…&lt;/p&gt;
&lt;p&gt;Here’s one potential solution.&lt;/p&gt;
&lt;p&gt;Instead of just styling &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; - &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;, you can create classes &lt;code&gt;.h1&lt;/code&gt; to &lt;code&gt;.h6&lt;/code&gt; to apply to your HTML, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&amp;quot;c-nav&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;h5&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;h5&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;h5&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Link&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like the simplicity of this solution where there’s one source of truth for typography. You’ll always be able to tell the number of different typography sizes in your website by just visiting a &lt;code&gt;_typography.scss&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Now, although the &lt;code&gt;.h1&lt;/code&gt; - &lt;code&gt;.h6&lt;/code&gt; class solution is great, I highly recommend against going with &lt;code&gt;.h1&lt;/code&gt; - &lt;code&gt;.h6&lt;/code&gt; for your classes, simply because they’re implicitly tied to &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;-&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;What happens if you have a &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element, but instead decide to style it with &lt;code&gt;.h3&lt;/code&gt;? Another developer who takes over your codebase might experience an initial dissonance they go &lt;em&gt;&amp;quot;why is&lt;/em&gt; &lt;code&gt;.h3&lt;/code&gt; &lt;em&gt;doing with&lt;/em&gt; &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;&lt;em&gt;?!&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, instead of &lt;code&gt;.h1&lt;/code&gt; to &lt;code&gt;.h6&lt;/code&gt;, I give typography classes &lt;em&gt;different prefixes&lt;/em&gt;, depending on whether they’re &lt;em&gt;larger or smaller than my base font-size&lt;/em&gt;. Here’s an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.t1&lt;/code&gt; - largest font-size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.t2&lt;/code&gt; - second largest font-size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.t3&lt;/code&gt; - third largest font-size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.s1&lt;/code&gt; - first font-size smaller that base font-size.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.s2&lt;/code&gt; - second font-size smaller that base font-size.&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These five classes are typically everything I need for every project (so far). The good thing about such a convention is that I’m able to tell the size of an element at a glance. In the example below, I know for sure this link is one size smaller than my base font-size.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav&amp;gt;&amp;lt;a class=&amp;quot;s1&amp;quot; href=&amp;quot;#&amp;quot; &amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, what happens if you don’t have control over your HTML, but want to include the typography class sizes nevertheless?&lt;/p&gt;
&lt;p&gt;For this scenario, I’d recommend creating and using mixins, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin s1 {
  font-size: 14px;
  line-height: 1.25
}

h1,
nav a {
  @include s1;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One final thing before we move on. Pay special attention to this.&lt;/p&gt;
&lt;p&gt;Typography classes are &lt;em&gt;subsets of objects&lt;/em&gt;. You should &lt;em&gt;apply the same set of rules to typography classes as you would to objects&lt;/em&gt;. This means you should not add &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt; to typography classes, for example. Instead, these &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt; should be added directly to components. (Read Harry’s &lt;a href=&quot;https://csswizardry.com/2016/02/managing-typography-on-large-apps/&quot;&gt;managing typography on large apps&lt;/a&gt; to understand why I recommend this).&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;utility-classes-with-.u-&quot;&gt;Utility classes with .u-&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Utility classes are helper classes that perform one thing extremely well&lt;/em&gt;. They do it so well, &lt;em&gt;they override everything else&lt;/em&gt;. As such, they often only contain one property, and they include the &lt;code&gt;!important&lt;/code&gt; declaration.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.u-text-left { text-align: left !important; }
.u-text-center { text-align: center !important; }
.u-text-right { text-align: right !important; }

.u-hide-st-med {
  @media (max-width: 599px) {
    display: none !important;
  }
}

.u-hide-bp-med {
  @media (min-width: 600px) {
    display: none !important;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The classes I just stated here are almost everything I ever use for utilities. I’ve never found a need to go beyond these classes.&lt;/p&gt;
&lt;p&gt;Phew. It’s about time I shut up and let you get back to work/play/study or whatever you’re doing, so let’s wrap up.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this article, I’ve shown you how I use namespaces to fill the gap that BEM left out. With the inclusion of namespaces, I’ve finally fulfilled all four criteria that I look for in a good architecture:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Classes must &lt;em&gt;bloat HTML as little as possible&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know if the component uses JavaScript&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know whether it’s safe to edit&lt;/em&gt; a class without interrupting other any other CSS.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know where a class fits in the grand scheme of things&lt;/em&gt; to prevent brain overload.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In short, I use a total of seven different namespaces. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.l-&lt;/code&gt;: layouts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.o-&lt;/code&gt;: objects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.c-&lt;/code&gt;: components&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.js&lt;/code&gt;: JavaScript hooks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.is-&lt;/code&gt;|&lt;code&gt;.has-&lt;/code&gt;: state classes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.t1&lt;/code&gt;|&lt;code&gt;.s1&lt;/code&gt;: typography sizes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.u-&lt;/code&gt;: utility classes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each namespace has a function to play within the grand scheme of things, which further reinforces hierarchy within the stylesheet.&lt;/p&gt;
&lt;p&gt;Up next, I’ll share with you how when to break these rules I’ve just set (&lt;em&gt;“huh? Again?! You really like breaking the rules huh?”&lt;/em&gt; 😅) and how I organize my CSS files.&lt;/p&gt;
&lt;p&gt;For now, I’m curious to hear your thoughts. What do you think of the namespaces I use? Is my ‘go-against-the-expert-namespaces’ use of &lt;code&gt;.o-&lt;/code&gt; and &lt;code&gt;.c-&lt;/code&gt; helpful/useful for you? Or does it confuse you even more? I’d love to hear what you think in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Writing modular CSS (Part 1) — BEM</title>
    <link href="https://zellwk.com/blog/css-architecture-1/"/>
    <updated>2017-03-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-architecture-1/</id>
    <content type="html">&lt;p&gt;Have you worked on large websites that spans more than a few pages? If you did, you probably realized the horrors of not conforming to a robust CSS architecture. You probably would also have researched on ways to write maintainable CSS.&lt;/p&gt;
&lt;p&gt;Since our industry is awesome, we don’t only have one recommended solution. Experts have jumped in and provided us with suggestions like BEM, OOCSS, SMACSS, Atomic Design and many others.&lt;/p&gt;
&lt;p&gt;Now, instead of suffering from &lt;em&gt;“I don’t know what to do”&lt;/em&gt;, the question becomes: &lt;em&gt;“there’s so many ways. Which should I try?” Should I use everything, only one approach or create a custom architecture from the possible picks out there?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I started off with only one approach. Then, as I tried different approaches, I began to include what I thought made sense into my process. In this article, I want to share with you how I structure my CSS and why I do so. Hopefully, it’ll help you find your preferred method.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-i-look-for-in-a-good-css-architecture&quot;&gt;What I look for in a good CSS Architecture&lt;/h2&gt;
&lt;p&gt;I looked for four things when I cobbled together different methodologies to create my convention. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I must &lt;em&gt;instantly know whether it’s safe to edit&lt;/em&gt; a class without interrupting other any other CSS. This is most important, especially when I need to make quick changes. I don’t want to be afraid of changing cause I’ll break something else.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know where a class fits in the grand scheme of things&lt;/em&gt; to prevent brain overload. This allows me to style things quickly without referencing back and forth.&lt;/li&gt;
&lt;li&gt;Classes must &lt;em&gt;bloat HTML as little as possible&lt;/em&gt; since I switch off when I see a long list of class names.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know if a component uses JavaScript&lt;/em&gt; so I don’t accidentally break any the component if I changed its classes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my search, I found that a combination of &lt;strong&gt;BEM&lt;/strong&gt; and &lt;strong&gt;namespacing&lt;/strong&gt; fulfills the criteria I look for.&lt;/p&gt;
&lt;h2 id=&quot;starting-with-bem&quot;&gt;Starting with BEM&lt;/h2&gt;
&lt;p&gt;BEM is the foundation to my approach. If you’ve never heard of BEM before, it stands for &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;element&lt;/code&gt; and &lt;code&gt;modifier&lt;/code&gt;. It looks incredibly ugly when you first feast your eyes on it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.block { /* styles */ }
.block__element { /* styles */ }
.block--modifier { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hated BEM to a point where I didn’t even give it a chance when I first got to know about it. I can’t remember what made me try BEM, but I realized how powerful it is to work with it. Let me explain by going through the entirety of what BEM is (with my modifications, of course).&lt;/p&gt;
&lt;h2 id=&quot;block&quot;&gt;Block&lt;/h2&gt;
&lt;p&gt;A block is a component. It’s a little abstract, so let’s use examples instead.&lt;/p&gt;
&lt;p&gt;Let’s say you’re building a contact form. In this case, the form can be a block. In BEM, blocks are written as class names, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.form { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason BEM uses a &lt;code&gt;.form&lt;/code&gt; class instead of the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element is because &lt;em&gt;classes allow for infinite reusability&lt;/em&gt;, even if the fundamental element should change in style.&lt;/p&gt;
&lt;p&gt;Buttons are good examples of blocks that can contain different possible styles. If you set the background color of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element to be red, all &lt;code&gt;&amp;lt;buttons&amp;gt;&lt;/code&gt; are forced to inherit the red background. Following which, you have to fix your code by overwriting your &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements (and probably end up with broken limbs in the process 🤕).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;button {
  background-color: red;
}

.something button {
  background-color: blue; /* 😱 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If styled a button with a &lt;code&gt;.button&lt;/code&gt; class instead, you can choose whether to use the &lt;code&gt;.button&lt;/code&gt; class on any &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements. Then, if you need a different background color, all you do is to change to a new class, say &lt;code&gt;.button--secondary&lt;/code&gt;, and you’re good to go!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.button {
  background-color: red;
}

.button--secondary {
  background-color: blue; /* 😄 */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This brings us to the next part of BEM — modifiers.&lt;/p&gt;
&lt;h2 id=&quot;modifiers&quot;&gt;Modifiers&lt;/h2&gt;
&lt;p&gt;Modifiers are flags that change the appearance of a said block. To use a modifier, you add &lt;code&gt;--modifier&lt;/code&gt; to the block.&lt;/p&gt;
&lt;p&gt;Moving on with the button example from above, the modified button would be named &lt;code&gt;.button--secondary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In traditional BEM, when you use a modifier, you’re supposed to &lt;em&gt;add the block and the modifier&lt;/em&gt; into your HTML so you don’t rewrite your &lt;code&gt;.button&lt;/code&gt; styles in the new &lt;code&gt;.button--secondary&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button class=&amp;quot;button&amp;quot;&amp;gt;Primary button&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button button--secondary&amp;quot;&amp;gt;Secondary button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.button {
  padding: 0.5em 0.75em;
  background-color: red;
}

.button--secondary {
  background-color: green;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how there’s no need to redeclare &lt;code&gt;padding&lt;/code&gt;s in &lt;code&gt;.button--secondary&lt;/code&gt; because it’s already been declared in button? This is sweet since BEM ensures you write DRY CSS without a ton of effort.&lt;/p&gt;
&lt;p&gt;However, I don’t really like declaring the &lt;code&gt;.button&lt;/code&gt; class in my HTML since &lt;code&gt;.button--modifier&lt;/code&gt; already tells me that it’s a &lt;code&gt;.button&lt;/code&gt; with a &lt;code&gt;--secondary&lt;/code&gt; flag. Ideally, my HTML should look like this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button class=&amp;quot;button&amp;quot;&amp;gt;Primary button&amp;lt;/button&amp;gt;
&amp;lt;button class=&amp;quot;button--secondary&amp;quot;&amp;gt;Secondary button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s much cleaner, isn’t it?&lt;/p&gt;
&lt;p&gt;Unfortunately, without the &lt;code&gt;.button&lt;/code&gt; class in the HTML, we have to revert back to a non-DRY CSS approach:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.button {
  padding: 0.5em 0.75em;
  background-color: red;
}

.button--secondary {
  padding: 0.5em 0.75em; /* 😱 */
  background-color: green;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh, anything that’s not DRY sucks 😢. But there are two ways to write DRY CSS without the extra HTML bloat!&lt;/p&gt;
&lt;h3 id=&quot;method-1%3A-use-a-mixin&quot;&gt;Method 1: Use a mixin&lt;/h3&gt;
&lt;p&gt;The first way, if you use Sass or any other preprocessor, is to &lt;em&gt;use a mixin to encapsulate all code&lt;/em&gt; that needs to be reused. In our button example, we just need to write &lt;code&gt;padding&lt;/code&gt; into a mixin. Here, I name the mixin after the block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin button {
  padding: 0.5em 0.75em;
}

.button {
  @include button; // 😄
  background-color: red;
}

.button--secondary {
  @include button; // 😄
  background-color: green;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hooray! Now we have the best of both worlds!🎉🎉🎉&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But but… what if I don’t use Sass?!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Chill! 😄. The second method I’m about to share uses vanilla CSS, so you can use it too!&lt;/p&gt;
&lt;h3 id=&quot;method-2%3A-use-css-attribute-selectors&quot;&gt;Method 2: Use CSS attribute selectors&lt;/h3&gt;
&lt;p&gt;This second method &lt;em&gt;uses CSS attribute selectors&lt;/em&gt; to perform a slightly more complex selection. I’ll show you what it is, then explain why this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* 😄 */
[class*=&#39;button&#39;]:not([class*=&#39;button__&#39;]) {
  padding: 0.5em 0.75em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, that’s not a selector that you’ll normally see anywhere, so let me break it down for you.&lt;/p&gt;
&lt;p&gt;The first part (&lt;code&gt;[class*=&#39;button&#39;]&lt;/code&gt;) tells the parser to look for all classes that contain the text &lt;code&gt;button&lt;/code&gt;. (&lt;code&gt;*=&lt;/code&gt; searches for anything that matches the exact string). Naturally, this means the CSS targets both &lt;code&gt;.button&lt;/code&gt; and &lt;code&gt;.button--modifier&lt;/code&gt;. Unfortunately, this also means the selector targets BEM elements as well, which is why the second part comes in.&lt;/p&gt;
&lt;p&gt;The second part (&lt;code&gt;:not([class*=&#39;button__&#39;])&lt;/code&gt;) tells the parser to exclude anything that contains &lt;code&gt;.button__&lt;/code&gt;, which excludes BEM elements. (BEM elements has the &lt;code&gt;.block__element&lt;/code&gt; syntax).&lt;/p&gt;
&lt;p data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;XMaGYb&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;XMaGYb&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/XMaGYb/&quot;&gt;XMaGYb&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;🎉🎉🎉&lt;/p&gt;
&lt;p&gt;(NOTE: I don’t use method 2 anymore since it adds unnecessary specificity to the &lt;code&gt;[class*=&#39;button&#39;]&lt;/code&gt;. If you choose to write modifiers like me, I highly suggest the first approach with mixins).&lt;/p&gt;
&lt;h3 id=&quot;dislike-bem-for-the-fugly-syntax%3F&quot;&gt;Dislike BEM for the fugly syntax?&lt;/h3&gt;
&lt;p&gt;You may dislike BEM for the fugly &lt;code&gt;--modifier&lt;/code&gt; syntax. I can see why. I loathed it too.&lt;/p&gt;
&lt;p&gt;But now, I’ve come to love the syntax because &lt;em&gt;I suck at naming things.&lt;/em&gt; Sometimes, I find the need to write BEM block or element uses more than a word. An example is &lt;code&gt;inner-section&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If I used &lt;code&gt;-modifier&lt;/code&gt; instead (as some methods suggest), it’ll be impossible for me to tell at a glance if &lt;code&gt;-section&lt;/code&gt; was a modifier. It’d be a false positive. Likewise, I won’t be able to immediately know whether &lt;code&gt;.button-secondary&lt;/code&gt; is a modifier too!&lt;/p&gt;
&lt;p&gt;It’s ironic, but the fugliness made my code cleaner and more maintainable. So highly recommend you try it out too :)&lt;/p&gt;
&lt;p&gt;Let’s move on to the third essential part of BEM — Elements.&lt;/p&gt;
&lt;h2 id=&quot;elements&quot;&gt;Elements&lt;/h2&gt;
&lt;p&gt;Elements are children of a block. To say that something is an element, you add &lt;code&gt;__element&lt;/code&gt; to the block name. So, if you see a class that says .&lt;code&gt;form__row&lt;/code&gt;, you’ll immediately know that there’s a &lt;code&gt;row&lt;/code&gt; element within the &lt;code&gt;.form&lt;/code&gt; block.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;form__row&amp;quot;&amp;gt;
    &amp;lt;!-- ... --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.form__row { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are &lt;em&gt;two advantages to BEM elements&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can keep CSS specificity relatively flat.&lt;/li&gt;
&lt;li&gt;You immediately know if something is a child element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To see why, consider the alternate approach of using two separate classes (that many frameworks do). You’ll probably use something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form class=&amp;quot;form&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;!-- ... --&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.form .row { /* styles */ }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use BEM elements, you can style &lt;code&gt;.form__row&lt;/code&gt; with a specificity of 10 instead of 20. Also, you can immediately tell (both in the HTML and CSS) that &lt;code&gt;.form__row&lt;/code&gt; is a child of &lt;code&gt;.form&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(By the way, if you haven’t gotten over the ugliness of the &lt;code&gt;__element&lt;/code&gt; syntax, wait till you see snake case classes when you use a third party plugin 😛)&lt;/p&gt;
&lt;p&gt;Moving on, there’s one thing you need to know about BEM elements. You &lt;strong&gt;should never chain BEM elements&lt;/strong&gt;. If your classes ends up like &lt;code&gt;.form__row__input&lt;/code&gt;, you’re doing something terribly wrong. (I did that when I started so don’t feel too bad about yourself! 🤗).&lt;/p&gt;
&lt;p&gt;There are two ways of getting around long BEM children chains. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chain grandchildren elements to the block whenever it makes sense&lt;/li&gt;
&lt;li&gt;Create new blocks to hold elements&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;chaining-grandchildren-elements-to-the-block&quot;&gt;Chaining grandchildren elements to the block&lt;/h3&gt;
&lt;p&gt;Although BEM recommends you to use write BEM elements as &lt;code&gt;.block__element&lt;/code&gt;, it doesn’t dictate how your HTML should be. So, whenever it makes sense to, you can chain your grandchildren elements to the block.&lt;/p&gt;
&lt;p&gt;Here’s an example. In the code below, you’ll see that &lt;code&gt;.article__header&lt;/code&gt; is a child to &lt;code&gt;.article&lt;/code&gt;. &lt;code&gt;.article__title&lt;/code&gt; is a grandchild to &lt;code&gt;article&lt;/code&gt; (or a child of &lt;code&gt;.article__header&lt;/code&gt;. There are no conflicts if you signify them both as a child of &lt;code&gt;.article&lt;/code&gt; since they’ll be used together in this form anyway.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;article class=&amp;quot;article&amp;quot;&amp;gt;
  &amp;lt;header class=&amp;quot;article__header&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;article__title&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this works, you’d also encounter situations where it just doesn’t make sense to chain grandchildren elements. Take for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;section class=&amp;quot;comments&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;comments__title&amp;quot;&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;article class=&amp;quot;comments__comment&amp;quot;&amp;gt;
    &amp;lt;h3 class=&amp;quot;comments__comment-title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;/article&amp;gt;
  &amp;lt;article class=&amp;quot;comments__comment&amp;quot;&amp;gt;
    &amp;lt;h3 class=&amp;quot;comments__comment-title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;/article&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uhh?&lt;/p&gt;
&lt;p&gt;This is where you’ll want to create new blocks to hold grandchildren elements.&lt;/p&gt;
&lt;h3 id=&quot;creating-new-blocks-to-hold-grandchildren-elements&quot;&gt;Creating new blocks to hold grandchildren elements&lt;/h3&gt;
&lt;p&gt;In the situation above, you can easily break &lt;code&gt;.comments__comment&lt;/code&gt; down into &lt;code&gt;.comments&lt;/code&gt; and &lt;code&gt;.comment&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;section class=&amp;quot;comments&amp;quot;&amp;gt;
  &amp;lt;h2 class=&amp;quot;comments__title&amp;quot;&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;article class=&amp;quot;comment&amp;quot;&amp;gt;
    &amp;lt;h3 class=&amp;quot;comment__title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;/article&amp;gt;
  &amp;lt;article class=&amp;quot;comment&amp;quot;&amp;gt;
    &amp;lt;h3 class=&amp;quot;comment__title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;/article&amp;gt;
  &amp;lt;!-- ... --&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Makes more sense, doesn’t it? If you do this, just make sure to place both &lt;code&gt;.comments&lt;/code&gt; and &lt;code&gt;.comment&lt;/code&gt; blocks in the same file for easy reference.&lt;/p&gt;
&lt;p&gt;Unfortunately, sometimes it’s not as straightforward as &lt;code&gt;.comments__comment&lt;/code&gt;. For example, let’s say you have a list element within a block.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;block&amp;quot;&amp;gt;
  &amp;lt;ul class=&amp;quot;block__list&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;block__item&amp;quot;&amp;gt;
      &amp;lt;!-- how would you name this class? --&amp;gt;
      &amp;lt;h3 class=&amp;quot;???????&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;!-- ... --&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you noticed, I have already chained &lt;code&gt;.block__item&lt;/code&gt;, which is a grandchild to &lt;code&gt;.block&lt;/code&gt;. It doesn’t make sense any further to chain children within &lt;code&gt;.block__item&lt;/code&gt; to &lt;code&gt;.block&lt;/code&gt; or I might end up with some mangled context.&lt;/p&gt;
&lt;p&gt;Yet, at the same time, since they are used together, it doesn’t really make sense to create a new block for &lt;code&gt;.block__list&lt;/code&gt; or &lt;code&gt;.block__item&lt;/code&gt;. What would you name it to keep it in context?&lt;/p&gt;
&lt;p&gt;In this case, I default to creating a pseudo block called &lt;code&gt;.item&lt;/code&gt; for &lt;code&gt;block__item&lt;/code&gt;. Take a look at the HTML below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;block&amp;quot;&amp;gt;
  &amp;lt;h3 class=&amp;quot;block__title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;ul class=&amp;quot;block__list&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;block__item&amp;quot;&amp;gt;
      &amp;lt;h3 class=&amp;quot;item__title&amp;quot;&amp;gt;&amp;lt;/h3&amp;gt;
    &amp;lt;/li&amp;gt;
    &amp;lt;!-- ... --&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A pseudo block, as it’s name suggests, is pseudo. There’s no actual declaration of &lt;code&gt;.item&lt;/code&gt; in the HTML above. However, there are elements chained to &lt;code&gt;.item&lt;/code&gt; within &lt;code&gt;.block__item&lt;/code&gt; where the pseudo block lives.&lt;/p&gt;
&lt;p&gt;In my CSS (Sass), I nest &lt;code&gt;.item&lt;/code&gt; elements within &lt;code&gt;.block__item&lt;/code&gt;, which gives it the required context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.block__item {
  .item__title {
    /* styles... */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may say, &lt;em&gt;“but that’s breaking BEM convention!”&lt;/em&gt;. That’s true, but read the &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2&quot;&gt;next article&lt;/a&gt;. You’ll see why I do this 😉.&lt;/p&gt;
&lt;p&gt;Next, there’s one more thing I add to BEM for my use case — containers.&lt;/p&gt;
&lt;h2 id=&quot;containers&quot;&gt;Containers&lt;/h2&gt;
&lt;p&gt;Sometimes (many, actually), I run into situations where I had to bleed the background color of a section while ensuring everything else is aligned, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/css-architecture/container.png&quot; alt=&quot;Image of a block that contains a background that bleeds out of it&quot;&gt;
  &lt;figcaption&gt;The greyish background bleeds out of alignment&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you’re familiar with building layouts, you’ll structure your HTML with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;section&amp;gt;
  &amp;lt;div class=&amp;quot;l-wrap&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;block&amp;quot;&amp;gt;
      &amp;lt;!-- ... --&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The question is, what should you name the block container? Or in this case, the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element. My default approach is to name in &lt;code&gt;block-container&lt;/code&gt;. I only use &lt;code&gt;-container&lt;/code&gt; for instances like this, so I feel it’s still acceptable. Do you have a better idea?&lt;/p&gt;
&lt;p&gt;(Btw, see the &lt;code&gt;.l-&lt;/code&gt; in &lt;code&gt;.l-wrap&lt;/code&gt;? That’s namespacing. I’ll share more about it in the &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2&quot;&gt;next article&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So, that’s how I use BEM in a nutshell. If you paid attention to the criteria I set above, you’d notice that I checked only two checkboxes:&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Classes must &lt;em&gt;bloat HTML as little as possible&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know where a class fits in the grand scheme of things&lt;/em&gt; to prevent brain overload.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The other two checkboxes aren’t fulfilled yet:&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;I must &lt;em&gt;instantly know if the component uses JavaScript&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;I must &lt;em&gt;instantly know whether it’s safe to edit&lt;/em&gt; a class without interrupting other any other CSS.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These two checkboxes will be checked in the &lt;a href=&quot;https://zellwk.com/blog/css-architecture-2&quot;&gt;next article&lt;/a&gt; when I discuss &lt;em&gt;namespacing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What are your thoughts? Did you learn something new? Is sharing my process any useful? I’d love to hear what you think in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Should you learn [insert shiny new tool]?</title>
    <link href="https://zellwk.com/blog/learn-tools/"/>
    <updated>2017-03-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learn-tools/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Oh look! Everyone is talking about Webpack now! Should I upgrade my workflow to use Webpack?!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Hmmmmm… Maaaybe I should use PostCSS since expert X highly recommends it. I can’t decide…”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“OH WOW. FACEBOOK USES REACT! REACT MUST BE HAWT! I NEED TO LEARN THAT TOO!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Are you familiar with any of these conversations? It’s not surprising if you are! New tools pop up in the frontend world incredibly quickly. Whenever something new pops up, people scream about how cool it is. Even industry experts begin using them. Heck, the expert you love and follow may even recommend you to use them!&lt;/p&gt;
&lt;p&gt;Do you feel pressured to try the new tool out? Do you feel like a shitty developer if you don’t keep up with the latest tools?&lt;/p&gt;
&lt;p&gt;If you do, you’re not alone!&lt;/p&gt;
&lt;p&gt;Today, I want to share with you a simple framework to determine if you should learn/switch to [insert shiny tool]. Read on if it sounds any interesting.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;It’s simple. There are five steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out what [insert tool] does.&lt;/li&gt;
&lt;li&gt;Figure out what sucks right now&lt;/li&gt;
&lt;li&gt;Determine if it’s worth the investment&lt;/li&gt;
&lt;li&gt;Learn it (if it’s worth it)&lt;/li&gt;
&lt;li&gt;Differentiate opinions from facts&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-1%3A-what-does-%5Binsert-tool%5D-do%3F&quot;&gt;Step 1: What does [insert tool] do?&lt;/h2&gt;
&lt;p&gt;The first step is to understand what the tool does on a high level. You’ll want to answer these three questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What does the tool do?&lt;/li&gt;
&lt;li&gt;What’s so awesome about it?&lt;/li&gt;
&lt;li&gt;What’s sucky about it?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More often than not, you only need a little bit of research to tell what the tool does. The articles you see circulating through your favorite newsletters and social media should be enough to bring you through this step.&lt;/p&gt;
&lt;p&gt;If you want to, you can dig a little deeper to find out what’s so awesome and what’s sucky about it.&lt;/p&gt;
&lt;p&gt;Want some examples? Let’s see…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostCSS&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What it does&lt;/em&gt;: It transforms your CSS so you write lesser code.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Special power&lt;/em&gt;: Write lesser code + use new CSS things! Yay!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sucky areas&lt;/em&gt;: Need to evaluate possible plugins.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What it does&lt;/em&gt;: Huge asset bundler with lots of options. Almost like a generic task runner, but specialized for asset bundling. Oh, and there’s a server thingy too.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Special power&lt;/em&gt;s: Hot-reload!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sucky areas&lt;/em&gt;: Hard to understand and configure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gulp&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What it does&lt;/em&gt;: Generic task runner that can &lt;a href=&quot;https://zellwk.com/blog/workflow-overview/&quot;&gt;automate all the things&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Special power&lt;/em&gt;: Extremely flexible and configurable&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sucky areas&lt;/em&gt;: Have to wait for maintainers to update their gulp plugins when new versions get released&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What it does&lt;/em&gt;: Like a special kind of template engine with performance improvements in the browser.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Special power&lt;/em&gt;: Can be used to make amazing + complex apps when combined with React Router and Redux&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Sucky areas&lt;/em&gt;: Shitloads to learn!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Right, the comments probably too short and doesn’t do any of the above tools justice. But the point is, &lt;em&gt;you don’t need to be 100% sure at this stage&lt;/em&gt; (you have to be using it to know everything!)&lt;/p&gt;
&lt;h2 id=&quot;step-2%3A-what%E2%80%99s-sucky-right-now%3F&quot;&gt;Step 2: What’s sucky right now?&lt;/h2&gt;
&lt;p&gt;What are you unhappy about with your current workflow?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you hate PHP? 😆&lt;/li&gt;
&lt;li&gt;Do you hate manually copy/pasting files?&lt;/li&gt;
&lt;li&gt;Do you hate writing JavaScript callbacks?&lt;/li&gt;
&lt;li&gt;Do you hate downloading libraries manually?&lt;/li&gt;
&lt;li&gt;Do you hate stressful deployment situations?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do you hate about your development processes right now? &lt;em&gt;Once you know what you hate/want to improve, you’ll be able to evaluate tools much more effectively&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For example, let’s say you build amazing Wordpress websites.&lt;/p&gt;
&lt;p&gt;If you want to improve your CSS authoring processes, you may want to add &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; or even &lt;a href=&quot;http://postcss.org/&quot;&gt;PostCSS&lt;/a&gt; into your workflow.&lt;/p&gt;
&lt;p&gt;If you want to use the latest enhancements in JavaScript, you may want to add &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; (or &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; or &lt;a href=&quot;http://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt;, depending on whether you need to import node packages).&lt;/p&gt;
&lt;p&gt;If you’re unhappy with triggering workflows separately, maybe you want to use &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; or npm scripts to trigger a chain of build commands for you!&lt;/p&gt;
&lt;p&gt;Do you need React, React Router or even Redux? It doesn’t really fit, does it? See how it becomes much easier once you know what you want to change? :)&lt;/p&gt;
&lt;p&gt;On the flipside, you can’t always tell if a tool is what you need from your current workflow. &lt;em&gt;Sometimes, you need something entirely new&lt;/em&gt;. Here’s an example:&lt;/p&gt;
&lt;p&gt;Let’s say your familiar with building websites with Wordpress, and you want to learn to build webapps.&lt;/p&gt;
&lt;p&gt;However, you don’t want to use Wordpress to build your webapp. Maybe you want to use Node (with Express), Python (with Django) or Ruby (with Rails).&lt;/p&gt;
&lt;p&gt;Each stack mentioned here works with a completely different (but strangely similar) process. They often use different tools. Understanding these constraints will help you in your search for your bunch of shiny new tools to use.&lt;/p&gt;
&lt;h2 id=&quot;step-3%3A-is-it-worth-your-investment%3F&quot;&gt;Step 3: Is it worth your investment?&lt;/h2&gt;
&lt;p&gt;Time is the most important resource you’ll ever have. You want to consider whether it’s worth it to spend time on [insert shiny tool]. Of course, besides time, you also want to consider your sanity and the risks for the project.&lt;/p&gt;
&lt;p&gt;Here are some things you can consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Will [insert tool] help you reduce errors&lt;/li&gt;
&lt;li&gt;Will [insert tool] help you write better code?&lt;/li&gt;
&lt;li&gt;Will [insert tool] prevent stressed deployment situations?&lt;/li&gt;
&lt;li&gt;Will [insert tool] help you feel better about your new process?&lt;/li&gt;
&lt;li&gt;Will [insert tool] shorten the time needed for your sucky process?&lt;/li&gt;
&lt;li&gt;How long do you have to learn [insert tool]?&lt;/li&gt;
&lt;li&gt;How long can you afford to spend to learn [insert tool]?&lt;/li&gt;
&lt;li&gt;Is it worth the risk to change to [insert tool] now?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As much as possible, try to consider different angles before you make your decision. &lt;em&gt;What you ultimately base your decision on is entirely up to you&lt;/em&gt;. &lt;strong&gt;It’s okay&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;It’s okay&lt;/em&gt; to change because you want to learn something new.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It’s okay&lt;/em&gt; to change because the expert you admired tells you to do so.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It’s okay&lt;/em&gt; to change because you hate your sucky processes right now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just remember &lt;strong&gt;it’s also okay not to change&lt;/strong&gt;. There’s no need to be pressured to change into something that’s not needed. If you’ve built a decent website with Wordpress right now, there’s no need to rush and change it to a static site generator unless that’s what you want.&lt;/p&gt;
&lt;p&gt;Don’t worry about what others say. It’s your project. (Of course, talk it through if you have a team!)&lt;/p&gt;
&lt;h2 id=&quot;step-4%3A-learn-and-implement&quot;&gt;Step 4: Learn and implement&lt;/h2&gt;
&lt;p&gt;If you decide to learn [insert tool], don’t learn halfheartedly. Make sure nothing stops you until you’re completely equipped with the knowledge you need. (With reason, of course).&lt;/p&gt;
&lt;p&gt;When you try to learn something deeply, articles on the web are often not enough. You need to experiment and try new things on your own.&lt;/p&gt;
&lt;p&gt;Sometimes, it helps immensely to buy courses and books that teach the topic in-depth. It’ll bring you to where you need to be in double quick time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need a CSS layouts course? Consider Rachel Andrew’s &lt;a href=&quot;https://thecssworkshop.com/&quot;&gt;CSS Layout Workshop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need to learn ES6? Consider Wes Bos’s &lt;a href=&quot;http://wesbos.com/es6-for-everyone/&quot;&gt;ES6 for everyone&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need to learn Animations? Consider signing up for Sarah Drasner and Val head’s &lt;a href=&quot;https://webanimationworkshops.com/&quot;&gt;web animation workshop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Need to learn accessibility? Consider Heydon Pickering’s &lt;a href=&quot;https://www.smashingmagazine.com/inclusive-design-patterns/&quot;&gt;Smashing mag book, inclusive design patterns&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(No affiliate links here. Feel free to click! 🤗).&lt;/p&gt;
&lt;p&gt;There are tons of books and courses created by well-meaning experts. &lt;em&gt;The wealth of knowledge they share, condensed in one book/course is intense that you’ll get up to speed in one short month&lt;/em&gt; (as opposed to banging your head on the wall for a year).&lt;/p&gt;
&lt;p&gt;Now, if you (unfortunately) read a book/course that’s not to par, don’t let that lousy experience stop you from learning [insert tool]!&lt;/p&gt;
&lt;p&gt;When I tried to learn Gulp in the past, I bought a book to help me with it. Unfortunately, what’s written there is almost the same as what’s written on the docs (why did I even buy the book in the first place? 😑). But I kept going and learned a ton. Now, I can use Gulp to help me automate looooots of stuff!&lt;/p&gt;
&lt;p&gt;(And because that book sucked, &lt;a href=&quot;http://automateyourworkflow.com/&quot;&gt;I wrote another that’s pretty amazing&lt;/a&gt;. What a shameless plug! 😜)&lt;/p&gt;
&lt;p&gt;Oh! While we’re there (with shameless plugs), I’m releasing my latest course, &lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Mastering Responsive Typography&lt;/a&gt;, next week. It’s a course for frontend developers who want to build good-looking websites with good typography with resorting to hacky CSS. Check it out if you geek out in web typography.&lt;/p&gt;
&lt;p&gt;Finally. Just one more step!&lt;/p&gt;
&lt;h2 id=&quot;step-5%3A-differentiate-opinions-from-facts&quot;&gt;Step 5: Differentiate opinions from facts&lt;/h2&gt;
&lt;p&gt;Huge loads of opinions fly around the web (even in offline, too!). If you’re not careful, you might succumb to opinions that lead you astray instead of helping you out!&lt;/p&gt;
&lt;p&gt;Let me illustrate with PostCSS as an example.&lt;/p&gt;
&lt;p&gt;If you heard of PostCSS, you probably would have thought of switching Sass with PostCSS (if you use Sass). Where does this thought come from?&lt;/p&gt;
&lt;p&gt;Maybe you heard you need to reduce dependencies as much as possible? Well, where’s the fun in that if you can’t use your favorite Sass libraries like &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt;Susy&lt;/a&gt; or &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt;? 😉&lt;/p&gt;
&lt;p&gt;Or maybe you thought must choose between Sass or PostCSS? If you are, then you probably should do more homework 😝. You don’t need to choose between them. You can use them both because the tool chain looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sass -&amp;gt; CSS -&amp;gt; PostCSS -&amp;gt; Final Output (CSS)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And well, maybe PostCSS will replace Sass eventually. Maybe, just maybe. But until that time comes, you’re not restricted to only one of them.&lt;/p&gt;
&lt;p&gt;One more thing. Don’t choose plugins/tools blindly because of what they advertise. One example I frown upon is the &lt;a href=&quot;http://cssnext.io/&quot;&gt;CSSNext&lt;/a&gt; PostCSS plugin.&lt;/p&gt;
&lt;p&gt;Don’t get me wrong. CSSNext is great and awesome. There’s only one thing I hate. It claims you can use CSS Variables in your code, but outputs pure values that have nothing to do with CSS Variables! 😡&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/learn-tools/css-next.jpg&quot; alt=&quot;CSS Next doesn&#39;t create any CSS Variables!&quot;&gt;
  &lt;figcaption&gt;CSS Next doesn&#39;t create any CSS Variables!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;We’re at the end!&lt;/p&gt;
&lt;p&gt;So, there’s no need to feel the pressure to change into [shiny new tool]. This &lt;em&gt;“I need to keep up!”&lt;/em&gt; pressure causes much burnout, and it’s probably the origin of the whole JavaScript fatigue thing (did you know that’s a thing?!).&lt;/p&gt;
&lt;p&gt;What you can do instead, is to evaluate whether you need [shiny new thing]. &lt;em&gt;Find a good reason to switch (or not switch) and stick by that decision&lt;/em&gt;. (Again, within reason, of course).&lt;/p&gt;
&lt;p&gt;If you decide to switch, make sure you &lt;em&gt;learn everything you can&lt;/em&gt;. Don’t learn anything halfheartedly because it’ll only do more harm than good in the long run.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;thanks for being a developer&lt;/strong&gt;. You’re one of the most wonderful people on the planet that make dreams come true! 💥💥💥&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to pair typefaces</title>
    <link href="https://zellwk.com/blog/typefaces/"/>
    <updated>2017-03-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/typefaces/</id>
    <content type="html">&lt;p&gt;The act of choosing two typefaces is probably the first (and often most difficult) task you do when creating a new design. Many people get stuck here, myself included.&lt;/p&gt;
&lt;p&gt;Recently, I discovered a simple method to pair typefaces effectively and I’d love to share them with you. (Hint: it’s a 3×3 grid).&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;There’s one prerequisite to use this 3×3 grid (which I will reveal shortly) – knowing how to categorize typefaces. So, let’s start there.&lt;/p&gt;
&lt;h2 id=&quot;categorizing-typefaces&quot;&gt;Categorizing typefaces&lt;/h2&gt;
&lt;p&gt;On a broad level, typefaces can be categorized into the six categories. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sans-serif&lt;/li&gt;
&lt;li&gt;Serif&lt;/li&gt;
&lt;li&gt;Slab-serifs (or Egyptians)&lt;/li&gt;
&lt;li&gt;Monospace&lt;/li&gt;
&lt;li&gt;Script (or Cursive)&lt;/li&gt;
&lt;li&gt;Display (or Decorative)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can split typefaces into the &lt;strong&gt;first three categories&lt;/strong&gt; by looking at the &lt;strong&gt;style of the serif&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If the typeface contains &lt;em&gt;no serifs&lt;/em&gt;, they fall into the &lt;em&gt;sans-serif category&lt;/em&gt;. (sans means without). Examples of sans-serif typefaces include Helvetica and Gill sans.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/sans-serif.png&quot; alt=&quot;Image of Helvetica typeface that contains no serifs&quot;&gt;
  &lt;figcaption&gt;Helvetica doesn&#39;t contain any serifs.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If the typeface contains serifs that look &lt;em&gt;blocky&lt;/em&gt;, they fall under the &lt;em&gt;slab-serif&lt;/em&gt; category. (slab means a large thick block). Slab-serifs are also called &lt;em&gt;Egyptians&lt;/em&gt; even though there’s no relationship between the serifs and Egyptian writing. Examples of slab-serifs include Archer and Museo Slab.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/slab-serif.png&quot; alt=&quot;Image of Museo Slab typeface that contains blocky serifs&quot;&gt;
  &lt;figcaption&gt;Museo Slab has blocky serifs.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Any other typeface&lt;/em&gt; that &lt;em&gt;contains serifs&lt;/em&gt; fall under the &lt;em&gt;serifs&lt;/em&gt; category. Examples include Garamond and Georgia.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/serif.png&quot; alt=&quot;Image of Garamond typeface that contains serifs&quot;&gt;
  &lt;figcaption&gt;Garamond has serifs, but they&#39;re not blocky.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Monospace&lt;/em&gt; typefaces are no strangers to us developers. They’re typefaces whose characters occupy the same amount of horizontal space. They’re often used in tabular data and code. Examples include Menlo and Monaco.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/monospace.png&quot; alt=&quot;Image of Menlo that shows each character taking up the same amount of space&quot;&gt;
  &lt;figcaption&gt;Each letter in Menlo takes up the same amount of space.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Script&lt;/em&gt; (or cursive) typefaces are often calligraphic in nature. They’re often used for short headlines, invitations and expressive text. Examples include Dancing Script and Lobster.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/script.png&quot; alt=&quot;Image of Dancing Script&quot;&gt;
  &lt;figcaption&gt;Dancing Script is a script typeface.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, &lt;em&gt;display typefaces&lt;/em&gt; are typefaces that are only used for large headlines. Many display typefaces are serif and sans-serif versions that are specially tweaked to look good at large sizes. Display typefaces also include &lt;em&gt;ornamentals&lt;/em&gt; and &lt;em&gt;decoratives&lt;/em&gt;, which can come in all sorts of form and styles. Examples include Freight Display and Abril Fatface.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/display.png&quot;&gt;
  &lt;figcaption&gt;Freight Display is a display typeface.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now you know how to classify typefaces into six major categories, which is great! Unfortunately, these major categories are too broad.&lt;/p&gt;
&lt;p&gt;To pair typefaces effectively, we often have to drill in deeper into the subcategories. We’re only going to look at sans-serifs, serifs and slab-serifs as we drill deeper since most typeface choices are made there.&lt;/p&gt;
&lt;h2 id=&quot;subcategorizing-sans-serifs%2C-serifs-and-slab-serifs&quot;&gt;Subcategorizing sans-serifs, serifs and slab-serifs&lt;/h2&gt;
&lt;p&gt;Things begin to get confusing when you begin to subcategorize. There’s a lot of subcategories, including but not limited to &lt;em&gt;humanist&lt;/em&gt;, &lt;em&gt;neo-humanist&lt;/em&gt;, &lt;em&gt;old style&lt;/em&gt;, &lt;em&gt;grotesque&lt;/em&gt;, &lt;em&gt;neo-grotesque&lt;/em&gt;, &lt;em&gt;transitional&lt;/em&gt;, &lt;em&gt;geometric&lt;/em&gt; and &lt;em&gt;modern&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Remembering&lt;/em&gt; the names of these subcategories, &lt;em&gt;differentiating&lt;/em&gt; between them and correctly &lt;em&gt;placing typefaces in them&lt;/em&gt; are three major challenges people face, myself included. After much research, I noticed you can group these subcategories into a simple &lt;strong&gt;3×3 grid&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/table-empty.jpg&quot; alt=&quot;Empty 3&amp;times;3 table with serif, sans-serif and slab-serif headers&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;To fill up the 3&amp;amp;times3; grid, we can look at three properties of the typeface. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The letterforms&lt;/li&gt;
&lt;li&gt;The stroke&lt;/li&gt;
&lt;li&gt;The tilt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the first two properties, it’s often enough to look at letters &lt;em&gt;e&lt;/em&gt; and &lt;em&gt;o&lt;/em&gt;. The third one is a layman term I came up with 😂.&lt;/p&gt;
&lt;p&gt;Let’s look at each of them.&lt;/p&gt;
&lt;h3 id=&quot;the-letterforms&quot;&gt;The letterforms&lt;/h3&gt;
&lt;p&gt;Pay careful attention to the &lt;em&gt;shape of the letters&lt;/em&gt;, especially of the letters &lt;em&gt;e&lt;/em&gt; and &lt;em&gt;o&lt;/em&gt;. Do they look like &lt;em&gt;circles&lt;/em&gt; or &lt;em&gt;squares&lt;/em&gt;? If they do, we can immediately classify the typeface as a &lt;strong&gt;geometric typeface&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Geometric&lt;/strong&gt; typefaces contain letterforms that are based off shapes. They look constructed as opposed to handwritten. Because of they seem constructed, they also give off a &lt;em&gt;modern&lt;/em&gt;, &lt;em&gt;cool&lt;/em&gt; and &lt;em&gt;impersonal&lt;/em&gt; vibe.&lt;/p&gt;
&lt;p&gt;The geometric subcategory is only applicable to sans-serif and slab-serif typefaces. So, we can fill up the 3×3 grid as follows:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/table-geo.jpg&quot; alt=&quot;bottom and bottom left slots of the table contians the word: Geometric&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Next, we look at the stroke.&lt;/p&gt;
&lt;h3 id=&quot;the-contrast-in-strokes&quot;&gt;The contrast in strokes&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;stroke&lt;/em&gt; of a typeface is &lt;em&gt;lines that make it up&lt;/em&gt;. Pay attention to these lines. Do they vary in size between different parts of the letters?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/stroke.png&quot; alt=&quot;Image that explains what stroke is&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;When we look at the stroke of a typeface, we’re only interested to use it to &lt;em&gt;categorize serifs&lt;/em&gt;. This is because it’s rare for sans-serif and slab-serifs to exhibit any difference in the stroke.&lt;/p&gt;
&lt;p&gt;If there’s &lt;em&gt;little stroke contrast&lt;/em&gt; (little difference between thinnest and thickest part), we can categorize the typeface as an &lt;strong&gt;old-style serif&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Old-style serifs are serifs that the oldest readable typefaces (according to our current standards. Blackletter comes before it, which is hardly readable now). They mimic handwriting and are thus calligraphic in nature, which causes their letters to tilt more (more on tilt later). Since they mimic handwriting, they’re often seen as &lt;em&gt;real&lt;/em&gt;, &lt;em&gt;empathetic&lt;/em&gt; and &lt;em&gt;traditional&lt;/em&gt;. They are also known as &lt;strong&gt;humanist serifs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, if there’s &lt;em&gt;huge stroke contrast&lt;/em&gt;, we can categorize the typeface as a &lt;strong&gt;Modern serif&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Modern serifs are deliberately constructed to stand out. Their letterforms often stand upright with zero tilt, which makes them &lt;em&gt;cool&lt;/em&gt; and &lt;em&gt;impersonal&lt;/em&gt;, like Geometric typefaces. They are also known as &lt;strong&gt;rational serifs&lt;/strong&gt; and &lt;strong&gt;didones&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, what lies between modern serifs and old-style serifs are &lt;strong&gt;transitional&lt;/strong&gt; serifs. Their &lt;em&gt;stroke contrast&lt;/em&gt; is distinguishably &lt;em&gt;larger than old-style&lt;/em&gt; serifs, but &lt;em&gt;not as much as modern&lt;/em&gt; ones.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/stroke-contrast.png&quot; alt=&quot;Increasing order of contrast in stroke from the left. Garamond, Baskerville and Didot&quot;&gt;
  &lt;figcaption&gt;See the difference in strokes in these three typefaces?&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After going through the stroke, our 3×3 grid becomes:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/table-serifs.jpg&quot; alt=&quot;Filled up serifs column with old-style, transitional and modern categories&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Lets move on to the tilt.&lt;/p&gt;
&lt;h3 id=&quot;the-tilt&quot;&gt;The tilt&lt;/h3&gt;
&lt;p&gt;If you draw a line through the thinnest points of the stroke, you’ll see the stress of the letters.&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/stress.png&quot; alt=&quot;Image showing what the stress is&quot;&gt;
  &lt;figcaption&gt;Stress is found by drawing a line through the thinnest parts of the stroke&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you paid attention so far, you’ll notice that stress can only be used to distinguish serif subcategories because you need to draw a line through the thinnest parts of the letterforms.&lt;/p&gt;
&lt;p&gt;Although it may seem pointless to look at stress since we already have sorted serifs into their respective categories, I found it helpful to distinguish between sans-serif humanist and grotesque typefaces.&lt;/p&gt;
&lt;p&gt;Let me explain.&lt;/p&gt;
&lt;p&gt;Letterforms with a diagonal stress (like old-style serifs) looks like they’re &lt;em&gt;tilted at an angle&lt;/em&gt;. Since they’re tilted, they mimic letters that are &lt;em&gt;created by hand&lt;/em&gt;. (We don’t hold the pen perfectly upright, do we?).&lt;/p&gt;
&lt;p&gt;Although the letters &lt;em&gt;o&lt;/em&gt; and &lt;em&gt;e&lt;/em&gt; can’t tell us if there’s any &lt;em&gt;stress&lt;/em&gt;, we can look at other letters, especially those with shoulders, like &lt;em&gt;h&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt;. If any of these shoulders looks as if they’re &lt;em&gt;tilted&lt;/em&gt; (or if there’s any stress), we can categorize the typeface as a &lt;strong&gt;humanist typeface&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An example of a humanist sans-serif typeface that exhibits this behavior is Lucida Sans.&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/tilt.png&quot; alt=&quot;Image showing what tilt of Lucida Sans vs tilt of Acumin Pro&quot;&gt;
  &lt;figcaption&gt;Shoulders of Lucida Sans seem to tilt more&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On the other hand, if the letters look like they’re upright, we can categorize them as &lt;strong&gt;grotesque&lt;/strong&gt; typefaces. As you may imagine, grotesque typefaces fall between humanist and geometric typefaces.&lt;/p&gt;
&lt;p&gt;Just to add to your typography vocabulary, grotesque typefaces are also called &lt;em&gt;grotesk&lt;/em&gt; or &lt;em&gt;gothic&lt;/em&gt;, depending on the language. So, if you see these names on a typeface, you’ll know immediately which category these fall under.&lt;/p&gt;
&lt;p&gt;Want an example? How about Aktiv Grotesk? :)&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/tilt-aktiv.png&quot; alt=&quot;Image of tilt in Aktiv Grotesk&quot;&gt;
  &lt;figcaption&gt;Shoulders of Aktiv Grotesk is almost vertical&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After looking at the &lt;em&gt;tilt&lt;/em&gt;, we can finally complete the 3×3 grid:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/table-full.jpg&quot; alt=&quot;3&amp;times;3 table filled entirely&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;And with that, we’re done with categorizing typefaces into their respective categories and subcategories.&lt;/p&gt;
&lt;p&gt;Before we move onto the next section, I want to highlight that &lt;em&gt;typeface classification is highly subjective&lt;/em&gt;. Everyone classifies typefaces differently so you just have to decide for yourself. Some typefaces can fall into multiple subcategories too. An example is Proxima Nova, which can fall into all three sans-serif subcategories at the same time.&lt;/p&gt;
&lt;h2 id=&quot;using-the-3%C3%973-grid&quot;&gt;Using the 3×3 grid&lt;/h2&gt;
&lt;p&gt;If you searched around for typeface pairing rules, you’d often come across the following two rules, amongst others:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pair sans-serif typefaces with serif (or slab-serif) typefaces&lt;/li&gt;
&lt;li&gt;Pair typefaces from the same era&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you follow the first rule, you automatically create contrast with your two typefaces, which is a good thing. I explain why contrast is so important in my typography course, &lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Mastering Responsive Typography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason why experts recommend you to pair typefaces from the same era (or even from the same designer) is because these typefaces contain similar letterforms. Similar letterforms create a sense of familiarity through repetition, which is why different typefaces can blend well with each other. (&lt;a href=&quot;https://zellwk.com/blog/why-vertical/rhythm&quot;&gt;Read this article&lt;/a&gt; an explanation of why repetiton creates familiarity)&lt;/p&gt;
&lt;p&gt;Coincidentally (maybe not!), our 3×3 grid helps you identify typefaces created in the same era without remembering the subcategories. It’s used this way:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2017/pairing-typefaces/table-groups.jpg&quot; alt=&quot;Image showing how to pair typefaces using categories&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;(This is mind blowing, isn’t it? 😉)&lt;/p&gt;
&lt;p&gt;Go ahead and try this out :)&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Today, you learned how to categorizes into six major subcategories and their respective subcategories. You also learned a technique to pairing (the 3×3 grid).&lt;/p&gt;
&lt;p&gt;Now go play around with the technique and let me know your thoughts in the comments!&lt;/p&gt;
&lt;p&gt;(This article as a sample of my responsive typography course, &lt;a href=&quot;https://mastering-responsive-typography.com/&quot;&gt;Mastering Responsive Typography&lt;/a&gt;)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fighting decision paralysis</title>
    <link href="https://zellwk.com/blog/fighting-decision-paralysis/"/>
    <updated>2017-02-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/fighting-decision-paralysis/</id>
    <content type="html">&lt;p&gt;It’s common for designers and web developers to suffer from decision paralysis. You know you’ve battled with it if you had problems like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spending hours choosing the right typefaces&lt;/li&gt;
&lt;li&gt;Obsessing over choosing the right framework&lt;/li&gt;
&lt;li&gt;Scratching your head over what to learn next&lt;/li&gt;
&lt;li&gt;Facing writer’s block&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Does any of them sound familiar?&lt;/p&gt;
&lt;p&gt;Decision paralysis has been the bane of my life so far. I battled against it again recently and I’m happy to say I finally got out of the rut (today!).&lt;/p&gt;
&lt;p&gt;In this article, I’d love to share my experiences with you and how I handle decision paralysis.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;decision-paralysis-can-surface-anywhere&quot;&gt;Decision paralysis can surface anywhere&lt;/h2&gt;
&lt;p&gt;For me, it appears in areas that I deem important. One of these areas is work.&lt;/p&gt;
&lt;p&gt;It can show up when I’m designing. If it does, I’ll find myself going back and forth about color, whitespace, typeface choices, font-sizes and almost every aspect of design that I can think of. Sometimes, I’d even create multiple logos and reject them all! (Which is why I still don’t have a logo nor favicon for this blog 😒).&lt;/p&gt;
&lt;p&gt;It can also appear when I’m coding. If it does, I’ll change my naming conventions, code architecture and function names numerous times, and I’d end up with a messy codebase that contains everything I conceived. Sometimes, I’d even spend hours (or weeks!) diving into rabbit holes to find the best practice for whatever I happen to work on.&lt;/p&gt;
&lt;p&gt;Want an example? I went searching for best practices for JavaScript promises and Mongo Database architecture just two weeks ago. None of these were immediately important for my code. But I spent precious time, which delayed the release of my project.&lt;span class=&quot;kaomoji&quot;&gt;¯\_(ツ)_/¯&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Decision paralysis hits me the hardest when I’m producing content for others (like the article you’re reading). It’s even worse when I create books and courses for sale.&lt;/p&gt;
&lt;p&gt;Sometimes, it gets so bad that I don’t only procrastinate. I flee from the work altogether. I’d come up with all sorts of excuses to stop myself from working (while hoping the work gets done by itself).&lt;/p&gt;
&lt;p&gt;(I wrote an article on &lt;a href=&quot;https://zellwk.com/blog/procrastination/&quot;&gt;beating procrastination&lt;/a&gt; previously, if you’re interested)&lt;/p&gt;
&lt;p&gt;Now, if you noticed I haven’t written for a while, that’s because I got stuck in a paralysis rut. I’m in the midst of getting ready to launch a responsive typography course, and I had problems deciding what’s the best articles to send you while during the launch.&lt;/p&gt;
&lt;p&gt;(It’s so lame, but it happens 😑)&lt;/p&gt;
&lt;h2 id=&quot;causes-of-decision-paralysis&quot;&gt;Causes of decision paralysis&lt;/h2&gt;
&lt;p&gt;I’ve observed that my decision paralysis stems from &lt;em&gt;five elements&lt;/em&gt; over the years.&lt;/p&gt;
&lt;p&gt;First: I have an &lt;strong&gt;unreasonably high standard&lt;/strong&gt;. To be honest, I don’t even consciously know what this standard is. I’ve never been completely satisfied with any work that I’ve done. Something is always wrong. Something is always missing. And it fed my desire to seek the best possible design, code and copy.&lt;/p&gt;
&lt;p&gt;Second: I’m plagued by &lt;strong&gt;incessant self-doubt&lt;/strong&gt;. I’d questions all my decisions over and over again, wondering if they’re right. Since it’s impossible to know if I made the right choice every single time, I sometimes get stuck asking myself the same questions over and over, afraid to make a decision.&lt;/p&gt;
&lt;p&gt;Third: I &lt;strong&gt;take results personally&lt;/strong&gt;. I’m constantly worried about my results. This, coupled with an unreasonably high standard, is a surefire fail to fail (horribly). I hate it when I fail.&lt;/p&gt;
&lt;p&gt;Fourth: &lt;strong&gt;I’m afraid of failing&lt;/strong&gt;. What would it mean if others say my work suck? Do I suck? Am I good enough to make anything for anyone? Am I worthy enough to continue living on this earth? (I can’t help it, I have dark thoughts 😶).&lt;/p&gt;
&lt;p&gt;Fifth: &lt;strong&gt;I’m afraid of succeeding&lt;/strong&gt;. Deep down, I don’t think about succeeding. I don’t know what success looks like, and I don’t want to think about what happens next. Will I need to make harder decisions? What if I can’t cope? Will I be able to pull off another success? What if I don’t? You can already see how my self-doubt comes into play 😒.&lt;/p&gt;
&lt;p&gt;These five elements cause my decision paralysis. I don’t know about you, but yours may be similar to mine. Yours might be different as well. It’s best you take some time no examine yourself.&lt;/p&gt;
&lt;p&gt;Now, knowing the causes of my decision paralysis, I can take some steps to fight against it.&lt;/p&gt;
&lt;h2 id=&quot;fighting-against-decision-paralysis&quot;&gt;Fighting against decision paralysis&lt;/h2&gt;
&lt;p&gt;First, I understand that I’m afraid of both failure and success. With this in mind, in makes sense for me to begin all projects by &lt;strong&gt;setting expectations upfront&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Some questions I’d ask myself are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What does success mean?&lt;/li&gt;
&lt;li&gt;What does failure mean?&lt;/li&gt;
&lt;li&gt;How do I measure if I have failed or succeeded?&lt;/li&gt;
&lt;li&gt;What’s next if I succeed?&lt;/li&gt;
&lt;li&gt;What’s next if I failed?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These questions free me from thinking about success or failure in the midst of the project (when I’m most vulnerable). It also frees me from taking results personally since I’d make sure I measure success or failure with a good measuring stick.&lt;/p&gt;
&lt;p&gt;Next, I also know that I have an unreasonably high standard which I’m incapable of meeting (always). So, I aim to produce work that’s &lt;strong&gt;good enough instead of epic&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;At this point, I define work to be good enough if it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gets the job done&lt;/li&gt;
&lt;li&gt;Useful to at least one person&lt;/li&gt;
&lt;li&gt;Follows practices I’ve learned so far&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These rules free me from the terror of making work that falls below my expectations (which always happens). As a result, my work isn’t perfect, but I get stuff done.&lt;/p&gt;
&lt;h2 id=&quot;does-decision-paralysis-get-you-too%3F&quot;&gt;Does decision paralysis get you too?&lt;/h2&gt;
&lt;p&gt;Decision paralysis gets everyone. You’re normal if you can’t decide or have problems creating awesome work. No need to beat yourself up for it anymore.&lt;/p&gt;
&lt;p&gt;Whenever you’re unsure, just remember: &lt;strong&gt;forget perfection&lt;/strong&gt;. &lt;em&gt;Set expectations&lt;/em&gt;, &lt;em&gt;do good-enough work&lt;/em&gt; and &lt;em&gt;let the results worry about itself&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to read faster and remember more</title>
    <link href="https://zellwk.com/blog/read-faster/"/>
    <updated>2017-01-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/read-faster/</id>
    <content type="html">&lt;p&gt;Reading is a skill I wanted to improve for ages. I wanted to read faster, because reading faster means I’ll learn faster. So, I tried to learn how to speed read many times in the past.&lt;/p&gt;
&lt;p&gt;Speed reading wasn’t too difficult. The sad thing is, I can’t seem to remember anything I read, which makes the speed useless.&lt;/p&gt;
&lt;p&gt;In 2017, since my theme for the year is experimentation, I wanted to see if I could improve my reading capabilities. This time, I found some success: I read 1.5 books and remembered most of what I read in three weeks.&lt;/p&gt;
&lt;p&gt;I’m so elated by the discovery of this technique and I’m happy to share it with you!&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Now, you may be wondering why I’m talking about reading as a skill on a tech blog. It seems hardly relevant. So, before I dive into the technique, let me share with you why I think reading is a crucial skill that we developers should master.&lt;/p&gt;
&lt;h2 id=&quot;why-is-reading-important&quot;&gt;Why is reading important&lt;/h2&gt;
&lt;p&gt;As developers, we need to learn things quickly since our industry moves lightning fast. To learn things, we need to absorb information.&lt;/p&gt;
&lt;p&gt;Of the information we come across, most of them come in the form of words. We read articles (like this one!), books and even documentations daily. Although you may also listen to podcasts and watch videos, they’ll still minor sources of information in the grand scheme of things.&lt;/p&gt;
&lt;p&gt;Since information mainly come in the form of words, we need reading skills to decipher what’s written, what’s important and how to use the information presented. The faster we read through, the more information we obtain (provided we remember what’s said).&lt;/p&gt;
&lt;p&gt;It’s also imperative we get the correct message from the writer. We have to understand the points the writer is driving at as opposed to what we concoct in our brains if we want to make sense of new materials.&lt;/p&gt;
&lt;p&gt;Now that I’ve harped on how reading is crucial, let’s dive into the technique.&lt;/p&gt;
&lt;h2 id=&quot;the-technique&quot;&gt;The Technique&lt;/h2&gt;
&lt;p&gt;The technique is divided into four phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pre-reading&lt;/li&gt;
&lt;li&gt;Reading&lt;/li&gt;
&lt;li&gt;Note-taking&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each phase is important and must be done in sequence. I’ll share more about each phase in the following sections.&lt;/p&gt;
&lt;p&gt;In case you were wondering, I discovered this technique by reading “&lt;a href=&quot;https://www.amazon.com/How-double-your-power-learn/dp/B00005W3IW&quot;&gt;How to double your power to learn&lt;/a&gt;” by Eugene M. Schwartz. I highly recommend you grab a copy of the book if you want to boost your learning capabilities. (Unfortunately, there’s no kindle version 😢).&lt;/p&gt;
&lt;h2 id=&quot;pre-reading&quot;&gt;Pre-reading&lt;/h2&gt;
&lt;p&gt;The pre-reading phase is an essential phase in this technique I’m sharing with you. Please do not skip it. I’m speaking from experience since I thought pre-reading was crap before I learned about the technique.&lt;/p&gt;
&lt;p&gt;We mainly read to extract information (unless you’re reading for enjoyment). To extract information, we need to know what’s important. But, before we read, we won’t know what’s important. How can you read quickly and remember what’s important if you don’t know what’s important in the first place?&lt;/p&gt;
&lt;p&gt;That’s what the pre-reading phase is here for.&lt;/p&gt;
&lt;p&gt;In the pre-reading phase, you create an &lt;strong&gt;outline&lt;/strong&gt; of what you’re reading. This outline allows you to differentiate between important points and details, which allows you to read and remember faster.&lt;/p&gt;
&lt;p&gt;To create the outline, you look at a series of signposts. For most articles and documentations, these &lt;strong&gt;four signposts&lt;/strong&gt; should be enough:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The title&lt;/li&gt;
&lt;li&gt;Section headings&lt;/li&gt;
&lt;li&gt;The intro&lt;/li&gt;
&lt;li&gt;The summary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An outline for this article might look similar to the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why learn reading?&lt;/li&gt;
&lt;li&gt;The technique&lt;/li&gt;
&lt;li&gt;Pre-reading&lt;/li&gt;
&lt;li&gt;Reading&lt;/li&gt;
&lt;li&gt;Note-taking&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, you may want to convert your outline into questions, like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why learn reading?&lt;/li&gt;
&lt;li&gt;What is the technique?&lt;/li&gt;
&lt;li&gt;How do I pre-read?&lt;/li&gt;
&lt;li&gt;How do I read?&lt;/li&gt;
&lt;li&gt;How do I take notes?&lt;/li&gt;
&lt;li&gt;How do I review?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see, the questions are quite straightforward. You can also construct alternate variations with who, what, where, when, why and how.&lt;/p&gt;
&lt;p&gt;If you do, you may even ask more questions, resulting in an outline like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why learn reading?&lt;/li&gt;
&lt;li&gt;What is the technique?&lt;/li&gt;
&lt;li&gt;Pre-reading
1. Why should I pre-read?
2. How to pre-read?&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’s not necessary to always read the intro and summary paragraphs. Once you’re able to construct the outline, feel free to begin reading.&lt;/p&gt;
&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;
&lt;p&gt;When reading, always remember you’re reading to extract information. The information you’re looking for can be found by answering the questions you’ve created in your outline.&lt;/p&gt;
&lt;p&gt;It helps to know that you only need to remember the main points you’ve outlined to remember the entire contents of what you read. Most words are just details, and you’ll remember them along with the main points.&lt;/p&gt;
&lt;p&gt;So, start reading by skimming through your content. Search aggressively to answer the questions in your outline.&lt;/p&gt;
&lt;p&gt;When you skim, make sure you read every word at least once. I made the mistake of skipping words and found myself hopelessly lost, and as a result, had to re-read what I just read.&lt;/p&gt;
&lt;p&gt;One helpful trick is to &lt;strong&gt;use only your eyes&lt;/strong&gt; for skimming. Refrain from reading the words in your mind, with your mouth or pointing at the word you’re reading. These acts reduce your speed dramatically.&lt;/p&gt;
&lt;p&gt;Here’s the important part.&lt;/p&gt;
&lt;p&gt;Whenever you &lt;strong&gt;hit a main point&lt;/strong&gt;, &lt;strong&gt;slow down&lt;/strong&gt;! Reduce your speed (if only slightly) to find the answer to your questions. Once you found an answer, use a pencil or highlighter to &lt;strong&gt;highlight&lt;/strong&gt; the main point with as little words as possible. These are the words you’ll use to remember the contents. This small act of highlighting helps you pick up and zoom in on the main ideas quickly.&lt;/p&gt;
&lt;p&gt;Sometimes, it’s impossible to highlight the words, especially since we’re reading articles and documentations most of the time. In this situations, I found that a temporary highlight by selecting the words with a mouse is often enough to help me recall the main points.&lt;/p&gt;
&lt;p&gt;One helpful thing I found is to resist the temptation to take notes when reading. (That’s what we’re doing next!). I noticed note-taking while reading often breaks my train of thought. I would forget the outline after taking notes for a small section, which means I had to redo the pre-reading phase again. 😢&lt;/p&gt;
&lt;p&gt;When you’re done reading the article, it’s time to move on to take some notes.&lt;/p&gt;
&lt;h2 id=&quot;note-taking&quot;&gt;Note-taking&lt;/h2&gt;
&lt;p&gt;You don’t have to take notes for everything you read. That’ll be too time consuming. You will, however, want to &lt;strong&gt;take notes&lt;/strong&gt; for things you want &lt;strong&gt;to remember&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The note-taking phase happens right after you’ve finished reading. Taking notes at this stage has two benefits.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It forces you to refresh your memory right away, which helps you remember things longer.&lt;/li&gt;
&lt;li&gt;It allows you to check whether you’ve remembered what you just read correctly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Taking notes (whenever you do it) helps you organize information in an orderly manner, which helps in memory retention. So, taking notes is helpful!&lt;/p&gt;
&lt;p&gt;Now, let’s dive into note-taking process. There are five steps (generally):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put aside what you’re reading.&lt;/li&gt;
&lt;li&gt;Create notes from memory.&lt;/li&gt;
&lt;li&gt;Check if notes are accurate.&lt;/li&gt;
&lt;li&gt;Create notes again from memory.&lt;/li&gt;
&lt;li&gt;Check again if new notes are accurate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, you &lt;strong&gt;put aside what you’ve read&lt;/strong&gt;. Putting aside what you’ve read helps you resist the urge to check back when you take notes. (This will make sense in the next step).&lt;/p&gt;
&lt;p&gt;Second, you &lt;strong&gt;create notes from memory&lt;/strong&gt;. Creating notes from memory forces you to recall what you’ve read immediately, which helps you retain the information for a longer period of time. It also has the added benefit of letting you check if you understood everything correctly.&lt;/p&gt;
&lt;p&gt;I’m not sure if it matters if you choose to write or type your notes. I prefer writing it down because I find it easier to remember things I’ve written.&lt;/p&gt;
&lt;p&gt;When you take notes, &lt;strong&gt;write only the main points&lt;/strong&gt;. You may &lt;strong&gt;ignore the details&lt;/strong&gt; as they’ll come back to you as you read your notes. You’ll want to keep your notes as concise as possible, so it’s okay to use abbreviations too. Also, one big tip when taking notes is to &lt;strong&gt;use numbered lists and indents&lt;/strong&gt;. These two helped me remember most of my notes.&lt;/p&gt;
&lt;p&gt;Here’s an example of my notes for the reading phase:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read with eyes only (no movement)&lt;/li&gt;
&lt;li&gt;Skim through details (read every word)&lt;/li&gt;
&lt;li&gt;Read main pts carefully&lt;/li&gt;
&lt;li&gt;Underline / highlight important points&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although this looks simple, it contains all the information that triggers a recall of all the details I need.&lt;/p&gt;
&lt;p&gt;Third, you &lt;strong&gt;check your notes&lt;/strong&gt; for accuracy by skimming through what you’ve read. Fill up what’s missing and correct what’s wrong. The highlights help A LOT at this point, especially if you read a chapter that’s 20-30 pages in a book.  It’s not as crucial for articles or documentations though.&lt;/p&gt;
&lt;p&gt;Fourth, you &lt;strong&gt;rewrite your notes&lt;/strong&gt; again, from memory. This second repetition helps even more in keeping the content fresh in your mind. If you like more information, you might want to check out what’s known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Forgetting_curve&quot;&gt;forgetting curve&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;check your notes again&lt;/strong&gt;. This time, check against the notes you’ve made in the first round. Everything should already be there so it should suffice. If you only had one or two errors this time, feel free to make the corrections directly on the note and &lt;strong&gt;keep it somewhere safe&lt;/strong&gt;. Otherwise, you might want to rewrite your notes again. Personally, I use &lt;a href=&quot;https://www.evernote.com/referral/Registration.action?sig=b02464b20511ac749f962b6e84adda9d8cc1af4a0634125ec5047c2dcad295cb&amp;amp;uid=4350313&quot;&gt;Evernote&lt;/a&gt; for the notes I’ve written this way. (Note: it’s a referral link. But don’t worry, Evernote is free).&lt;/p&gt;
&lt;p&gt;Let’s proceed to the final step: review.&lt;/p&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;
&lt;p&gt;Reviewing your notes is the fourth and final step of the process. It lets you remember things longer.&lt;/p&gt;
&lt;p&gt;Since I’m only three weeks into the technique, I can’t say for sure if I’m doing the reviews correctly. So, I’ll share what I think worked for me so far.&lt;/p&gt;
&lt;p&gt;There are three periods where you should review what you’ve read:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The same evening&lt;/li&gt;
&lt;li&gt;The next day&lt;/li&gt;
&lt;li&gt;In one week&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When reviewing the &lt;strong&gt;same evening&lt;/strong&gt;, you &lt;strong&gt;recreate the notes&lt;/strong&gt; you had &lt;strong&gt;from memory&lt;/strong&gt;. This helps you burn the notes deeper into memory. Yes, it’s a lot of work, but being able to remember things is always a plus (especially when you’re short on time).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The next day&lt;/strong&gt;, you &lt;strong&gt;briefly read&lt;/strong&gt; through your notes to jog your memory again. This time, you’ll also want to &lt;strong&gt;ask yourself&lt;/strong&gt; how this information links with whatever you know. A one sentence summary should be good enough to associate what you’ve read with what you know, which increases your chances of a memory recall at the right time.&lt;/p&gt;
&lt;p&gt;Finally, in one week, you’ll want to go through what you’ve read and figure out how they link with each other or with what you already know. This further strengthens your memory recall ability.&lt;/p&gt;
&lt;p&gt;One final thing that might be useful is to create a mind map of everything you know so far in your career. (I know, that’s a shit ton of work). This should help you consolidate everything you know. I intend to do this sometime this year, and I’ll report my findings!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Reading is an important skill for us web developers since we need to obtain (and retain) information at an alarming rate. What you’ve read here is a technique to help you read faster and remember more. Apply these techniques and you’ll be surprised how much information you can remember without even looking them up. (I’m pleasantly surprised myself!).&lt;/p&gt;
&lt;p&gt;Now, go ahead and maximize your learning! I’d love to hear your thoughts on this article and what you intend to learn next with this technique!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Year End Review – 2016</title>
    <link href="https://zellwk.com/blog/2016-review/"/>
    <updated>2017-01-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/2016-review/</id>
    <content type="html">&lt;p&gt;2016 was a strange year. It was full of up and downs. On one hand, I had eye-opening experiences that taught me a lot about myself. On the other hand, I was horrified at the amount of time I wasted accomplishing nothing, so much that I ended the year loathing myself to the core.&lt;/p&gt;
&lt;p&gt;But that’s enough. The new year is here. It’s time for me to recollect my experiences and regrets and move on. This article is a summary of my learnings in 2016 and my plans for 2017.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;2016-in-review&quot;&gt;2016 in review&lt;/h2&gt;
&lt;p&gt;Let me begin with a list of accomplishments I completed in 2016:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Taught programming physically for a month at General Assembly Singapore&lt;/li&gt;
&lt;li&gt;Published one article a week for approximately six months&lt;/li&gt;
&lt;li&gt;Was interviewed on one podcast&lt;/li&gt;
&lt;li&gt;Conducted interviews with several typography and design experts&lt;/li&gt;
&lt;li&gt;Gave a talk at two virtual conferences (RWD Summit and Sass Summit)&lt;/li&gt;
&lt;li&gt;Gave my first overseas conference talk (Fronteers)&lt;/li&gt;
&lt;li&gt;Hosted at a conference for the first time (CSSConf.Asia)&lt;/li&gt;
&lt;li&gt;Conducted a workshop (about responsive typography)&lt;/li&gt;
&lt;li&gt;Built and released Typi&lt;/li&gt;
&lt;li&gt;Built &lt;a href=&quot;http://arthit.com/&quot;&gt;Arthit.com&lt;/a&gt; (freelance project)&lt;/li&gt;
&lt;li&gt;Built a course platform (with React, Redux, Express and MongoDB)&lt;/li&gt;
&lt;li&gt;Released a course (Mastering Responsive Typography)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned a huge amount through these experiences. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I enjoy teaching, but I don’t enjoy teaching everyone.&lt;/li&gt;
&lt;li&gt;Continue to learn, continue to write. Discovering new knowledge and sharing them keeps me happy. It’s also useful for you.&lt;/li&gt;
&lt;li&gt;Publish more, publish regularly. Sticking to a publishing forced me to release articles that I’m afraid of releasing. Surprisingly,  my best articles and achievements also came from this period of tremendous self-doubt. So, I should release articles if I find them useful, because others may find them useful too.&lt;/li&gt;
&lt;li&gt;Make things for myself and for others in the way I want to make them, regardless of any criticisms. That’s how I stay happy and productive.&lt;/li&gt;
&lt;li&gt;Conserve my time and energy and direct them towards things important things. My time and energy are limited.&lt;/li&gt;
&lt;li&gt;Don’t procrastinate. Procrastinating causes me to delay completing things. It leads to having more work piled up, which eventually makes me feel it’s impossible to complete that thing. Then, I give up and beat myself up.&lt;/li&gt;
&lt;li&gt;It’s okay to be a human with likes and dislikes. It’s okay to disagree with others. It’s okay to have different viewpoints. It’s okay even if everyone else in the world disagrees with me.&lt;/li&gt;
&lt;li&gt;To achieve good communications, the first step is to completely understand another person’s perspectives&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What comes next is a list of failures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Articles rejected by places I want them to be published in (like Smashing Magazine, A List Apart, CSS Tricks, etc.)&lt;/li&gt;
&lt;li&gt;Talk proposals rejected (or ignored)&lt;/li&gt;
&lt;li&gt;Push back launch of Mastering Responsive Typography by several months&lt;/li&gt;
&lt;li&gt;Withholding video content I’ve recorded&lt;/li&gt;
&lt;li&gt;Falling short of goals I set last year&lt;/li&gt;
&lt;li&gt;Super duper low efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, I gleaned useful lessons from my failures as well. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rejection doesn’t necessarily mean my content sucks. It doesn’t mean what I’m doing is worthless. It doesn’t mean what I’m doing is harmful to people. People’s opinions are just different sometimes (most of the time actually). As long as my work helps someone, I have a strong reason to continue producing.&lt;/li&gt;
&lt;li&gt;Fear and feelings of inadequacy fuels procrastination, which further feeds fear and feelings of impossibility. The only way to break out of the vicious loop is to focus on the fact that my work is useful, and it helps. Then, get to work without worrying about the results.&lt;/li&gt;
&lt;li&gt;Remove drama from my work. I get affected too much by my incessant negative self-talk and wallow in my incompetence.&lt;/li&gt;
&lt;li&gt;Greed is not good (at least for me). I think too much about money, and as a result, think up products and add-ons to try and make more money. All of which I refuse to put out at the end because it doesn’t benefit you as much as I want my work to. This means lots of time and effort wasted in pseudo productive work.&lt;/li&gt;
&lt;li&gt;Year-end resolutions don’t work for me. I promise myself things I think I want, but ultimately proof to myself that I don’t really want them as time progresses.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that, I can move on to the new year.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next-in-2017&quot;&gt;What’s next in 2017&lt;/h2&gt;
&lt;p&gt;2017 is a year of experimentation. It’s a year where I discard my notions of right and wrong, good and bad, what I think works and what doesn’t in pursuit of what really works.&lt;/p&gt;
&lt;p&gt;This means I’m going to try a bunch of new things that I’m uncomfortable with. Some of these new things will affect only me. Others will affect you as well. I might fail spectacularly at some; or I might not.&lt;/p&gt;
&lt;p&gt;I’ll conduct experiments on my personal efficiency, capabilities, learning speed, what I like, what I dislike, what recharges me, what encourages me and so on. (To be honest, experimenting is a less intimidating way of challenging myself since my self-worth isn’t at stake. I’m just trying things out and recording my observations)&lt;/p&gt;
&lt;p&gt;That’s all I have to say to myself today. Next, let’s talk about how my experiments affect you (Thanks for reading through all my self-talk, btw. I appreciate it.)&lt;/p&gt;
&lt;h2 id=&quot;what-i-intend-to-do-for-you-in-2017&quot;&gt;What I intend to do for you in 2017&lt;/h2&gt;
&lt;p&gt;I intend to create new courses, services and free materials this year. The &lt;em&gt;theme of the year&lt;/em&gt; for this blog is &lt;strong&gt;fundamentals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I intend to &lt;strong&gt;write materials and build courses&lt;/strong&gt; that help &lt;em&gt;solidify your foundations as a frontend developer&lt;/em&gt;. Here, I’ll guide you past the murky intermediate waters where most budding developers give up. Once you’re done understanding the foundations, you’ll be able to pick anything up quickly. &lt;a href=&quot;https://zellwk.com/fundamentals&quot;&gt;Sign up here&lt;/a&gt; for more details if you are interested in something like this.&lt;/p&gt;
&lt;p&gt;Second, I’m building a &lt;strong&gt;roadmap&lt;/strong&gt; for people who are unsure how to &lt;em&gt;start&lt;/em&gt; learning web development, or have problems figuring out &lt;em&gt;what to learn next&lt;/em&gt;. It also helps you grasp the landscape of the development world (which became ultra complicated over the years). &lt;a href=&quot;https://zellwk.com/roadmap&quot;&gt;Sign up here&lt;/a&gt; for more information if you are interested in something like this.&lt;/p&gt;
&lt;p&gt;Third, I’m opening up &lt;strong&gt;1-1 mentoring sessions&lt;/strong&gt; since many of you asked. In these mentoring sessions, you can ask me anything you want and I’ll respond with as much details as I can. If you’re interested, &lt;a href=&quot;https://zellwk.com/mentoring&quot;&gt;head over here&lt;/a&gt; and I’ll share more details with you.&lt;/p&gt;
&lt;p&gt;Finally, I’m &lt;strong&gt;conducting workshops and giving talks&lt;/strong&gt; for companies that are interested in improving their team’s frontend development skills. &lt;a href=&quot;https://zellwk.com/training-and-workshops&quot;&gt;Check this page for more information&lt;/a&gt;. If there’s something you like me to talk about in your company, feel free to send me an email and we’ll take it from there.&lt;/p&gt;
&lt;h2 id=&quot;what-are-you-up-to%3F&quot;&gt;What are you up to?&lt;/h2&gt;
&lt;p&gt;Experimentation—that sums up what I’m doing for 2017. I’ll try many things out and hopefully find success in some. The four things I’m trying out for 2017 are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;creating materials with a focus on fundamentals&lt;/li&gt;
&lt;li&gt;building a web development roadmap&lt;/li&gt;
&lt;li&gt;1-1 mentoring sessions for frontend developers&lt;/li&gt;
&lt;li&gt;training and workshops&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What about you? What do you have in store for 2017? What do goals you want to achieve? How can I help you achieve them? Let me know in the comments below. If you’re shy, you can also &lt;a href=&quot;mailto:zell@zellwk.com&quot;&gt;send me an email&lt;/a&gt;. I read every reply.&lt;/p&gt;
&lt;p&gt;With that, have a great 2017!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to build a responsive grid system</title>
    <link href="https://zellwk.com/blog/responsive-grid-system/"/>
    <updated>2016-11-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/responsive-grid-system/</id>
    <content type="html">&lt;p&gt;One of the best complement for a custom web design is a custom-made responsive grid system. You can customize everything you need, including the number of columns, the size of columns and gutters and even the breakpoints you change your layouts at.&lt;/p&gt;
&lt;p&gt;Unfortunately, many people don’t even try building custom grids for their web designs because they lack the knowledge and confidence to build one.&lt;/p&gt;
&lt;p&gt;So, in this article, I want to help you gain the knowledge and confidence you need to build a custom-made grid. Hopefully you can break away from frameworks and try a custom grid for your next project by the end of this article.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-goes-into-a-grid-system&quot;&gt;What goes into a grid system&lt;/h2&gt;
&lt;p&gt;You need to know three things before building your grid system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, you need to design your grid&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Are you using equal-width or unequal-width columns? How many columns do you have? What’s the size of your gutters and columns?&lt;/p&gt;
&lt;p&gt;You can only make the right grid calculations when you’ve answered the above questions. To help you out, I wrote an article about &lt;a href=&quot;https://zellwk.com/blog/designing-grids&quot;&gt;designing grids&lt;/a&gt;. Give it a read if you’re want to learn to design a grid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, you need to know how your grid behaves at different viewports.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Will you resize columns and gutters proportionally when viewport width changes? Will you change your columns while keeping gutters fixed? Will you change the number of columns at specific breakpoints?&lt;/p&gt;
&lt;p&gt;You need to answer these questions as well. They give you clues on how to calculate your column and gutter widths. I wrote about these considerations in &lt;a href=&quot;https://zellwk.com/blog/designing-grids/&quot;&gt;the same article&lt;/a&gt; as well, so give it a read if you’re unsure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third, will you like to write grid classes in your HTML?&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The frontend world is split into two factions when it comes to grids systems.&lt;/p&gt;
&lt;p&gt;One faction writes grid classes in the HTML (this is how Bootstrap and Foundation does it). I call it these &lt;strong&gt;HTML grid system&lt;/strong&gt;. Their HTML looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-9&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-md-3&amp;quot;&amp;gt;Sidebar&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second faction creates their grids in CSS. I call these &lt;strong&gt;CSS Grid systems&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;HTML for CSS grid systems are simpler&lt;/em&gt; compared to the HTML for HTML grid systems. You need lesser markup for the same thing you create. You also don’t need to remember what the grid classes are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content-sidebar&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the flipside, the &lt;em&gt;CSS for CSS grid systems is more complex&lt;/em&gt;. You need to think through to reach a simple solution (if you haven’t created one before).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What would I choose?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many frontend experts opt for CSS grid systems. I, too, belong to the CSS grid system faction (although I don’t dare to call myself an expert).&lt;/p&gt;
&lt;p&gt;I’ve written about why I choose CSS grid systems over HTML grid systems in &lt;a href=&quot;https://zellwk.com/blog/migrating-from-bootstrap-to-susy/&quot;&gt;another article&lt;/a&gt; if you’re interested to find out why. I also wrote &lt;a href=&quot;https://zellwk.com/blog/from-html-grids-to-css-grids/&quot;&gt;an article&lt;/a&gt; to help you migrate from HTML grid systems to CSS grid systems if you’re interested in making the switch.&lt;/p&gt;
&lt;p&gt;(So many articles to read… 😢)&lt;/p&gt;
&lt;p&gt;Anyway, that’s the three things you need to know before you can build your grid system. In summary, they are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your grid design&lt;/li&gt;
&lt;li&gt;How your grid behaves at different viewports&lt;/li&gt;
&lt;li&gt;Whether to use HTML or CSS grid systems&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can only move forward if we have these prerequisites. For the rest of this article, here’s what we’re going to do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The grid has a maximum &lt;em&gt;width of 1140px&lt;/em&gt;, with &lt;em&gt;12 columns of 75px&lt;/em&gt; and &lt;em&gt;gutters of 20px&lt;/em&gt;. (Read &lt;a href=&quot;https://zellwk.com/blog/designing-grids/&quot;&gt;this article&lt;/a&gt; for hints on how to get these numbers)&lt;/li&gt;
&lt;li&gt;When the viewport is resized, the columns should resize proportionally while &lt;em&gt;gutters remain fixed&lt;/em&gt; at 20px. (Read &lt;a href=&quot;https://zellwk.com/blog/designing-grids/&quot;&gt;this article&lt;/a&gt; for why I choose this behavior).&lt;/li&gt;
&lt;li&gt;I’m going to use &lt;em&gt;CSS grid systems&lt;/em&gt; (Read &lt;a href=&quot;https://zellwk.com/blog/migrating-from-bootstrap-to-susy/&quot;&gt;this article&lt;/a&gt; for why I recommend them).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that, let’s begin!&lt;/p&gt;
&lt;h2 id=&quot;building-your-grid-system&quot;&gt;Building your grid system&lt;/h2&gt;
&lt;p&gt;There are eight steps to building your grid system. Here are the steps in summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose a spec to create your grid with&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;box-sizing&lt;/code&gt; to &lt;code&gt;border-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a grid container&lt;/li&gt;
&lt;li&gt;Calculate column-width&lt;/li&gt;
&lt;li&gt;Determine gutter positions&lt;/li&gt;
&lt;li&gt;Create a debug grid&lt;/li&gt;
&lt;li&gt;Make layout variations&lt;/li&gt;
&lt;li&gt;Make your layouts responsive&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of these eight steps are relatively straightforward once you go through them. I’ll spell out everything you need to know as we walk through each step.&lt;/p&gt;
&lt;h2 id=&quot;step-1%3A-choose-a-spec&quot;&gt;Step 1: Choose a spec&lt;/h2&gt;
&lt;p&gt;Are you using &lt;em&gt;CSS Grid&lt;/em&gt;, &lt;em&gt;Flexbox&lt;/em&gt;, or plain old &lt;em&gt;floats&lt;/em&gt; to create your grid? Your considerations and implementation details will be different for each spec.&lt;/p&gt;
&lt;p&gt;CSS Grid is by far the best tool for creating grids (because grids 😎) of all three specs. Unfortunately, support for CSS grid leaves more to be desired right now. Every browser hides the CSS Grid Layout behind a flag, which is why we’re not going to touch it in this article. I highly suggest checking out &lt;a href=&quot;http://gridbyexample.com/&quot;&gt;Rachel Andrew’s work&lt;/a&gt; if you’re interested in CSS Grid.&lt;/p&gt;
&lt;p&gt;Next, we come to Flexbox and Floats. The considerations for using these two specs are similar, so you can pick either one and follow through with this article. I’m going with Floats here because it’s easier to explain and for beginners to get.&lt;/p&gt;
&lt;p&gt;If you choose to go with Flexbox though, bear in mind that there are slight nuances that you need to tweak.&lt;/p&gt;
&lt;h2 id=&quot;step-2%3A-set-box-sizing-to-border-box&quot;&gt;Step 2: Set box-sizing to border box&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;box-sizing&lt;/code&gt; property alters the default CSS Box model that’s used by browsers to calculate &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties. By altering &lt;code&gt;box-sizing&lt;/code&gt; to &lt;code&gt;border-box&lt;/code&gt;, we make it much easier to calculate column and gutter sizes. (You’ll see why later).&lt;/p&gt;
&lt;p&gt;Here’s an image that summarizes how &lt;code&gt;width&lt;/code&gt; is  calculated at different &lt;code&gt;box-sizing&lt;/code&gt; values.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/box-sizing.jpg&quot; alt=&quot;Box sizing property and how it affects width calculations&quot;&gt;
  &lt;figcaption&gt;Box sizing property and how it affects width calculations&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What I usually do is to set &lt;code&gt;box-sizing&lt;/code&gt; to &lt;code&gt;border-box&lt;/code&gt; to all elements on a website so &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; calculations remain consistent (and intuitive) across the board. Here’s how I do it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: if you need an in-depth explanation on &lt;code&gt;box-sizing&lt;/code&gt;, I suggest you &lt;a href=&quot;https://zellwk.com/blog/understanding-css-box-sizing/&quot;&gt;read this article&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;step-3%3A-create-the-grid-container&quot;&gt;Step 3: Create the grid container&lt;/h2&gt;
&lt;p&gt;Every grid has a container that determines the maximum width of the grid. I tend to call this &lt;code&gt;.l-wrap&lt;/code&gt;. The &lt;code&gt;.l-&lt;/code&gt; prefix stands for layout, and it’s a naming convention I’ve been using ever since I read &lt;a href=&quot;https://smacss.com/&quot;&gt;SMACSS&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/snookca&quot;&gt;Jonathan Snook&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.l-wrap {
  max-width: 1140px;
  margin-right: auto;
  margin-left: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I highly recommend using relative units like &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; instead of pixels for accessibility and responsive purposes. For this article, I’m writing everything in pixels because they’re easier to understand.&lt;/p&gt;
&lt;h2 id=&quot;step-4%3A-calculate-column-width&quot;&gt;Step 4: Calculate column width&lt;/h2&gt;
&lt;p&gt;Remember, we’re using floats to create our columns and gutters. When using floats, we only have five properties to create our columns and gutters with (you get a few more if you use Flexbox); these five properties are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;width&lt;/li&gt;
&lt;li&gt;margin-right&lt;/li&gt;
&lt;li&gt;margin-left&lt;/li&gt;
&lt;li&gt;padding-right&lt;/li&gt;
&lt;li&gt;padding-left&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you recall, the HTML for a CSS grid system looks similiar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;l-wrap&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;three-col-grid&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this HTML, we know the grid has a total of three columns in a row. We also know that no extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s are created for gutters. That means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create columns with the &lt;code&gt;width&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;We create gutters either with &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt; properties&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It gets complicated if we think about columns and gutters at the same time, so let’s assume we’re creating a grid without gutters first.&lt;/p&gt;
&lt;p&gt;The output for such a grid will resemble something like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/columns.png&quot; alt=&quot;Three-column grid without gutters&quot;&gt;
  &lt;figcaption&gt;Three-column grid without gutters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is the point where we have to do some math. We know that the grid has a maximum-width of 1140px, which means each column is 380px (&lt;code&gt;1140 ÷ 3&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.three-col-grid .grid-item {
  width: 380px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good. We’ve made a grid that works great at a viewport larger than 1140px. Unfortunately, it breaks when the viewport is smaller than 1140px.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/grid-break.gif&quot; alt=&quot;Grid breaks below 1140px&quot;&gt;
  &lt;figcaption&gt;Grid breaks below 1140px&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This means we can’t use pixels as the unit for our columns. We need a unit knows what&lt;/p&gt;
&lt;p&gt;This means we can’t use pixels as our measurement. We need a unit that can resize according to the width of the container. The only unit that does that is per cent (&lt;code&gt;%&lt;/code&gt;). So, we write width in percentages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.three-col-grid .grid-item  {
  width: 33.33333%;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you get from the above code is simply three-column grid without any gutters. When the browser resizes, these three columns will resize proportionally.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/grid-columns.gif&quot; alt=&quot;Three columns without gutters&quot;&gt;
  &lt;figcaption&gt;Three columns without gutters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One more thing before we move on. Whenever all children elements are floated in a container, the container’s height collapses. This phenomenon is called the &lt;a href=&quot;https://css-tricks.com/all-about-floats/&quot;&gt;float collapse&lt;/a&gt;. It’s as if the container doesn’t contain any children:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/float-collapse.png&quot; alt=&quot;Float collapse. Image from CSS Tricks&quot;&gt;
  &lt;figcaption&gt;Float collapse (image from CSS Tricks)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To fix this, what we need is a clearfix, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.three-col-grid:after {
  display: table;
  clear: both;
  content: &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use a preprocessor like Sass, you can convert this into a mixin, which allows you to use the same code in different places&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Clearfix
@mixin clearfix {
  &amp;amp;:after {
    display: table;
    clear: both;
    content: &#39;&#39;;
  }
}

// Usage
.three-col-grid { @include clearfix; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we’re done with the columns, the next step is to create some gutters.&lt;/p&gt;
&lt;h2 id=&quot;step-5%3A-determine-gutter-position&quot;&gt;Step 5: Determine gutter position&lt;/h2&gt;
&lt;p&gt;So far, we know we should create gutters either with &lt;code&gt;margin&lt;/code&gt; or &lt;code&gt;padding&lt;/code&gt; properties. But which should we use?&lt;/p&gt;
&lt;p&gt;If you sketch around for a bit, you’ll quickly notice that you have four possible ways to create these gutters.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gutters can be placed on &lt;em&gt;one side&lt;/em&gt;, as &lt;em&gt;margins&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Gutters can be placed on &lt;em&gt;one side&lt;/em&gt;, as &lt;em&gt;paddings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Gutters can be split equally on &lt;em&gt;both sides&lt;/em&gt;, as &lt;em&gt;margins&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Gutters can be split equally on &lt;em&gt;both sides&lt;/em&gt;, as &lt;em&gt;paddings&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/combi.png&quot; alt=&quot;4 possible ways to create columns and gutters&quot;&gt;
  &lt;figcaption&gt;4 possible ways to create columns and gutters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is where it starts to get complicated. You need to calculate column widths differently depending on which method you use.&lt;/p&gt;
&lt;p&gt;We’ll go through these methods one by one and look at the differences. Take your time as you read through them.&lt;/p&gt;
&lt;p&gt;Here we go:&lt;/p&gt;
&lt;h3 id=&quot;method-1%3A-one-sided-gutters-(margin)&quot;&gt;Method 1: One-sided gutters (Margin)&lt;/h3&gt;
&lt;p&gt;With this method, you create gutters with the &lt;code&gt;margin&lt;/code&gt; property. This gutter will either be placed on the left or right of the columns; it’s up to you which side to choose.&lt;/p&gt;
&lt;p&gt;For the purpose of this article, let’s say you chose to put your gutters on the right. What you’ll do then is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  /* Need to recalculate width property */;
  margin-right: 20px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you recalculate your column-width according to this image:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/pattern-1side-margin.png&quot; alt=&quot;One-sided gutters using margins&quot;&gt;
  &lt;figcaption&gt;One-sided gutters using margins&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can see from the image above that &lt;em&gt;1140px&lt;/em&gt; is equal to &lt;em&gt;three columns&lt;/em&gt; and &lt;em&gt;two gutters&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And we have a problem here… We need columns to be written in percentages, but our gutters are fixed at 20px. We can’t do math with two different units at once!&lt;/p&gt;
&lt;p&gt;Well, it wasn’t possible before, but it is now.&lt;/p&gt;
&lt;p&gt;You can use the CSS &lt;code&gt;calc&lt;/code&gt; function to mix percentages with other units. It retrieves the unit values of the percentages to perform calculations on the fly.&lt;/p&gt;
&lt;p&gt;What this means is you can leave your width as a function, and browsers will automatically calculate your values for you:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  width: calc((100% - 20px * 2) / 3);
  /* other properties */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s great.&lt;/p&gt;
&lt;p&gt;After getting the column width, you need to remove the final gutter from the rightmost grid item. Here’s how you can do it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item:last-child {
  margin-right: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the time, when you remove the final gutter on the rightmost item, you also want to float it to the right to prevent subpixel rounding errors from messing up your grid by sending the last item into the next row. This only happens on browsers that round subpixels up.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/subpixel.png&quot; alt=&quot;Subpixel rounding errors might break the grid by pushing the final item to the next row&quot;&gt;
  &lt;figcaption&gt;Subpixel rounding errors might break the grid by pushing the final item to the next row&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item:last-child {
  margin-right: 0;
  float: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew. Almost there. Just one more thing.&lt;/p&gt;
&lt;p&gt;The code so far is great if our grid contains only a single row. It doesn’t cut it, however, if there’s more than one row of items 😢.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems//margin-side-last-child.png&quot; alt=&quot;Our code fails if there&#39;s more than one row&quot;&gt;
  &lt;figcaption&gt;Our code fails if there&#39;s more than one row&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What we need to do is to remove the right margin from the rightmost item in every row. The best way to do this is with &lt;code&gt;nth-child()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* For a 3-column grid */
.grid-item:nth-child(3n+3) {
  margin-right: 0;
  float: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need for a one-sided gutter built with margins. Here’s a codepen for you to play around with.&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;mAYqrL&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/mAYqrL/&quot;&gt;Single sided grid with gutters as margins&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Note: Calc doesn’t work with IE8 and Opera mini. You might want to consider other methods if you need to support these two browsers.&lt;/p&gt;
&lt;h3 id=&quot;method-2%3A-one-sided-gutters-(padding)&quot;&gt;Method 2: One-sided gutters (Padding)&lt;/h3&gt;
&lt;p&gt;Like the one-sided gutters with margins, this method requires you to place your gutters to one side of your columns as well. Let’s say you choose the right side again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  /* width property */
  padding-right: 20px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you can recalculate your column-width according to this image:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/pattern-1side-gutter.png&quot; alt=&quot;One-sided gutters using padding&quot;&gt;
  &lt;figcaption&gt;One-sided gutters using padding&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the widths are different from the previous method? They’re different because we switched the &lt;code&gt;box-sizing&lt;/code&gt; property to &lt;code&gt;border-box&lt;/code&gt;. Now, &lt;code&gt;width&lt;/code&gt; calculations include &lt;code&gt;padding&lt;/code&gt; in them.&lt;/p&gt;
&lt;p&gt;In this case, two of the three columns have a larger width than the final one, which eventually results in weird calculations and CSS code that’s hard to grasp.&lt;/p&gt;
&lt;p&gt;I suggest not even attempting this method. (It’s going to be really ugly if you continue with it. Try it at your own risk!)&lt;/p&gt;
&lt;h2 id=&quot;method-3%3A-split-gutters-(margin)&quot;&gt;Method 3: Split gutters (Margin)&lt;/h2&gt;
&lt;p&gt;In this method, you split gutters into two and place each half on the sides of your columns. The code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  /* Width property */
  margin-right: 10px;
  margin-left: 10px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you calculate your column-width according to this image:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/pattern-split-margin.png&quot; alt=&quot;Split gutters with margin&quot;&gt;
  &lt;figcaption&gt;Split gutters with margin&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;From what we know before, you need to calculate the column-width with the &lt;code&gt;calc()&lt;/code&gt; function. In this case, you remove three gutters from 100% before dividing the answer by three to get your column-width. In other words, the column-width is &lt;code&gt;calc((100% - 20px * 3) / 3)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  width: calc((100% - 20px * 3) / 3);
  margin-right: 10px;
  margin-left: 10px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! (Nothing extra you need to do for grids with multiple rows 😉). Here’s a codepen for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;BLZJza&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/BLZJza/&quot;&gt;grid with split gutters as margins&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;method-4%3A-split-gutters-(padding)&quot;&gt;Method 4: Split gutters (Padding)&lt;/h2&gt;
&lt;p&gt;This method is similar to the previous one. You split your gutters and place each half on the sides of your columns as well. This time, you use padding instead of gutters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  /* width property */
  padding-right: 10px;
  padding-left: 10px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, you calculate your column widths as follows:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/pattern-split-padding.png&quot; alt=&quot;Split gutters with padding&quot;&gt;
  &lt;figcaption&gt;Split gutters with padding&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the column-widths are much easier to calculate this time? That’s right; it’s a third of the grid width at every breakpoint.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid-item {
  width: 33.3333%;
  padding-right: 10px;
  padding-left: 10px;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a codepen for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;ORYzQV&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/ORYzQV/&quot;&gt;grid with split gutters as padding&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Before we move on, I want to tell you about a small caveat if you use split gutter with padding. If you take a look at the markup in the Codepen, you’ll notice that I added an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; within &lt;code&gt;.grid-item&lt;/code&gt;. This extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is required if your component contains background or borders.&lt;/p&gt;
&lt;p&gt;This is because background is shown on padding properties. This image should explain why (hopefully), by showing the relationship between &lt;code&gt;background&lt;/code&gt; and other properties.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/bg-relationship.jpg&quot; alt=&quot;Background is shown on the padding property&quot;&gt;
  &lt;figcaption&gt;Background is shown on the padding property&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;what-would-i-use%3F&quot;&gt;What would I use?&lt;/h3&gt;
&lt;p&gt;When I started to code grids about two years ago, I mostly coded grids that are designed with the &lt;a href=&quot;https://zellwk.com/blog/designing-grids/#how-big-should-columns-and-gutters-be-&quot;&gt;top-down approach&lt;/a&gt; and built with a &lt;a href=&quot;https://zellwk.com/blog/responsive-grid-system/how-the-grid-responds-to-different-viewports&quot;&gt;hybrid system&lt;/a&gt;. In that approach/system, &lt;em&gt;I used percentages for both width and gutter values&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At that time, I loved the simplicity of setting gutters on one side of the grid. There was less cognitive overload for me because I’m pretty bad with math. The extra &lt;code&gt;gutters ÷ 2&lt;/code&gt; calculation turned me off quickly.&lt;/p&gt;
&lt;p&gt;I’m thankful I went that route. Although the CSS seems more complicated than split gutters, I was forced to learn &lt;a href=&quot;https://css-tricks.com/examples/nth-child-tester/&quot;&gt;nth-child properly&lt;/a&gt;. I also learned the importance of writing &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css/&quot;&gt;mobile-first CSS&lt;/a&gt;, both which are still major impediments to both young and experienced developers, as far as I can tell.&lt;/p&gt;
&lt;p&gt;However, if you ask me to choose now, &lt;strong&gt;I’ll go for split gutters&lt;/strong&gt; instead of single-sided ones, because the CSS is so much simpler. Also, &lt;strong&gt;I prefer using margin for gutters&lt;/strong&gt; instead of padding because of the cleaner markup. (But &lt;em&gt;padding is easier to calculate&lt;/em&gt;, so I’ll continue the rest of the article with padding).&lt;/p&gt;
&lt;h2 id=&quot;step-6%3A-create-a-debug-grid&quot;&gt;Step 6: Create a debug grid&lt;/h2&gt;
&lt;p&gt;When you’re starting out, it’s especially helpful to have a control grid around to help you debug your layouts. It helps ensure you’re building things correctly.&lt;/p&gt;
&lt;p&gt;At this point, I only know a lame way to create the debug grid. That is to create HTML elements, and add some CSS to it. Here’s what the HTML looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;div class=&amp;quot;fixed-gutter-grid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS for this debug grid is the following (I’m using split gutters with margins to reduce markup for the debug grid):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.column {
  width: calc((100% - 20px * 12) / 12);
  height: 80px;
  margin-right: 10px;
  margin-left: 10px;
  background: rgba(0, 0, 255, 0.25);
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;ALkyAA&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/ALkyAA/&quot;&gt;Fixed gutter debug grid&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;(Ultra side note: Miriam and Robson are working on a &lt;a href=&quot;https://github.com/oddbird/susy/issues/609&quot;&gt;SVG-background image debug grid on Susy v3&lt;/a&gt;. This is super exciting cause you can use a simple function to create your debug grid!)&lt;/p&gt;
&lt;h2 id=&quot;step-7%3A-create-layout-variations&quot;&gt;Step 7: Create layout variations&lt;/h2&gt;
&lt;p&gt;The next step is to create your layout variations based on your content. This is where CSS grid systems shine. Instead of creating layouts by writing multiple grid classes, you can create a reasonable-sounding name for your layout.&lt;/p&gt;
&lt;p&gt;For instance, let’s say you have this grid layout that’s only used for guest articles. The layout looks like this on desktop:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/grid-example.png&quot; alt=&quot;Example grid layout that&#39;s only used for guest articles&quot;&gt;
  &lt;figcaption&gt;Example grid layout that&#39;s only used for guest articles&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The markup for this guest-article layout can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;div class=&amp;quot;l-guest-article&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;l-guest&amp;quot;&amp;gt; &amp;lt;!-- Guest profile --&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;l-main&amp;quot;&amp;gt;&amp;lt;!-- main article--&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;l-sidebar&amp;quot;&amp;gt;&amp;lt;!-- sidebar widgets--&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alright sweet. So we have 12 columns now. The width of one column is 8.333% &lt;code&gt;(100 ÷ 12)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The width of &lt;code&gt;.l-guest&lt;/code&gt; is two columns. So, what you do is multiple 8.333% by two. Simple as that. Just rinse and repeat for the rest.&lt;/p&gt;
&lt;p&gt;Here, I suggest using a preprocessor like Sass, which allows you to calculate column width easily with a &lt;code&gt;percentage&lt;/code&gt; function instead of doing the calculations manually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-guest-article {
  @include clearfix;
  .l-guest {
    // Ahem. More readable than 16.666% :)
    width: percentage(2/12);
    padding-left: 10px;
    padding-right: 10px;
    float: left;
  }

  .l-main {
    width: percentage(7/12);
    padding-right: 10px;
    padding-left: 10px;
    float: left;
  }

  .l-sidebar {
    width: percentage(3/12);
    padding-right: 10px;
    padding-left: 10px;
    float: left;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;pEmLzY&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/pEmLzY/&quot;&gt;Content-sidebar-layout with fixed-gutter grid&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;You probably find that there’s a lot of code repetition about now. We can make it nicer by abstracting the common parts away into a separate selector like &lt;code&gt;.grid-item&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.grid-item {
  padding-left: 10px;
  padding-right: 10px;
  float: left;
}

.l-guest-article {
  .l-guest { width: percentage(2/12);}
  .l-main { width: percentage(7/12);}
  .l-sidebar { width: percentage(3/12); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There. Much cleaner. :)&lt;/p&gt;
&lt;h2 id=&quot;step-8%3A-make-your-layouts-responsive&quot;&gt;Step 8: Make your layouts responsive&lt;/h2&gt;
&lt;p&gt;The final step is to make your layouts responsive. Let’s say our guest article layout responds in the following way:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/building-grid-systems/grid-responsive.png&quot; alt=&quot;How guest the guest article layout respond to different viewports&quot;&gt;
  &lt;figcaption&gt;How guest the guest article layout respond to different viewports&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The markup of our guest article shouldn’t change. What we have is the most accessible layout we can possible have. So, the changes should entirely be in CSS.&lt;/p&gt;
&lt;p&gt;When writing the CSS for our responsive guest layout, I highly recommend you write &lt;a href=&quot;https://zellwk.com/blog/mobile-first-css/&quot;&gt;mobile first css&lt;/a&gt; because it makes your code simpler and neater. We can begin by writing CSS for the mobile layout first.&lt;/p&gt;
&lt;p&gt;Here’s the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-guest-article {
  .l-guest { /* nothing goes here */ }
  .l-main {
    margin-top: 20px;
  }
  .l-sidebar {
    margin-top: 20px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s nothing we need to do since every component takes up the full width by default. However, we can add some margin-top to the last two items to separate the elements from each other.&lt;/p&gt;
&lt;p&gt;Next, let’s move on to the tablet layout.&lt;/p&gt;
&lt;p&gt;For this layout, let’s say we activate the breakpoint is 700px. &lt;code&gt;.l-guest&lt;/code&gt; should be 4 of 12 columns while &lt;code&gt;.l-main&lt;/code&gt; and &lt;code&gt;.l-sidebar&lt;/code&gt; should be 8 of 12 columns each.&lt;/p&gt;
&lt;p&gt;Here, we need to remove the &lt;code&gt;margin-top&lt;/code&gt; property from &lt;code&gt;.l-main&lt;/code&gt; because it needs to be in line with &lt;code&gt;.l-guest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, if we set &lt;code&gt;.l-sidebar&lt;/code&gt; to a width of 8 columns, it will automatically float onto the second row because there’s not enough room on the first row. Since it’s on the second row, we also need to add some left margins on &lt;code&gt;.l-sidebar&lt;/code&gt; to push it into position; alternatively, we can float it to the right. (I’ll float right since there’s no need to calculate anything).&lt;/p&gt;
&lt;p&gt;Finally, since we’re floating the grid items, the grid container should include a clearfix to clear it’s own children.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-guest-article {
  @include clearfix;
  .l-guest {
    @media (min-width: 700px) {
      width: percentage(4/12);
      float: left;
    }
  }
  .l-main {
    margin-top: 20px;
    @media (min-width: 700px) {
      width: percentage(8/12);
      margin-top: 0;
      float: left;
    }
  }
  .l-sidebar {
    margin-top: 20px;
    @media (min-width: 700px) {
      width: percentage(8/12);
      float: right;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, let’s move on to the desktop layout.&lt;/p&gt;
&lt;p&gt;For this layout, let’s say we activate the breakpoint is 1200px. &lt;code&gt;.l-guest&lt;/code&gt; should be 2 of 12 columns, &lt;code&gt;.l-main&lt;/code&gt; should be 7 of 12 columns and &lt;code&gt;.l-sidebar&lt;/code&gt; should be 3 of 12 columns.&lt;/p&gt;
&lt;p&gt;What we do is to create a new media query within each grid item and change the width as necessary. Take note we need to remove the margin-top property from &lt;code&gt;&#39;,l-sidebar&lt;/code&gt; as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-guest-article {
  @include clearfix;
  .l-guest {
    @media (min-width: 700px) {
      width: percentage(4/12);
      float: left;
    }

    @media (min-width: 1200px) {
      width: percentage(2/12);
    }
  }
  .l-main {
    margin-top: 20px;
    @media (min-width: 700px) {
      width: percentage(8/12);
      margin-top: 0;
      float: left;
    }
    @media (min-width: 1200px) {
      width: percentage(7/12);
    }
  }
  .l-sidebar {
    margin-top: 20px;
    @media (min-width: 700px) {
      width: percentage(8/12);
      float: right;
    }
    @media (min-width: 1200px) {
      width: percentage(3/12);
      margin-top: 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the codepen for the final layout we’ve created:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;qaGvxm&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;guest-article layout with fixed-gutter grid (final)&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/qaGvxm/&quot;&gt;guest-article layout with fixed-gutter grid (final)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;(Oh, by the way, you can achieve these results with Susy too. Just remember to set the &lt;a href=&quot;https://zellwk.com/blog/susy-gutter-positions/&quot;&gt;gutter-position&lt;/a&gt; to &lt;code&gt;inside-static&lt;/code&gt;)&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Wow. This is a long article. I think I died three times writing it. (Thanks for reading it all the way. I hope you didn’t die three times reading it though! 😛).&lt;/p&gt;
&lt;p&gt;As you can see in this article, the steps to creating a responsive grid system are relatively straightforward. The parts that most people get mixed up are steps 5 (determining gutter position) and 8 (making layouts responsive).&lt;/p&gt;
&lt;p&gt;Step 5 is simple when you think through all the possible methods, and we’ve thought them through together. Step 8, on the other hand, is solvable easily once you have enough practice with writing &lt;a href=&quot;https://zellwk.com/blog/mobile-first-css/&quot;&gt;mobile first css&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope this article has given you the knowledge to build your own responsive grid system, and I hope to see you build a custom grid for your next project.&lt;/p&gt;
&lt;p&gt;Till then!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Designing grids</title>
    <link href="https://zellwk.com/blog/designing-grids/"/>
    <updated>2016-10-19T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/designing-grids/</id>
    <content type="html">&lt;p&gt;I’d be telling you the obvious if I said that grids are important in web design. You already knew that. You probably have even coded a few grids with frameworks like Foundation or Bootstrap. You may even have created a custom grid manually, or using a grid layout tool like Susy.&lt;/p&gt;
&lt;p&gt;But have you stopped to think about these questions for the grids you’ve made?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How many columns should you have?&lt;/li&gt;
&lt;li&gt;Should the columns be evenly sized?&lt;/li&gt;
&lt;li&gt;How big should columns and gutters be?&lt;/li&gt;
&lt;li&gt;How does the grid respond to different viewports?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What are your answers?&lt;/p&gt;
&lt;p&gt;I have searched high and low for answers to these questions in the past few months. Here’s an article consolidating everything I know about designing grids right now. Hopefully, it’ll help answer the questions you have as well.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;should-columns-be-evenly-sized%3F&quot;&gt;Should columns be evenly sized?&lt;/h2&gt;
&lt;p&gt;That’s the first question you need to ask before creating your grid. Unfortunately, many people skip this step and head straight for equally sized columns without thinking, likely because the practice has been made popular by established frameworks such as 960 grid system (in the past), Bootstrap, and Foundation.&lt;/p&gt;
&lt;p&gt;A grid system with equal-width columns is robust and flexible. It creates a safe and functional structure that allows you to experiment with your layouts while delivering a formal experience. You can’t go wrong with equal-width column grids.&lt;/p&gt;
&lt;p&gt;At its worst, a site made with an equal-width grid system can feel robotic and cold. It might also feel rigid and boring.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/columns-equal.png&quot; alt=&quot;Columns with equal width&quot;&gt;
  &lt;figcaption&gt;Columns with equal width&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
  The fundamental problem with ALL grid generators and frameworks is they assume you want columns of the same width.
  &lt;cite&gt;Mark Boulton&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;A grid system with unequal-width columns is the exact opposite. It’s flowy and dynamic, which results in designs that seem more creative, more human, and softer.&lt;/p&gt;
&lt;p&gt;However, they’re also harder to create and implement. They can also be less flexible in inexperienced hands (like mine).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/columns-unequal.png&quot; alt=&quot;Columns with unequal width&quot;&gt;
  &lt;figcaption&gt;Columns with unequal width&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, equal or unequal width?&lt;/p&gt;
&lt;p&gt;Here are a few factors you’ll want to consider.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, are you using any framework?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your team is bent on using a framework like Bootstrap or Foundation, you’ve pretty much chosen a grid for yourself. It’s going to be the standard 12-equal-width-column grid (unless you decide to ditch the grid).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, what’s the feel you’re going for in the design?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The type of grid you choose partially determines the feel of your site, so you’ll want to keep it consistent as much as possible.&lt;/p&gt;
&lt;p&gt;If you’re going for something that’s formal and safe, consider using equal-width columns. On the other hand, if you’re looking for something that’s bold, audacious, artsy, or dynamic, maybe an uneven-width column grid will suit you better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third, how complex is your website?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How many different layouts do you have? How many pages do you have? How many unknowns are there?&lt;/p&gt;
&lt;p&gt;If your site is complicated, or if there are too many unknowns, you’ll want to consider using a equal-width column grid since its flexibility might save your ass down the road.&lt;/p&gt;
&lt;p&gt;On the other hand, you might want to consider an unequal-width column grid if your design is simple, or if you have the luxury to be whacky without worrying too much about later designs not gelling with your initial ones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fourth, can your team cope with code complexity&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Many young developers that are just starting out can find grid math a huge challenge. For these developers, you might want to use equal-width grids to reduce the complexity so they don’t have to worry too much.&lt;/p&gt;
&lt;p&gt;Grid math can still be a challenge for experienced frontend developers if they have not dived into it much. However, it can become simple once you have the right tools. &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt;Susy&lt;/a&gt; is an example of a tool that helps you create custom-made grids easily without doing all the math yourself. If you need help with Susy, go grab some free chapters of &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt;, a book I wrote to help you learn Susy properly.&lt;/p&gt;
&lt;p&gt;So, go ahead and design whackier grids if your team can handle the grid math. Do check with your frontend developers if they’re comfortable with it though!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What would I use?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s a good question.&lt;/p&gt;
&lt;p&gt;If I were to work with a designer, I’d talk to them to see what kind of grid makes more sense, and what they’re comfortable with. It’s going to be an equal-width column grid most of the time.&lt;/p&gt;
&lt;p&gt;But for my personal side projects, I usually go for unequal-width columns because they appeal to rebel in me. 😉&lt;/p&gt;
&lt;p&gt;Unfortunately, I have yet to explore unequal-width columns to a point where I can explain the underlying mechanics. So, for the rest of this article, I’ll only talk about what I’ve discovered with equal-width grids.&lt;/p&gt;
&lt;p&gt;Don’t be disappointed if you’re looking for hints to building good unequal-width grids. I believe the same mechanics can be used to create one as well, and I’ll write a separate article when I’ve explored the topic more.&lt;/p&gt;
&lt;p&gt;For now, let’s move on to the next question.&lt;/p&gt;
&lt;h2 id=&quot;how-many-columns-should-you-use%3F&quot;&gt;How many columns should you use?&lt;/h2&gt;
&lt;p&gt;Before deciding on the number of columns, you should have sketched out (on paper at least) possible layouts and content types you have in your design. Does your design only contain a single-column layout? Does it contain a content-sidebar layout? What about a three-column layout?&lt;/p&gt;
&lt;p&gt;Once you have these sketches, you’re better informed about the number of columns you need. For example, let’s say you’ve decided on the following layouts:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/layout.png&quot; alt=&quot;Possible layouts of a website&quot;&gt;
  &lt;figcaption&gt;Possible layouts of a website&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These layouts can be created with eight columns, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/layout-8.png&quot; alt=&quot;Possible layouts of a website on a 8-column grid&quot;&gt;
  &lt;figcaption&gt;Possible layouts of a website on a 8-column grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It can also be created with ten columns, like this, depending on the content and your proportions:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/layout-10.png&quot; alt=&quot;Possible layouts of a website on a 10-column grid&quot;&gt;
  &lt;figcaption&gt;Possible layouts of a website on a 10-column grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, it can also be created with a 12-column grid, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/layout-12.png&quot; alt=&quot;Possible layouts of a website on a 12-column grid&quot;&gt;
  &lt;figcaption&gt;Possible layouts of a website on a 12-column grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There’s no correct answer to the number of columns you should use. You have a well-designed grid as long as your components fit well into the grid.&lt;/p&gt;
&lt;p&gt;If you have no clue about the type of content or layout that you’re creating (which I sincerely hope that’s not the case), the best way is to start with an extremely flexible grid that contains 12 columns.&lt;/p&gt;
&lt;p&gt;This is because 12 columns can be split into six possible symmetric layouts:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/columns-12-symmetrical.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Symmetrical Layouts on a 12-column grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It also allows you to split into any of the following possible combinations:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/columns-12-everything.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Possible combinations on a 12-column grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The flexibility provided by 12-columns is the reason why popular frameworks like Bootstrap and Foundation use 12 columns for their grid.&lt;/p&gt;
&lt;p&gt;Once again, there’s no perfect answer to the number of columns you use. You have a well-designed grid as long as your components fit well into your grid.&lt;/p&gt;
&lt;p&gt;One more thing. The number of columns you eventually work with might also change depending on how you choose to size columns and gutters, and how your grid respond to different sizes. So, let’s move on and consider these factors before deciding.&lt;/p&gt;
&lt;h2 id=&quot;how-big-should-columns-and-gutters-be%3F&quot;&gt;How big should columns and gutters be?&lt;/h2&gt;
&lt;p&gt;There are two ways you can choose the sizes of your columns and gutters.&lt;/p&gt;
&lt;p&gt;The first way is the &lt;strong&gt;top-down approach&lt;/strong&gt;. Here, you start by deciding the size of your grid on a desktop. Let’s say it’s 1140px (or 960px). The number you choose should be divisible by a lot of numbers (2, 3, 4, 5, 6, 8, 10, 12), which makes it easy to calculate the size of your columns and gutters.&lt;/p&gt;
&lt;p&gt;Once you have decided on your grid size, you decide on the column or gutter width (whichever your fancy pants likes more). You get the other number by dividing the grid size by your gutters or columns.&lt;/p&gt;
&lt;p&gt;Say you have a grid of 1140px, 12 columns and a gutter-size of 20px, you’ll get a column-size of 75px. (1140 ÷ 12 - 20).&lt;/p&gt;
&lt;p&gt;Sketch has an excellent tool that helps you create grids like this easily. (Note: allowing gutters on the outside of your grid makes math much easier):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/sketch.png&quot; alt=&quot;Grid tool built into Sketch&quot;&gt;
  &lt;figcaption&gt;Grid tool built into Sketch&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The top-down approach is easy. We’ve been creating grids like this for years. Common numbers you can use are 960, 1080, 1140, 1440, 1560. (Hint: begin with any of these numbers and add 60px or 120px and you’ll end up with a decent size).&lt;/p&gt;
&lt;p&gt;A downside to the top-down approach is what it’s name suggests. It’s top-down. Imagine a manager handling down instructions from above. Sometimes these instructions don’t make sense and don’t fit well with the design. Be prepared to make small tweaks or sacrifices on the component level in your design.&lt;/p&gt;
&lt;p&gt;I’ve used the top-down approach a lot when I began designing websites because that’s the only method I know. However, I didn’t like it because I feel like I’m working from a magic number I picked from thin air. So, this approach speaks little to my developer instincts.&lt;/p&gt;
&lt;p&gt;The second way is the &lt;strong&gt;bottom-up approach&lt;/strong&gt;. Here, you first decide on your columns or gutter sizes, then calculate the total size of your grid.&lt;/p&gt;
&lt;p&gt;The crux of this approach lies in how you decide your gutter and column sizes. Just like with the top-down approach, you can decide on either one first.&lt;/p&gt;
&lt;p&gt;Some designers choose to use an easy-to-use number like 10px or 20px for their gutters. They then extrapolate and create column sizes that are maybe 3 or 4 times that of their gutters.&lt;/p&gt;
&lt;p&gt;Say your gutters are 20px and your columns are 3x your gutters, you’ll eventually create a grid that’s 960px (20px * 12 + 60px * 12).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/bottom-up.png&quot; alt=&quot;Bottom up approach&quot;&gt;
  &lt;figcaption&gt;Bottom up approach to creating grids&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There’s nothing wrong with using easy-to-use numbers as the columns or gutters of your grid. However, to me, they also feel like magic numbers that are derived from thin air.&lt;/p&gt;
&lt;p&gt;So, instead of picking these magic numbers, I prefer to use a number that’s derived from the typography on the site. That number is the line-height of the body text since it’s the baseline for Vertical Rhythm&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/baseline.png&quot; alt=&quot;I use baseline for Vertical Rhythm as gutters&quot;&gt;
  &lt;figcaption&gt;I use baseline for Vertical Rhythm as gutters&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;(If you didn’t know already, I’m prrreeetty big on typography 😏). I highly suggest you read &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;this article&lt;/a&gt; if want to understand why I choose this number.&lt;/p&gt;
&lt;p&gt;Once the gutters are determined, I’ll multiply if by 2, 3 or 4 times to get the size of my columns. Then, I’ll calculate the size of the grid.&lt;/p&gt;
&lt;p&gt;Note: both methods are valid. Countless of well-designed sites have began with either of these approaches. So, choose what you’re comfortable with, have your reasons, and move on.&lt;/p&gt;
&lt;h2 id=&quot;how-the-grid-responds-to-different-viewports&quot;&gt;How the grid responds to different viewports&lt;/h2&gt;
&lt;p&gt;Whenever you build a responsive website, you need to think about what happens to the columns and gutters on mobile, on tablet and on a multitude of devices. Basically, you need to think about what happens to the columns and gutters at every possible breakpoint.&lt;/p&gt;
&lt;p&gt;Before we talk about how columns and gutters should change, it might be beneficial to bring in two buzzwords that the industry have been using for years whenever we think about responsive grids. The two big words we use are “adaptive” and “fluid” grids.&lt;/p&gt;
&lt;p&gt;Let’s take a look at what these two buzzwords mean.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaptive grids&lt;/strong&gt; are grids that “adapt” to different breakpoints. It means you keep the columns and gutter sizes fixed, and you change the number of columns when the design calls for it. In practice, it behaves like the following gif when browsers are resized.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/grid-adaptive.gif&quot; alt=&quot;Adaptive grid&quot;&gt;
  &lt;figcaption&gt;Adaptive grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The adaptive approach allows you to control the width of your grids by controlling the number of columns used. It ensures that everything within the grid will always look its best since you can carefully craft the design according to the number of columns available.&lt;/p&gt;
&lt;p&gt;The downside to this approach is that you might need to change your code a lot to make sure there’s no excessive whitespace between at the sides of your design, which, can be a huge chore.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;strong&gt;fluid grids&lt;/strong&gt; means that grids are coded in a way that it automatically increases in size whenever the browsers are resized. In practice, a fluid grid looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/grid-fluid.gif&quot; alt=&quot;Fluid grids&quot;&gt;
  &lt;figcaption&gt;Fluid grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here, you’ll notice that both columns and gutters are resized whenever the browser width changes. Your design will always be a specific number of columns (12 in this case), and the maximum width of your grid is determined by the viewport size.&lt;/p&gt;
&lt;p&gt;The fluid approach allows you to write code that’s easier to manage. You don’t need to change the number of columns at every possible breakpoint to ensure site looks okay. You just need to tweak the layout at a few breakpoints.&lt;/p&gt;
&lt;p&gt;Unfortunately, a pure fluid grid has a big downside. If you resize the viewport downwards proportionally, you’ll eventually reach a point where the gutters are too small to separate the layout into different columns.&lt;/p&gt;
&lt;p&gt;The flipside is true. If you resize the viewport upwards, you’ll get to a point where columns and gutters become too large. (Imagine a 2560px display that has a grid container of 90% width. *Shudders to think*).&lt;/p&gt;
&lt;p&gt;Because columns and gutters can get huge, many people force a max-width at the desktop layout to ensure their design doesn’t go out of whack. If you do the same, you’ll end up with a design with equal whitespace on the left and right, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.container {
  max-width: 1140px;
  margin-right: auto;
  margin-left: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, you might have noticed that &lt;strong&gt;both buzzword-filled approaches suck&lt;/strong&gt;. So don’t get suckered into either of these. There are two approaches that actually work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first approach&lt;/strong&gt; is to combine the plusses from both adaptive and fluid approaches. That means you resize columns and gutters proportionally while viewport width changes. Then, at a specific breakpoint where your design fails, you change the number of columns and correct your design accordingly. For the lack of a better word, let’s call this the &lt;strong&gt;hybrid approach&lt;/strong&gt; Here’s what it looks like:&lt;/p&gt;
&lt;!-- Show content + sidebar components + the grid--&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/grid-hybrid.gif&quot; alt=&quot;Hyrid Grid&quot;&gt;
  &lt;figcaption&gt;Hyrid Grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Recalculating the number of columns at different breakpoints can be difficult if you’re creating your grid from scratch. Susy can help you make things easier, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  columns: 4 // Starts off with 4 columns
  // Other properties
);

.content-sidebar {
  // Changes to 8 columns at 600px
  @include with-layout(8) {
    @media (min-width: 600px) {
      .content {
        @include span(6); // 6 of 8 columns
      }
      .sidebar {
        @include span(2 last); // 2 of 8 columns
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how you don’t have to calculate column or gutter sizes? Susy does it for you automatically. I go in-depth about how it does so, and how to use Susy in &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt; if you’re interested to find out more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second approach&lt;/strong&gt; is to your resize your columns while keeping your gutters sized fixed. Let’s call it the &lt;strong&gt;fixed-gutter approach&lt;/strong&gt;. Here’s what you get from using this approach:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/designing-grids/grid-fixed-gutter.gif&quot; alt=&quot;Fixed-gutter grid&quot;&gt;
  &lt;figcaption&gt;Fixed-gutter grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Did you know that Bootstrap and Foundation uses the fixed-gutter approach with their grids? If you look at the source code for either framework, you’ll see that the column-width is set in percentages while gutters are fixed with &lt;code&gt;px&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Bootstrap */
.col-md-4 {
  width: 33.33333%;
  padding-left: 15px;
  padding-right: 15px;
  float: left;
}

/* Foundation */
.large-4 {
  width: 33.33333%;
  padding-left: 0.9375rem;  // This means 15px
  padding-right: 0.9375rem; // in Foundation
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Which approach should you use?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Both are valid methods, so choose whatever that feels right for you.&lt;/p&gt;
&lt;p&gt;When I began to design websites, I used the &lt;em&gt;top-down&lt;/em&gt; approach to sizing my gutters and columns. Consequently, I went with the &lt;em&gt;hybrid approach&lt;/em&gt; for coding the responsive grid.&lt;/p&gt;
&lt;p&gt;Now, after learning more about design and typography principles, I prefer the &lt;em&gt;fixed-gutter&lt;/em&gt; approach instead. One of the things I learned from typography was the importance of &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;ensuring whitespace remain consistent&lt;/a&gt;. This leads me to believe that gutters, which are whitespaces that separate columns of content, should be kept the same.&lt;/p&gt;
&lt;p&gt;Even though I prefer the &lt;em&gt;fixed-gutter approach&lt;/em&gt;, I disagree with the way Bootstrap and Foundation creates their grids. I wrote about why &lt;a href=&quot;https://zellwk.com/blog/migrating-from-bootstrap-to-susy/&quot;&gt;in a previous article&lt;/a&gt; so I’ll not harp on it here.&lt;/p&gt;
&lt;p&gt;Also, I’ll share how I create grids with the &lt;em&gt;fixed-gutter&lt;/em&gt; approach in the next article since the article is primarily about the designing grids.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Grids are a best practice in web design. You have probably created a ton of them over the last few years. Unfortunate that many people don’t think about how the grids were formed in the first place.&lt;/p&gt;
&lt;p&gt;If you have thought long and hard about creating custom grids for your design, I hope this article has shed some light on how to choose columns, gutter and grid sizes, along with how grids should respond to different viewports.&lt;/p&gt;
&lt;p&gt;On a final note, you have to come to terms that grids are subjective. It’s probably the hardest thing to do when creating grids. Don’t get stuck trying to find the perfect sizes (like I once did), but go ahead and use any of the principles above to begin creating your grid!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Don&#39;t reinvent the wheel</title>
    <link href="https://zellwk.com/blog/dont-reinvent-the-wheel/"/>
    <updated>2016-09-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/dont-reinvent-the-wheel/</id>
    <content type="html">&lt;p&gt;&lt;em&gt;“Don’t reinvent the wheel”.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You heard that one before?&lt;/p&gt;
&lt;p&gt;It’s an age-old wisdom that’s been passed around between developers since the dawn of time (at least for programming anyway).&lt;/p&gt;
&lt;p&gt;It’s also the worst advice you’ll hear from anyone. But we say it on a daily basis. To others, and even to ourselves. It’s just that whenever we say this, we sugar-coat the words in different forms so we don’t feel as hurt.&lt;/p&gt;
&lt;p&gt;We say things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just use [insert framework here]&lt;/li&gt;
&lt;li&gt;Use [insert plugin here] instead of creating your own. It’s not a priority.&lt;/li&gt;
&lt;li&gt;Don’t waste your time building something that has been done before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds familiar yet? Has anyone said these to you before? How did you feel? Don’t kid anyone. You felt something. Did you feel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threatened?&lt;/li&gt;
&lt;li&gt;Defensive?&lt;/li&gt;
&lt;li&gt;Aggressive?&lt;/li&gt;
&lt;li&gt;Angry?&lt;/li&gt;
&lt;li&gt;Sad?&lt;/li&gt;
&lt;li&gt;Stupid?&lt;/li&gt;
&lt;li&gt;Worthless?&lt;/li&gt;
&lt;li&gt;A combination of many of these?&lt;/li&gt;
&lt;li&gt;Others…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These statements challenge the receiver. With any questions that challenge, it not only challenges the decisions on the surface (for most of us, it’s a choice whether or not to do something for a project), it challenges the core beliefs of the receiver.&lt;/p&gt;
&lt;p&gt;Like it or not, it happens unconsciously. And because these questions are directed towards the core beliefs, the repercussions can be severe.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;it%E2%80%99s-never-about-reinventing-the-wheel&quot;&gt;It’s never about reinventing the wheel&lt;/h2&gt;
&lt;p&gt;Go back to the time where you wanted to build something. And somebody stopped you by telling you not to reinvent the wheel. That somebody can be anyone. It can even be you.&lt;/p&gt;
&lt;p&gt;There yet? Good.&lt;/p&gt;
&lt;p&gt;Now, answer these questions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What makes you want to build [insert thing here]?&lt;/li&gt;
&lt;li&gt;How important is it to you for [insert thing here] to be built?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your answer can be anything too, as long as it feels true for you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is your way easier to maintain?&lt;/li&gt;
&lt;li&gt;Does your way fuel your pursuit of excellence and mastery?&lt;/li&gt;
&lt;li&gt;Does the thing outside not perform up to expectations?&lt;/li&gt;
&lt;li&gt;Or is it just for your pride and ego?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;let%E2%80%99s-say-the-thing-is-super-important&quot;&gt;Let’s say the thing is super important&lt;/h2&gt;
&lt;p&gt;How did you respond to the challenge?&lt;/p&gt;
&lt;p&gt;Did you fight for your reasons to the death (or until you’re proven you’re dead wrong), or did you switch directions immediately to avoid conflict?&lt;/p&gt;
&lt;p&gt;Something profound happens to your inner psyche depending on which response you took.&lt;/p&gt;
&lt;p&gt;If you fought for your reasons until you’re proven you’re wrong, you become more confident in yourself and your beliefs. Do it consistently and you’ll believe in yourself so strongly that you’ll dare to do what others don’t. You’ll dare to express yourself. Let your creative genius out. You’ll make more useful (or maybe even crappy) stuff. And you’ll see more possibilities and opportunities.&lt;/p&gt;
&lt;p&gt;If you changed directions to avoid conflict, &lt;em&gt;congratulations, you have slapped yourself. HARD.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Don’t feel like it?&lt;/p&gt;
&lt;p&gt;Well, dig into that uneasy feeling you had when you decided to switch directions. How does it feel? What was it about?&lt;/p&gt;
&lt;p&gt;Maybe you hated yourself for giving up so easily. Maybe you wondered why you’re so stupid to come up with the idea in the first place. Maybe you felt the indignation for not feeling appreciated for your efforts. Maybe you feel sorry for your helplessness and worthlessness. Maybe it’s something else.&lt;/p&gt;
&lt;p&gt;No matter what, it felt like shit.&lt;/p&gt;
&lt;p&gt;There’s something inside that’s telling you why [insert thing here] needs to be done. There’s a fire burning within, and you snuffed it out.&lt;/p&gt;
&lt;p&gt;You become less confident. You lose the power to stand for yourself. Maybe you’ll also become angrier with the world.&lt;/p&gt;
&lt;p&gt;Then, what if it happens again? And again? And again?&lt;/p&gt;
&lt;p&gt;Eventually, you’ll lose all respected for yourself and your skills you’ve gained through all the hard work. And you don’t even need me to spell out what happens if you get there.&lt;/p&gt;
&lt;h2 id=&quot;the-real-cost-of-reinventing-the-wheel&quot;&gt;The real cost of reinventing the wheel&lt;/h2&gt;
&lt;p&gt;So you see, the real cost of reinventing the wheel ain’t simple. It’s the possibility of developing an inferiority complex that’s so strong that you can no longer help it. And worse of all, you don’t see it coming.&lt;/p&gt;
&lt;p&gt;And if you’re reading this now, you may think to yourself. “Zell, don’t be such a pessimistic dickhead. It wouldn’t happen. You’re thinking too far.”&lt;/p&gt;
&lt;p&gt;Would it happen? Maybe, I don’t know. Most likely, you wouldn’t even know if it has happened, because you’re so used to it already.&lt;/p&gt;
&lt;p&gt;If you’re a project manager, you won’t ever know because you may never see the developer for the rest of your life.&lt;/p&gt;
&lt;p&gt;If you’re the developer, would you know? Maybe. I hope you do. You know you’re on the path if you constantly feel sucky, useless and worthless. You’ll know it if you feel that everyone in the world is better than you. I hope you notice it.&lt;/p&gt;
&lt;h2 id=&quot;what-to-do-instead&quot;&gt;What to do instead&lt;/h2&gt;
&lt;p&gt;Reinventing the wheel or not isn’t the big problem here. It’s how you speak to the other person. If you’re issuing a challenge, you have to ask yourself if the other party can take the challenge.&lt;/p&gt;
&lt;p&gt;If he can’t, try to understand what’s going through the other person’s brain. Seek to understand their emotions.&lt;/p&gt;
&lt;p&gt;If you’re the one that got challenged, what you do is simple. Search through your reasons and stand for yourself. Fight for your beliefs (no, not literally, please).&lt;/p&gt;
&lt;p&gt;Yes, thoughts about displeasing your boss and getting fired will cross your head. You’ll feel that it’s a real risk.&lt;/p&gt;
&lt;p&gt;More often than not, your bosses won’t throw you out of the company. Instead, they’ll respect you for the strength of your character, and they’ll lean on you in times of need.&lt;/p&gt;
&lt;p&gt;Even if you get thrown out of the company, so what? It’s probably a good thing. What’s riskier? Living a life full of doubts and regrets or moving on in search of a new company?&lt;/p&gt;
&lt;p&gt;You decide.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning to code quickly</title>
    <link href="https://zellwk.com/blog/learn-fast/"/>
    <updated>2016-08-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learn-fast/</id>
    <content type="html">&lt;p&gt;“How do you learn and remember all that stuff so quickly?”, I get one of these questions now and then from well-meaning individuals who seek more knowledge. It’s a common thing for all of us. We want to learn fast, do things fast, get more things done.&lt;/p&gt;
&lt;p&gt;However, I never managed to answer the question properly. I always winged it because It triggers a complex mix of emotions within me. Sometimes, I get arrogant. Others, I stay humbled and state the truth: I’m slow. And I want to be faster.&lt;/p&gt;
&lt;p&gt;The poor person on the other side of the computer only has half answer, depending on which side I sway towards.&lt;/p&gt;
&lt;p&gt;Today, I’d like to challenge this question seriously, both for my future benefit and for countless other ambitious individuals who feel like they need to conquer a never-ending mountain of knowledge.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-relativity-of-fast&quot;&gt;The relativity of fast&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;What is fast?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How do you measure if you are learning quickly?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you’re anything like me, you’ll benchmark yourself against two things: (1) people around you and (2) yourself. Most of the time, this benchmarking process occurs unconsciously, so you don’t even know when it’s happening. Except you do. You feel proud that you’re fast. You feel shitty when you’re extremely slow.&lt;/p&gt;
&lt;p&gt;If you surround yourself with brilliant individuals who seem to learn things much quicker than you, you’ll feel you’re a snail. Sometimes, you’ll feel so slow that you’re worthless in this particular field.&lt;/p&gt;
&lt;p&gt;On the contrary, if you compare yourself with those who are slower than you, you feel invincible. You’re like the best designer / coder / &amp;lt;insert-your-title-here&amp;gt;. You’re the king fish in a small pond, a frog in the well. You bask in your prowess, and you stop learning entirely.&lt;/p&gt;
&lt;p&gt;Although these two states aren’t the best you can be in, it’s still not the worst.&lt;/p&gt;
&lt;p&gt;The worst possible benchmark you can use is yourself.
When you benchmark yourself against yourself, you tend to compare the speed at which you learn new things vs. the speed you learn something you already excel at. For me, I always compare my level of proficiency while learning backend, database, how to cook etc. against how fast I pick up more frontend stuff. As a result, I feel slower than a snail. I feel that I don’t have the talent for whatever I’m trying to learn, and I give up.&lt;/p&gt;
&lt;p&gt;It’s stupid. You can’t compare apples to oranges. But it happens. It happens so often that people overlook the silliness of such a comparison because it happens without conscious thought. It’s irrational.&lt;/p&gt;
&lt;p&gt;Fast is just a relative term. You will feel that you’re fast sometimes. You’ll feel you’re slow at times too… But does it matter?&lt;/p&gt;
&lt;p&gt;Instead of trying to be fast, we should be concerned with learning something well instead.&lt;/p&gt;
&lt;h2 id=&quot;learning-well-instead-of-learning-fast&quot;&gt;Learning well instead of learning fast&lt;/h2&gt;
&lt;p&gt;Have you experienced the frustration when something &lt;em&gt;should&lt;/em&gt; work, but it didn’t?&lt;/p&gt;
&lt;p&gt;This happens very often whenever I try to learn things quickly. Instead of learning I find myself hypothesizing the solution with the knowledge I have swimming in my brain.&lt;/p&gt;
&lt;p&gt;If my hypothesis doesn’t work, I’ll turn to Google to seek out the answer. I scan through articles and documentations quickly, but I wouldn’t find the information I’m expecting to find. I get frustrated, and I keep searching for more.&lt;/p&gt;
&lt;p&gt;In short, whenever I try to learn fast, I don’t learn at all. I’m just trying to confirm my biases.&lt;/p&gt;
&lt;p&gt;So, instead of trying to learn fast, I remind myself to learn well. Learning well means you slow down. You read the documentations, internalize fundamentals, take apart principles, explore possible ways of integrating, experiment and become creative.&lt;/p&gt;
&lt;p&gt;(Josh Waitzkin has a book called “&lt;a href=&quot;https://smile.amazon.com/Art-Learning-Journey-Pursuit-Excellence-ebook/dp/B000QCQ970/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1471394980&amp;amp;sr=1-1&amp;amp;keywords=art+of+learning&quot;&gt;The Art of Learning&lt;/a&gt;” that speaks about this. I cannot recommend it enough).&lt;/p&gt;
&lt;h2 id=&quot;how%3F-code-from-scratch&quot;&gt;How? Code from scratch&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Don’t reinvent the wheel!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Use what others have made!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;These are the worst advice you can give a beginner. It tells them to seek for answers outside. It stops them from exploring the solution, being creative, and it creates a false sense of mastery. Unfortunately, this phrase is present everywhere in our industry.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Want to build responsive websites? Use Bootstrap or Foundation. Choose either one!”&lt;/em&gt;, they say.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Want a specific functionality? You’ve got Bootstrap or Foundation to provide you with almost everything you need too! If you can’t find what you’re looking for, how about some jQuery plugins instead?”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“Learning React, Node, and Express? Here’s a starter kit. Don’t waste time creating your own. You’ll never get something as good as this!”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So beginners master the art of Googling for plugins. They build their confidence on a false ground where solutions to all their problems are already out there on the web.&lt;/p&gt;
&lt;p&gt;Except it’s not. There are times where you have to create your solution. But will you be ready if such a situation comes your way?&lt;/p&gt;
&lt;p&gt;To learn something well, you have to discard the notion that reinventing the wheel is bad. I implore you to try your hand at building the functionality you need instead of jumping straight towards libraries that others have built. Try it out, but it yourself, at least. So you know the inner workings of what you’re using.&lt;/p&gt;
&lt;p&gt;Want to make responsive websites? It’s not that hard. The fundamentals to excellent responsive websites are &lt;em&gt;(1) relative units&lt;/em&gt; and &lt;em&gt;(2) media queries&lt;/em&gt;. Master them both, and you’ll build something without Bootstrap or Foundation any day.&lt;/p&gt;
&lt;p&gt;Want to learn React? Then learn react. Don’t complicate yourself with all the other baggage that comes together with it. Learn Redux, webpack etc. later. You can pick them up slowly, one by one, after you internalize the fundamentals.&lt;/p&gt;
&lt;p&gt;Want to build a blog? Decide which platform you want to build it on. Wordpress? Great! Learn Wordpress. A static site generator instead? Great too! Learn that.&lt;/p&gt;
&lt;p&gt;Yes, you will not build something as magnificent as what there is out there in 2 days. Your code is going to be shitty. I guarantee that.&lt;/p&gt;
&lt;p&gt;But as you continue to code from scratch things, you’ll learn to recognize principles, patterns, and logic. You learn what to do and what not to do. You’ll get better. Your code will improve.&lt;/p&gt;
&lt;p&gt;Over time, everything you learned will sink into your unconsciousness. You’ll use the knowledge without even thinking about them while the rest still search mindlessly on Google for answers.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;In short, forget about learning fast. Speed is just a relative factor that inflates or kills our ego. Learn well instead.&lt;/p&gt;
&lt;p&gt;Take your time. Learn the fundamentals. Break apart everything you’re curious about, then, piece it back together yourself.&lt;/p&gt;
&lt;p&gt;Finally, go out there and find a project you resonate with. Build it. It can be a silly side project that has nothing to do with your life, or it can be a client project where you have to put everything in, and ensure the quality is there. Every project is a chance to learn.&lt;/p&gt;
&lt;p&gt;Learn well. Not fast.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Reset Susy&#39;s Span or Gallery</title>
    <link href="https://zellwk.com/blog/reset-susy/"/>
    <updated>2016-06-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/reset-susy/</id>
    <content type="html">&lt;p&gt;Did your &lt;code&gt;span&lt;/code&gt; or &lt;code&gt;gallery&lt;/code&gt; mixin behave unexpectedly (like the image below) when you’re using Susy?&lt;/p&gt;
&lt;figure&gt;
  ![Span and Gallery Problem](/images/2016/susy-span-gallery/problems.png)
  &lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/problems.png&quot; alt=&quot;Span and Gallery Problem&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;You’re not alone. Many people have faced the same problems I outlined above. When they meet with these problems, the common question was how to “reset” the output from the &lt;code&gt;span&lt;/code&gt;, or the &lt;code&gt;gallery&lt;/code&gt; mixin, so the weird behavior goes away, but that’s not the best way to fix the problem.&lt;/p&gt;
&lt;p&gt;In this article, I’m going to show you why “resetting” is the wrong approach and what you can do instead.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before we go further, I’m assuming you know how to use Susy. If you’re unfamiliar with susy, I suggest you &lt;a href=&quot;http://learnsusy.zellwk.com/&quot;&gt;download seven free chapters of Learning Susy&lt;/a&gt; to help you get up to speed quickly.&lt;/p&gt;
&lt;p&gt;We’ll first look at the problem that arose from the &lt;code&gt;span&lt;/code&gt; mixin, followed by the problem that arose from the &lt;code&gt;gallery&lt;/code&gt; mixin.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-from-span&quot;&gt;The Problem from span&lt;/h2&gt;
&lt;p&gt;Let’s say you’re going to create a 2-column layout.&lt;/p&gt;
&lt;p&gt;When you create the layout with the &lt;code&gt;span&lt;/code&gt; mixin, you need to add a &lt;code&gt;last&lt;/code&gt; mixin or a &lt;code&gt;last&lt;/code&gt; keyword for the second column. (Assuming you’re using the &lt;code&gt;after&lt;/code&gt; gutter-position).&lt;/p&gt;
&lt;p&gt;Here’s what your SCSS might look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  columns: 12
);

.gallery__item {
  @include span(6);
  &amp;amp;:nth-child(2n) {
    @include last;
    // Or @include span(6 last);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  ![2-column layout](/images/2016/susy-span-gallery/layout-2col.png)
  &lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-2col.png&quot; alt=&quot;2-column layout&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;So far so good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, what happens if you need to change it to a 3-column layout at 600px?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most people add a media query to their SCSS, but they’ll forget about the &lt;code&gt;:nth-child(2n)&lt;/code&gt; selector they’ve created previously:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(6);
  &amp;amp;:nth-child(2n) {
    @include last;
  }

  @media (min-width: 600px) {
    // Creates 3 column-layout
    @include span(4)
    &amp;amp;:nth-child(3n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-3col-prob.png&quot; alt=&quot;3-column layout with problems&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;😱&lt;/p&gt;
&lt;p&gt;If you’ve opted to use the &lt;code&gt;last&lt;/code&gt; keyword instead of the &lt;code&gt;last&lt;/code&gt; mixin, here’s what you’ll see instead (given the same code)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(6);
  &amp;amp;:nth-child(2n) {
    @include span(6 last); // last keyword instead of last mixin
  }

  @media (min-width: 600px) {
    @include span(4)
    &amp;amp;:nth-child(3n) {
      @include span(4 last);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-3col-prob-2.png&quot; alt=&quot;3-column layout with problems 2&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;That’s even worse!!! 😱😱😱&lt;/p&gt;
&lt;p&gt;But why? Why is your layout screwed so badly? Why does it contain remnants of the old 2-column layout?&lt;/p&gt;
&lt;p&gt;This happens because the &lt;code&gt;gallery__item:nth-child(2n)&lt;/code&gt; pseudo class has a higher specificity compared to &lt;code&gt;.gallery__item&lt;/code&gt;. &lt;strong&gt;Styles within &lt;code&gt;.gallery__item:nth-child(2n)&lt;/code&gt; takes precedence over styles in &lt;code&gt;.gallery__item&lt;/code&gt; because of the higher specificity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick fix is to create a selector that overrides the previous layout with the same specificity.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(6);
  &amp;amp;:nth-child(2n) {
    @include span(6 last); // last keyword instead of last mixin
  }

  @media (min-width: 600px) {
    @include span(4)

   // Overriding the 2-column grid to match the 3-column grid
    &amp;amp;:nth-child(2n) {
      float: left;
      width: span(4)
      margin-right: gutter();
    }

    // Setting last item on the 3-column grid
    &amp;amp;:nth-child(3n) {
      @include span(4 last);
    }

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-3col.png&quot; alt=&quot;3-column layout&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Although it works, you can see the code starts to get verbose.&lt;/p&gt;
&lt;p&gt;It’s an okay solution if you didn’t need to change the layout at another breakpoint, but let’s say you had to. You need to create a 4-column grid when the viewport reaches 1000px.&lt;/p&gt;
&lt;p&gt;If you used the same solution, you’d notice you need to override the remnants of BOTH the 2-column grid and the 3-column grid:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // ... 2-column and 3-column grids

  // Creates 4-column grid
  @media (min-width: 1000px) {
    @include span(3);

    // Overrides 2-column and 3-column grid
    &amp;amp;:nth-child(2n),
    &amp;amp;:nth-child(3n) {
      float: left;
      width: span(3);
      margin-right: gutter();
    }

    // Sets last item on 4-column grid
    &amp;amp;:nth-child(4n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-4col.png&quot; alt=&quot;4-column layout&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Ugh. Not very nice. We can agree that there’s a better solution out there.&lt;/p&gt;
&lt;p&gt;A cleaner way is to use the &lt;code&gt;:nth-child(n)&lt;/code&gt; pseudo-class to override all gallery items. It’s slightly better than overriding &lt;code&gt;:nth-child(2n)&lt;/code&gt; and &lt;code&gt;:nth-child(3n)&lt;/code&gt; separately:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // ... 2-column and 3-column grids

  @media (min-width: 1000px) {
    // Overrides previous grid and creates 4-column grid
    &amp;amp;:nth-child(n) {
      @include span(3);
    }

    // Sets last item on 4-column grid
    &amp;amp;:nth-child(4n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although this works, it’s not the best solution since we’re overriding code. It might come back and bite you a few weeks down the road if you forget about your approach.&lt;/p&gt;
&lt;p&gt;By the way, since we’re overriding every gallery item, you can technically say we’re “resetting” the &lt;code&gt;span&lt;/code&gt; mixin to its defaults.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There’s yet another solution. The cleanest one I’ve found so far.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is to use media queries to isolate layouts so their effects don’t spill over to other breakpoints. This means we use both &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; media queries.&lt;/p&gt;
&lt;p&gt;I’ve spoken in detail about why you should use both &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; queries in &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css&quot;&gt;a separate post&lt;/a&gt;, but let me explain how to use it with our current example.&lt;/p&gt;
&lt;p&gt;First, we know the layout is two columns on the smallest viewport. Since it’s the smallest viewport, we can safely use a &lt;code&gt;max-width&lt;/code&gt; query to make sure styles we declare doesn’t go beyond a maximum viewport width.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @media (max-width: 599px) {
    @include span(6);
    &amp;amp;:nth-child(2n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, both &lt;code&gt;@include span(6)&lt;/code&gt; and &lt;code&gt;@include last&lt;/code&gt; will only trigger when the browser is 599px and below.&lt;/p&gt;
&lt;p&gt;By doing this, you’ll see that each gallery item automatically returns to it’s default styles (&lt;code&gt;width: 100%&lt;/code&gt; and &lt;code&gt;float: none&lt;/code&gt;) when the viewport hits 600px.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-mq-transition.gif&quot; alt=&quot;Gallery Item automatically returns to default styles at 600px&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;With these styles, we’re free to code the 3-column layout without any side effects.&lt;/p&gt;
&lt;p&gt;Note: Some people will also call this “resetting” the &lt;code&gt;span&lt;/code&gt; mixin’s output. However, we’re not “resetting” anything in this case. We just contain the styles such that it doesn’t affect other viewports.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In the 3-column layout,&lt;/strong&gt; we know there’s a 2-column layout when the viewport is below 600px. We also know there’s a 4-column layout at a viewport above 1000px. Hence, &lt;strong&gt;we need to contain it’s styles between 600px and 999px&lt;/strong&gt; using both the &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // 2-column layout

  // 3-column layout
  @media (min-width: 600px) and (max-width: 999px) {
    @include span(4);
    &amp;amp;:nth-child(3n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, you’ll see that the &lt;code&gt;gallery__item&lt;/code&gt; returns to its default styles at 1000px. We can then code the 4-column layout without any side effects from the previous two layouts&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/layout-mq-transition-2.gif&quot; alt=&quot;Gallery Item automatically returns to default styles at 1000px&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;For the 4-column layout, we know it’s the largest layout of all, so we only need a &lt;code&gt;min-width&lt;/code&gt; query to prevent it’s styles from affecting the 2-column and 3-column layouts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // 2-column layout ...
  // 3-column layout ...

  // 4-column layout
  @media (min-width: 1000px) {
    @include span(3);
    &amp;amp;:nth-child(4n) {
      @include last;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;To quickly wrap up, the best way to fix the &lt;code&gt;span&lt;/code&gt; problem is to isolate properties created within their correct media queries&lt;/strong&gt;, not “resetting” them.&lt;/p&gt;
&lt;h2 id=&quot;the-problem-from-gallery&quot;&gt;The Problem from gallery&lt;/h2&gt;
&lt;p&gt;The problem from the &lt;code&gt;gallery&lt;/code&gt; mixin is similar to the problem from the &lt;code&gt;span&lt;/code&gt; mixin. Here’s what it looks like again:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/problem-gallery.png&quot; alt=&quot;Gallery Problem&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This problem happens to people who decide to write “desktop-first” CSS. By desktop-first CSS, I mean they write properties for desktop related styles without media queries, then proceed to add &lt;code&gt;max-width&lt;/code&gt; queries for smaller viewports. Here’s what it looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.selector {
  float: left;
  width: 50%

  @media (max-width: 600px) {
    float: none;
    width: 100%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can already see that coding desktop-first is complicated. You have to “reset” the styles from the previous viewport. I’ve written an &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css&quot;&gt;in depth post&lt;/a&gt; on mobile-first vs. desktop-first CSS, and it’s worth a read if you’re confused between the two.&lt;/p&gt;
&lt;p&gt;Let’s continue the same desktop-first approach using Susy and we’ll soon see why the problem happens. Let’s say you have a 2-column layout above 600px and a 1-column layout below 600px.&lt;/p&gt;
&lt;p&gt;A desktop first approach with the &lt;code&gt;gallery&lt;/code&gt; mixin will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include gallery(6);

  @media (max-width: 600px) {
    @include gallery (12);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially, this code tries to override the 2-column layout by creating a new 1-column layout style. But the results you get is:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/problem-gallery.png&quot; alt=&quot;The gallery problem&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This problem happens because Susy uses the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/#article-header-id-4&quot;&gt;isolate technique&lt;/a&gt; whenever the &lt;code&gt;gallery&lt;/code&gt; mixin is used.&lt;/p&gt;
&lt;p&gt;The output of a 2-column &lt;code&gt;gallery&lt;/code&gt; mixin is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;// from gallery (6)
.gallery__item {
  width: 49.15254%;
  float: left;
}
.gallery__item:nth-child(2n + 1) {
  margin-left: 0;
  margin-right: -100%;
  clear: both;
  margin-left: 0;
}
.gallery__item:nth-child(2n + 2) {
  margin-left: 50.84746%;
  margin-right: -100%;
  clear: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output from a 1-column &lt;code&gt;gallery&lt;/code&gt; mixin is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;// from gallery (12)
@media (max-width: 600px) {
  .gallery__item {
    width: 100%;
    float: left;
  }
  .gallery__item:nth-child(1n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you look at the code above, notice that Susy creates a &lt;code&gt;margin-left&lt;/code&gt; and &lt;code&gt;margin-right&lt;/code&gt; property for each gallery item. The negative margins here causes elements to stack together.&lt;/p&gt;
&lt;p&gt;If you checked the code from the 2-column layout, you’d see that the way to break this “stacking” is to use a &lt;code&gt;clear: both&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item:nth-child(2n + 1) {
  // ...
  clear: both;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But, there’s no &lt;code&gt;clear: both&lt;/code&gt; in the 1-column layout, which is why all gallery items are stacked on top of each other.&lt;/p&gt;
&lt;p&gt;Since we know setting &lt;code&gt;clear: both&lt;/code&gt; will unstack all gallery items, the quickest way will be to set a &lt;code&gt;clear: both&lt;/code&gt; property on the &lt;code&gt;nth-child(n)&lt;/code&gt; element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include gallery(6);

  @media (max-width: 600px) {
    @include gallery (12);
    &amp;amp;:nth-child(n) {
      clear: both;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/susy-span-gallery/gallery-1col.png&quot; alt=&quot;Gallery 1-column&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, there’s a much better way. We just have to use mobile-first CSS with &lt;code&gt;min-width&lt;/code&gt; media queries and the code becomes much simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // 1 column layout (no styles needed)

  // 2-column layout
  @media (min-width: 600px) {
    @include gallery(6);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hence, the best fix for this &lt;code&gt;gallery&lt;/code&gt; problem is to use media queries properly too. Once again, check out the post on &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css&quot;&gt;mobile-first CSS&lt;/a&gt; if you’re unsure why this works.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We’ve covered how to solve problems that arose from both the &lt;code&gt;span&lt;/code&gt; and &lt;code&gt;gallery&lt;/code&gt; mixin. In both cases, the solution is to write better media queries instead of trying to “reset” the properties created by Susy’s mixins.&lt;/p&gt;
&lt;p&gt;To be totally honest, I covered the best practices to create flexible grids in &lt;a href=&quot;http://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt;. You would have saved yourself tons of time and headaches trying to overcome such problems if you have read the book.&lt;/p&gt;
&lt;p&gt;If you’re curious and want to find out more, I invite you to download 7 sample chapters for free in the box below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Ask Good Coding Questions That Get Great Answers</title>
    <link href="https://zellwk.com/blog/asking-questions/"/>
    <updated>2016-06-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/asking-questions/</id>
    <content type="html">&lt;p&gt;Have you ever asked code-related questions and never got a response? Even if you got a response, did you go through multiple back-and-forth clarification questions before you finally get a useful answer?&lt;/p&gt;
&lt;p&gt;It happens. A lot.&lt;/p&gt;
&lt;p&gt;It happens because you didn’t ask questions that were good enough for anyone to answer you immediately. In this article, I’ll help you learn the art of asking good coding questions so you’ll always get great answers.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;But first off, don’t get pissed (or feel that you’re not good enough) if you didn’t get a response.&lt;/p&gt;
&lt;h2 id=&quot;why-people-don%E2%80%99t-answer-questions&quot;&gt;Why People Don’t Answer Questions&lt;/h2&gt;
&lt;p&gt;Contrary to what you may believe, people DO answer questions, even if they’re busy. Many experts actively answer questions via their email whenever they can; some reply Github issues at the speed of light; others browse through Stack Overflow to help answer questions on a daily basis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But nobody wants to spend 100% of their time answering questions&lt;/strong&gt;. Everyone has their priorities. Answering questions, frankly, falls to the bottom of these priorities. &lt;strong&gt;The onus is on you to craft questions that others can understand and reply quickly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, what makes a great question that people want to reply to?&lt;/p&gt;
&lt;h2 id=&quot;structure-of-a-great-question&quot;&gt;Structure of a Great Question&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;It’s specific&lt;/li&gt;
&lt;li&gt;It’s clear and concise&lt;/li&gt;
&lt;li&gt;It shows you’ve put work into it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There’s no fixed structure. As long as you covered the three guidelines above, you’re good to go.&lt;/p&gt;
&lt;p&gt;Here’s an example of a question that I procrastinated before answering (any procrastination from your answerer is bad because they might end up skipping them entirely):&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2016/asking-questions/badq1.png&quot; alt=&quot;Example of a bad question.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;Let’s break it down why this question doesn’t get answered immediately, and how it can be improved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, it’s not specific enough.&lt;/strong&gt; There are three instances where being more specific will greatly improve the question:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What should I comment on? How should I comment? Do I have to justify my work to him? Is he asking for help?&lt;/li&gt;
&lt;li&gt;What does accessibility mean? Accessibility is a  big word and can mean a number of things.&lt;/li&gt;
&lt;li&gt;What are my scaling techniques? Which technique is he specifically referring to?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Second, the lack of specificity in this question made it unclear&lt;/strong&gt;. Even if I wanted to answer the question, I can’t answer it without asking further.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third, it’s unclear how much work was put into (1) crafting the question and (2) trying out the techniques mentioned&lt;/strong&gt;. Here, the lack of specificity shows that this guy hasn’t sat down and crafted the question carefully. Besides, has he even tried the scaling techniques before asking about it? Trying to ask a broad question without first getting your hands dirty doesn’t provide any value to you, usually.&lt;/p&gt;
&lt;p&gt;Because of the ambiguity, I can spin 27 angles to this question. Answering every angle is exhausting and well, frankly, I don’t want to.&lt;/p&gt;
&lt;p&gt;What I do usually, is to ask clarifying questions to narrow down these angles. By the way, asking clarifying questions is a pain in the ass. Many people don’t even reply to them, and the effort I put into asking (almost) always go to the trashcan. /rant&lt;/p&gt;
&lt;p&gt;Note: You don’t &lt;em&gt;always&lt;/em&gt; have to ask about code. In this case, I get a sense that he’s unwilling to even begin trying the techniques I mentioned because he doesn’t know if the techniques scale (whatever it may mean).&lt;/p&gt;
&lt;p&gt;After some clarifying questions, I realized that what he wanted was the ability for people to zoom in / out of the webpage while retaining the proportions of elements on a page.&lt;/p&gt;
&lt;p&gt;Here’s one way to make the question better:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey Zell,&lt;/p&gt;
&lt;p&gt;Thanks for all the articles you wrote about responsive typography. It helped me xxxx.&lt;/p&gt;
&lt;p&gt;I have one question that I’m confused about. When you use em and rems, will you be able to keep the proportions between elements on a page consistent even if someone else zooms in or out?&lt;/p&gt;
&lt;p&gt;To make it clearer, let’s say the font-size of my body text is 16px while the font-size of h1 is twice of that at 32px. Will the font-size of h1 always be twice of the body text?&lt;/p&gt;
&lt;p&gt;Thanks,
Name-of-awesome-question-asker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s break it down why this works:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, the question started off with a “thanks”&lt;/strong&gt; that makes the answerer feel good. It also helps contextualize the situation, which makes it easier to answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, there is only one specific question&lt;/strong&gt;. It’s clear and specific. You immediately know what he’s asking, so it’s much easier to answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third, it’s painfully clear&lt;/strong&gt;. Words can mean different things to different people. If need be, you can make it painfully clear by providing examples so there’s no misunderstanding in your question. This helps to get the correct answer immediately. Clarity &lt;em&gt;always&lt;/em&gt; beats &lt;em&gt;conciseness&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally, it shows that the guy has done his work&lt;/strong&gt;. It’s difficult to boil down your question into a specific question. Doing that is already a bonus point. It also shows that the person has internalized (or at least tried things in his mind). People want to help others who put in work. They know the effort used to answer the questions will be put to good use. Me too.&lt;/p&gt;
&lt;p&gt;Now, this question is ambiguous and seeks clarification. But what if you had a real code-related question and you need the answerer to look at your code?&lt;/p&gt;
&lt;h2 id=&quot;getting-the-answerer-to-look-at-your-code&quot;&gt;Getting The Answerer To Look At Your Code&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you write code, you’re already proving that you’ve done some work, so kudos to you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can still use the same guidelines as above to help. Once again, the guidelines are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Be specific&lt;/li&gt;
&lt;li&gt;Be clear and concise&lt;/li&gt;
&lt;li&gt;Show your work&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is where we get an interesting dilemma. What happens usually with people asking code-related questions is that they show &lt;em&gt;too much&lt;/em&gt; of their work.&lt;/p&gt;
&lt;p&gt;Here’s an example of a question I received:&lt;/p&gt;
&lt;figure role=&quot;figure&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2016/asking-questions/badq2.png&quot; alt=&quot;Example of a bad question.&quot;&gt;&lt;/figure&gt;
&lt;p&gt;😄&lt;/p&gt;
&lt;p&gt;Okay, what’s wrong?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, it’s not specific enough&lt;/strong&gt;. Where’s the problem? It’s awesome that he has a demo to show, but the demo is pretty large! Plus, this came from someone who bought my Susy book, so I’m wondering if the question is about Susy. It’s not stated clearly, too.&lt;/p&gt;
&lt;p&gt;When you think about the specificity of your questions, &lt;strong&gt;think about how you can make it painfully clear to the answerer&lt;/strong&gt;. Take a screenshot, draw an image, shoot a video. Do whatever it takes to make it easier for the answerer to answer your question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, where’s the code&lt;/strong&gt;? I can’t do anything without looking at the code, can I? 😄&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When you show code, make sure you only show the relevant parts to the question.&lt;/strong&gt; Don’t show everything, because it’s immensely overwhelming. Will you debug someone’s code with 1000 lines of CSS at a whim? Probably not. I don’t want to either.&lt;/p&gt;
&lt;p&gt;By the way, this is what we call a reduced test case. Chris Coyier explains in detail what a reduced test case is, and how to pull it off properly in &lt;a href=&quot;https://css-tricks.com/reduced-test-cases/&quot;&gt;his article&lt;/a&gt;. I recommend you check it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you need to show code, make sure you find a way for the answerer to look at, and edit your code easily.&lt;/strong&gt; Even though the person you’re asking is much better than you, he probably can’t get to the correct code without debugging (I know some awesome people can, but I can’t. I’m sorry).&lt;/p&gt;
&lt;p&gt;For frontend / static questions, you can use &lt;a href=&quot;http://codepen.io/&quot;&gt;Codepen&lt;/a&gt; to create your test case easily. If you don’t know how to use Codepen, make sure you take a look at &lt;a href=&quot;https://css-tricks.com/video-screencasts/112-using-codepen/&quot;&gt;this video&lt;/a&gt; by Chris, where he walks you through the basics of Codepen. It’s old, but the principles remain the same.&lt;/p&gt;
&lt;p&gt;If you can’t use Codepen, it’s your job to find an alternative way where your answerer can quickly look and code through your question. Git repos are an excellent way of doing so.&lt;/p&gt;
&lt;p&gt;If you can’t use Codepen nor Github (I honestly can’t think of a reason why), send a zip file over. It’s better than nothing.&lt;/p&gt;
&lt;p&gt;If you noticed, &lt;strong&gt;the underlying principle is to show that you respect your answerer’s time&lt;/strong&gt;. Make your questions specific, clear and concise. Respect their time and you’ll increase your chances of getting a great reply.&lt;/p&gt;
&lt;h2 id=&quot;don%E2%80%99t-feel-bad-about-asking-the-question&quot;&gt;Don’t Feel Bad About Asking The Question&lt;/h2&gt;
&lt;p&gt;Your question is legit. It bothers you, so ask it even if you feel that it’s going to be a waste of your answerer’s time!&lt;/p&gt;
&lt;p&gt;People love to help. More often than not, they would already have seen the question so many times that they can point you in the correct direction without even thinking about it. I point people to my blog posts pretty often ;) This way, they don’t waste their time, and you get to go towards the correct direction much quicker. Win win.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Also, don’t worry if English isn’t your native language.&lt;/strong&gt; You don’t need fanciful words to get question across. In fact, simple words and sentences often work way better than big words. Ignore trolls that criticize your English. They’re not important.&lt;/p&gt;
&lt;h2 id=&quot;pop-the-question-at-the-correct-place&quot;&gt;Pop The Question At The Correct Place&lt;/h2&gt;
&lt;p&gt;You can pop the question via email, in forums, Stack Overflow, or anywhere you can think of. The point is to make sure you ask the question where the answerer feels most comfortable with answering your questions.&lt;/p&gt;
&lt;p&gt;Different people have different preferences. Some prefer you ask via email, some twitter, others maybe in person perhaps?&lt;/p&gt;
&lt;p&gt;For me, I’m switching the way I answer questions starting from today. &lt;strong&gt;If you want to ask me a question (Design, Frontend, Backend, Life etc), please &lt;a href=&quot;https://github.com/zellwk/ama/issues&quot;&gt;head over to this Github repo&lt;/a&gt; and file an issue.&lt;/strong&gt; I’ll reply.&lt;/p&gt;
&lt;p&gt;I want to handle code-related questions via Github because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This way, your questions don’t get lost in my inbox.&lt;/li&gt;
&lt;li&gt;I (might) have answered your question before. You can search for them easily on the Github issues.&lt;/li&gt;
&lt;li&gt;It’s much easier for me to search through Github issues and point people towards the correct answers than write a new reply for every question that comes my way.&lt;/li&gt;
&lt;li&gt;(This last one is a fantasy). If you ask questions, I’ll have more materials to talk about in blog posts (where I expand the replies). At the moment, everything gets lost in emails and I have to think of new topics every week. So ask away!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;I used to pride myself in answering every question that comes into my inbox (even the ambiguous ones). I’ll send clarifying questions until I burn myself out.&lt;/p&gt;
&lt;p&gt;It’s tiring. I reply to emails more than doing actual work that I care about. So, to be completely honest, I’m actually writing this for two reasons. (1) To help you ask better questions and (2) to reduce the amount of work I take on.&lt;/p&gt;
&lt;p&gt;So, if your question doesn’t follow the guidelines I mentioned in this article, I’ll point you back here until you refine them. Deal?&lt;/p&gt;
&lt;p&gt;Besides, you know the benefits to learning to ask good questions. I don’t have to spell it out :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Everything about the Modular Scale Sass Libary and Modular Scale with Typi</title>
    <link href="https://zellwk.com/blog/modular-scale/"/>
    <updated>2016-05-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/modular-scale/</id>
    <content type="html">&lt;p&gt;Previously, I shared the theory about adjusting your Modular Scale scale to size your headers for different devices. I also covered how you can do it with the Modular Scale plugin for the 4th method.&lt;/p&gt;
&lt;p&gt;Today, I want to share more about the Modular Scale library so you can learn to integrate it into your project easily. I’m also going to share with you how to use Modular Scale with Typi.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-modular-scale-sass-library&quot;&gt;The Modular Scale Sass Library&lt;/h2&gt;
&lt;p&gt;It’s quite common to see developers use the &lt;a href=&quot;http://modularscale.com/&quot;&gt;Modular Scale calculator&lt;/a&gt; to calculate the &lt;code&gt;font-size&lt;/code&gt; for their text elements when Modular Scale is used. They inevitably resort to copy-and-pasting values from the calculator to their CSS files, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 3.157em; }
h2 { font-size: 2.369em; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;font-size&lt;/code&gt; has to change at a specific breakpoint, these developers usually copy-paste another value from the calculator into their CSS, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 3.157em; }
h2 { font-size: 2.369em; }

@media all and (min-width: 25em) {
  h1 { font-size: 4.209em; }
  h2 { font-size: 3.157em; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two downsides to copy-pasting these numbers.&lt;/p&gt;
&lt;p&gt;First, &lt;strong&gt;they look like magic numbers&lt;/strong&gt;. There’s no easy way for a developer joining the project to know how the hell these numbers got into the stylesheet in the first place.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;it’s a lot of work to copy-paste numbers&lt;/strong&gt;. What if you had to change the scale? Or the base? I can already sense the dread…&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/modularscale/modularscale-sass&quot;&gt;Modular Scale Sass Library&lt;/a&gt; is a library that &lt;a href=&quot;http://scottkellum.com/&quot;&gt;Scott Kellum&lt;/a&gt;,  &lt;a href=&quot;http://adamstacoviak.com/&quot;&gt;Adam Stacoviak&lt;/a&gt; and &lt;a href=&quot;http://thecodingdesigner.com/&quot;&gt;Mason Wendell&lt;/a&gt; developed to help ease the two pain points I mentioned.&lt;/p&gt;
&lt;p&gt;To use the Modular Scale library, you first have to download it via &lt;code&gt;bower&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt; or hitting the download button on Github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt;: &lt;code&gt;bower install modular-scale --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt;: &lt;code&gt;npm install modular-scale --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, you &lt;code&gt;@import&lt;/code&gt; modular scale into your Sass file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &#39;path-to-modular-scale/stylesheets/modular-scale&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modular Scale gives you a &lt;code&gt;ms()&lt;/code&gt; function to calculate the &lt;code&gt;font-size&lt;/code&gt; you wanted instead of copy-pasting from the web calculator&lt;/p&gt;
&lt;p&gt;It takes in a number, the nth-step you want your font-size to be. By step, I mean the font-size is the number nth on your scale, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/everything-about-ms/modular-scale-steps.png&quot; alt=&quot;Modular Scale Steps&quot;&gt;
  &lt;figcaption&gt;Modular Scale Steps&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here’s how you use the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: ms(3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  font-size: 2.369em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For those who can’t view the image above, the 3rd step (&lt;code&gt;ms(3)&lt;/code&gt;) means the plugin multiplies your base &lt;code&gt;font-size&lt;/code&gt; with your ratio 3 times (&lt;code&gt;1em * ratio * ratio * ratio&lt;/code&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-1: ms(-1); // =&amp;gt; 1em ÷ ratio
$ms: ms(0): // =&amp;gt; 1em
$ms1: ms(1); // =&amp;gt; 1em * ratio
$ms2: ms(2); // =&amp;gt; 1em * ratio * ratio
$ms3: ms(3); // =&amp;gt; 1em * ratio * ratio * ratio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default ratio used in Modular Scale is 1.618. If you want to change this ratio, you can change the &lt;code&gt;$ms-ratio&lt;/code&gt; setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-ratio: 1.25;

$ms1: ms(1); // =&amp;gt; 1em * 1.25 = 1.25em
$ms2: ms(2); // =&amp;gt; 1em * 1.25 * 1.25 = 1.563em
$ms3: ms(3); // =&amp;gt; 1em * 1.25 * 1.25 * 1.25 = 1.953em
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanted to use two ratios (&lt;a href=&quot;https://zellwk.com/blog/responsive-modular-scale/&quot;&gt;see why here&lt;/a&gt;), you can set the ratio to a list of two numbers and Modular Scale will automatically help you calculate the size for the nth-step. This feature is superb because it’s really difficult to calculate the steps and line them up in ascending order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-ratio: 1.333 1.618;

$ms: ms(0); // =&amp;gt; 1em
$ms1: ms(1); // =&amp;gt; 1.333em
$ms2: ms(2); // =&amp;gt; 1.618em
$ms3: ms(3); // =&amp;gt; 1.777em
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/everything-about-ms/double-ratio.png&quot; alt=&quot;Steps for a double-ratio scale&quot;&gt;
  &lt;figcaption&gt;Steps for a double-ratio scale&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Likewise, you can also change the base &lt;code&gt;font-size&lt;/code&gt; of the Modular Scale by setting the &lt;code&gt;$ms-base&lt;/code&gt; property. The default &lt;code&gt;font-size&lt;/code&gt; used is &lt;code&gt;1em&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-base: 2em;

$ms: ms(0); // =&amp;gt; 2em;
$ms1: ms(1); // =&amp;gt; 2em * 1.618 = 3.23607em;
$ms2: ms(2); // =&amp;gt; 2em * 1.618 * 1.618 = 5.23607em;
$ms3: ms(3); // =&amp;gt; 2em * 1.618 * 1.618 * 1.618 = 8.47214em;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, you can also use two bases for your modular scale if you want. All you need to do is to set &lt;code&gt;$ms-base&lt;/code&gt; to a list of two numbers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-base: 1em 2em;

$ms: ms(0); // =&amp;gt; 1em
$ms1: ms(1); // =&amp;gt; 1.23607em
$ms2: ms(2); // =&amp;gt; 1.61803em
$ms3: ms(3); // =&amp;gt; 2em
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/everything-about-ms/double-base-scale.png&quot; alt=&quot;Steps for a double-base scale&quot;&gt;
  &lt;figcaption&gt;Steps for a double-base scale&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, Modular Scale gives you a &lt;code&gt;ms-respond&lt;/code&gt; mixin that allows you to the change ratio of your Scale at different breakpoints. I’ve went in-depth into this on a &lt;a href=&quot;https://zellwk.com/blog/changing-modular-scale&quot;&gt;separate article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Phew, so there’s everything you ever need to know about Modular Scale.&lt;/p&gt;
&lt;p&gt;Note: At the time of writing, the stable version of Modular Scale v2.x.x. I know Scott is making a v3 for Modular Scale that’s totally different from what I’ve explained above. I’ll update this article (or maybe create a new one) when I have the time to play with v3.&lt;/p&gt;
&lt;p&gt;Next up, let’s go into the second part of the article where I’ll explain how to use Modular Scale with Typi.&lt;/p&gt;
&lt;h2 id=&quot;using-modular-scale-with-typi&quot;&gt;Using Modular Scale with Typi&lt;/h2&gt;
&lt;p&gt;Typi is a library that makes responsive typography easy. If you’re totally new to Typi, I suggest checking out the &lt;a href=&quot;https://zellwk.com/blog/typi&quot;&gt;basic tutorial&lt;/a&gt; before continuing.&lt;/p&gt;
&lt;p&gt;If you familiar with Typi, you’ll know that you need to create font-maps to hold your typography configurations, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1: (
  null: 2.369em,
  small: 3.157em
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use Modular Scale directly with Typi by writing the &lt;code&gt;ms()&lt;/code&gt; function as the first value of each key. The above would be equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-ratio: 1.333;
$h1-map: (
  null: ms(3),
  small: ms(4)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can can imagine, you can vary &lt;code&gt;$ms-base&lt;/code&gt; and &lt;code&gt;$ms-ratio&lt;/code&gt;, and Typi will output the &lt;code&gt;font-size&lt;/code&gt; calculated by the Modular Scale plugin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-base: 1.5em;
$ms-ratio: 1.25;

$h1-map: (
  null: ms(3), // 2.92969em
  small: ms(4) // 3.66211em
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Things however, change slightly when you want to change the Modular Scale ratio at different breakpoints. Typi (v2.2.2 onwards) allow you to do this with the help of a new map called &lt;code&gt;$typi-ms&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi-ms: (
  null: 1.2,
  small: 1.333,
  large: 1.618
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can imagine, &lt;code&gt;$typi-ms&lt;/code&gt; uses the &lt;code&gt;$breakpoints&lt;/code&gt; map to determine the media query produced for the &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; keys. This map suggests that the ratio used for the Modular scale should be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default (without breakpoints): 1.2&lt;/li&gt;
&lt;li&gt;small breakpoint: 1.333&lt;/li&gt;
&lt;li&gt;large breakpoint: 1.618&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the &lt;code&gt;$typi-ms&lt;/code&gt; map is created, you can modify your font-maps such that the &lt;code&gt;font-size&lt;/code&gt; value is an integer that represents the nth-step of the scale instead of ms($nth-step).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-map: (
  null: 2, // 2nd step
  small: 3 // 3rd step
  large: 4 // 4th step
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use the &lt;code&gt;typi&lt;/code&gt; mixin as usual, Typi will automatically calculate the correct font-size based on the &lt;code&gt;$typi-ms&lt;/code&gt; map. The CSS produced for the above Sass maps is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  font-size: 1.44rem; /* 1em * 1.2 * 1.2 */
}

@media all and (min-width: 600px) {
  h1 {
    font-size: 2.36859rem; /* 1em * 1.333 * 1.333 * 1.333 */
  }
}

@media all and (min-width: 800px) {
  h1 {
    font-size: 6.85353rem; /* 1em * 1.618 * 1.618 * 1.618 * 1.618 */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the &lt;code&gt;font-size&lt;/code&gt; produced allows you to change the ratio and the steps at the same time? This wasn’t possible if you used the Modular Scale plugin directly.&lt;/p&gt;
&lt;p&gt;Typi is also smart enough to “guess” the ratio and the step to use if you didn’t provide it with the information at every breakpoint. For instance, if you have the following maps, Typi will automatically create the &lt;code&gt;large&lt;/code&gt; breakpoint with a ratio of 1.618, and a step of 3.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
$typi-ms: (
  null: 1.2,
  small: 1.333,
  large: 1.618,
);

$h1: (
  null: 2,
  small: 3
);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* CSS */
h1 {
  font-size: 1.44rem; /* 1em * 1.2 * 1.2 */
}

@media all and (min-width: 600px) {
  h1 {
    font-size: 2.36859rem; /* 1em * 1.333 * 1.333 * 1.333 */
  }
}

@media all and (min-width: 800px) {
  h1 {
    font-size: 4.2358rem; /* 1em * 1.618 * 1.618 * 1.618 */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have the following maps, Typi knows that it should use &lt;code&gt;1.618&lt;/code&gt; as the ratio when creating 3rd step at the &lt;code&gt;med&lt;/code&gt; breakpoint. (It determines the order based on the order of breakpoints in the &lt;code&gt;$breakpoints&lt;/code&gt; map).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi-ms: (
  null: 1.2,
  small: 1.618,
);

$h1: (
  null: 2,
  large: 3,
);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* CSS */
h1 {
  font-size: 1.44rem; /* 1em * 1.2 * 1.2 */
}

@media all and (min-width: 600px) {
  h1 {
    font-size: 2.61792rem; /* 1em * 1.618 * 1.618 */
  }
}

@media all and (min-width: 800px) {
  h1 {
    font-size: 4.2358rem; /* 1em * 1.618 * 1.618 * 1.618 */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, if you want to, you can use multiple bases or multiple ratios together with the &lt;code&gt;$typi-ms&lt;/code&gt; map. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi-ms: (
  null: 1.2, // Single ratio of 1.2
  small: 1.2 1.5, // Two ratios, 1.2 and 1.5
  med: (1em, 1.5), // Single base of 1em and single ratio of 1.5
  large: (1em 2em, 1.618), // Double bases and a single ratio
  dont-do-this: (1em 2em, 1.333 1.618) // Double bases and double ratios
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s everything about using Modular Scale with Typi :)&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this article, we reviewed the basics of Modular Scale plugin, and learned how to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a double-base modular scale&lt;/li&gt;
&lt;li&gt;a double-ratio modular scale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, we talked about how to do the same with Typi.&lt;/p&gt;
&lt;p&gt;Finally, we looked at how to change the Modular Scale ratio at different breakpoints using Typi as well.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Modular Scale can be difficult to understand if you’re not use to Math. However, it gets really easy once you get used to the idea of “steps”. Try using Modular Scale (by itself) or Modular Scale (with Typi) and let me know if you have any questions in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Changing Modular Scale Ratio at Different Breakpoints</title>
    <link href="https://zellwk.com/blog/changing-modular-scale/"/>
    <updated>2016-05-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/changing-modular-scale/</id>
    <content type="html">&lt;p&gt;I spoke about why you may have problems with large font-sizes on the mobile and the four methods to deal with it &lt;a href=&quot;https://zellwk.com/blog/responsive-modular-scale&quot;&gt;in a previous article&lt;/a&gt;. In this article, we’re going to look at implementing the fourth method that was mentioned—changing the Modular Scale ratio at different breakpoints.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I highly suggest that you read the &lt;a href=&quot;https://zellwk.com/blog/responsive-modular-scale&quot;&gt;previous article&lt;/a&gt; before continuing if you haven’t done so. With that aside, let’s dive in and learn how to change the ratio at different breakpoints.&lt;/p&gt;
&lt;p&gt;We’ll begin by learning to change the ratio manually since it will pave the way to better a implementation that we’re going to discuss further down the article.&lt;/p&gt;
&lt;h2 id=&quot;changing-the-ratio-manually&quot;&gt;Changing The Ratio Manually&lt;/h2&gt;
&lt;p&gt;Let’s assume that you’re going to use the following numbers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;base font-size of 16px&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;ratio of 1.333&lt;/strong&gt; on screens &lt;strong&gt;smaller than 1000px&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;ratio of 1.618&lt;/strong&gt; on screens &lt;strong&gt;larger than 1000px&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s also say that your &lt;code&gt;h1&lt;/code&gt; font-size is set to the 3rd step. When I say the 3rd step, I mean the font-size of your &lt;code&gt;h1&lt;/code&gt; is the third number on the scale:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/changing-ms-ratio/modular-scale-steps.png&quot; alt=&quot;Modular Scale Steps&quot;&gt;
  &lt;figcaption&gt;Modular Scale Steps&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Mathematically, you can calculate the size of this step by multiplying the base font-size by the ratio to a power of the step:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;font-size = base-size * (ratio)^step&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If your base font-size is 16px and your ratio is 1.333, these are the steps that you’ll get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step -2: 16px ÷ 1.333 ÷ 1.333 = &lt;code&gt;9.005px&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step -1: 16px ÷ 1.333 = &lt;code&gt;12.003px&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base (Step 0): &lt;code&gt;16px&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Step 1: 16px * 1.333 = &lt;code&gt;21.328px&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Step 2: 16px * 1.333 * 1.333 = &lt;code&gt;28.43px&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the &lt;code&gt;h1&lt;/code&gt;, in this case, is set to the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;below 1000px&lt;/strong&gt;: &lt;code&gt;37.897px&lt;/code&gt; (16px * 1.333 * 1.333 * 1.333)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;above 1000px&lt;/strong&gt;: &lt;code&gt;67.773px&lt;/code&gt; (16px * 1.618 * 1.618 * 1.618)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assuming we have the above assumptions about your base font-size, ratios and &lt;code&gt;h1&lt;/code&gt; values, your CSS code will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  font-size: 37.897px;
}

@media (min-width: 1000px) {
  h1 {font-size: 67.773px;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the concept is simple. We just have to use a media query.&lt;/p&gt;
&lt;p&gt;However, executing is painful since you have to calculate values manually (or use the Modular Scale calculator and insert the values manually) at every breakpoint.&lt;/p&gt;
&lt;p&gt;There’s a simpler way. We can tweak things without doing the tedious math or checking the Modular Scale calculator—&lt;strong&gt;use the Modular Scale Sass plugin&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;changing-the-ms-ratio-with-the-ms-plugin&quot;&gt;Changing the MS ratio with the MS plugin&lt;/h2&gt;
&lt;p&gt;Modular Scale’s &lt;a href=&quot;https://github.com/modularscale/modularscale-sass&quot;&gt;Sass plugin&lt;/a&gt; helps you calculate font-sizes without having to do the math ourselves. All you need is to understand how the steps work.&lt;/p&gt;
&lt;p&gt;Today, we’re not going to look at everything in the Modular Scale plugin. &lt;strong&gt;We’re zooming directly into the ones that help us change the ratio at different breakpoints.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To change the ratio across different device widths, &lt;strong&gt;you first need to create a variable called &lt;code&gt;$ms-range&lt;/code&gt;&lt;/strong&gt;. This variable is a list of values that contain two numbers in each argument:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-range:
  1.2 20em,
  1.333 30em,
  1.618 40em
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In each argument, &lt;strong&gt;the first number is the ratio&lt;/strong&gt; you’ll like to use for your Modular Scale. &lt;strong&gt;The second number is the minimum width where the ratio kicks in&lt;/strong&gt;. So, the &lt;code&gt;$ms-range&lt;/code&gt; you see here will produce font-sizes such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Below 20em: use ratio of 1.2&lt;/li&gt;
&lt;li&gt;Between 20em and 30em: use ratio of 1.2&lt;/li&gt;
&lt;li&gt;Between 30em and 40em: use ratio of 1.333&lt;/li&gt;
&lt;li&gt;Beyond 40em: use ratio of 1.618&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, you’ll create the required media queries and font-sizes by using the &lt;code&gt;ms-respond&lt;/code&gt; mixin. It takes in two arguments, &lt;code&gt;$property&lt;/code&gt; and &lt;code&gt;$steps&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  @include ms-respond($property, $step);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$property&lt;/code&gt; is the property you’re trying to create. In our case, it’s font-size.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$steps&lt;/code&gt; is the number of steps you’re creating. Since we’re using the 3rd step for h1, this should be 3.&lt;/p&gt;
&lt;p&gt;So, the code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  @include ms-respond(font-size, 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;ms-respond&lt;/code&gt; mixin will create CSS where the font-size is set with &lt;code&gt;calc()&lt;/code&gt; and &lt;code&gt;vw&lt;/code&gt; units&lt;/strong&gt; (Commonly called fluid typography but I like to call it viewport-based typography). It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: 1.728em;
}

@media (min-width: 20em) and (max-width: 30em) {
  h1 {
    font-size: calc( 1.728em + 0.64059 * ( ( 100vw - 20em) / 10 ));
  }
}

@media (min-width: 30em) and (max-width: 40em) {
  h1 {
    font-size: calc( 2.36859em + 1.86721 * ( ( 100vw - 30em) / 10 ));
  }
}

@media (min-width: 40em) {
  h1 {
    font-size: 4.2358em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calculating viewport-based typography is complicated. I’ve dove into more details in a &lt;a href=&quot;https://zellwk.com/blog/viewport-based-typography&quot;&gt;previous article&lt;/a&gt; so check it out if you’re interested in finding out more. The article also shows you whether you can use viewport-based typography on all browsers.&lt;/p&gt;
&lt;p&gt;Anyway, since the Modular Scale plugin uses viewport based typography, you’ll see your &lt;code&gt;h1&lt;/code&gt; changing sizes whenever you resize your browser between 20em and 40em:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/changing-ms-ratio/change-ratio.gif&quot; alt=&quot;Changing Ratio of Modular Scale&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Many people love viewport-based typography because they get to write lesser media queries and their font-sizes changes automatically.&lt;/p&gt;
&lt;p&gt;I don’t, unfortunately. I like to know the exact sizes of my text at every breakpoint so I can tweak them easily. Since it’s difficult to calculate the sizes at every single viewport just by looking at the CSS file, I don’t know how big my text are. Hence, I prefer to add more breakpoints with media queries instead of using viewport based typography.&lt;/p&gt;
&lt;p&gt;So, if I were to use the Modular Scale plugin, I’ll set &lt;code&gt;$ms-fluid&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; so it produces &lt;code&gt;em&lt;/code&gt; values instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-fluid: false
$ms-range: // ...

h1 {
  @include ms-respond(font-size, 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS produced is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;h1 {
  font-size: 1.728em; /* 1em * 1.2 * 1.2 * 1.2 */
}

@media (min-width: 20em) and (max-width: 30em) {
  h1 {
    font-size: 1.728em; /* 1em * 1.2 * 1.2 * 1.2 */
  }
}

@media (min-width: 30em) and (max-width: 40em) {
  h1 {
    font-size: 2.36859em; /* 1em * 1.333 * 1.333 * 1.333 */
  }
}

@media (min-width: 40em) {
  h1 {
    font-size: 4.2358em; /* 1em * 1.618 * 1.618 * 1.618 */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There, much better. (Maybe I just like CSS that doesn’t look messy and overwhelming) :)&lt;/p&gt;
&lt;p&gt;So, that’s how you use the Modular Scale plugin to change the ratio of your scale at different breakpoints. Remember, whichever you choose is up to your preference. Both methods do the job well.&lt;/p&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;
&lt;p&gt;In this article, we first went through how to calculate the font-sizes manually when the ratio changes at different breakpoints. After understanding the process, we moved on and learned to the Modular Scale plugin to create the same values. Specifically, we learned about the &lt;code&gt;ms-respond&lt;/code&gt; function and how to use it.&lt;/p&gt;
&lt;p&gt;Personally, I don’t even use the &lt;code&gt;ms-respond&lt;/code&gt; function because I want to retain the ability to change steps plus change ratios at the same time. Unfortunately, that’s not doable with the Modular Scale plugin as far as I know.&lt;/p&gt;
&lt;p&gt;I’ve went on and incorporated the functionality into &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt;, a responsive typography library I’ve created. I’ll show you how to use Typi to change Modular Scale ratios at different breakpoints in the next article.&lt;/p&gt;
&lt;p&gt;What are you thoughts about changing the Modular Scale ratio at different breakpoints? Let me know in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Responsive Modular Scale</title>
    <link href="https://zellwk.com/blog/responsive-modular-scale/"/>
    <updated>2016-05-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/responsive-modular-scale/</id>
    <content type="html">&lt;p&gt;Do your font-sizes look gigantic on the mobile? You’re not alone. It’s a common problem many people have when using Modular Scale for responsive websites.&lt;/p&gt;
&lt;p&gt;In this article, I want to share with you how this problem arises and how to fix it so you no longer have font-size woes.&lt;/p&gt;
&lt;p&gt;Ready? Let’s go.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-caused-the-problem&quot;&gt;What Caused the Problem&lt;/h2&gt;
&lt;p&gt;This problem happens a lot because people want to use the golden ratio for their Modular Scale. We are all brainwashed into thinking that the golden ratio is the most beautiful number on the planet.&lt;/p&gt;
&lt;p&gt;Unfortunately, the golden ratio isn’t ideal for creating a Modular Scale because it’s &lt;strong&gt;large ratio creates large changes in font-size between each step of the scale&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/golden-ratio-scale.png&quot; alt=&quot;Modular Scale produced by the Golden Ratio (1.618)&quot;&gt;
  &lt;figcaption&gt;Modular Scale produced by the Golden Ratio (1.618)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you used 16px as your base for the golden ratio, it’s likely that you used the following sizes for you h1-h3 elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt;: 67.773px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h2&lt;/code&gt;: 41.887px&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h3&lt;/code&gt;: 25.888px&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both 67px and 42px are HUGE on the mobile. It’s as if we’re looking at giants through our puny screens when we’re on the mobile.&lt;/p&gt;
&lt;p&gt;Here’s the dilemma. &lt;strong&gt;You know the sizes are too big, but you can’t decrease them because there aren’t any smaller sizes you can use in the scale&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Crap :(&lt;/p&gt;
&lt;p&gt;It’s not the golden ratio’s fault. It’s because we’re using a large ratio to produce the modular scale, which results in a scale with limited number sizes for you to play with.&lt;/p&gt;
&lt;p&gt;Now that we know where the problem came from, let’s dive into the possible solutions.&lt;/p&gt;
&lt;h2 id=&quot;the-solutions&quot;&gt;The Solutions&lt;/h2&gt;
&lt;p&gt;The problem arises because we don’t have enough font-sizes to play with. The solution, then, is to make more numbers!&lt;/p&gt;
&lt;p&gt;There are four possible solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a smaller ratio&lt;/li&gt;
&lt;li&gt;Add a second base&lt;/li&gt;
&lt;li&gt;Add a second ratio&lt;/li&gt;
&lt;li&gt;Change the ratio at different breakpoints&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;solution-1%3A-use-a-smaller-ratio&quot;&gt;Solution 1: Use a Smaller Ratio&lt;/h2&gt;
&lt;p&gt;The first way to fix the problem is to use a smaller ratio for the Modular Scale.&lt;/p&gt;
&lt;p&gt;This method works because a &lt;strong&gt;smaller ratio produces a scale with smaller differences between font-sizes at each step&lt;/strong&gt;. It gives us more sizes that are acceptable on a mobile device.&lt;/p&gt;
&lt;p&gt;Just take a look at the difference in sizes between these two scales and you’ll see what I mean:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/diff-scales.png&quot; alt=&quot;Modular Scale with ratio 1.333 vs Modular Scale with ratio 1.618&quot;&gt;
  &lt;figcaption&gt;Modular Scale with ratio 1.333 vs Modular Scale with ratio 1.618&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The 1.333-ratio Modular Scale has more font-sizes you can work with. If you used this ratio, you can set the &lt;code&gt;h1&lt;/code&gt; size to 38px, &lt;code&gt;h2&lt;/code&gt; to 28px and so on. When the viewport allows, you can also choose to increase the heading sizes by any number of steps with a media query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 37px; }

@media (min-width: 1000px) {
  /* increases size by 2 steps */
  h1 { font-size: 67px; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about a smaller ratio is that it gives you more flexibility without adding complexity to your code. It’s easy to use this method even if you don’t use a preprocessor like Sass. Of course, it gets way easier if you do.&lt;/p&gt;
&lt;p&gt;The downside though, is that you don’t get as much flexibility as you will with other methods. You also lose the chance to work with the golden ratio. Booooo 😭&lt;/p&gt;
&lt;p&gt;Don’t be upset about discarding the almighty ratio. It’s not as beautiful as you think it is (I’ll share why another time). You can still create a great design without using the golden ratio for your modular scale. For example, this little site you’re reading uses 1.2 as the ratio :)&lt;/p&gt;
&lt;p&gt;Let’s look at the second method next.&lt;/p&gt;
&lt;h2 id=&quot;add-a-second-base&quot;&gt;Add a Second Base&lt;/h2&gt;
&lt;p&gt;The second way to fix the problem is to add a second number to the base-font-size of your modular scale. It can be any number (don’t try to be funny and use 1px…).&lt;/p&gt;
&lt;p&gt;Let’s say you somehow decided that 36px would make a great heading size on the mobile. All you do is to add 36px as the second base number to the scale:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/second-base.png&quot; alt=&quot;Adding 36px as a second base&quot;&gt;
  &lt;figcaption&gt;Adding 36px as a second base&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With this small change, you can already see that your header sizes could be 22.25px, 25.888px and 36px. There’s so much more flexibility compared to before. The best part? You still get to use the golden ratio. Yay! 😄&lt;/p&gt;
&lt;p&gt;The downside is that we’ve threw an arbitrary number into the design, which can lead to a less harmonious flow if you’re not careful.&lt;/p&gt;
&lt;p&gt;If you choose to go with this method, make sure you understand why you chose that magic number as your second base. You’ll also want to ensure you only add a maximum of one extra base (no, don’t add a third number) to avoid diluting the Modular Scale too much.&lt;/p&gt;
&lt;p&gt;Let’s move on to the next method.&lt;/p&gt;
&lt;h2 id=&quot;add-a-second-ratio&quot;&gt;Add a Second Ratio&lt;/h2&gt;
&lt;p&gt;The third method is to add a second ratio to your modular scale. This can be any ratio you want.&lt;/p&gt;
&lt;p&gt;Let’s say you decided to use a ratio of 1.25 in addition to the golden ratio. Your Modular Scale will become:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/second-ratio.png&quot; alt=&quot;Adding a second ratio to the modular scale&quot;&gt;
  &lt;figcaption&gt;Adding a second ratio to the modular scale&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Adding a ratio allows you to have even more flexibility compared to adding a base. In this new scale, you have four helpful sizes you can use to create your headers—20px, 25px, 31px and 39px.&lt;/p&gt;
&lt;p&gt;Although using a second ratio gives you much more flexibility, I refrain from using it because of two reasons.&lt;/p&gt;
&lt;p&gt;First, a second ratio disrupts the &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;repetition&lt;/a&gt; between steps of the modular scale more than using a second base, which results in a greater loss in harmonious relationship.&lt;/p&gt;
&lt;p&gt;Second, you may get numbers that do not fit well into the scale (like 25px and 25.888px). You have to be careful not to choose sizes that are so similar that they conflict with each other (principle of contrast; more on that another time).&lt;/p&gt;
&lt;p&gt;Finally, let’s move on to the last method.&lt;/p&gt;
&lt;h2 id=&quot;change-the-ratio-at-different-breakpoints&quot;&gt;Change the Ratio at Different Breakpoints&lt;/h2&gt;
&lt;p&gt;The fourth method is to vary the Modular Scale ratio at different breakpoints. We’ll use a small ratio on a small device, and as the viewport increases, we increase the ratio to match to match the new viewport.&lt;/p&gt;
&lt;p&gt;Here’s how it might look; notice how the sizes of headers change while the size of the body text remains the same.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/change-ratio.gif&quot; alt=&quot;Changing Modular Scale ratio at different viewports&quot;&gt;
  &lt;figcaption&gt;Changing Modular Scale ratio at different viewports&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This method is less intuitive compared to the previous three methods. Let’s run through why it works.&lt;/p&gt;
&lt;p&gt;First, we know the &lt;strong&gt;purpose of a title or subhead is to grab attention and make a visitor read on&lt;/strong&gt;. They also act as sectioning elements that allow people to organize information on a page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There’s very little screen real-estate on a mobile.&lt;/strong&gt; Visitors can only scroll upwards or downwards. &lt;strong&gt;There’s nothing much that can distract a reader from the text&lt;/strong&gt; (provided the text is good enough).&lt;/p&gt;
&lt;p&gt;Since there’s little distractions, we can use a subtler contrast with subheads and they do their job perfectly.&lt;/p&gt;
&lt;p&gt;On the contrary, &lt;strong&gt;there’s a lot more screen real-estate on a larger viewport&lt;/strong&gt;. Designers may choose to add multiple columns of text, more whitespace or other elements. &lt;strong&gt;Visitors may get distracted by excessive whitespace, multiple columns of content, ads, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every element has the ability to distract visitors from reading the intended content, which means our headers need a larger contrast to grab the same amount of attention on a large viewport compared to a smaller viewport.&lt;/p&gt;
&lt;p&gt;A great example of a large and beautiful attention-grabbing title is on Trent Walton’s blog:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/responsive-modular-scale/trent.png&quot; alt=&quot;Title text on Trent&#39;s blog is big, grabs attention and is absolutely stunning&quot;&gt;
  &lt;figcaption&gt;Title text on Trent&#39;s blog is big, grabs attention and is absolutely stunning&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Implementing this method is slightly more difficult compared to the previous three methods. The article is getting long, so I’ll cover the how-to in the &lt;a href=&quot;https://zellwk.com/blog/changing-modular-scale/&quot;&gt;next one&lt;/a&gt;. Stay tuned!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this article, we uncovered why people have problems sizing their headers on the mobile. The culprit is usually a forceful use of the golden ratio since it produces a scale with a small number of usable sizes.&lt;/p&gt;
&lt;p&gt;There are four solutions to this problem. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change the ratio&lt;/li&gt;
&lt;li&gt;Add a second base&lt;/li&gt;
&lt;li&gt;Add a second ratio&lt;/li&gt;
&lt;li&gt;Change the ratio at different breakpoints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which method do you prefer? What have you learned in this article? Share them with me in the comments below! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Were We Wrong About Vertical Rhythm All Along?</title>
    <link href="https://zellwk.com/blog/wrong-about-vertical-rhythm/"/>
    <updated>2016-05-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/wrong-about-vertical-rhythm/</id>
    <content type="html">&lt;p&gt;Just a few days ago, I received a design critique from Aurobind (a font, newspaper and magazine designer) regarding my website. He specifically pointed out that the spaces between my paragraphs could be reduced to achieve a better effect.&lt;/p&gt;
&lt;p&gt;I was dumbfounded. I didn’t believe him at first since I was already using Vertical Rhythm. If I were to reduce the amount of space between paragraphs, wouldn’t I be breaking the Vertical Rhythm?&lt;/p&gt;
&lt;p&gt;Even though I don’t believe it, I decided to try it out since I respect his expertise and the feedback he’s willing to give. And boy, I’m utterly convinced.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let me show you the before / after pictures of the change and I’m sure you’ll be convinced as well.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/before-after.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Before and After the change&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the “after” image, you can see that the spaces between paragraphs are decreased. Yet, &lt;strong&gt;the three paragraphs gels together as if they’re one block of content.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On the contrary, &lt;strong&gt;before reducing the spaces, each paragraph of text reads like a standalone block of content&lt;/strong&gt;. It feels like there’s a small break between the end of one paragraph and the start of the next one.&lt;/p&gt;
&lt;p&gt;But why is this the case? Aren’t I using Vertical Rhythm already?*Am I getting Vertical Rhythm all wrong?&lt;/p&gt;
&lt;p&gt;Nope, There’s nothing wrong with Vertical Rhythm. The principle of Repetition (that Vertical Rhythm is derived from) still stands.&lt;/p&gt;
&lt;p&gt;The reason why we need to reduce the amount of whitespace between paragraphs is because of the principle of Proximity.&lt;/p&gt;
&lt;h2 id=&quot;the-principle-of-proximity&quot;&gt;The Principle of Proximity&lt;/h2&gt;
&lt;p&gt;Proximity refers to the physical closeness between two objects. The human brain relies on proximity as a shortcut to judge the closeness of things. The closer the distance, the closer the relationship. If you see two people holding hands on the road, you’ll think that their relationship is much closer compared to two random strangers on the road, wouldn’t you?&lt;/p&gt;
&lt;p&gt;We rely on proximity as a shortcut to help organize content on the web as well. Take for instance, you have two groups of circles like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/circles.png&quot; alt=&quot;Two groups of circles&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Don’t you think the circles on the left seems closer compared to the circles on the right? That’s proximity at work! :)&lt;/p&gt;
&lt;p&gt;As you can see, we determine the relationship between things subconsciously. This means there’s a high chance that someone may confused about the content organization if we didn’t think about proximity when we design our websites.&lt;/p&gt;
&lt;h2 id=&quot;proximity-in-typography&quot;&gt;Proximity in Typography&lt;/h2&gt;
&lt;p&gt;There are many ways to apply proximity when designing. Today, I’ll like to focus on showing you how to use proximity in Typography with three examples (which is the case I’ve shown you above).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first example&lt;/strong&gt; is to reduce the amount of space between paragraphs as you see above.&lt;/p&gt;
&lt;p&gt;Remember the before / after image I showed you right at the start of this article? The reason the “after” one is better is because it helps fulfill the purpose of typography—&lt;strong&gt;to help readers immerse themselves into the text&lt;/strong&gt;. There are lesser obstacles to stop people while they read from one paragraph to another.&lt;/p&gt;
&lt;p&gt;If you look at printed books (or even on the Kindle), you’ll notice that paragraphs aren’t separated by whitespace. Instead, we know that a new paragraph has began whenever the first line is indented to the right:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/paragraph.jpg&quot; alt=&quot;Transitions between paragraphs on a Kindle&quot;&gt;
  &lt;figcaption&gt;Transitions between paragraphs on a Kindle&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice how flawless the reading experience is when you transit from one paragraph to the next as you read through the image above.&lt;/p&gt;
&lt;p&gt;Notice how the reading experience gets disrupted when you transit from one paragraph to the next as you read the image below (it’s the before image):&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/paragraphs-old.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Transitions between paragraphs on the web&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;See the difference?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There’s this big difference because of the space between paragraphs&lt;/strong&gt;. Right now, the spaces are set to one baseline since we followed the &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms&quot;&gt;concept of Vertical Rhythm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you noticed, &lt;strong&gt;one baseline is the amount of space that one line of text takes up. It is also used as a common separator between parts of the design&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By separating paragraphs by one baseline, we’re essentially splitting the paragraphs up into multiple small blocks of content that has nothing to do with each other. How can we expect people to continue reading since we, as designers, are separating the content unconsciously?&lt;/p&gt;
&lt;p&gt;Realizing this was a mind-blowing moment for me.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/mindblown.gif&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;So, what should the whitespace be between paragraphs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From our arguments above, we know that the whitespace between paragraphs should be lesser than one baseline. It should also be large enough to provide a clear distinction between paragraphs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One way to figure out the whitespace is to rely on the principle of repetition again&lt;/strong&gt;. If we do so, we can try values like 0.5, 0.66 or 0.75 baselines depending on how you have chosen to &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/#varying-repetitions&quot;&gt;vary the repetitions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On this site, I’ve chosen a value of 0.75 baselines as the whitespace between paragraphs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;* + p {
  margin: 1.05rem; /* 0.75 baselines  */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In case you were wondering, Medium uses a font-size of 21px and a line-height of 33px. The space between paragraphs is set at 29px, or about 90% of the baseline.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;* + p {
  margin: 0.878787em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, I’m using the a custom version of the &lt;a href=&quot;http://alistapart.com/article/axiomatic-css-and-lobotomized-owls&quot;&gt;lobotomized owl selector&lt;/a&gt; in this example. Learn it, because it’s super useful when you need to style margins like this.&lt;/p&gt;
&lt;p&gt;Anyway, that’s the end of the first example on using proximity in typography. Let’s move on to the next one.&lt;/p&gt;
&lt;h2 id=&quot;proximity-in-typography-(subheads)&quot;&gt;Proximity in Typography (Subheads)&lt;/h2&gt;
&lt;p&gt;The second area you can apply proximity to is to differentiate the amount of space between subheads and paragraph text. If we used the same amount of whitespace above   and below a subhead, it would look like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/subhead-equal.png&quot; alt=&quot;Whitespace above and below subhead are equal&quot;&gt;
  &lt;figcaption&gt;Equal whitespace above and below subheads&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Logically, we know that a subhead is the start of the next block of content. However, this relationship isn’t pronounced since whitespace above and below the subhead is exactly the same.&lt;/p&gt;
&lt;p&gt;We can improve the relationship between subheads and paragraph text by adding more space to the top, and reducing the space from the bottom of the subhead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;p + h2 {
  margin-top: 2.1rem; /* 1.5 baselines */
}

h2 + p {
  margin-top: 0.7rem; /* 0.5 baselines */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/subhead-proximity.png&quot; alt=&quot;Whitespace above subhead is larger than whitespace below subhead&quot;&gt;
  &lt;figcaption&gt;Whitespace above subhead is larger than whitespace below subhead&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Don’t you think the relationship between subheads and paragraphs are more congruent with the content now?&lt;/p&gt;
&lt;p&gt;Although this change is tiny, you can already see how big of an impact it has on the overall design. Typography is all about these small details and how they affect the larger picture.&lt;/p&gt;
&lt;p&gt;Next, let’s move on to the third example&lt;/p&gt;
&lt;h2 id=&quot;proximity-in-typography-(lists)&quot;&gt;Proximity in Typography (Lists)&lt;/h2&gt;
&lt;p&gt;The third example I want to talk about is to style a list. Lists are often overlooked by developers because they seem simple. We just need a few bullets, some paddings and they look alright (err maybe?).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you pay attention, you can apply 4 design principles&lt;/strong&gt; (repetition, alignment, contrast and proximity) &lt;strong&gt;when designing a list&lt;/strong&gt;. Let me walk through an example with you on designing a list and you’ll see how they come together.&lt;/p&gt;
&lt;p&gt;First, let’s assume that we’re building a bullet-point list that exists within an article. Since the list part of the content, I’ll create a paragraph of text before and after the list to have a sense of the actual content.&lt;/p&gt;
&lt;p&gt;I’ll also think about what the list items. They can be single words, a phrase or even a paragraph of text. I’ll also create these elements and I’ll use actual content as much as possible.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;Paragraph of text&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;!-- please replace with actual content --&amp;gt;
  &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Paragraph of text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The list element&lt;/strong&gt; (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; in this case) &lt;strong&gt;should act like a paragraph.&lt;/strong&gt; We want readers to transit from paragraphs to lists and lists back to paragraphs with as little distraction as possible. This means the whitespace above and below the list should be equal to the whitespace above and below paragraphs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul, ol {
  margin-top: 1.05rem; /* 0.75 baseline */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-1.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Let’s look at the indentation of each list item next. Here, we can see that the browser has already indented items inward for us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s great that browsers took the initiative to indent list items&lt;/strong&gt; because it shows readers that list items are different from paragraphs (proximity) The bullet points also shows them that list items are different  from paragraph text (contrast). Each list item however, is the same (repetition).&lt;/p&gt;
&lt;p&gt;Unfortunately, the indentation feels weird. It doesn’t follow the rhythm we’ve set on the page. To correct the rhythm, I’ll start by resetting the paddings on the list so I can re-indent them to a multiple of the baseline:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul, ol {
  padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the padding is removed, we can see that bullet points lie outside of the text. Text within the list items are aligned to the paragraph text:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-2.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;If we want to make sure the list indentation follows the rhythm we’ve set on the page, we need to first align the edges of the bullets with the edges of the text paragraph text (alignment).&lt;/p&gt;
&lt;p&gt;A simple way to do so is to change the &lt;code&gt;list-style-position&lt;/code&gt; from &lt;code&gt;outside&lt;/code&gt; to &lt;code&gt;inside&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul {
  list-style-position: inside
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-3.png&quot; alt=&quot;Alt text&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The alignment looks much better straight away.&lt;/p&gt;
&lt;p&gt;However, it isn’t ideal because we can see that the second line of the text item begins at the start of the bullet point. This makes multiple lines of text on a list much harder to read (alignment).&lt;/p&gt;
&lt;p&gt;So, instead of taking the easy path and doing &lt;code&gt;list-style-position: inside&lt;/code&gt;, we can set &lt;code&gt;list-style-position&lt;/code&gt; to &lt;code&gt;outside&lt;/code&gt; and set a correct &lt;code&gt;margin-left&lt;/code&gt; property such that the bullets are aligned to the paragraph text. Turns out, this &lt;code&gt;margin-left&lt;/code&gt; value is equal to the &lt;code&gt;font-size&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul {
  margin-left: 1rem;
  list-style-position: outside;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-4.png&quot; alt=&quot;Alt text&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Now, we can indent the list items to the right by a multiple of the Vertical Rhythm. I’ve found that half a baseline works best for most situations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;ul {
  margin-left: 1.7rem; /* 1rem + 0.5 baseline */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-5.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Much better, once again.&lt;/p&gt;
&lt;p&gt;The overall structure between paragraphs and list items are set now. The next step is to make sure items within a list are distinguishable from each other. The best way to determine if items are distinguishable is to read text within each list item.&lt;/p&gt;
&lt;p&gt;Read it and notice how you feel.&lt;/p&gt;
&lt;p&gt;Feels like the list items are just one big paragraph of text, doesn’t it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s normal to feel this way because whitespace between each line in the list are exactly the same as whitespace between each line in a paragraph.&lt;/strong&gt; We’re already conditioned to think this whitespace means a paragraph (repetition).&lt;/p&gt;
&lt;p&gt;One way to differentiate list items from paragraph is to vary the whitespace (proximity) between list items. These spaces should be smaller than 0.75 baseline or each list item would feel like a paragraph instead (proximity).&lt;/p&gt;
&lt;p&gt;Hence, the amount of space between each list item should either be 0.25 or 0.5 baseline. A baseline of 0.25 works much better than 0.5 in implementation because we just need a slightly change in whitespace to distinguish between list items. Any more would be an overkill.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;li + li {
  margin-top: 0.35rem; /* 0.25 baseline */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/wrong-about-vr/list-6.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;How does this list compare with the one with started with? Much better, isn’t it? :)&lt;/p&gt;
&lt;p&gt;Of course, changing the amount of space between each list item is just one way to design the list component. You can also choose to use a combination of other methods if you wish to.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So, in summary, &lt;strong&gt;Vertical Rhythm works. It isn’t broken.&lt;/strong&gt; The key is to learn the &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;design principles  behind Vertical Rhythm&lt;/a&gt; instead of relying on the best practice itself.&lt;/p&gt;
&lt;p&gt;In this article, we also discussed a lot about the principle of &lt;strong&gt;proximity&lt;/strong&gt; (the second design principle I covered on the blog) and how to use it in Typography. You’ve also seen how other different design principles come together when we designed a list.&lt;/p&gt;
&lt;p&gt;There’s more I can share with you about how design principles affect typography. If it interests you, do leave your email below and I’ll share more information with you as soon as I can! (You’ll also get 6 lessons on my course on Responsive Typography for free when I’m done writing it).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Deploying a Static Site with Cron and Git</title>
    <link href="https://zellwk.com/blog/deploy-static-site/"/>
    <updated>2016-04-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/deploy-static-site/</id>
    <content type="html">&lt;p&gt;You might have noticed that I redesigned my blog recently if you followed me for a while. In this redesign, I switched from Wordpress to a static generator that I’ve created.&lt;/p&gt;
&lt;p&gt;I love static site generators. They make it easy for me to create websites without having to go through a CMS like Wordpress. Since my blog is on a static site generator, I managed to simplify my blogging workflow because I don’t need access to the Wordpress backend anymore.&lt;/p&gt;
&lt;p&gt;The only major problem I had with static site is that that I’m unable to schedule my articles and publish them on a different date. I tried several methods, burned myself, and finally found a solution that I’m happy to share with you.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;There are three steps in my solution:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build the website.&lt;/li&gt;
&lt;li&gt;Push the build folder to a different git branch.&lt;/li&gt;
&lt;li&gt;Pull the updates with cron.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go through them one by one.&lt;/p&gt;
&lt;p&gt;Before we move on, I’m going to assume you know what static site generators are. If you don’t check out some of these popular ones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wintersmith.io/&quot;&gt;Wintersmith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-1%3A-build-the-website&quot;&gt;Step 1: Build the website&lt;/h2&gt;
&lt;p&gt;Static site generators (I’m going to call them SSG for short from this point on) usually contain two folders in the project root – &lt;strong&gt;The source folder&lt;/strong&gt; and &lt;strong&gt;the build folder&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The source folder(s)&lt;/strong&gt; (sometimes there’s more than one) is where you write your code. It contains your markdown files, unminified CSS, unminified JavaScript, templates etc.&lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;SSG comes with its command to generate a build folder&lt;/strong&gt; that files that are ready to be served to the public. This build folder contains your posts and pages in HTML format. It also contains minified CSS and JavaScript files.&lt;/p&gt;
&lt;p&gt;The command to generate the builder folder for Jekyll is &lt;code&gt;jekyll build&lt;/code&gt;. The one for the SSG I’ve created is &lt;code&gt;gulp --prod&lt;/code&gt; (because I build this thing on Gulp).&lt;/p&gt;
&lt;p&gt;Once your build folder is ready, move on to the next step.&lt;/p&gt;
&lt;h2 id=&quot;step-2%3A-push-the-build-folder-into-a-different-git-branch&quot;&gt;Step 2: Push the Build folder into a Different Git Branch&lt;/h2&gt;
&lt;p&gt;There are multiple ways to deploy a static site. The easiest way is to transfer files onto your server with commands like &lt;code&gt;sftp&lt;/code&gt;, &lt;code&gt;scp&lt;/code&gt; and &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These methods are much simpler than using Git to deploy your static site. Although they’re easy, they come with three drawbacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;You need to start the deployment process manually&lt;/strong&gt;, which means you can’t update the website if you’re not at your computer (or if you don’t have internet access).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You have to overwrite the build folder&lt;/strong&gt; on your server, which can take a lot of time. The only exception to this is rsync.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You can’t roll back to the previous build&lt;/strong&gt; if shit happens. You have to overwrite the build folder on your server again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because of these three reasons, I &lt;strong&gt;highly recommend you use Git to deploy your site onto your server&lt;/strong&gt;. Unfortunately, using Git to deploy a static site is such a complicated process that many people never speak of.&lt;/p&gt;
&lt;p&gt;Let’s go into more details.&lt;/p&gt;
&lt;p&gt;When we use Git, we want to &lt;strong&gt;&lt;a href=&quot;http://zellwk.com/blog/gitignore/&quot;&gt;ignore files that are generated by a command&lt;/a&gt;&lt;/strong&gt; to make sure the git &lt;strong&gt;commit history remains clean&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What this means is we have to ignore the generated build folder in our git repository. It also means we have to commit the generated build folder into a separate &lt;code&gt;production&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;So, we have an &lt;strong&gt;interesting dilemma&lt;/strong&gt; here. We need to &lt;strong&gt;ignore the &lt;code&gt;build&lt;/code&gt; folder&lt;/strong&gt;, but we also need to &lt;strong&gt;commit the &lt;code&gt;build&lt;/code&gt; folder&lt;/strong&gt; at the same time (though on a different branch).&lt;/p&gt;
&lt;p&gt;This is hard. It took me a lot of tries to get it right. If you searched through the net, you’ll find that there are no good answers to this dilemma.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://gist.github.com/cobyism/4730490&quot;&gt;first solution I found&lt;/a&gt; was to use &lt;code&gt;git subtree push&lt;/code&gt;. This solution requires you to commit the generated build folder into the git repo, so it’s a no go since I wanted to keep my commit history clean.&lt;/p&gt;
&lt;p&gt;The second solution I found was to use the &lt;a href=&quot;https://github.com/X1011/git-directory-deploy&quot;&gt;git-directory-deploy&lt;/a&gt; script made by &lt;a href=&quot;https://github.com/X1011&quot;&gt;X1011&lt;/a&gt;. I didn’t try it. The &lt;code&gt;deploy.sh&lt;/code&gt; file within this script was so complex that it scared me off 😂.&lt;/p&gt;
&lt;p&gt;I ended up going with a &lt;a href=&quot;http://www.ryanburnette.com/blog/2015/deploy-to-another-branch.html&quot;&gt;third solution&lt;/a&gt; I found. This was a script by &lt;a href=&quot;http://www.ryanburnette.com/&quot;&gt;Ryan Burnette&lt;/a&gt;. Essentially this third solution follows a similar process as the first solution. We first commit the &lt;code&gt;build&lt;/code&gt; folder forcefully into the git repo, push it into a separate branch, then revert the git history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The third solution is extremely hacky.&lt;/strong&gt; It forces git to do things in a way that’s not supposed to be done. It also reverts the git commit history at the same time, which can be dangerous.&lt;/p&gt;
&lt;p&gt;I was happy this method for a while, until shit happened. &lt;strong&gt;I lost an article that I spent more than 6 hours on&lt;/strong&gt;. To make it worse, I told everyone about the article and then realized that it’s gone. 😭&lt;/p&gt;
&lt;p&gt;After I recovered from the shit state I was in, a kind gentleman named Torsten offered to help me create the perfect script that I was looking for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are two steps to the solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, you need to set up an orphan branch. This command creates a orphan &lt;code&gt;production&lt;/code&gt; branch. Feel free to rename &lt;code&gt;production&lt;/code&gt; to anything you want.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git branch --orphan production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An &lt;a href=&quot;https://git-scm.com/docs/git-checkout/1.7.3.1&quot;&gt;orphan branch&lt;/a&gt; is a &lt;strong&gt;Git branch that has a new git history&lt;/strong&gt;. It’s git history has nothing to do with other branches. Since we need a place to commit the &lt;code&gt;build&lt;/code&gt; folder, an orphan branch is the perfect choice.&lt;/p&gt;
&lt;p&gt;Delete everything after you created the orphan branch. There’s no need to keep anything here. We’ll fill this branch up with the correct files in the second step.&lt;/p&gt;
&lt;p&gt;Here’s the command you’ll need:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git rm -rf .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, we have completed the setup for the orphan branch. Let’s head back to the master branch and begin the deployment process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now, we’re ready to deploy&lt;/strong&gt;. Onward to the second part.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are 10 steps in this part&lt;/strong&gt;. I’ll walk you through it manually, then provide you with a &lt;strong&gt;one-step deploy script&lt;/strong&gt; at the end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, commit everything&lt;/strong&gt; in your source folder into your git repo. This makes sure you have everything saved and ready to go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second, generate the build folder&lt;/strong&gt; with your SSG’s build command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third, checkout the &lt;code&gt;production&lt;/code&gt; branch&lt;/strong&gt; with &lt;code&gt;git checkout production&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this is the first time you’re doing the process, you should see the &lt;code&gt;build&lt;/code&gt; folder and some other folders that you gitignored in your master branch.&lt;/p&gt;
&lt;p&gt;If this is the second time you’re doing the process, you should see all folders you’ve ignored, plus everything you’ve committed so far.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Four, remove everything&lt;/strong&gt;. We’re performing a fresh update with new content in the build folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git rm -rf .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Five, checkout the &lt;code&gt;.gitignore&lt;/code&gt; file from the master branch&lt;/strong&gt;. This will prevent us from accidentally committing folders that we want to ignore (like node_modules).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout master -- .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Six, copy all files from the &lt;code&gt;build&lt;/code&gt; folder into the current directory&lt;/strong&gt;. This allows us to the site directly into the production branch. When the copy is done, delete the &lt;code&gt;build&lt;/code&gt; folder since we don’t need it anymore. The command is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mv build/* . &amp;amp;&amp;amp; rm -rf build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Seven, stage all new files.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Eight, commit new files&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git commit &amp;quot;Deploy new post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Nine, push updates to all branches&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git push --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Finally, switch back to your master branch.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git checkout master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Phew, that’s the ten steps!&lt;/p&gt;
&lt;p&gt;I don’t want to run these ten steps manually every time I deploy my website. It will be an administrative hell. So, I condensed everything in a &lt;strong&gt;one-step deploy script&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I added &lt;code&gt;git stash&lt;/code&gt; to the start and end of the deploy script just in case you forgot to commit your changes before deploying them. Kudos to Nicolas for this!&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env sh
set -e # Prevents script from running if there are any errors.
git stash save # Stashes everything away incase you didn&#39;t commit them
gulp --prod # Step 2, insert your build script here
REV=`git rev-parse HEAD` # Gets commit hash as message
git checkout production # Step 3
git rm -rf . # Step 4
git checkout master -- .gitignore # Step 5
mv build/* . &amp;amp;&amp;amp; rm -rf build # Step 6
git add . # Step 7
git commit -m &amp;quot;deployed $REV&amp;quot; # Step 8
git push --all # Step 9
git checkout master # Step 10
git stash pop # Applies previously saved stash so you can continue working on changes. Once applied, removes stash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s call this deploy script &lt;code&gt;deploy.sh&lt;/code&gt;. Instead of running all the ten steps manually, all I do to deploy my static site is run this one command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before you run the command, make sure you &lt;strong&gt;give permissions&lt;/strong&gt; to the &lt;code&gt;deploy.sh&lt;/code&gt; script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chmod -R g=-w+rX deploy.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, time to pause for some Q&amp;amp;A.&lt;/p&gt;
&lt;p&gt;If you’ve read so far, you might notice that this method is exactly the same as what you do if you used Github pages.&lt;/p&gt;
&lt;p&gt;Yes, that’s exactly it. The only difference is I’m naming the branch &lt;code&gt;production&lt;/code&gt; instead of &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since it’s the same as deploying to github pages, why don’t I use ready-made plugins out there like &lt;a href=&quot;https://github.com/shinnn/gulp-gh-pages&quot;&gt;gulp-gh-pages&lt;/a&gt; and the &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;Github Pages gem&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Well, the reason why I don’t use the Gtihub pages gem is because I’m working on a Node environment. I don’t want an additional language dependency in my build process.&lt;/p&gt;
&lt;p&gt;I tried to use gulp-gh-pages, but I found that it seems to work only with repositories that are located on Github. I ran into weird errors trying to use Gitlab, so I gave up.&lt;/p&gt;
&lt;p&gt;So… I was forced to figure out a way :)&lt;/p&gt;
&lt;p&gt;Anyway, once you’re done pushing the &lt;code&gt;build&lt;/code&gt; folder into the production branch, you can move on to the final step.&lt;/p&gt;
&lt;h2 id=&quot;step-3%3A-pull-updates-with-cron&quot;&gt;Step 3: Pull Updates with Cron&lt;/h2&gt;
&lt;p&gt;The only thing you need to do to update your site is to &lt;code&gt;ssh&lt;/code&gt; into your server and do a &lt;code&gt;git pull&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I assume you know how to initialize a git repo and run the &lt;code&gt;git pull&lt;/code&gt; command in your server, so I’m not going into it. If you need help, check out this &lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;awesome tutorial&lt;/a&gt; by codeschool.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git pull origin production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we want the server to pull updates by itself, we can’t &lt;code&gt;ssh&lt;/code&gt; in and &lt;code&gt;git pull&lt;/code&gt; manually. &lt;strong&gt;We need to use cron&lt;/strong&gt;, a time-based job scheduler.&lt;/p&gt;
&lt;p&gt;Most servers allow you to run cron jobs without a problem. If you need a new sever, I highly recommend going with &lt;a href=&quot;https://m.do.co/c/64daa7a7a455&quot;&gt;Digital Ocean&lt;/a&gt; (Use this link to get $10 off).&lt;/p&gt;
&lt;p&gt;Cron allows us to execute commands at specific combinations of time. We can run a command every minute, every hour, every week, every month or even on a specific day of the week.&lt;/p&gt;
&lt;p&gt;The syntax for Cron is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;* * * * * command-to-be-executed
- - - - -
| | | | |
| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)
| | | ------- Month (1 - 12)
| | --------- Day of month (1 - 31)
| ----------- Hour (0 - 23)
------------- Minute (0 - 59)

# Credits to http://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll only change the &lt;code&gt;*&lt;/code&gt; (which means every) to a number if you want to be more specific. So, if you want to execute a command every minute, you can use the following cron:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;* * * * * command-to-execute
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to execute a command at the 30th minute mark every hour, you can use the following cron:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;30 * * * * command-to-execute
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to execute a command every Wednesday at midnight, you can use the following cron:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;0 0 * * 3 command-to-execute
## 0:00 hours on Wednesday
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Cron runs on your server, which means the we’re using the server’s timezone. You can find out the current time on your server with the &lt;code&gt;date&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;date
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/deploying-static-site/date-command.png&quot; alt=&quot;Date command&quot;&gt;
  &lt;figcaption&gt;Date command on Digital Ocean&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The way you create a cron job varies between servers. If you use shared hosting like Bluehost or Justhost, you need to access the cpanel and work from there.&lt;/p&gt;
&lt;p&gt;If you use Digital Ocean, you can create your cron job by writing &lt;code&gt;crontab -e&lt;/code&gt; in the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command brings up a file that you can edit:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/deploying-static-site/crontab.png&quot; alt=&quot;Crontab&quot;&gt;
  &lt;figcaption&gt;Default Crontab&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What you do is to insert your command into the file. For example, I have a cron job that runs at 6am every Wednesday. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;0 6 * * 3 command-to-execute
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The command to execute here is to &lt;code&gt;cd&lt;/code&gt; into your git directory and do a &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;0 6 * * 3 cd /path-to-directory &amp;amp;&amp;amp; git pull origin production
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Always specify absolute paths when using cron&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cron jobs run on a separate shell&lt;/strong&gt;, so you won’t be able to see the logs when it does &lt;code&gt;git pull&lt;/code&gt;. If you want to make sure that the cron is running properly, you can &lt;strong&gt;pipe the output from the command into a logfile&lt;/strong&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;0 6 * * 3 cd /path-to-directory &amp;amp;&amp;amp; git pull origin production &amp;gt;&amp;gt; /path-to-directory/logfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So, you’ve just read my recommendation on deploy your static files with Git and Cron. In this article, we covered how to push a subfolder into another git branch, and we covered how to use the cron.&lt;/p&gt;
&lt;p&gt;I hope this helps you out in the your deployment process. What did you find useful in this article? Let me know in the comments below!&lt;/p&gt;
&lt;p&gt;If you’re interested in hacking your workflow like what I’ve did here, consider leaving your email in the box below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Advanced Usage with Typi</title>
    <link href="https://zellwk.com/blog/advanced-typi/"/>
    <updated>2016-04-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/advanced-typi/</id>
    <content type="html">&lt;p&gt;Last week, I wrote a tutorial to show you how to use the mixins and functions of Typi, a library I’ve created for responsive typography. There’s a lot more to Typi that I can cover in one article. So, this week, I’m going to show you some advanced tips that I use with Typi so you can use them as well.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;You’ll learn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to output &lt;code&gt;em&lt;/code&gt; media queries with Typi&lt;/li&gt;
&lt;li&gt;How to use Typi with the Modular Scale library&lt;/li&gt;
&lt;li&gt;How to combine Modular Scale and Vertical Rhythm with Typi.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds exciting, doesn’t it?&lt;/p&gt;
&lt;p&gt;Before moving on, make sure you already know &lt;a href=&quot;https://zellwk.com/blog/typi&quot;&gt;how to use the basic mixins and functions&lt;/a&gt; that Typi provides. Nothing is going to make sense without the foundations.&lt;/p&gt;
&lt;p&gt;Let’s begin.&lt;/p&gt;
&lt;h2 id=&quot;em-media-queries-with-typi&quot;&gt;EM Media Queries with Typi&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https://zellwk.com/blog/typi&quot;&gt;previous article&lt;/a&gt;, I showed you how to create multiple media queries with Typi just by using the &lt;code&gt;$breakpoints&lt;/code&gt; and &lt;code&gt;$typi&lt;/code&gt; maps. Although that’s neat, we have a problem. The media queries created by Typi are written in pixels. It’s a practice that web professionals frown upon :(&lt;/p&gt;
&lt;p&gt;Instead of pixels, we should use the &lt;code&gt;em&lt;/code&gt; unit for media queries. I’ve went deep down the rabbit hole and found that &lt;code&gt;em&lt;/code&gt; media queries work the best across all browsers. You can read more about my tests in &lt;a href=&quot;https://zellwk.com/blog/media-query-units/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moving on, there are two ways to make Typi create &lt;code&gt;em&lt;/code&gt; media queries. The first way is to write your &lt;code&gt;$breakpoints&lt;/code&gt; map with &lt;code&gt;em&lt;/code&gt; units:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 25em, // 400px
  large: 50em // 800px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS Typi creates is (Note the media queries):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 100%;
  line-height: 1.4;
}
@media all and (min-width: 25em) {
  html { font-size: 112.5%; }
}

@media all and (min-width: 50em) {
  html {font-size: 125%; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have &lt;code&gt;em&lt;/code&gt; media queries now. The reason why this method works is because Typi outputs any value you provide to the &lt;code&gt;$breakpoints&lt;/code&gt; map.&lt;/p&gt;
&lt;p&gt;Although it works, the method isn’t elegant. You have to calculate the &lt;code&gt;em&lt;/code&gt; values yourself. It’s a big headache for us developers who like to do as little work as possible.&lt;/p&gt;
&lt;p&gt;There’s an alternative (much better way) to tell Typi to create &lt;code&gt;em&lt;/code&gt; media queries. That is to use libraries that output media queries in &lt;code&gt;em&lt;/code&gt; with Typi. Examples of these libraries include &lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;Mappy Breakpoint&lt;/a&gt; and &lt;a href=&quot;http://breakpoint-sass.com/&quot;&gt;Breakpoint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Typi supports both libraries out of the box. Let me show you how to use them.&lt;/p&gt;
&lt;p&gt;First of all, choose a library you’re comfortable with. Here are the installation instructions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mappy Breakpoints:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt;: &lt;code&gt;bower install mappy-breakpoints --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt;: &lt;code&gt;npm install mappy-breakpoints --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Breakpoint:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt;: &lt;code&gt;bower install breakpoint-sass --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt;: &lt;code&gt;npm install breakpoint-sass --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After installing the library, make sure you &lt;code&gt;@import&lt;/code&gt; them before importing Typi:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Choose either one. Make sure it comes before Typi
@import &#39;path-to-mappy-breakpoints/mappy-breakpoints&#39;;
@import &#39;path-to-breakpoints/stylesheets/breakpoint&#39;;

// Import Typi
@import &#39;path-to-typi/scss/typi&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to tell Typi to use either Mappy Breakpoint or Breakpoint by setting the &lt;code&gt;$typi-breakpoint&lt;/code&gt; setting.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// If you use mappy-breakpoint
$typi-breakpoint: mappy-breakpoint;

// If you use breakpoint
$typi-breakpoint: breakpoint;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’re done with these steps, go ahead and try compiling your Sass files. You see that pixel values within the &lt;code&gt;$breakpoints&lt;/code&gt; map are converted into em values with both libraries.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 100%;
  line-height: 1.4;
}
@media all and (min-width: 25em) {
  html { font-size: 112.5%; }
}

@media all and (min-width: 50em) {
  html {font-size: 125%; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sweet, isn’t it? :)&lt;/p&gt;
&lt;p&gt;I highly recommend this alternative method because you can take advantage of both Mappy Breakpoints and Breakpoint to create more complex queries.&lt;/p&gt;
&lt;p&gt;Let’s run through an example.&lt;/p&gt;
&lt;p&gt;Say you want to create a &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; query. Both Mappy Breakpoints and Breakpoint allow you to create such a query by writing two widths, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Mappy Breakpoint
@include mappy-bp(400px 800px) { //... }

// Breakpoint
@include breakpoint(400px 800px) { //... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take this syntax and put it straight into the &lt;code&gt;$breakpoints&lt;/code&gt; map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 400px 800px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, both Mappy Breakpoints and Breakpoint will convert the small query into a query that contains &lt;code&gt;(min-width: 400px)&lt;/code&gt; and &lt;code&gt;(max-width: 800px)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only difference is that Mappy Breakpoints subtracts 1px from the &lt;code&gt;max-width&lt;/code&gt; query (&lt;code&gt;(max-width: 799px)&lt;/code&gt;) to ensure that you don’t run into a case where some styles get overlapped at 800px.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* Output from Mappy Breakpoints */
@media all and (min-width: 25em) and (max-width: 49.9375em) {
  html {font-size: 112.5%; }
}

/* Output from Breakpoint */
@media (min-width: 25em) and (max-width: 50em) {
  html {font-size: 112.5%; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Neat eh? :)&lt;/p&gt;
&lt;p&gt;The syntax for Mappy Breakpoint and Breakpoint differ, so if you want to create any other complex query, you’ll have to check out their respective documentations.&lt;/p&gt;
&lt;p&gt;How about another example?&lt;/p&gt;
&lt;p&gt;Let’s say you want to make a &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;min-height&lt;/code&gt; query this time. This pattern is quite important when working with responsive typography.&lt;/p&gt;
&lt;p&gt;In Mappy Breakpoints, you specify a &lt;code&gt;height&lt;/code&gt; keyword, followed by the min-height you want:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 400px height 400px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Breakpoint, you need to create a list with &lt;code&gt;()&lt;/code&gt; and specify the query you want:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 400px (min-height 400px)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In both cases, you’ll get the same output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@media all and (min-width: 25em) and (min-width: 25em) {
  html {font-size: 112.5%; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m going to leave you here to experiment with other queries yourself. Be sure to check out the documentations (&lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;Mappy Breakpoints&lt;/a&gt;, &lt;a href=&quot;https://github.com/at-import/breakpoint/wiki&quot;&gt;Breakpoint&lt;/a&gt;) if you get stuck!&lt;/p&gt;
&lt;p&gt;Let’s move on to the next tip.&lt;/p&gt;
&lt;h2 id=&quot;using-typi-with-modular-scale&quot;&gt;Using Typi with Modular Scale&lt;/h2&gt;
&lt;p&gt;One best practice in web typography is to use modular scale to choose the &lt;code&gt;font-size&lt;/code&gt; of your text elements.&lt;/p&gt;
&lt;p&gt;When modular scale is concerned, it’s quite common to see people either use the &lt;a href=&quot;http://modularscale.com/&quot;&gt;modular scale calculator&lt;/a&gt; or manually calculate &lt;code&gt;font-size&lt;/code&gt;s by multiplying their bases with ratios over and over.&lt;/p&gt;
&lt;p&gt;No matter which of the above methods you choose, you still have to input the values manually after getting the right sizes, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 3.157em; }
h2 { font-size: 2.369em; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you choose to change your &lt;code&gt;font-size&lt;/code&gt; at different media queries, then, this is what you’ll do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 3.157em; }
h2 { font-size: 2.369em; }

@media all and (min-width: 25em) {
  h1 { font-size: 4.209em; }
  h2 { font-size: 3.157em; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Typi, we can create these CSS by using a font-map. (Yep, Typi font maps can take in &lt;code&gt;em&lt;/code&gt; units as well):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-map: (
  null: 3.157em,
  small: 4.209em
);

$h2-map: (
  null: 2.369em,
  small: 3.157em
);

h1 { @include typi($h1-map); }
h2 { @include typi($h2-map); }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s only one problem with this approach. It’s difficult to change the values of your modular scale.&lt;/p&gt;
&lt;p&gt;What if you decided to change the ratio you used?&lt;/p&gt;
&lt;p&gt;You have to calculate the sizes and change the values one by one… Boo :(&lt;/p&gt;
&lt;p&gt;Luckily, there’s a way to make this much simpler. &lt;a href=&quot;http://scottkellum.com/&quot;&gt;Scott Kellum&lt;/a&gt; and &lt;a href=&quot;http://nicewebtype.com/&quot;&gt;Tim Brown&lt;/a&gt; have made it easy for us by creating the &lt;a href=&quot;https://github.com/modularscale/modularscale-sass&quot;&gt;Modular Scale Sass Library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What you have to do is install the library either with &lt;code&gt;bower&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt; or download it manually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bower&lt;/code&gt;: &lt;code&gt;bower install modular-scale --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt;: &lt;code&gt;npm install modularscale-sass --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, &lt;code&gt;@import&lt;/code&gt; modular scale into your Scss file. This can come either before or after Typi.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &#39;path-to-modular-scale/stylesheets/modular-scale&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’re done installing the library, you can use the &lt;code&gt;ms()&lt;/code&gt; function to calculate &lt;code&gt;font-size&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;For example, you can write &lt;code&gt;ms(3)&lt;/code&gt; if you wanted a value of 2.369em. It saves you a ton of effort either from calcuating or copy-pasting it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms1: ms(1); // =&amp;gt; 1em * 1.333 = 1.333em
$ms2: ms(2); // =&amp;gt; 1em * 1.333 * 1.333 = 1.777em
$ms3: ms(3); // =&amp;gt; 1em * 1.333 * 1.333 * 1.333 = 2.369em
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default ratio used in Modular Scale is 1.618. If you want to change this ratio, you can change the &lt;code&gt;$ms-ratio&lt;/code&gt; setting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$ms-ratio: 1.25;

$ms1: ms(1); // =&amp;gt; 1em * 1.25 = 1.25em
$ms2: ms(2); // =&amp;gt; 1em * 1.25 * 1.25 = 1.563em
$ms3: ms(3); // =&amp;gt; 1em * 1.25 * 1.25 * 1.25 = 1.953em
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The good news is, since Typi takes in a &lt;code&gt;em&lt;/code&gt; based font-size, it integrates with &lt;code&gt;ms()&lt;/code&gt; perfectly. You can write your font-maps like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1: (
  null: ms(4),
  small: ms(5)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this change, you don’t have to worry about choosing the perfect scale your design tool before moving it into HTML. Everything can be calculated for you in Sass. So go ahead and play! Try out different scales and see which one fits your design best!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Because Modular Scale is so important, I made it even simpler to integrate modular scale (along with some other neat features) right into Typi. &lt;a href=&quot;https://zellwk.com/blog/modular-scale/&quot;&gt;Read this article&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Oh, we’ve come to the end of the second tip. How time flies. There’s one more tip for you in this article.&lt;/p&gt;
&lt;h2 id=&quot;combining-modular-scale-with-vertical-rhythm-with-typi&quot;&gt;Combining Modular Scale with Vertical Rhythm with Typi&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https://zellwk.com/blog/typi&quot;&gt;previous article&lt;/a&gt;, I showed you how to create &lt;code&gt;line-height&lt;/code&gt; values both with the &lt;code&gt;$typi&lt;/code&gt; map and your custom font map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: (16px, 1.5) // Line height of 1.5
);

$h1-map: (
  null: (ms(3), 1.2) // Line height of 1.2
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These &lt;code&gt;line-height&lt;/code&gt; values (both 1.2 and 1.5) are called unitless line-height because no units (like &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt;) are attached to it.&lt;/p&gt;
&lt;p&gt;Using unitless line-height is a recommended practice on the web because children elements can inherit the line-height value, then recompute their respectively &lt;code&gt;line-height&lt;/code&gt; using their &lt;code&gt;font-size&lt;/code&gt; instead of inheriting a computed value.&lt;/p&gt;
&lt;p&gt;Although unitless line-heights are cool, it’s difficult to maintain Vertical Rhythm if we used them, especially if you chose your &lt;code&gt;font-size&lt;/code&gt; with Modular Scale.&lt;/p&gt;
&lt;p&gt;Let’s walk through an example to show what I mean.&lt;/p&gt;
&lt;p&gt;Before we continue, I’m assuming you know what Vertical Rhythm is. If not, read this &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say you have a &lt;code&gt;font-size&lt;/code&gt; of 16px and a &lt;code&gt;line-height&lt;/code&gt; of 24px. The &lt;code&gt;font-size&lt;/code&gt; of your header text is 3.157em (50.5px).&lt;/p&gt;
&lt;p&gt;When you use Vertical Rhythm on your sites, you want the &lt;code&gt;line-height&lt;/code&gt; of your text elements to be a multiple of the baseline. So, the &lt;code&gt;line-height&lt;/code&gt; of this header text is either going to be 48px, 60px or 72px (2, 2.5 or 3 baselines. See why you can use these multiples &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The question is, what is 48px, 60px or 72px in unitless &lt;code&gt;line-height&lt;/code&gt;s? There’s no way of calculating the value without doing some complex math.&lt;/p&gt;
&lt;p&gt;For example, if you have a 60px line-height, your unitless line-height value should be &lt;code&gt;1.19&lt;/code&gt; (&lt;code&gt;60/50.5&lt;/code&gt;). You need to calculate the &lt;code&gt;font-size&lt;/code&gt; value from modular scale, then calculate the unitless line height…&lt;/p&gt;
&lt;p&gt;Which is a lot of work.&lt;/p&gt;
&lt;p&gt;There’s a simpler way if you’re okay with not using unitless line-height for these elements.&lt;/p&gt;
&lt;p&gt;If you remember, Typi has a &lt;code&gt;vr()&lt;/code&gt; function that helps you calculate the number of baselines and output the value in rems. We know that 48px is two baselines, 60px is 2.5 baselines and 72px is three baselines.&lt;/p&gt;
&lt;p&gt;So, if you want to simplify the calculation, you can use this &lt;code&gt;vr()&lt;/code&gt; function directly within your font maps to calculate the &lt;code&gt;line-height&lt;/code&gt; value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1: (
  null: (ms(4), vr(2.5))
);

h1 {
  @include typi($h1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS produced by Typi is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  font-size: 3.157rem;
  line-height: 3.75rem; /* 2.5 baselines */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tada! Beauty of using &lt;code&gt;rems&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Many people, like Miriam Suzanne, the creator of &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt;Susy&lt;/a&gt;, have been using this approach for a long time.&lt;/p&gt;
&lt;p&gt;By the way, I feel it’s okay to use &lt;code&gt;rems&lt;/code&gt; in this case because it’s unlikely that you’re going to have text within &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; that needs to inherit a raw &lt;code&gt;line-height&lt;/code&gt; value. If you do, then, probably it’s time to take a look at your HTML.&lt;/p&gt;
&lt;p&gt;Note: Don’t do this with the &lt;code&gt;$typi&lt;/code&gt; map. You’ll want the &lt;code&gt;line-height&lt;/code&gt; to remain unitless.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That’s it for now! You’ve learned how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create Media Queries in em with Typi&lt;/li&gt;
&lt;li&gt;Use Modular scale with Typi&lt;/li&gt;
&lt;li&gt;Combine Modular Scale with Vertical Rhythm in Typi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are other interesting things you can do with Typi. I’ll cover them in future blog posts :)&lt;/p&gt;
&lt;p&gt;For now, play around with these newfound features! Let me know what you think of them in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An In-depth Tutorial to Typi</title>
    <link href="https://zellwk.com/blog/typi/"/>
    <updated>2016-04-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/typi/</id>
    <content type="html">&lt;p&gt;Typi is a library I’ve created to help make responsive Typography easy. I first talked about Typi when I released the article on &lt;a href=&quot;https://zellwk.com/blog/responsive-typography&quot;&gt;responsive typography&lt;/a&gt; in January 2016. Since then, I’ve added new functionalities to Typi to make it even better.&lt;/p&gt;
&lt;p&gt;In this article, I’m going to tell you what Typi can do and how to use it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let’s begin by installing Typi.&lt;/p&gt;
&lt;h2 id=&quot;installing-typi&quot;&gt;Installing Typi&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt; requires you to have Sass installed for your project. If you’re unsure how to install Sass, I highly suggest &lt;a href=&quot;https://zellwk.com/blog/gulp-libsass-with-susy/&quot;&gt;checking this article&lt;/a&gt; where I teach you how to setup your project with a LibSass and Susy (Sass library just like Typi).&lt;/p&gt;
&lt;p&gt;There are three ways you can install Typi:&lt;/p&gt;
&lt;h3 id=&quot;installing-with-bower&quot;&gt;Installing with Bower&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Terminal: &lt;code&gt;bower install typi --save&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;SCSS: &lt;code&gt;@import path-to-typi/scss/typi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;installing-with-npm&quot;&gt;Installing with npm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Terminal: &lt;code&gt;npm install typi --save&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;SCSS: &lt;code&gt;@import path-to-typi/scss/typi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;installing-with-vanilla-sass&quot;&gt;Installing with Vanilla Sass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zellwk/typi/releases&quot;&gt;Download the latest release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract it into your project&lt;/li&gt;
&lt;li&gt;SCSS: &lt;code&gt;@import path-to-typi/scss/typi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you’re done installing Typi, move on to the next step.&lt;/p&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;You have to set up two Sass maps in order to use Typi. &lt;strong&gt;The first map is a &lt;code&gt;$breakpoints&lt;/code&gt; map&lt;/strong&gt;. It is a series of &lt;code&gt;key: value&lt;/code&gt; pairs that tells Typi what media queries to create. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 600px,
  large: 1200px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this means is that when Typi looks for a &lt;code&gt;small&lt;/code&gt; key, it will create a media query at &lt;code&gt;600px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second map that you have to create is a &lt;code&gt;$typi&lt;/code&gt; map&lt;/strong&gt;. It is responsible for telling Typi what &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; values to create at different media queries. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: (16px, 1.4),
  small: 18px,
  large: 20px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all for the setup. We’ll talk about what the values in the &lt;code&gt;$typi&lt;/code&gt; map mean as we go through how to use Typi.&lt;/p&gt;
&lt;h2 id=&quot;using-typi&quot;&gt;Using Typi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The first thing that Typi does is to create &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; values for your body text&lt;/strong&gt;. To do so, you use the &lt;code&gt;typi-base&lt;/code&gt; mixin on the &lt;code&gt;html&lt;/code&gt; selector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  @include typi-base();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typi looks for the &lt;code&gt;$typi&lt;/code&gt; map to figure out what &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; values to create when you call the &lt;code&gt;typi-base&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;You can change the &lt;code&gt;$typi&lt;/code&gt; map to another font-map by changing the &lt;code&gt;$typi&lt;/code&gt; setting in the &lt;code&gt;typi-base&lt;/code&gt; mixin. I highly discourage changing the &lt;code&gt;$typi&lt;/code&gt; map because other mixins and functions use it as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  @include typi-base($typi: $some-other-map);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once Typi finds the &lt;code&gt;$typi&lt;/code&gt; map, it creates a &lt;strong&gt;min-width media query for each key&lt;/strong&gt; it finds. The only exception is &lt;strong&gt;&lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;, which &lt;strong&gt;tells Typi to create properties without media queries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;From the current &lt;code&gt;$typi&lt;/code&gt; map, we see that there are &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; keys:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: (16px, 1.4),
  small: 18px,
  large: 20px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, Typi will first create some properties without media queries since there’s a &lt;code&gt;null&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;Then, Typi looks into the &lt;code&gt;$breakpoints&lt;/code&gt; map to identify the viewport values to create a &lt;code&gt;min-width&lt;/code&gt; query for the &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; keys. This is behavior means Typi creates your properties with a &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css/&quot;&gt;mobile-first&lt;/a&gt; CSS approach.&lt;/p&gt;
&lt;p&gt;You can also change the &lt;code&gt;$breakpoints&lt;/code&gt; map into another name that you desire if you change the &lt;code&gt;$breakpoints&lt;/code&gt; setting in &lt;code&gt;typi-base&lt;/code&gt;. As above, I highly discourage changing the &lt;code&gt;$breakpoints&lt;/code&gt; map because the &lt;code&gt;typi&lt;/code&gt; mixin (mentioned below) use it as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  @include typi-base($breakpoints: $some-other-map);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the &lt;code&gt;small&lt;/code&gt; key has a value of &lt;code&gt;600px&lt;/code&gt; while the large key has a value of &lt;code&gt;1200px&lt;/code&gt;, the CSS produced by Typi is equivalent to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html { /* props here */ }

@media all and (min-width: 600px) {
  html { /* props here */ }
}

@media all and (min-width: 1200px) {
  html { /* props here */ }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each key Typi finds in the &lt;code&gt;$typi&lt;/code&gt; map, it will &lt;strong&gt;create a &lt;code&gt;font-size&lt;/code&gt; property for the first value&lt;/strong&gt; in the key. It will also &lt;strong&gt;create a &lt;code&gt;line-height&lt;/code&gt; value if it finds a second value&lt;/strong&gt; in the key.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;null&lt;/code&gt; key has a first value of &lt;code&gt;16px&lt;/code&gt; and a second value of &lt;code&gt;1.4&lt;/code&gt;. Here, Typi will create a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and a &lt;code&gt;line-height&lt;/code&gt; of &lt;code&gt;1.4&lt;/code&gt; without any media queries.&lt;/p&gt;
&lt;p&gt;It does the same for the rest of the keys. Hence, the CSS produced by Typi is equivalent to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 16px;
  line-height: 1.4;
}

@media all and (min-width: 600px) {
  html {
    font-size: 18px;
  }
}

@media all and (min-width: 1200px) {
  html {
    font-size: 20px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typi improves on this code a little more. &lt;strong&gt;It converts &lt;code&gt;font-size&lt;/code&gt; from &lt;code&gt;px&lt;/code&gt; to percentages&lt;/strong&gt; to make sure that your typography scales according to the &lt;code&gt;font-size&lt;/code&gt; set in the visitor’s browser (it’s a best practice).&lt;/p&gt;
&lt;p&gt;Since most browsers are set to &lt;code&gt;16px&lt;/code&gt; by default, Typi uses &lt;code&gt;16px&lt;/code&gt; as &lt;code&gt;100%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The actual CSS produced by &lt;code&gt;typi-base()&lt;/code&gt; is:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 100%;
  line-height: 1.4;
}

@media all and (min-width: 600px) {
  html {
    font-size: 112.5%;
  }
}

@media all and (min-width: 1200px) {
  html {
    font-size: 125%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: Typi creates media queries in px by default. You can use mappy-breakpoint or breakpoint-sass to convert it into em queries. More on that in the next article.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That’s the basics to using Typi.&lt;/p&gt;
&lt;h2 id=&quot;using-typi-for-other-elements&quot;&gt;Using Typi For Other Elements&lt;/h2&gt;
&lt;p&gt;After using Typi to create &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties for the body text, you can use Typi to create the same properties for other typography elements (like h1-h6) as well.&lt;/p&gt;
&lt;p&gt;To do so, you have to create a new font map for each typography element.&lt;/p&gt;
&lt;p&gt;Let’s say you have a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; that has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt; and a &lt;code&gt;line-height&lt;/code&gt; of &lt;code&gt;1.2&lt;/code&gt; without media queries. At &lt;code&gt;600px&lt;/code&gt;, The &lt;code&gt;font-size&lt;/code&gt; changes to &lt;code&gt;3em&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; changes to &lt;code&gt;1.3&lt;/code&gt;. The CSS code for this &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: 2em;
  line-height: 1.2;
}

@media (min-width: 600px) {
  h1 {
    font-size: 3em;
    line-height: 1.3;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Typi, what you’ll do is to create a font-map that contains these &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; values at different breakpoints. These font maps work exactly the same as the &lt;code&gt;$typi&lt;/code&gt; map.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-font-map: (
  null: (2em, 1.2),
  small: (3em, 1.3)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve created the font-map, you can use the &lt;code&gt;typi&lt;/code&gt; mixin to create the &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties. It takes in one required argument, the font map that you intend to create:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  @include typi($h1-font-map);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note: if you changed the &lt;code&gt;$breakpoints&lt;/code&gt; or &lt;code&gt;$typi&lt;/code&gt; map in  &lt;code&gt;typi-base&lt;/code&gt;, you have to change them in every &lt;code&gt;typi&lt;/code&gt; mixin as well&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  @include typi(
    $h1-font-map,
    $breakpoints: $some-breakpoint-map
    $typi: $some-typi-map
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;typi&lt;/code&gt; mixin does the same thing as the &lt;code&gt;typi-base&lt;/code&gt; mixin. The difference is that it creates &lt;code&gt;font-size&lt;/code&gt; in &lt;code&gt;rems&lt;/code&gt; instead of percentages. &lt;a href=&quot;https://zellwk.com/blog/rem-vs-em&quot;&gt;Check out this post&lt;/a&gt; if you’re wondering why I use rem typography.&lt;/p&gt;
&lt;p&gt;The CSS produced by &lt;code&gt;@include typi($h1-font-map)&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: 2rem;
  line-height: 1.2;
}

@media all and (min-width: 600px) {
  h1 {
    font-size: 3rem;
    line-height: 1.3;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can create an unlimited number of font-maps with Typi if you wish to. Just use them in their respective selectors.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-font-map: (//... );
$h2-font-map: (//... );
$h3-font-map: (//... );
// ...

h1 { @include typi($h1-font-map); }
h2 { @include typi($h2-font-map); }
h3 { @include typi($h3-font-map); }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is how you can use Typi to create &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties easily for multiple elements without writing media queries yourself.&lt;/p&gt;
&lt;h2 id=&quot;using-typi-for-vertical-rhythm&quot;&gt;Using Typi for Vertical Rhythm&lt;/h2&gt;
&lt;p&gt;Vertical Rhythm is a concept that originated from print typography. In Vertical Rhythm, we try to keep vertical spaces between elements on a page consistent with each other.&lt;/p&gt;
&lt;p&gt;This means that we have two rules to follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the &lt;strong&gt;vertical white space between elements&lt;/strong&gt; to a &lt;strong&gt;multiple of the baseline&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;line-height of all text elements&lt;/strong&gt; to a &lt;strong&gt;multiple of the baseline&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note: &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms&quot;&gt;check this post out&lt;/a&gt; if you want to find out more about Vertical Rhythm.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculating Vertical Rhythm is a chore.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s use the &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; values we have to illustrate why.&lt;/p&gt;
&lt;p&gt;Right now, the &lt;code&gt;font-size&lt;/code&gt; is &lt;code&gt;16px&lt;/code&gt; and the &lt;code&gt;line-height&lt;/code&gt; is &lt;code&gt;1.4&lt;/code&gt;. This means one baseline is &lt;code&gt;16px * 1.4 = 22.4px.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We have to convert the &lt;code&gt;22.4px&lt;/code&gt; into a relative unit because it allows us to scale typography easily (&lt;a href=&quot;https://zellwk.com/blog/responsive-typography&quot;&gt;Check this post if you need proof&lt;/a&gt;). The best to do so is to convert it into rem.&lt;/p&gt;
&lt;p&gt;Hence, one baseline is equal to &lt;code&gt;1.4rem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we’re building with Vertical Rhythm, we need to use a multiple of &lt;code&gt;1.4rem&lt;/code&gt; everywhere in the CSS. It’s common to see code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.selector {
  margin: 4.2rem; // value 3 baselines
  padding: 2.8rem; // value of 2 baselines
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we’ve calculated &lt;code&gt;4.2rem&lt;/code&gt; and &lt;code&gt;2.8rem&lt;/code&gt; manually. It’s not big of a deal when working with small sites, but the cognitive power required increases as your site complexity increases.&lt;/p&gt;
&lt;p&gt;Typi helps to remove the need for this math by providing you with a &lt;code&gt;vr&lt;/code&gt; function that takes in a multiple of the baseline.&lt;/p&gt;
&lt;p&gt;So, the above code will turn into this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.selector {
  margin: vr(3); // value 3 baselines
  padding: vr(2); // value of 2 baselines
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much easier, isn’t it? :)&lt;/p&gt;
&lt;p&gt;There’s only one prerequisite for using Typi to create Vertical Rhythm. You need to specify a &lt;code&gt;line-height&lt;/code&gt; value in the &lt;code&gt;$typi&lt;/code&gt; map’s &lt;code&gt;null&lt;/code&gt; key (which you should already have):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: (16px, 1.4)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for using the &lt;code&gt;vr&lt;/code&gt; function to calculate baselines.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this article, you learned how to use the &lt;code&gt;typi-base&lt;/code&gt; and &lt;code&gt;typi&lt;/code&gt; mixins to create &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties. You also learned how to use the &lt;code&gt;vr&lt;/code&gt; function in Typi to create Vertical Rhythm without complex math.&lt;/p&gt;
&lt;p&gt;There’s a lot more to Typi than I can finish in one article. In the next one, I’ll show you some advanced techniques you can use with Typi to make it easier to write responsive typography.&lt;/p&gt;
&lt;p&gt;Meanwhile, give Typi a go and let me know what you think about it in the comments! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Beating Procrastination</title>
    <link href="https://zellwk.com/blog/procrastination/"/>
    <updated>2016-04-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/procrastination/</id>
    <content type="html">&lt;p&gt;Are you sick of procrastinating?&lt;/p&gt;
&lt;p&gt;I am. I have procrastinated a lot in my life, and I don’t want to procrastinate a moment further. But, somehow, procrastination always seem to creep up on me when I least expect it.&lt;/p&gt;
&lt;p&gt;Recently, I got stuck with a serious bout of procrastination that paralyzed me for two full days. I couldn’t get any work done. I felt incredibly stressed. This incident reminded me about how awful it was to feel useless and powerless.&lt;/p&gt;
&lt;p&gt;Having gotten past this serious bout of procrastination, I want to take this opportunity to tell you what goes through my mind when I procrastinate. I want this to serve as a reminder to myself, and also to hopefully jolt you into action.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-people-procrastinate&quot;&gt;Why People Procrastinate&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We procrastinate for only one reason: we are afraid.&lt;/strong&gt; We are afraid that something bad will happen to us if we fail. We are afraid that something will go wrong even if we succeed.&lt;/p&gt;
&lt;p&gt;So we get stressed. This stress is especially strong when we’re doing something that’s really important to us.&lt;/p&gt;
&lt;p&gt;Unfortunately, our brains are not built to handle this stress. Most of the time, our primal instincts take over and tell us to run.&lt;/p&gt;
&lt;p&gt;But where can we run? There’s no place to run physically because the stress we’re feeling isn’t physical.&lt;/p&gt;
&lt;p&gt;The stress we’re feeling is mental. We want to run away from it, and it means running from the source that caused it. It means putting down the work we’re doing and do something that comfort us instead.&lt;/p&gt;
&lt;p&gt;So, we eat, play games, watch movies, or do just about anything under the sun to run away from that stress. When we run away, the stress gets relieved, and we feel safe again.&lt;/p&gt;
&lt;p&gt;That’s the procrastination cycle. We get stressed, we run, the stress gets relieved, albeit temporarily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The cycle repeats itself when we’re faced with important work again&lt;/strong&gt;. Then, on and on it goes…&lt;/p&gt;
&lt;p&gt;Until you break it.&lt;/p&gt;
&lt;p&gt;This cycle happened to me recently when I rehearsed for a 45 min talk for RWD Summit. When rehearsing, I could never get past the 5min mark. I’ll stop, get some water, get some fresh air, write my script, correct the slides, watch movies, play games …&lt;/p&gt;
&lt;p&gt;“I’m a perfectionist! I need to get things right! It needs to feel right!”, I told myself. That’s bullshit, by the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We tend to cover up our fears within bullshit because the real fear hidden deep within is incredibly painful&lt;/strong&gt;. It’s painful enough to warrant us to run away. We pad it with false lies that we tell ourselves to ease the pain, and that’s how “perfectionism” and other bullshit are born.&lt;/p&gt;
&lt;p&gt;The procrastination continued for two full days. On the third day, I finally found the courage to cut through my bullshit and get past the fears hidden deep within my procrastination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I was afraid that I’ll screw up my talk. I was afraid of failure. I was afraid that people will comment on how lousy a job I did. I was afraid that they’ll abandon me.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve always been a crybaby when I was young. When I fail, I’ll cry. There was one incident that my mum told me to stop crying or she’ll disown me. Since then, I’ve always been afraid of failing, because I associate failure with abandonment.&lt;/p&gt;
&lt;p&gt;This fear was reinforced when I was ten. I remember scoring well for a test. My teacher complimented me and told me not to hang out with the bad kids (my group of friends).&lt;/p&gt;
&lt;p&gt;I obeyed.&lt;/p&gt;
&lt;p&gt;But I flunked the next test. The teacher didn’t comfort me, but I lost the group of friends. They eventually welcomed me back, but I never wanted to go through the same loss again.&lt;/p&gt;
&lt;p&gt;This fear was also the reason why I waited a few years before learning design and development. I joined a business school when I was 21. Nobody talks about programming in a business school. They kept saying that “you can outsource to the programmers” if you need to.&lt;/p&gt;
&lt;p&gt;I wanted to identify myself with my peers, not the “coders”, or “geeks”, or even whatever they were called. And I kept myself away from designing and developing even though I knew I needed those skills. I wanted to learn those skills.&lt;/p&gt;
&lt;p&gt;So I ran away from learning about design and development for years. I continued to feel useless and powerless, until an incident where a good friend of mine said the truth: “That I didn’t bring anything to the table”.&lt;/p&gt;
&lt;p&gt;That was the turning point that jolted me into action. I’ve been designing and coding ever since then.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even though I’ve gotten past the fear once, it rears it’s ugly head whenever it has the chance.&lt;/strong&gt; It showed up when I was practicing my talk for RWD Summit. It showed up when I tried to sell my first book, &lt;a href=&quot;http://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt;. It showed up when I &lt;a href=&quot;http://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;wrote about design&lt;/a&gt; for the first time in my life.Each time, I ran away from the fear for a few days, but I always manage to return and conquer them at the end.&lt;/p&gt;
&lt;p&gt;Don’t beat yourself up if you have to face the fear again. It happens. When you conquered it once, you know you can do it again.&lt;/p&gt;
&lt;p&gt;Anyway, that’s my fear. &lt;strong&gt;Different people experience different fears, so I’m not surprised if what’s holding you back is different from what’s holding me back.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recently, a friend of mine, Karen, stopped herself from completing her website and launching her business even though she knows she’s an awesome teacher (for history lessons). She convinced herself that she’s just lazy and she needs a kick in the butt from an accountability parter.&lt;/p&gt;
&lt;p&gt;As you might expect by now, the laziness is bullshit. It’s a farce that she kept up because she’s afraid that she’ll be forced to spend time away from her family.&lt;/p&gt;
&lt;p&gt;And it crippled her, until we found the cause.&lt;/p&gt;
&lt;h2 id=&quot;overcoming-procrastination&quot;&gt;Overcoming Procrastination&lt;/h2&gt;
&lt;p&gt;Procrastination is a habit. It reinforces itself whenever a cycle is completed. This is why it becomes harder and harder to break procrastination the longer you’ve been doing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To break the procrastination habit, you have to be aware of what makes you begin procrastinating&lt;/strong&gt;. For me, it’s always a feeling. I’ll feel that I’m not doing it right, that it’s not good enough, that people won’t like this, that I’m not qualified to teach this etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once you notice the cue, you have to change your routine. Instead of procrastinating, you can choose to stick with the task and finish it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The truth is, beating procrastination is going to be difficult. &lt;strong&gt;You need immense courage to look at what’s really stopping you, and to push past it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ask yourself these questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What are you really afraid of?&lt;/li&gt;
&lt;li&gt;What are you really doing this for?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Dig deep&lt;/strong&gt;. It takes a lot of courage to find the real fear hidden deep within. I never knew that I was so afraid of failing, and I never knew that I was so afraid of being abandoned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s okay if you don’t find the real fear&lt;/strong&gt;. I didn’t know what I was afraid of when I beat procrastination for the first time. I never knew what my fear was all these years. I only found out about it two days ago when I drafted this post.&lt;/p&gt;
&lt;p&gt;If you don’t find the fear, &lt;strong&gt;you’ll need a reason to continue doing what you’re doing&lt;/strong&gt;. Find it. Once you find it, hold on to it, because it’s the only thing that will keep you going.&lt;/p&gt;
&lt;p&gt;The reason why I’m writing about designing, coding, or even this, is because learning these things changed my life forever. I benefited from how other people shared their knowledge, and I hope that what I do can inspire others to live a better life as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what’s your reason? Hold on to it, tightly.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;beating-procrastination-is-a-habit&quot;&gt;Beating Procrastination is a habit&lt;/h2&gt;
&lt;p&gt;Once you beat procrastination for the first time, it gets easier to beat it again, and again, and again. It’s possible to turn it into a habit. It’s possible to accomplish what’s really important to you.&lt;/p&gt;
&lt;p&gt;I never thought I would be able to write one blog post a week. It’s too much work. But I’ve been writing one blog post a week for almost 4 months now (I missed one :(). It gets easier as you do it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, stop procrastinating and get your arse moving. Procrastination gets stronger everyday. Start beating it today. Start beating it now.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving from HTML Grid Systems to CSS Grid Systems</title>
    <link href="https://zellwk.com/blog/from-html-grids-to-css-grids/"/>
    <updated>2016-03-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/from-html-grids-to-css-grids/</id>
    <content type="html">&lt;p&gt;I think it was a few months ago where someone asked me if I had any pointers to help them transit from Bootstrap’s dom-littering &lt;code&gt;.col&lt;/code&gt; classes to either Susy or Neat. It struck me that I haven’t talked about this even though I’ve been using Susy grids for so long!&lt;/p&gt;
&lt;p&gt;Anyway, this transition is a fairly big undertaking if you’re doing it for the first time. Allow me to walk you through a four-step process that I use in this article.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before we begin, &lt;strong&gt;I’m assuming you already understand why you’re moving from a dom-littering HTML Grid system&lt;/strong&gt; (like Bootstrap, Foundation or any framework out there) &lt;strong&gt;to a CSS Grid system&lt;/strong&gt; (like Susy, Neat or even Flexbox with CSS). If you’re unsure why you’re doing so, I highly suggest you check out &lt;a href=&quot;https://zellwk.com/blog/migrating-from-bootstrap-to-susy/&quot;&gt;this article&lt;/a&gt; to find out the pros and cons of both systems before moving on.&lt;/p&gt;
&lt;p&gt;Ready?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The four steps are:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the layout patterns&lt;/li&gt;
&lt;li&gt;Decide on new markup and classes&lt;/li&gt;
&lt;li&gt;Create layout patterns in CSS&lt;/li&gt;
&lt;li&gt;Replace old markup with new markup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s walk through each of these steps in the article.&lt;/p&gt;
&lt;h2 id=&quot;step-1%3A-identifying-layout-patterns&quot;&gt;Step 1: Identifying layout patterns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A layout pattern is pattern that determines how your layout changes at different breakpoints.&lt;/strong&gt; An example of a layout pattern is a content-sidebar layout. In this layout, both content and sidebar elements take up the full 12 columns on the mobile (assuming you’re using a 12-column grid). At &lt;code&gt;600px&lt;/code&gt;, the content takes up 9 columns while the sidebar takes up 3 columns.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/layout-content-sidebar.png&quot; alt=&quot;Content Sidebar Layout pattern&quot;&gt;
  &lt;figcaption&gt;Content Sidebar Layout pattern&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The code for this layout in Bootstrap is relatively straightforward. (Btw, let’s just say &lt;code&gt;col-md&lt;/code&gt; triggers at &lt;code&gt;600px&lt;/code&gt;. I don’t remember the actual breakpoint that Bootstrap uses)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-9&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-3&amp;quot;&amp;gt;Sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example of a layout pattern is a 3-column grid. In this layout, each grid item takes up the full 12 columns on a mobile. At &lt;code&gt;600px&lt;/code&gt;, each grid item takes up 4 columns.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/layout-grid-3col.png&quot; alt=&quot;3-column grid layout&quot;&gt;
  &lt;figcaption&gt;3-column grid layout&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The code for this 3-column grid in Bootstrap is straightforward as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once in a while, you may encounter a layout that’s more complex. For example, you might want to feature two items in a 3-column grid. Each featured item should take up 6 columns instead of 4 columns at &lt;code&gt;600px&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/layout-featured.png&quot; alt=&quot;Feature Grid&quot;&gt;
  &lt;figcaption&gt;Feature Grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With Bootstrap, your code will be similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-6&amp;quot;&amp;gt;Featured Grid Item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-6&amp;quot;&amp;gt;Featured Grid Item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-12 col-md-4&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ve listed three different patterns so far. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content-sidebar pattern&lt;/li&gt;
&lt;li&gt;3-column grid pattern&lt;/li&gt;
&lt;li&gt;3-column feature grid pattern&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your turn now. Go ahead and identify layout patterns you have in your design. Once you’re done identifying them, the next step is to decide on the new markup and classes for each pattern.&lt;/p&gt;
&lt;h2 id=&quot;step-2%3A-decide-on-new-markup-and-classes&quot;&gt;Step 2: Decide on New Markup and Classes&lt;/h2&gt;
&lt;p&gt;One good thing about using HTML-based grid systems is that we don’t have to think about markup nor classes. It has already been decided for us. When we switch from a HTML-based grid system to a CSS-based one, we suddenly have to create &lt;code&gt;.some-class-name&lt;/code&gt; to replace familiar numbers like &lt;code&gt;.col-md-6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This process is a huge problem that many people get stuck with. I got stuck when I first started with CSS-based layouts as well.&lt;/p&gt;
&lt;p&gt;In the beginning, I tried to be semantically correct. I would use class names like &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt; whenever I could. I also tried to remove as much nesting as possible. Here’s the initial markup for my content-sidebar pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;Sidebar &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is good enough if your layout is simple, with only &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt; on your site. It starts getting weird if you add other types of layout patterns.&lt;/p&gt;
&lt;p&gt;For instance, the simplest way I could create a 3-column grid layout was with a markup that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you put the two markups together, you’ll see that my initial method results in inconsistent markup between the 3-column-grid and content-sidebar :(&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- DO NOT FOLLOW THIS! --&amp;gt;
&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;Sidebar &amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A better markup structure will be to use a container div much like Bootstrap’s &lt;code&gt;.row&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content-sidebar-container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;Sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;three-column-grid-container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The neat trick to adding container divs is that you can use &lt;code&gt;nth-child&lt;/code&gt; in the CSS to style their direct descendants:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Note: This is SCSS
.content-sidebar-container {
  &amp;gt; div:nth-child(1) {
    // Styles for Content
  }

  &amp;gt; div:nth-child(2) {
    // Styles for Sidebar
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means there’s no longer a need to provide class names for descendants. (like &lt;code&gt;.content&lt;/code&gt;, &lt;code&gt;.sidebar&lt;/code&gt; and &lt;code&gt;.grid-item&lt;/code&gt;). The markup gets simplified a little more:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content-sidebar-container&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;Content&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s one more improvement we can make here. &lt;code&gt;.content-sidebar-container&lt;/code&gt; is a lot to type. As a lazy developer, I don’t like to type much.&lt;/p&gt;
&lt;p&gt;Here, I chose to use SMACSS’s naming convention to help change the class names slightly. SMACSS recommends that you prepend &lt;code&gt;.l&lt;/code&gt; to all layout rules. Since we’re writing only container classes, and these container classes define layout patterns, we can shorten &lt;code&gt;.content-sidebar-container&lt;/code&gt; to &lt;code&gt;.l-content-sidebar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, &lt;code&gt;.content-sidebar&lt;/code&gt; is pretty long to type. If you want to, you can further shorten it to &lt;code&gt;.l-cs&lt;/code&gt;. (This class name makes sense too, doesn’t it? Just be sure to document it somewhere :))&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To summarize this step, I recommend you create naming conventions such like these:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Content-sidebar pattern =&amp;gt; &lt;code&gt;.l-cs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3-column grid pattern =&amp;gt; &lt;code&gt;.l-g3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3-column feature grid pattern  &lt;code&gt;.l-fg3&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have decided on your markup and classes, the next step is to create your layouts in CSS&lt;/p&gt;
&lt;h2 id=&quot;step-3%3A-create-layout-patterns-in-css&quot;&gt;Step 3: Create Layout Patterns in CSS&lt;/h2&gt;
&lt;p&gt;You can use any method you want to build your layout patterns in CSS. They include Susy, Neat, Bootstrap’s Sass, Flexbox etc. &lt;strong&gt;What you need here is to learn the foundations of the method you’re using&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For all methods, you need to learn how to write &lt;a href=&quot;http://zellwk.com/blog/how-to-write-mobile-first-css/&quot;&gt;mobile-first media queries&lt;/a&gt; and &lt;a href=&quot;http://zellwk.com/blog/understanding-css-box-sizing/&quot;&gt;CSS Box Sizing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Susy, Neat, Bootstrap’s Sass, you need to learn about &lt;a href=&quot;https://css-tricks.com/all-about-floats/&quot;&gt;floats&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Flexbox, well, you need to learn about &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;Flexbox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list goes on and on, but you get the drift.&lt;/p&gt;
&lt;p&gt;In this article, I’ll use a combination of the above methods to show you that you can build any layout with any method in CSS. I’m going to create:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.l-cs&lt;/code&gt; with floats (in plain SCSS) and Susy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.l-g3&lt;/code&gt; with floats (in plain SCSS) and Susy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.l-fg&lt;/code&gt; with Flexbox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s start by going through &lt;code&gt;.l-cs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;creating-.l-cs-with-vanilla-scss&quot;&gt;Creating .l-cs with vanilla SCSS&lt;/h3&gt;
&lt;p&gt;First of all, we already know the trick to creating layouts with the markup I proposed is to use the &lt;code&gt;nth-child&lt;/code&gt; pseudo class. You also have to take note to use the direct descendant selector (&lt;code&gt;&amp;gt;&lt;/code&gt;) to prevent yourself from accidentally selecting other divs within the layout.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-cs {
  &amp;gt; div:nth-child(1) {
    // Content styles
  }

  &amp;gt; div:nth-child(2) {
    // Sidebar styles
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We know that divs take up 100% of the width by default. This means we don’t need to add any styles to create the pattern’s layout for small screens.&lt;/p&gt;
&lt;p&gt;At &lt;code&gt;600px&lt;/code&gt;, we know that we’re going to use floats to make the content takes up 9 of 12 columns while the sidebar takes up 3 of 12 columns. When working with floats, each div in the layout require a &lt;code&gt;width&lt;/code&gt; property and a &lt;code&gt;float&lt;/code&gt; property. So the code looks like this so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-cs {
  &amp;gt; div:nth-child(1) {
    @media (min-width: 600px) {
      float: left;
      width: 74.57627%;
    }
  }

  &amp;gt; div:nth-child(2) {
    @media (min-width: 600px) {
      float: right;
      width: 23.72881%;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing. When working with floats, we have add a clearfix to the container element to make sure the container doesn’t collapse:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin clearfix() {
  &amp;amp;:after {
    display: table;
    content: &#39; &#39;;
    clear: both;
  }
}

.l-cs {
  @include clearfix;

  // ... code from above
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! Not too hard, right? :)&lt;/p&gt;
&lt;p&gt;The only tough part here is the &lt;code&gt;width&lt;/code&gt; calculation in both the content and the sidebar. It’s a big headache that most CSS grid libraries like Susy and Neat try to solve.&lt;/p&gt;
&lt;p&gt;If we choose to use Susy, we can simplify the above code by using the &lt;code&gt;span()&lt;/code&gt; mixin to automatically create the properties needed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-cs {
  @include clearfix

  &amp;gt; div:nth-child(1) {
    @media (min-width: 600px) {
      @include span(9);
    }
  }

  &amp;gt; div:nth-child(2) {
    @media (min-width: 600px) {
      @include span(3 last);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;105&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;ONjjJK&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/ONjjJK/&quot;&gt;Content Sidebar Layout with Vanilla SCSS&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Susy makes it much simpler, isn’t it?&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h3 id=&quot;creating-.l-g3-with-susy&quot;&gt;Creating .l-g3 with Susy&lt;/h3&gt;
&lt;p&gt;The same technique applies when we’re creating the 3-column grid. We’re going to use the &lt;code&gt;nth-child&lt;/code&gt; pseudo class and the direct descendant (&lt;code&gt;&amp;gt;&lt;/code&gt;) to create the layout.&lt;/p&gt;
&lt;p&gt;Here, you’ll have to start learning some &lt;code&gt;nth-child&lt;/code&gt; jitsu. CSS Tricks has this &lt;a href=&quot;https://css-tricks.com/examples/nth-child-tester/&quot;&gt;nth-tester&lt;/a&gt; that can help you level up your &lt;code&gt;nth-child&lt;/code&gt; skills if you need to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-g3 {
  &amp;gt; div:nth-child(3n+1) { // Leftmost grid item }
  &amp;gt; div:nth-child(3n+2) { // Center grid item }
  &amp;gt; div:nth-child(3n+3) { // Rightmost grid item }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we’re creating the 3-column grid with floats, we already know that we need to add the clearfix even before we work on anything else.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-g3 {
  @include clearfix;
  &amp;gt; div:nth-child(3n+1) { // Leftmost grid item }
  &amp;gt; div:nth-child(3n+2) { // Center grid item }
  &amp;gt; div:nth-child(3n+3) { // Rightmost grid item }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As before, we already know that a div takes up a width of 100% by default. So, there’s no need to write any styles to make the layout pattern right on a small screen. We also know that we need to write &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; properties at &lt;code&gt;600px&lt;/code&gt; since we’re going to create the grid.&lt;/p&gt;
&lt;p&gt;In this case, we need to add a &lt;code&gt;margin&lt;/code&gt; property to the grid item as well since there are more than two columns.&lt;/p&gt;
&lt;p&gt;Here’s what the code looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.l-g3 {
  @include clearfix;

  @media (min-width: 600px) {
    // Leftmost grid item
    &amp;gt; div:nth-child(3n+1) {
      width: 32.20339%;
      float: left;
      margin-right: 1.69492%;
    }

    // Center grid item
    &amp;gt; div:nth-child(3n+2) {
      width: 32.20339%;
      float: left;
      margin-right: 1.69492%;
    }

    // Rightmost grid item
    &amp;gt; div:nth-child(3n+3) {
      float:right;
      width: 32.20339%;
      margin-right: 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whoa, this is some scary looking &lt;code&gt;nth-child&lt;/code&gt; code. Looks complex, plus you have to calculate the damn &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; properties correctly. Ngh.&lt;/p&gt;
&lt;p&gt;It becomes much simpler if you do this with Susy. You can either choose to use the &lt;code&gt;span()&lt;/code&gt; mixin, or the &lt;code&gt;gallery()&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;If you’re creating grids, I highly recommend the &lt;code&gt;gallery()&lt;/code&gt; mixin because it uses the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/#article-header-id-4&quot;&gt;isolate technique&lt;/a&gt; to reduce subpixel rounding errors. The code with the &lt;code&gt;gallery()&lt;/code&gt; mixin looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-g3 {
  @include clearfix;

  &amp;gt; div {
    @include gallery(4 of 12);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Susy then automatically generates the correct &lt;code&gt;nth-child&lt;/code&gt; selectors and properties that go within them. Sweet stuff!&lt;/p&gt;
&lt;p&gt;Play around with the codepen and take a look for yourself!&lt;/p&gt;
&lt;p data-height=&quot;104&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;eZEEJR&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/eZEEJR/&quot;&gt;3-column Grid Layout with Susy&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I highly recommend checking out Susy since it makes making grid much simpler.&lt;/p&gt;
&lt;p&gt;Ahem. Let’s move on.&lt;/p&gt;
&lt;h3 id=&quot;creating-.l-fg3-with-flexbox&quot;&gt;Creating .l-fg3 with Flexbox&lt;/h3&gt;
&lt;p&gt;Creating grids with Flexbox is slightly more difficult compared to creating grids with floats. Let’s examine the markup I’ve decided to use for &lt;code&gt;.l-fg3&lt;/code&gt; before we continue.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;l-fg3&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;Featured Item&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Featured Item&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Grid item&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Grid item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing to do when creating grids with Flexbox is to add the &lt;code&gt;flex&lt;/code&gt; property to the container. We also have to set the &lt;code&gt;flex-wrap&lt;/code&gt; property to &lt;code&gt;wrap&lt;/code&gt; so our elements can flow onto the second row.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I’m leaving out vendor prefixes to make the code simpler. Please use &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;autoprefixer&lt;/a&gt; to generate these vendor prefixes. It’s the best method out there.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 {
  display: flex;
  flex-wrap: wrap;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’ve done this, you’ll notice that flex items take up only their required space:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-req-space.png&quot; alt=&quot;Flex items only take up their required spaces&quot;&gt;
  &lt;figcaption&gt;Flex items only take up their required spaces&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This means we have to force flex items to take up 100% of the width for the mobile layout. There are two methods to doing so. You can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set &lt;code&gt;flex-flow&lt;/code&gt; of &lt;code&gt;.l-fg&lt;/code&gt; to &lt;code&gt;column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;flex-basis&lt;/code&gt; to of each flex item to &lt;code&gt;100%&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go with setting &lt;code&gt;flex-basis&lt;/code&gt; to &lt;code&gt;100%&lt;/code&gt;. It’s easier to understand.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 &amp;gt; div {
  flex-basis: 100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-mobile.png&quot; alt=&quot;Fixing Flexbox layout for mobile&quot;&gt;
  &lt;figcaption&gt;Fixing Flexbox layout for mobile&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Note: I added a gray border of 1px here to help you see the boundary of each grid item.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’re done with setting the mobile layout. Let’s move on and create the feature grid at &lt;code&gt;600px&lt;/code&gt;. Here, we know that there are three grid items on each row. Each grid item should be exactly a third of viewport if there are no spaces between grid items. What we do is to change &lt;code&gt;flex-basis&lt;/code&gt; to &lt;code&gt;33.333%&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 &amp;gt; div {
  flex-basis: 100%;
  @media (min-width: 600px) {
    flex-basis: 33.333%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-1.png&quot; alt=&quot;Three-column featured grid without margins&quot;&gt;
  &lt;figcaption&gt;Three-column featured grid without margins&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The next step is to create spaces between each grid item.&lt;/p&gt;
&lt;p&gt;When working with flexbox, you have to split gutters in half and place them on the edges of each grid item. If the space between each item is &lt;code&gt;20px&lt;/code&gt;, you have to give each grid item a &lt;code&gt;margin-left&lt;/code&gt; and a &lt;code&gt;margin-right&lt;/code&gt; of &lt;code&gt;10px&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 &amp;gt; div {
  flex-basis: 100%;
  @media (min-width: 600px) {
    margin: 10px;
    flex-basis: 33.333%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, when you look at the layout produced by this code, you’ll probably get confused and disappointed :(&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-2.png&quot; alt=&quot;Layout gets screwed up because Flex-basis wasn&#39;t calculated properly&quot;&gt;
  &lt;figcaption&gt;Layout gets screwed up because Flex-basis wasn&#39;t calculated properly &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The layouts are now screwed because &lt;code&gt;margin&lt;/code&gt;s are added into the flex basis calculation. The full width of 3 grid items then becomes &lt;code&gt;100% + 60px&lt;/code&gt;, which is bigger than 100%. Hence, browsers have no choice but to make the 3rd item flow onto the next row.&lt;/p&gt;
&lt;p&gt;The fix is surprisingly simple. We just have to remove the margins from each grid item with &lt;code&gt;calc()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 &amp;gt; div {
  // ...
  @media (min-width: 600px) {
    margin: 10px;
    flex-basis: calc(33.333% - 20px);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you’ll get a normal three-column grid (but with a fixed gutter width of 20px).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-3.png&quot; alt=&quot;three-column-grid with Flexbox&quot;&gt;
  &lt;figcaption&gt;three-column-grid with Flexbox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Let’s make the two featured items next.&lt;/p&gt;
&lt;p&gt;We know each featured item is supposed to half up approximately 50% of the width (minus the &lt;code&gt;20px&lt;/code&gt; space between them). Using the same formula, we can simply switch the &lt;code&gt;flex-basis&lt;/code&gt; for the first two elements and we’ll get the feature grid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 {
  // ...
  &amp;gt; div:nth-child(1),
  &amp;gt; div:nth-child(2) {
    @media (min-width: 600px) {
      flex-basis: calc(50% - 20px);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-4.png&quot; alt=&quot;3-column Feature Grid with Flexbox&quot;&gt;
  &lt;figcaption&gt;3-column Feature Grid with Flexbox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We’re not done yet.&lt;/p&gt;
&lt;p&gt;Normally, you wouldn’t want the additional &lt;code&gt;10px&lt;/code&gt; margin on all four sides of the grid. If you want to remove these margins, you can do so with negative margins on the &lt;code&gt;.l-fg3&lt;/code&gt; container.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.l-fg3 {
  margin: -10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do this, you’ll find that you’ll be able to scroll to the right. This is something we definitely don’t want.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/html-grids-to-css-grids/l-fg-5.png&quot; alt=&quot;Negative margins allow users to scroll right&quot;&gt;
  &lt;figcaption&gt;Negative margins allow users to scroll right&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To fix this, you can create a flex container that contains a &lt;code&gt;overflow-x: hidden&lt;/code&gt; property. This flex container should then wrap &lt;code&gt;.l-fg&lt;/code&gt; within it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;l-flex&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;l-fg&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;Featured Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Featured Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Grid Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Grid Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Grid Item&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-.scss&quot;&gt;.l-flex {
  overflow-x: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! Who says it’s hard to create grids with Flexbox? :)&lt;/p&gt;
&lt;p&gt;Oh by the way, I ran through creating creating the grid with Flexbox pretty quickly since it’s not the main topic of this article. I hope it’s thorough enough though. If you want to find out the mechanics behind creating grids with Flexbox, I suggest you check out &lt;a href=&quot;https://www.smashingmagazine.com/2015/12/website-layout-tools-compared-flexbox-vs-susy/&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;step-4%3A-replace-old-markup-with-new-markup&quot;&gt;Step 4: Replace Old Markup with New Markup&lt;/h2&gt;
&lt;p&gt;The final step to the process is to replace your old markup with the new markup. Here, you should also check for any mistakes that you’ve made in step 3.&lt;/p&gt;
&lt;p&gt;Beep. Boop. We’re done.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this article, we learned how to move from a HTML-based grid system (that most frameworks Bootstrap provide) to a CSS-based grid system that we coded up.&lt;/p&gt;
&lt;p&gt;To summarize, there are four steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identify the layout patterns you have&lt;/li&gt;
&lt;li&gt;Decide on new markup and classes&lt;/li&gt;
&lt;li&gt;Create layout patterns in CSS&lt;/li&gt;
&lt;li&gt;Replace old markup with new markup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Has this article helped you move from a HTML-based grid system to a CSS-based grid system? Let me know in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Is Web Typography Completely Broken?</title>
    <link href="https://zellwk.com/blog/web-typography-broken/"/>
    <updated>2016-03-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/web-typography-broken/</id>
    <content type="html">&lt;p&gt;I recently came across an article titled &lt;em&gt;“Web typography is broken. Here’s how we can fix it”&lt;/em&gt;. A mix of emotions rushed through me while I read through it. I realized that the biggest argument Tom was making in the article was that web typography is broken because type doesn’t sit perfectly on a baseline grid.&lt;/p&gt;
&lt;p&gt;On one hand, I was happy to see people coming up with ideas to push code to their limits.&lt;/p&gt;
&lt;p&gt;On the other hand, I’m unsettled. I asked myself: “&lt;em&gt;Is there a need to make every line of text sit on the baseline&lt;/em&gt;”? I knew the importance of Vertical Rhythm and the baseline grid. I also knew that details matter when it comes to design. &lt;strong&gt;But is this one detail enough to break web typography&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;As I browsed through the internet looking for answers, I found out that even great designers like Mark Boulton remarked that it would be cool if CSS gave us a pain free baseline grid.&lt;/p&gt;
&lt;p&gt;This increased my urge to find out if web typography was completely broken. After all, if a great designer said the same thing, then sticking perfectly to the baseline grid should be important. Right?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before I dig deep into this question, let’s take a look and see why we have the baseline problem in the first place.&lt;/p&gt;
&lt;h2 id=&quot;baseline-grids-on-the-web&quot;&gt;Baseline Grids on the Web&lt;/h2&gt;
&lt;p&gt;The Baseline grid is primarily the manifestation of Vertical Rhythm at a work. In Vertical Rhythm, we try to keep vertical spaces between elements on a page consistent with each other with the help of &lt;strong&gt;a baseline&lt;/strong&gt; – A common denominator used to create the consistent spaces.&lt;/p&gt;
&lt;p&gt;When these baselines are stacked together onto the same page, we have a baseline grid.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/baseline-grid.png&quot; alt=&quot;A baseline grid&quot;&gt;
  &lt;figcaption&gt;A baseline grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On the web, the baseline is determined by the &lt;code&gt;line-height&lt;/code&gt; property of the body text. If the computed &lt;code&gt;line-height&lt;/code&gt; value is &lt;code&gt;24px&lt;/code&gt;, the baseline is &lt;code&gt;24px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Creating the baseline grid on the web used to be difficult. We could only visualize this baseline with the help of images. Now, we can use &lt;code&gt;linear-repeating-gradient()&lt;/code&gt; to generate a baseline grid easily.&lt;/p&gt;
&lt;p&gt;Here’s how to make one with a baseline of 24px:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;body {
  background-image: repeating-linear-gradient(to bottom, transparent 0px, transparent 23px, red 23px, red 24px);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Baseline grids often appear like this on the web. You’ll see that text floats between the baselines.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/baseline-web.png&quot; alt=&quot;Baseline grid on the web&quot;&gt;
  &lt;figcaption&gt;Baseline grid on the web&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;They appear this way because the &lt;code&gt;line-height&lt;/code&gt; property distributes extra pixels evenly to the top and bottom of the text.&lt;/p&gt;
&lt;p&gt;Baseline grids on Print design is slightly different. Text sits on the baseline instead of floating between them.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/baseline-print.png&quot; alt=&quot;Print baseline grid&quot;&gt;
  &lt;figcaption&gt;Print baseline grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can try to make the web baseline grid behave exactly like the print one. There are two different ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first method&lt;/strong&gt; is to change the &lt;code&gt;background-position&lt;/code&gt; property of the baseline grid such that body text sits on it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;body {
  background-image: repeating-linear-gradient(to bottom, transparent 0px, transparent 23px, red 23px, red 24px);
  /* Moves baseline grid */
  background-position: 0 -6px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The second method&lt;/strong&gt; (slightly more purist way) is to reposition all text elements such that they sit on the baseline grid instead of changing the position of the grid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;p {
  position: relative;
  top: 6px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The situation becomes slightly more complicated when you have text elements with different &lt;code&gt;line-height&lt;/code&gt;s. Let’s say you have a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element with a line-height of &lt;code&gt;48px&lt;/code&gt; (twice of the baseline).&lt;/p&gt;
&lt;p&gt;You’ll discover that the &lt;strong&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element sits slightly above the baseline&lt;/strong&gt; no matter which method you use to “fix the baseline grid”.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/h1-above-baseline.png&quot; alt=&quot;H1 sits above baseline&quot;&gt;
  &lt;figcaption&gt;H1 sits above baseline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One way to fix this “off-alignment” issue is to push the header down slightly with a &lt;code&gt;top&lt;/code&gt; property. You’ll have to do the same step for every element that doesn’t sit on the baseline.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  position: relative;
  top: 6px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/h1-to-baseline.png&quot; alt=&quot;Pushing h1 to baseline&quot;&gt;
  &lt;figcaption&gt;Pushing h1 to baseline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In reality, making text sit on the baseline grid isn’t as simple as what you’ve seen so far. It gets more complicated as you increase the number of typefaces. It also gets more complicated when you have to cater for responsive websites. So far, what I’ve done in this process is to manually adjust &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; after eyeballing the results.&lt;/p&gt;
&lt;p&gt;There are two solutions to this problem. First, there’s a library called &lt;a href=&quot;https://sassline.com/&quot;&gt;Sassline&lt;/a&gt; that’s built by &lt;a href=&quot;https://jakegiltsoff.co.uk/&quot;&gt;Jake Giltsoff&lt;/a&gt;. We also have another library called &lt;a href=&quot;https://github.com/studiothick/megatype&quot;&gt;MegaType&lt;/a&gt; that’s built by &lt;a href=&quot;https://github.com/tbredin&quot;&gt;Thomas Bredin-Grey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you were wondering, the CSS output from Sassline and MegaType are both pretty complicated. Here’s what the output from Sassline looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/sassline.png&quot; alt=&quot;Sassline CSS&quot;&gt;
  &lt;figcaption&gt;Sassline CSS&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, Sassline uses negative &lt;code&gt;margins&lt;/code&gt; coupled with &lt;code&gt;padding&lt;/code&gt; to reposition text. Pretty complex stuff.&lt;/p&gt;
&lt;p&gt;The CSS output from MegaType is:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/megatype.png&quot; alt=&quot;MegaType CSS&quot;&gt;
  &lt;figcaption&gt;MegaType CSS&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, MegaType uses &lt;code&gt;position&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; properties. Also pretty complex stuff.&lt;/p&gt;
&lt;p&gt;It’s amazing how Jake and Tom came up with ideas like these to correct the baseline. It’s these ingenious solutions that’ll eventually push the web to a better place.&lt;/p&gt;
&lt;p&gt;That’s it for background knowledge. Let’s move on and find out if placing text on the baseline is indeed important. To do so, I first tried to understand why we use baseline grids.&lt;/p&gt;
&lt;h2 id=&quot;the-why-of-a-baseline-grid&quot;&gt;The Why of a Baseline Grid&lt;/h2&gt;
&lt;p&gt;As I mentioned above, baseline grids is manifestation of Vertical Rhythm at work. &lt;strong&gt;The reason we’re using baselines is to help enforce Vertical Rhythm.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vertical Rhythm&lt;/strong&gt;, in turn, &lt;strong&gt;is important because we’re following the principle of repetition&lt;/strong&gt;. To be specific, we’re repeating a spatial relationship. I’ve dug deep into the purpose of Vertical Rhythm in a &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms&quot;&gt;previous article&lt;/a&gt; so check that out if you want to find out more.&lt;/p&gt;
&lt;p&gt;Since we’re following the principle of repetition, the key to finding out whether it’s important to make text sit on a baseline is to &lt;strong&gt;repeat more elements&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;comparing-print-and-web-baseline-grids&quot;&gt;Comparing Print And Web Baseline Grids&lt;/h2&gt;
&lt;p&gt;I decided to compare print and web baselines side by side while repeating more elements. Here’s the result:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/print-vs-web-1.png&quot; alt=&quot;Implementation of Print and Web Baselines placed side by side&quot;&gt;
  &lt;figcaption&gt;Implementation of Print and Web Baselines placed side by side&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Uh. It’s hard to compare the results with the baselines turned on. Hold on, I’ll remove them.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/print-vs-web-2.png&quot; alt=&quot;Implementation of Print and Web Baselines placed side by side&quot;&gt;
  &lt;figcaption&gt;Print vs Web Baselines&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Much better now.&lt;/p&gt;
&lt;p&gt;Pay attention to the spatial rhythm between the two implementations. What do you think?&lt;/p&gt;
&lt;p&gt;It seems to me that type set with print baseline follows a more consistent rhythm. Type set with the web baseline seems to break the rhythm slightly whenever &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; appears. (It’s the extra few pixels between the header and paragraph elements that stand out).&lt;/p&gt;
&lt;p&gt;Now, let’s try repeating some more elements:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/print-vs-web-3.png&quot; alt=&quot;More repetitions&quot;&gt;
  &lt;figcaption&gt;More repetitions on the web baseline.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you look at it now, the web baseline implementation doesn’t seem to go out of whack anymore, does it? It seems like &lt;strong&gt;the difference between web and print baseline grids becomes insignificant as the number of repetitions increases&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wait. Don’t form a conclusion yet. There’s more to discuss.&lt;/p&gt;
&lt;p&gt;There’s more to web design than pure text elements. Sometimes, we have elements that contain text, like a button for example:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;btn&quot;&gt;A button&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;When you have elements like a button, how would you place them on the baseline? Would you put the button’s edges, the text, or both of them on the baseline?&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/buttons-on-baseline.png&quot; alt=&quot;Variations of placing a button on a baseline&quot;&gt;
  &lt;figcaption&gt;Variations of placing a button on a baseline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Both Jake’s Sassline and Tom’s MegaType seem to suggest that we should place both the edges and text on the baseline:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/sassline-megatype-buttons.png&quot; alt=&quot;Sassline and MegaType buttons&quot;&gt;
  &lt;figcaption&gt;Sassline and MegaType suggests we placeboth the edges and text on the baseline&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Personally, I don’t agree with Sassline nor MegaType because it’s weird to see buttons with uneven top and bottom spaces. I find that the rhythm gets broken immediately.&lt;/p&gt;
&lt;p&gt;Instead of accepting their answers as the correct one, I decided to test all three variations to see if one was better than the other. Here are the results if I compared all four variations (plus the web one) with their respective baselines turned on.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/print-vs-web-4.png&quot; alt=&quot;web baseline grid&quot;&gt;
  &lt;figcaption&gt;All three variations vs web baseline grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While creating this test, I tweaked the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;font-size&lt;/code&gt; to &lt;code&gt;1.728em&lt;/code&gt; (using a modular scale of 1.2) instead of leaving it at the default 2em to make the comparison more realistic.&lt;/p&gt;
&lt;p&gt;When I changed the &lt;code&gt;&amp;lt;h1&lt;/code&gt;&amp;gt;&#39;s &lt;code&gt;font-size&lt;/code&gt;, I also realized that I had to create a baseline that was half the &lt;code&gt;line-height&lt;/code&gt; value for the first scenario or it will look really weird.&lt;/p&gt;
&lt;p&gt;Let me turn off the baseline grid now. Take a look and see which you prefer.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/print-vs-web-5.png&quot; alt=&quot;web baseline grid&quot;&gt;
  &lt;figcaption&gt;All four versions without baselines&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Versions 1, 2 and 4&lt;/strong&gt; (counting from the left) &lt;strong&gt;look awfully similar&lt;/strong&gt;, don’t they?&lt;/p&gt;
&lt;p&gt;The only one that stands out from this group is Version 3. It’s obvious that the vertical space between the header element and text is much smaller than the vertical space between the header text and it’s edges. The rhythm is broken here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Since versions 1,2 and 4 are similar, is it worth the extra effort to push text to the baseline?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;I’ll let you decide.&lt;/p&gt;
&lt;p&gt;Moving on, these four variations are hypothetical scenarios I came up with. I wanted to test with some real scenarios as well. So, for the next step, I decided to check out three well-designed sites to see if they set their text with the print baseline.&lt;/p&gt;
&lt;h2 id=&quot;vertical-rhythm-in-real-websites&quot;&gt;Vertical Rhythm in Real Websites&lt;/h2&gt;
&lt;p&gt;Here, I shortlisted &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;, &lt;a href=&quot;http://www.awwwards.com/&quot;&gt;Awwwards&lt;/a&gt; and &lt;a href=&quot;https://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt; as the three websites I think are well-designed. I’ll walk you through what I did, and what I’ve found.&lt;/p&gt;
&lt;h3 id=&quot;case-study-1%3A-medium&quot;&gt;Case Study 1: Medium&lt;/h3&gt;
&lt;p&gt;Medium has a beautiful design with long-form text. It’s a perfect case to test for Vertical Rhythm.&lt;/p&gt;
&lt;p&gt;To conduct the case study, I picked &lt;a href=&quot;https://medium.com/@deanvipond/explaining-graphic-design-to-four-year-olds-fe9257ffaf3d#.hk353i17k&quot;&gt;a random article&lt;/a&gt; and inspected the paragraph tag.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/medium.png&quot; alt=&quot;Medium&#39;s CSS&quot;&gt;
  &lt;figcaption&gt;Medium&#39;s CSS&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here, I found out what Medium uses a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;21px&lt;/code&gt; and a &lt;code&gt;line-height&lt;/code&gt; of &lt;code&gt;1.58&lt;/code&gt;. This means the baseline should be &lt;code&gt;21px * 1.58 = 33.18px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Medium changes the &lt;code&gt;font-size&lt;/code&gt; at different device widths. What I mentioned above is the sizes when viewed on a desktop.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The next step was to create a baseline grid on Medium with &lt;code&gt;repeating-linear-gradient()&lt;/code&gt;. Here’s what I found&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/medium-baseline-print.png&quot; alt=&quot;Medium with a baseline grid&quot;&gt;
  &lt;figcaption&gt;Medium with a Baseline grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Note: I tested the grid with Firefox, which is the only browser I had that didn’t get affected by subpixel rounding errors.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Is Medium abiding completely to Vertical Rhythm?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;As I looked deeper, I realized that Medium uses a &lt;code&gt;margin&lt;/code&gt; of &lt;code&gt;29px&lt;/code&gt; between paragraph elements, which pushes the rhythm off slightly. It also uses a &lt;code&gt;margin-top&lt;/code&gt; of &lt;code&gt;56px&lt;/code&gt; on all h3 elements, which is slightly less than 2x of 29px.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, here’s a food for thought: Does Medium have a bad design because it’s not following Vertical Rhythm exactly?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s look at the rest of the websites before I say what I think.&lt;/p&gt;
&lt;h3 id=&quot;case-study-2%3A-awwwards&quot;&gt;Case Study 2: Awwwards&lt;/h3&gt;
&lt;p&gt;Awwward’s design is radically different from Medium’s. I picked it because I wanted to see if image-focused sites like Awwwards follow strictly to a Vertical Rhythm.&lt;/p&gt;
&lt;p&gt;There isn’t much text on the page itself, so I picked the only text container I could see to hypothesize a baseline.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/awwwards-baseline-assumption.png&quot; alt=&quot;Assuming a baseline from Awwward&#39;s text container&quot;&gt;
  &lt;figcaption&gt;Assuming a baseline from Awwwards&#39;s text container&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Here, I see that Awwwards uses a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and a &lt;code&gt;line-height&lt;/code&gt; of &lt;code&gt;1.9&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/awwwards.png&quot; alt=&quot;Awwward&#39;s font-size and line-height&quot;&gt;
  &lt;figcaption&gt;Awwward&#39;s font-size and line-height&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This means Awwwards should have a baseline of &lt;code&gt;16px * 1.9 = 30.4px&lt;/code&gt;. Here’s what it looks like when I added a baseline grid to Awwward:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/awwwards-baseline.png&quot; alt=&quot;Baseline grid on Awwward&quot;&gt;
  &lt;figcaption&gt;Baseline grid on Awwward&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, does Awwwards follow Vertical Rhythm?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;As I looked deeper, I noticed that Awwwards repeats a &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;20px&lt;/code&gt; in multiple places:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/awwwards-padding.png&quot; alt=&quot;Awwwards uses 20px padding in multiple places&quot;&gt;
  &lt;figcaption&gt;Awwwards uses 20px padding in multiple places&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Also, it doesn’t seem like Awwwards is forces text to sit on the baseline. I couldn’t find any &lt;code&gt;margin&lt;/code&gt;,&lt;code&gt; padding&lt;/code&gt; or &lt;code&gt;position&lt;/code&gt; hacks that Sassline or MegaType uses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another food for thought: Does Awwward’s design suck because it doesn’t follow a Vertical Rhythm exactly?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let’s take a look at the last case study before I conclude.&lt;/p&gt;
&lt;h3 id=&quot;case-study-3%3A-dribbble&quot;&gt;Case Study 3: Dribbble&lt;/h3&gt;
&lt;p&gt;For the third test, I wanted to find a page that uses both images and text to see if Vertical Rhythm is applied. Here I’ve chosen the shot page to conduct the test.&lt;/p&gt;
&lt;p&gt;Dribble’s shot page uses a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and a &lt;code&gt;line-height&lt;/code&gt; of &lt;code&gt;1.5&lt;/code&gt;, which means the baseline should be &lt;code&gt;24px&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/dribbble-baseline.png&quot; alt=&quot;Dribbble with a baseline grid&quot;&gt;
  &lt;figcaption&gt;Dribbble with a baseline grid&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, does Dribbble follow completely to a baseline grid?&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;As I dug further, I noticed that Dribbble also used multiples of &lt;code&gt;5px&lt;/code&gt; as margins or paddings all around.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/web-typography-broken/dribbble-repetition.png&quot; alt=&quot;Dribbble repeats a rhythm of 5px all around&quot;&gt;
  &lt;figcaption&gt;Dribbble repeats a rhythm of 5px all around&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;However, Dribbble uses a &lt;code&gt;margin&lt;/code&gt; of &lt;code&gt;14px&lt;/code&gt; between paragraph elements! 😱😱😱😱 A &lt;code&gt;1px&lt;/code&gt; difference!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So… Once again, does Dribbble’s design suck since it doesn’t follow a Vertical Rhythm perfectly?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You would have noticed by now that all three sites don’t follow a perfect Vertical Rhythm. Yet, they are all well-designed sites, aren’t they?&lt;/p&gt;
&lt;h2 id=&quot;so%2C-does-this-mean-vertical-rhythm-is-not-important%3F&quot;&gt;So, Does This Mean Vertical Rhythm is not Important?&lt;/h2&gt;
&lt;p&gt;On the contrary, &lt;strong&gt;Vertical Rhythm IS important&lt;/strong&gt;. Following it to the pixel isn’t.&lt;/p&gt;
&lt;p&gt;Earlier, we mentioned the principle behind Vertical Rhythm and baseline grids is the &lt;strong&gt;principle of repetition&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve read my &lt;a href=&quot;https://zellwk.com/blog/why-vertical-rhythms/&quot;&gt;article&lt;/a&gt; on why Vertical Rhythm is important, you would have know that &lt;strong&gt;repetition breeds familiarity. It has the ability to make things feel as if they belong together&lt;/strong&gt;. It gives the feeling that someone has thought it all out, like it’s part of the plan.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The more you repeat elements, the more a design comes together&lt;/strong&gt;. It also applies to any spatial relationships (including those that are not on the rhythm).&lt;/p&gt;
&lt;p&gt;Here, we’ve seen that Awwwards repeats &lt;code&gt;20px&lt;/code&gt; spaces, Dribbble repeats multiples of &lt;code&gt;5px&lt;/code&gt; spaces while Medium repeats &lt;code&gt;29px&lt;/code&gt; spaces.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the main takeaway here is repetition&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since repetition is the important thing, is there a need to push pixels and make text sit on the baseline grid?&lt;/p&gt;
&lt;p&gt;¯\_(ツ)_/¯&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We’ve gone through a ton of stuff in this article. First of all, we talked about the differences between a web baseline grid and a print baseline grid. We also found out how to convert a web baseline grid to a print one.&lt;/p&gt;
&lt;p&gt;Next, we compared both types of baseline grids together. Here, I discovered that there’s a small (almost no) difference between print and web baseline grids when elements are repeated multiple times.&lt;/p&gt;
&lt;p&gt;Finally, we looked at three well-designed sites to see if we can find real-life examples of Vertical Rhythm at work. None of them enforce a perfect rhythm. However, we noticed that they do repeat spatial relationships around the entire site.&lt;/p&gt;
&lt;p&gt;After digging deep into Vertical Rhythm and baseline grids, I feel that it’s not important to push pixels and make text sit on a baseline grid. Instead, it’s more important to internalize the design principles so we can use or break them if we need to.&lt;/p&gt;
&lt;p&gt;What’s your take? I’ll love to hear them in the comments below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>PX, EM or REM Media Queries?</title>
    <link href="https://zellwk.com/blog/media-query-units/"/>
    <updated>2016-03-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/media-query-units/</id>
    <content type="html">&lt;p&gt;Have you wondered if you should use &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; for media queries? I had the same question too, and I never figured it out, not till now.&lt;/p&gt;
&lt;p&gt;When I first created the &lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;mappy-breakpoint&lt;/a&gt; library over a year ago, I used &lt;code&gt;rem&lt;/code&gt; units. Then &lt;a href=&quot;https://github.com/at-import/breakpoint/issues/132&quot;&gt;after a conversation&lt;/a&gt; with Sam Richard, I quickly switched to &lt;code&gt;em&lt;/code&gt; instead because I found out there isn’t a difference between the two.&lt;/p&gt;
&lt;p&gt;In addition to &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, a popular unit of choice for media queries is the good old pixel. I wondered if it’s possible to use pixel queries nowadays since px-zooming problem that used to exist was now resolved by all browsers.&lt;/p&gt;
&lt;p&gt;This week, I finally decided to get to the bottom of this matter.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before we begin this article, I’m assuming that you already know what &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units are. Check &lt;a href=&quot;http://zellwk.com/blog/rem-vs-em/&quot;&gt;this article&lt;/a&gt; out if you don’t.&lt;/p&gt;
&lt;h2 id=&quot;the-base-experiment&quot;&gt;The Base Experiment&lt;/h2&gt;
&lt;p&gt;I thought of creating three separate &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements, one for &lt;code&gt;px&lt;/code&gt;, one for &lt;code&gt;em&lt;/code&gt; and one for &lt;code&gt;rem&lt;/code&gt;. I gave each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; a background color so it becomes easy to tell them apart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.pixel { background: red; }
.em { background: green; }
.rem { background: blue; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I created a &lt;code&gt;min-width&lt;/code&gt; query on all three selectors since we’re comparing the media query units.&lt;/p&gt;
&lt;p&gt;When the query kicks in, I decided to decrease the opacity of the element so I can see the difference immediately. Here’s the CSS for the pixel-based media query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.pixel {
  background: red;
  @media (min-width: 400px) {
    opacity: 0.5
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to figure out how to create the &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this first experiment, I wanted to test if there were differences between the three units if all conditions were ideal&lt;/strong&gt;. In other words, none of the following scenarios has happened:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt; changed in &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;user zoomed in.&lt;/li&gt;
&lt;li&gt;user changed their browser’s font setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the conditions are ideal at this point, I can safely assume that &lt;code&gt;16px&lt;/code&gt;, &lt;code&gt;1em&lt;/code&gt; and &lt;code&gt;1rem&lt;/code&gt; are equal. &lt;code&gt;400px&lt;/code&gt;, then, is equivalent to &lt;code&gt;25em&lt;/code&gt; or &lt;code&gt;25rem&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.pixel {
  background: red;
  @media (min-width: 400px) {
    opacity: 0.5
  }
}

.em {
  background: green;
  // 400 ÷ 16 = 25
  @media (min-width: 25em) {
    opacity: 0.5
  }
}

.rem {
  background: blue;
  // 400 ÷ 16 = 25
  @media (min-width: 25rem) {
    opacity: 0.5
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If all three media queries behave in the same manner, we should see all of them trigger at 400px exactly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And they did (on every browser I tested).&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/control.gif&quot; alt=&quot;The Base Experiment&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;The base experiment&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since all three media queries kicked in at the same breakpoint, we know that &lt;strong&gt;there’s no difference between &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; queries at this stage&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After establishing the base experiment, the next step is to test for less ideal conditions where any of the scenarios above occurred. Once again, the scenarios are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt; changed in &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;user zoomed in.&lt;/li&gt;
&lt;li&gt;user changed their browser’s font setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go through them one by one.&lt;/p&gt;
&lt;h2 id=&quot;1.-font-size-changed-in-html&quot;&gt;1. Font-size Changed in HTML&lt;/h2&gt;
&lt;p&gt;The first scenario is incredibly common. In fact, almost all web pages use this method set the default &lt;code&gt;font-size&lt;/code&gt; property in their CSS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  // setting default font size
  font-size: 200%
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I chose to use a &lt;code&gt;font-size&lt;/code&gt; of 200% in my test, which means that I’m setting both &lt;code&gt;1em&lt;/code&gt; and &lt;code&gt;1rem&lt;/code&gt; as &lt;code&gt;32px&lt;/code&gt;. &lt;strong&gt;If &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; are affected by this change in &lt;code&gt;font-size&lt;/code&gt;, they should only trigger at &lt;code&gt;800px&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here’s the result: Chrome, Firefox and IE 11 triggered all three media queries at 400px:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/chrome.gif&quot; alt=&quot;Results from Chrome, Firefox and Internet Explorer 11 for scenario 1&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;Results from Chrome, Firefox and Internet Explorer 11&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This is the correct behavior. &lt;strong&gt;&lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units should not be affected by changes in &lt;code&gt;font-size&lt;/code&gt; in the HTML&lt;/strong&gt; since they’re based on the browser’s internal &lt;code&gt;font-size&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Unfortunately, we didn’t get the perfect behavior on Safari. It triggered the &lt;code&gt;rem&lt;/code&gt; media query at 800px :(&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/safari-200.gif&quot; alt=&quot;Results from Safari for scenario 1&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;Results from Safari&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since this behavior only occurs on Safari, I was curious to see if mobile Safari was affected as well. Turns out, it did.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the first scenario already showed us that we shouldn’t use &lt;code&gt;rem&lt;/code&gt; media queries.&lt;/strong&gt; However, let’s continue to put rem in the rest of our experiments to see if anything else comes up.&lt;/p&gt;
&lt;h2 id=&quot;2.-user-zooms-in&quot;&gt;2. User Zooms In&lt;/h2&gt;
&lt;p&gt;The second scenario is common as well. If the text on your page isn’t large enough, &lt;strong&gt;users may choose to use the zoom function built into their browser to enlarge the text.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick note here: The original idea behind &lt;code&gt;em&lt;/code&gt; based sizes was due to older browsers not being able to update pixel values when a user zooms. In this regard, testing the difference between media query units when a user zooms will help to answer the question on whether we can use &lt;code&gt;px&lt;/code&gt; based media queries now.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/zoom.gif&quot; alt=&quot;User zooms in&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;User zooms in&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The results from this experiment is that Chrome, Firefox and IE showed the same behavior. &lt;code&gt;px&lt;/code&gt; unit queries fired at the same time as &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; queries.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/chrome-zoom.gif&quot; alt=&quot;Results from Chrome, Firefox and Internet Explorer 11 in scenario 2&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;Results from Chrome, Firefox and Internet Explorer 11&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And you guessed it… Safari didn’t :(&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/safari-zoom.gif&quot; alt=&quot;Results from Safari in scenario 2&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;Results from Safari&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Unfortunately, this means that pixel based media queries are out of the question&lt;/strong&gt;. Safari doesn’t support them properly (unless you decide to forsake Safari?).&lt;/p&gt;
&lt;p&gt;Once again, move on to our final experiment to see if anything unexpected comes up still.&lt;/p&gt;
&lt;h2 id=&quot;3.-user-changed-their-browser%E2%80%99s-font-setting.&quot;&gt;3. User Changed Their Browser’s Font Setting.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Many developers like to believe that &lt;a href=&quot;http://nicolas-hoizey.com/2016/03/people-don-t-change-the-default-16px-font-size-in-their-browser.html&quot;&gt;users don’t change their browser’s &lt;code&gt;font-size&lt;/code&gt;&lt;/a&gt; since it’s hidden deeeep inside the settings.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, it’ll be awesome if all users exhibit this behavior because we don’t have to do this experiment! :)&lt;/p&gt;
&lt;p&gt;Unfortunately, there’s no data to proof that users don’t change their browser’s &lt;code&gt;font-size&lt;/code&gt;s, so &lt;strong&gt;it’s still our duty as developers to bake the flexibility into our websites.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this experiment, I enlarged the default &lt;code&gt;font-size&lt;/code&gt; of the four browsers I tested with in the following way (incase you wanted to follow along):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chrome:&lt;/strong&gt; Go to &lt;code&gt;settings&lt;/code&gt;, &lt;code&gt;show advanced settings&lt;/code&gt;, &lt;code&gt;web-content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firefox:&lt;/strong&gt; Go to &lt;code&gt;preferences&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;fonts and colors&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internet Explorer:&lt;/strong&gt; Click on &lt;code&gt;page&lt;/code&gt;, then &lt;code&gt;text-size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only browser I couldn’t figure out where to set the font-size was &lt;strong&gt;Safari&lt;/strong&gt;. So I used a proxy instead. I change the settings such that the smallest font-size is larger than 16px. To do so, go to &lt;code&gt;preferences&lt;/code&gt;, &lt;code&gt;advanced&lt;/code&gt;, &lt;code&gt;acessibility&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This was the only test that all browsers behaved in the same way:&lt;/strong&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/media-query-units/chrome-very-large-font-size.gif&quot; alt=&quot;Results from all browsers for scenario 3&quot;&gt;&lt;/p&gt;
  &lt;figcaption&gt;Results from all browsers for scenario 3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see, the pixel queries triggered earlier than &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; queries.&lt;/p&gt;
&lt;p&gt;There aren’t any bugs here. This is the correct implementation since px are absolute units. The breakpoint should remain at 400px no matter what the user set’s their default &lt;code&gt;font-size&lt;/code&gt; to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;, on the other hand, is based on the &lt;code&gt;font-size&lt;/code&gt; of the browser. Hence, their media queries should get updated when the user changes their default &lt;code&gt;font-size&lt;/code&gt; setting.&lt;/p&gt;
&lt;p&gt;So… &lt;strong&gt;I’m sorry to break your bubble, pixel fans, but it’s a no-go for pixel based queries&lt;/strong&gt;. 😱😱😱&lt;/p&gt;
&lt;p&gt;(Here’s a more detailed explanation for people who found this last experiment confusing.)&lt;/p&gt;
&lt;p&gt;Try to imagine you’ve coded up a website that has a breakpoint at 600px. This 600px breakpoint is perfect for a font-size of 16px (the default).&lt;/p&gt;
&lt;p&gt;Let’s call the viewport smaller than 600px the &lt;em&gt;small viewport&lt;/em&gt;, while that larger than 600px the &lt;em&gt;medium viewport&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let’s further assume that you only changed the layout at 600px. You used a one-column layout below 600px, and a two-column layout above 600px.&lt;/p&gt;
&lt;p&gt;Now, change your browser font-size setting to 20px and look at your website at 650px.&lt;/p&gt;
&lt;p&gt;If you used &lt;code&gt;em&lt;/code&gt; or &lt;code&gt;rem&lt;/code&gt; based media queries, your user would see a one-column layout at 650px. This behavior would be consistent with the first two scenarios.&lt;/p&gt;
&lt;p&gt;If you used &lt;code&gt;px&lt;/code&gt; based media queries, your user would see a two-column layout at 650px. This behavior would be inconsistent with the above scenarios. (And the design would not fit the screen).&lt;/p&gt;
&lt;h2 id=&quot;concluding-the-experiments&quot;&gt;Concluding The Experiments&lt;/h2&gt;
&lt;p&gt;As you can see from our tests above, &lt;strong&gt;the only unit that performed consistently across all four browsers is &lt;code&gt;em&lt;/code&gt;&lt;/strong&gt;. There aren’t any differences between &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; with the exception of bugs found on Safari.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;px&lt;/code&gt; media queries performed well in two of the three experiments (with the exception of Safari, again). Unfortunately, &lt;code&gt;px&lt;/code&gt; media queries remained at &lt;code&gt;400px&lt;/code&gt; in the third experiment, which makes it a no-go if you intend to support users who change their browser’s &lt;code&gt;font-size&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Hence, my conclusion after these experiments is: &lt;strong&gt;Use &lt;code&gt;em&lt;/code&gt; media queries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you’re using a library that doesn’t do &lt;code&gt;em&lt;/code&gt; media queries, point the developer to this article so they know the implications of their code. Otherwise, feel free to switch to a &lt;code&gt;em&lt;/code&gt; based library like &lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;Mappy-breakpoints&lt;/a&gt;, &lt;a href=&quot;http://breakpoint-sass.com/&quot;&gt;Breakpoint-sass&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass-mq/sass-mq&quot;&gt;sass-mq&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Viewport Unit Based Typography</title>
    <link href="https://zellwk.com/blog/viewport-based-typography/"/>
    <updated>2016-03-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/viewport-based-typography/</id>
    <content type="html">&lt;p&gt;I talked about using &lt;a href=&quot;https://zellwk.com/blog/rem-vs-em/&quot;&gt;rem and em&lt;/a&gt; for &lt;a href=&quot;https://zellwk.com/blog/responsive-typography/&quot;&gt;responsive typography&lt;/a&gt; and for building modular components in two blog posts previously. In both posts, comments about viewport based units inevitably comes into the picture.&lt;/p&gt;
&lt;p&gt;I resisted working with viewport units for a while, believing that using them would be a pain in the ass because of the calculations involved.&lt;/p&gt;
&lt;p&gt;Last week, I finally overcame the resistance and took a stab at exploring viewport units and how to use them in responsive typography.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Before I deep dive into viewport units and how they work with responsive typography, let’s first talk about what viewport units are.&lt;/p&gt;
&lt;h2 id=&quot;what-are-viewport-units%3F&quot;&gt;What are Viewport Units?&lt;/h2&gt;
&lt;p&gt;There are 4 different types of viewport units available in CSS today. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vw&lt;/code&gt; – Percentage of viewport width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vh&lt;/code&gt; – Percentage of viewport height&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmin&lt;/code&gt; – &lt;code&gt;vw&lt;/code&gt; or &lt;code&gt;vh&lt;/code&gt;, whichever smaller&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vmax&lt;/code&gt; – &lt;code&gt;vw&lt;/code&gt; or &lt;code&gt;vh&lt;/code&gt;, whichever bigger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Viewport&lt;/strong&gt;, in this case, &lt;strong&gt;refers to the browser screen&lt;/strong&gt;. &lt;code&gt;1vw&lt;/code&gt; would mean one percent of the browser’s width. &lt;strong&gt;&lt;code&gt;100vw&lt;/code&gt; would mean the full browser width&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/viewport-units.png&quot; alt=&quot;Viewport units&quot;&gt;
  &lt;figcaption&gt;100vw and 100vh&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The good thing about &lt;strong&gt;viewport units is that they are automatically recalculated whenever the viewport changes&lt;/strong&gt;. This happens on load, on resize or even on orientation change.&lt;/p&gt;
&lt;p&gt;Since viewport units are automatically recalculated, it becomes extremely easy to create a component that will always be a quarter of the viewport:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.component {
  width: 50vw;
  height: 50vh;
  background: rgba(255, 0, 0, 0.25)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/quarter-viewport-component.gif&quot; alt=&quot;Quarter viewport component&quot;&gt;
  &lt;figcaption&gt;A component that&#39;s always a quarter of the viewport&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;That’s viewport units in a nutshell. Now, let’s move into the meat of this article.&lt;/p&gt;
&lt;h2 id=&quot;using-viewport-units-for-typography&quot;&gt;Using Viewport Units for Typography&lt;/h2&gt;
&lt;p&gt;There’s &lt;strong&gt;one reason&lt;/strong&gt; why you might want to consider using viewport units for typography – &lt;strong&gt;viewport units are recalculated automatically depending on the client’s browser&lt;/strong&gt;. This means we don’t have to explicitly declare font-size changes with media queries.&lt;/p&gt;
&lt;p&gt;Let’s use an example to illustrate this point clearly.&lt;/p&gt;
&lt;p&gt;Consider the following code where we change the &lt;code&gt;font-size&lt;/code&gt; from 16px to 20px at a breakpoint of 800px:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Note: CSS are all written in SCSS

html {
  font-size: 16px;

  @media (min-width: 800px) {
    font-size: 20px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you look at this code, you can immediately tell that the &lt;code&gt;font-size&lt;/code&gt; jumps from 16px to 20px at a viewport of 800px. That’s decent. It’s what we have done for a long time.&lt;/p&gt;
&lt;p&gt;Once in a while, you’ll encounter the situation where you had to add an extra media query between two breakpoints to make sure the typography looks good on all devices:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;

  @media (min-width: 600px) {
    font-size: 18px;
  }

  @media (min-width: 800px) {
    font-size: 20px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although we can go on and specify multiple media queries and multiple font-sizes, it’s usually an overkill so we stick to 3 - 4 sizes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But what if you can get the same effecting without specifying multiple media queries or multiple font-sizes?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s where viewport units come in. You can get the same effect easily by setting the &lt;code&gt;font-size&lt;/code&gt; property in viewport units.&lt;/p&gt;
&lt;p&gt;Consider the results from the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: 3vw; }
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/font-size-in-vw.gif&quot; alt=&quot;Font size in vw&quot;&gt;
  &lt;figcaption&gt;Resizing text automatically with viewport units!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Pretty amazing, isn’t it?&lt;/p&gt;
&lt;p&gt;The downside though, as you can see, is that &lt;strong&gt;viewport units are too responsive to the changes of the screen’s width&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you set a font-size at &lt;code&gt;3vw&lt;/code&gt; like I did above, you’ll get a text size of 10px on a device with a screen width of 320px (mobile). That’s too small to read. On the flipside, text becomes 43px when you’re on a device with a screen width of 1440px (laptop). That’s too big.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We’re now presented with an interesting challenge&lt;/strong&gt; – taming the viewport beast.&lt;/p&gt;
&lt;p&gt;Thankfully, there’s a simple way to solve the problem. &lt;strong&gt;We can set a minimum font-size, then scale the font with a small viewport multiple by using the &lt;code&gt;calc()&lt;/code&gt; property&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is how it looks like in code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: calc(18px + 0.25vw) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks pretty cool, doesn’t it? I first found out about this technique through &lt;a href=&quot;https://twitter.com/MikeRiethmuller&quot;&gt;Mike Riethmuller’s&lt;/a&gt; article on &lt;a href=&quot;http://madebymike.com.au/writing/precise-control-responsive-typography&quot;&gt;precise control over responsive typography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;strong&gt;I realized at the same time that this code doesn’t work on some browsers&lt;/strong&gt;. For example, it doesn’t resize on Safari for Mac (According to Mike, it does on Windows though).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fix though, is surprisingly simple.&lt;/strong&gt; We can combine the use of a percentage unit with &lt;code&gt;vw&lt;/code&gt; to allow Safari to scale the fonts again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: calc(112.5% + 0.5vw) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tada!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/font-size-vw-tamed.gif&quot; alt=&quot;Font size tamed&quot;&gt;
  &lt;figcaption&gt;Font sized with vw now tamed!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Shwweeeeeet! Can we really get rid of &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt; and media queries altogether in our code? At this point, I can’t wait to try it out!&lt;/p&gt;
&lt;p&gt;The next challenge I had to overcome was to try setting font-sizes of other typographic elements (h1-h6) in viewport units.&lt;/p&gt;
&lt;h2 id=&quot;setting-other-typography-elements-in-viewport-units&quot;&gt;Setting Other Typography Elements in Viewport Units&lt;/h2&gt;
&lt;p&gt;The first thing I tried to do was to create a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element thats twice the size of the body text. It turned out that it wasn’t straightforward to do so :(&lt;/p&gt;
&lt;p&gt;I tried multiplying the calculations in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; &lt;code&gt;font-size&lt;/code&gt; by 2, and I saw that it’s larger than what it should be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: calc(112.5% + 0.25vw) }
h1 { font-size: calc((112.5% + 0.25vw) * 2); }
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/viewport-sized-header.png&quot; alt=&quot;Incorrectly sized h1&quot;&gt;
  &lt;figcaption&gt;H1 has sized incorrectly :(&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;This happens because I’m using a percentage-based &lt;code&gt;font-size&lt;/code&gt; calculation in the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/strong&gt;. Effectively, I’m recalculating the &lt;code&gt;font-size&lt;/code&gt; in &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; after inheriting the calculated &lt;code&gt;font-size&lt;/code&gt; in &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It might be easier to visualize if we put some numbers to it.&lt;/p&gt;
&lt;p&gt;Let’s say you’re now on a viewport of 800px. The default &lt;code&gt;font-size&lt;/code&gt; is 16px.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;112.5% in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; calculation means a &lt;code&gt;font-size&lt;/code&gt; of 18px (&lt;code&gt;112.5/100 * 16px&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;0.25vw in the calculation equals to 2px (&lt;code&gt;800px * 0.25 ÷ 100&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The computed &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; &lt;code&gt;font-size&lt;/code&gt; is 20px (&lt;code&gt;18px + 2px&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far so good for the HTML calculation? Great!&lt;/p&gt;
&lt;p&gt;We’ll use the same method to tackle the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; calculation. &lt;strong&gt;Pay special attention to the the 112.5% when calculating &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; this time&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;112.5% in the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; calculation means a &lt;code&gt;font-size&lt;/code&gt; of 22.5px (&lt;code&gt;112.5/100 * 20px&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;0.25 vw in the calculation equals to 2px (&lt;code&gt;800px * 0.25 ÷ 100&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The computed &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; &lt;code&gt;font-size&lt;/code&gt; is 49px &lt;code&gt;((22.5px + 2px) * 2)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, &lt;strong&gt;the correct &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; size we’re looking for is twice the body &lt;code&gt;font-size&lt;/code&gt;, or 40px.&lt;/strong&gt; They’re different :(&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are two ways to solve this problem since we know the error has caused by &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; inheriting the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first way is simply set 112.5% as 100% in &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 { font-size: calc((100% + 0.25vw) * 2) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second way to solve this problem is to make sure font-sizes aren’t inherited across elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 { font-size: calc((100% + 0.25vw) * 2) }
p { font-size: calc((100% + 0.25vw)) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Both of these seemed like hacky ways&lt;/strong&gt; to solve the problem. I wasn’t happy with either, so I kept searching.&lt;/p&gt;
&lt;p&gt;Eventually, &lt;strong&gt;the cleanest way I found is to revert to using &lt;a href=&quot;https://zellwk.com/blog/rem-vs-em/&quot;&gt;Rem and Em&lt;/a&gt;&lt;/strong&gt;. Why discard good ol’ units for shiny new ones? :)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: calc(112.5% + 0.25vw) }
h1 { font-size: 2em; }
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/viewport-based-typography/correctly-sized-header.png&quot; alt=&quot;Correctly sized headers&quot;&gt;
  &lt;figcaption&gt;H1 now correctly sized with em!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since we’re talking about scaling font-sizes, the next question you may have is: “&lt;strong&gt;What about vertical rhythm or modular scale with viewport units?&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Well, let’s talk about that next.&lt;/p&gt;
&lt;h2 id=&quot;vertical-rhythm-and-modular-scale-with-viewport-units&quot;&gt;Vertical Rhythm and Modular Scale with Viewport Units&lt;/h2&gt;
&lt;p&gt;This is relatively easy to answer.&lt;/p&gt;
&lt;p&gt;Did you notice that viewport units are used only for sizing the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element? Everything else is still sized with &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This means you can still use &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units to create vertical rhythm and modular scale in the same way I’ve discussed previously in &lt;a href=&quot;https://zellwk.com/blog/responsive-typography&quot;&gt;everything I know about responsive typography&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nothing has changed! :)&lt;/p&gt;
&lt;p&gt;Oh. One more thing before we end this article.&lt;/p&gt;
&lt;p&gt;There’s one more challenge I had to overcome. Here’s the question I had: &lt;strong&gt;“How can you calculate vw such that your typography is going to be sized at 20px when the viewport is 800px”?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s a mouthful to ask, so let’s shorten the question into a single word – &lt;strong&gt;Precision&lt;/strong&gt;. In other words, how can I be more precise with the font-sizes I intend to use?&lt;/p&gt;
&lt;h2 id=&quot;precision&quot;&gt;Precision&lt;/h2&gt;
&lt;p&gt;Turns out, Mike has already solved this challenge for me. I’m just going to explain to you how this formula works.&lt;/p&gt;
&lt;p&gt;Let’s say you want your…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt; to be &lt;strong&gt;18px&lt;/strong&gt; when the viewport is at &lt;strong&gt;600px&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-size&lt;/code&gt; to be &lt;strong&gt;22px&lt;/strong&gt; when the viewport is at &lt;strong&gt;1000px&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;First, we have to convert the smaller &lt;code&gt;font-size&lt;/code&gt; (18px) into a percentage&lt;/strong&gt;. The first part of the calculation is thus: &lt;code&gt;calc(18/16 * 100%)&lt;/code&gt; (or simply &lt;code&gt;calc(112.5%)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next, we calculate the vw amount.&lt;/strong&gt; This part of the calculation is slightly more difficult.&lt;/p&gt;
&lt;p&gt;You calculate the vw value by taking the difference in &lt;code&gt;font-size&lt;/code&gt; (&lt;code&gt;22 - 18&lt;/code&gt;), divide it by the difference in viewport widths (&lt;code&gt;1000 - 600&lt;/code&gt;), then multiply it by &lt;code&gt;100vw - smaller-viewport-width&lt;/code&gt; (&lt;code&gt;100vw - 600px&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When put together, its:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: calc(112.5% + 4 * (100vw - 600px) / 400)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It might be a tad complicated at first, but once you know the ingredients, you can simplify it into a Sass mixin.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/indrekpaas&quot;&gt;Indrek Paas&lt;/a&gt; has already converted the above formula into a &lt;a href=&quot;http://www.sassmeister.com/gist/7f22e44ace49b5124eec&quot;&gt;simple Sass mixin&lt;/a&gt;. The only thing I’ll love to change in his implementation is to use percentages instead of pixels.&lt;/p&gt;
&lt;h2 id=&quot;super-duper-precision&quot;&gt;Super Duper Precision&lt;/h2&gt;
&lt;p&gt;So, how does implementing viewport units look like if you wanted your type sizes to scale at a different rate at different breakpoints?&lt;/p&gt;
&lt;p&gt;Here’s one answer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 100%;

  // Scales by 1px for every 100px from 600px to 1000px
  @media (min-width: 600px) {
    font-size: calc(112.5% + 4 * (100vw - 600px) / 400)
  }

  // Scales by 0.5px for every 100px from 1000px to 2000px
  @media (min-width: 1000px) {
    font-size: calc(137.5% + 5 * (100vw - 1000px) / 1000)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But hey, in reality you probably won’t scale it with different rates anyway!&lt;/p&gt;
&lt;p&gt;Which means, a more realistic implementation is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 100%;

  // Scales by 1px for every 100px from 600px onwards
  @media (min-width: 600px) {
    font-size: calc(112.5% + 4 * (100vw - 600px) / 400)
  }

  // Sets font-size to 22px after a viewport of 1000px
  @media (min-width: 1000px) {
    font-size: calc(137.5%)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You get the drift. Feel free to combine viewport units with media queries to achieve the effect you wanted.&lt;/p&gt;
&lt;p&gt;Now, probably the most important question of all:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Would I use viewport units on an actual project?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Maybe. I haven’t worked with viewport units enough to form a conclusion yet. Here are a few things I’ll need to do before seriously trying it out on a real project:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a Sass mixin to calculate vw&lt;/li&gt;
&lt;li&gt;Test for browser support and additional bugs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It’ll be super helpful if you can let me know about the bugs you found in the comments :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SUPER IMPORTANT UPDATE:&lt;/strong&gt; It has come to my attention (Thanks, Paul!) that &lt;code&gt;calc&lt;/code&gt; with percentages is totally broken on IE (both 11 and Edge). My personal tests suggests it does fine, but the guys over at &lt;a href=&quot;https://www.sitepoint.com/community/t/font-size-calc-100-0-3vw-not-working-in-ie/218960/6&quot;&gt;this thread&lt;/a&gt; proved me otherwise.&lt;/p&gt;
&lt;p&gt;So, if you wanted to use viewport units, you can use a regular &lt;code&gt;calc()&lt;/code&gt; function with the &lt;code&gt;em&lt;/code&gt; unit, followed by a &lt;code&gt;-webkit-calc()&lt;/code&gt; function with the percentage unit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: calc(0.875em + 0.25 * (100vw - 80em) / 40);
  font-size: -webkit-calc(87.5% + 0.25 * (100vw - 8000%) / 40);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Indrek has been kind enough to put up a Codepen demo for this at http://codepen.io/indrekpaas/pen/VarLaJ. Check it out!&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So, in summary, we talked about using viewport units to size typography in this article. &lt;strong&gt;Viewport units can be beneficial because they are recalculated automatically whenever the viewport changes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During the implementation, I discovered that it’s a much better practice to set viewport based units only to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element. Everything else is to be sized in &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; so we can do practices like modular scale and vertical rhythm easily.&lt;/p&gt;
&lt;p&gt;What are your thoughts on using Viewport units for typography? I’ll love to hear what you have to say in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why is Vertical Rhythm an Important Typography Practice?</title>
    <link href="https://zellwk.com/blog/why-vertical-rhythms/"/>
    <updated>2016-02-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/why-vertical-rhythms/</id>
    <content type="html">&lt;p&gt;You probably heard of the term &lt;strong&gt;Vertical Rhythm&lt;/strong&gt; if you researched a little about typography on the web. It’s one of the most important practices when working with typography. I’ve used Vertical Rhythm on all my sites ever since I read about it.&lt;/p&gt;
&lt;p&gt;One day, it struck me that I haven’t had a clue why vertical rhythm was important. Two more questions quickly arose following that thought: “How does Vertical Rhythm improve the design of the site? What lessons can I draw from Vertical Rhythm so I can improve my design?”&lt;/p&gt;
&lt;p&gt;I decided to find out why. Here are my thoughts.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let’s begin the article with some context so we’re on the same page.&lt;/p&gt;
&lt;h2 id=&quot;what-is-vertical-rhythm%3F&quot;&gt;What is Vertical Rhythm?&lt;/h2&gt;
&lt;p&gt;Vertical Rhythm is a concept that originated from print typography (I think). In Vertical Rhythm, we try to keep vertical spaces between elements on a page consistent with each other.&lt;/p&gt;
&lt;p&gt;This is often done with the help of a &lt;strong&gt;baseline&lt;/strong&gt; – A common denominator used to create the consistent spaces.&lt;/p&gt;
&lt;p&gt;In practice, we often visualize the baseline in print design by overlaying our page with a baseline grid as shown below:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/baseline-print.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Baseline grid in Print design&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Baseline grids on the web are slightly different because of the way the &lt;code&gt;line-height&lt;/code&gt; property works. We often see a baseline grid that looks like this instead:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/baseline-web.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Baseline grid for the web&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Don’t worry about the nuances between print and web baseline grids. Although they look slightly different, the principle behind Vertical Rhythm still remain.&lt;/p&gt;
&lt;p&gt;At this point, we know that Vertical Rhythm requires a baseline and a baseline grid. The next question, then, is &amp;quot;&lt;strong&gt;how do we determine the baseline?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;baseline is determined by the &lt;code&gt;line-height&lt;/code&gt; property of the body text&lt;/strong&gt;. Let’s say your body text has a computed &lt;code&gt;line-height&lt;/code&gt; value of 24px. Your baseline is then 24px.&lt;/p&gt;
&lt;p&gt;Implementing Vertical Rhythm from this point on is simple. There are two rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the &lt;strong&gt;vertical white space between elements&lt;/strong&gt; to a &lt;strong&gt;multiple of 24px&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;line-height of all text elements&lt;/strong&gt; to a &lt;strong&gt;multiple of 24px&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A simple implementation of these two rules may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  line-height: 48px;
  margin: 24px 0;
}

p {
  line-height: 24px;
  margin: 24px 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just following these simple rules has the effect of producing results like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/before-after.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Before and after implementing Vertical Rhythm&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Which design feels better? By better, it could mean things like feeling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More calm&lt;/li&gt;
&lt;li&gt;More orderly&lt;/li&gt;
&lt;li&gt;Easier to read&lt;/li&gt;
&lt;li&gt;More professional&lt;/li&gt;
&lt;li&gt;(etc)…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But why? What makes these two rules so powerful that it immediately changes your perception of the two (albeit simple) designs?&lt;/p&gt;
&lt;p&gt;Let’s take a look at the two rules again:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the vertical white space between elements to a &lt;strong&gt;multiple of 24px&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Set the line-height of all text elements to a &lt;strong&gt;multiple of 24px&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Did you notice a commonality between these two statements? Yep, it’s a &lt;strong&gt;multiple of 24px&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;These two rules tie-in with a principle of design called &lt;strong&gt;Repetition&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-principle-of-repetition&quot;&gt;The Principle of Repetition&lt;/h2&gt;
&lt;p&gt;Repetition is simply repeating the number of occurrences of one or more aspects of the design. Anything can be repeated. Some examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a typeface&lt;/li&gt;
&lt;li&gt;a font weight&lt;/li&gt;
&lt;li&gt;a font size&lt;/li&gt;
&lt;li&gt;a color&lt;/li&gt;
&lt;li&gt;a line&lt;/li&gt;
&lt;li&gt;a shape (like circle, square or triangle)&lt;/li&gt;
&lt;li&gt;(etc) …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can even repeat spatial relationships as well. In the case of Vertical Rhythm, we’re repeating a space of 24px throughout the page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what does repetition do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repetition breeds familiarity&lt;/strong&gt;. It has the ability to make things feel as if they belong together. It gives the feeling that someone has thought it all out, like it’s part of the plan.&lt;/p&gt;
&lt;p&gt;Take for instance, a lonely circle in the middle of nowhere.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/lonely-circle.png&quot; alt=&quot;one circle&quot;&gt;
  &lt;figcaption&gt;Lonely, I&#39;m Mr.Lonely, I have nobody ~~~ ♪ &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What is the circle doing there? What is it supposed to mean? What is the designer trying to say?&lt;/p&gt;
&lt;p&gt;Your mind begins to race. It tries to search for coherent answers to your questions. Unfortunately, you won’t find any. You’re left hanging. You feel unsettled.&lt;/p&gt;
&lt;p&gt;Watch what happens if you add more circles to the group&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/more-circles.png&quot; alt=&quot;more circle&quot;&gt;
  &lt;figcaption&gt;More circles&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The circle doesn’t seem so out of place anymore does it? Don’t you feel more comfortable now?&lt;/p&gt;
&lt;p&gt;Watch what happens if you add even more circles to the group&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/many-circles.png&quot; alt=&quot;Many circles&quot;&gt;
  &lt;figcaption&gt;Moar moar moar circles!!! &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ah. Many circles. You begin to see a pattern now.&lt;/p&gt;
&lt;p&gt;Now, how do you feel when you look at this image now? How does it compare with the previous two images?&lt;/p&gt;
&lt;p&gt;It feels almost the same as when you tried comparing the before / after Vertical Rhythm example, isn’t it?&lt;/p&gt;
&lt;p&gt;Wow! Why?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Because your mind has subconsciously settled on an answer&lt;/strong&gt; by now. You see that these circles are all part of a plan. Someone has orchestrated this carefully. &lt;strong&gt;It’s all there for a reason. You may not necessarily know the reason, but you know it’s there&lt;/strong&gt;. You feel safer now. That’s why.&lt;/p&gt;
&lt;p&gt;Vertical Rhythm work for the same reason. We’re simply repeating the baseline throughout the entire page.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But there’s a trick with Vertical Rhythm&lt;/strong&gt;. The trick lies in determining the baseline. Think about it. Why, of all numbers, did we choose 24px as our baseline?&lt;/p&gt;
&lt;p&gt;There’s only one reason: &lt;strong&gt;it’s the value that gets repeated the most on the page.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Take a look at the baseline grid again. Notice what you see now:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/baseline-24.png&quot; alt=&quot;Repeated baselines&quot;&gt;
  &lt;figcaption&gt;See how the baseline of 24px is repeated multiple times?&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;!-- Mind blown here --&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/mindblown.gif&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Mind-blowingly simple, isn’t it.&lt;/p&gt;
&lt;p&gt;Now that we know the principle of repetition, how can we apply it to the rest of our design?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repeat more. You can also vary the repetitions.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;varying-repetitions&quot;&gt;Varying Repetitions&lt;/h2&gt;
&lt;p&gt;We can’t possibly separate everything by 24px. It’ll be boring. We need to throw in some variations somewhere. But how?&lt;/p&gt;
&lt;p&gt;The answer can be found within the two rules for Vertical Rhythm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the vertical white space between elements to a &lt;strong&gt;multiple&lt;/strong&gt; of 24px.&lt;/li&gt;
&lt;li&gt;Set the line-height of all text elements to a &lt;strong&gt;multiple&lt;/strong&gt; of 24px.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yep, the keyword is &lt;strong&gt;multiple&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can multiply 24px with whatever ratio you want. &lt;strong&gt;The key is to remain consistent.&lt;/strong&gt; Since we already have a strong base at 24px, the &lt;strong&gt;next strongest variation we can have is to multiple or divide 24px by 2&lt;/strong&gt;. Here, we get either 12px or 48px.&lt;/p&gt;
&lt;p&gt;Carry on with this process of multiplication and you’ll eventually end up with a scale:&lt;/p&gt;
&lt;p&gt;12px, 24px, 36px, 48px, 60px, 72px …&lt;/p&gt;
&lt;p&gt;Try using any of these numbers as a margin or padding to any element and they’ll automatically feel as if they’re part of the design.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/separation-of-72px.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Second heading element has margin-top of 72px instead of 24px&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, remember to &lt;strong&gt;keep repeating&lt;/strong&gt; the number you choose to use!&lt;/p&gt;
&lt;h2 id=&quot;repeating-24px-elsewhere&quot;&gt;Repeating 24px Elsewhere&lt;/h2&gt;
&lt;p&gt;So far, we’re focused on repeating the flow of 24px from top to bottom. Don’t you think you can repeat 24px horizontally on the left and right as well?&lt;/p&gt;
&lt;p&gt;Try it on the left and right padding of components:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.component {
  padding-left: 24px;
  padding-right: 24px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/components.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Try using it as the gutter of your grid items:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.grid {
  display: flex;
  justify-content: space-between
  margin-left: -12px;
  margin-right: -12px;
  overflow: hidden;
}
.grid-item {
  margin: 24px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/grids.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Try it as the padding (or margin) between your text and the edge of the screen (especially on a mobile device)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;article {
  margin-left: 24px;
  margin-right: 24px;
}

@media (min-width: 600px) {
  article {
    margin-left: 0;
    margin-right: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/why-vertical-rhythm/layout.jpg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So, in summary, Vertical Rhythm is important because it follows one of the principles of design – repetition.&lt;/p&gt;
&lt;p&gt;Repetition has the ability to make things feel that they belong together. It gives the feeling that someone has thought it all out, like it’s part of the plan.&lt;/p&gt;
&lt;p&gt;After discovering the link between Vertical Rhythm and Repetition, we went on and figured out several ways we could replicate 24px to bring some variations to the design.&lt;/p&gt;
&lt;p&gt;Finally, after getting tired of repeating 24px vertically, we tried repeating 24px horizontally as well.&lt;/p&gt;
&lt;p&gt;That’s it! What have you learned about Vertical Rhythm? How would this knowledge shape your design or code from this point on? Let me know in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>REM vs EM – The Great Debate</title>
    <link href="https://zellwk.com/blog/rem-vs-em/"/>
    <updated>2016-02-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/rem-vs-em/</id>
    <content type="html">&lt;p&gt;One of the best practices to typography on the web is to use relative units like &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The question is, &lt;strong&gt;which should you use&lt;/strong&gt;? There’s been a longstanding debate between &lt;code&gt;rem&lt;/code&gt; supporters and &lt;code&gt;em&lt;/code&gt; supporters, believing that you should use one over the other.&lt;/p&gt;
&lt;p&gt;In this article, you’re going to find my take on &lt;code&gt;rem&lt;/code&gt; vs &lt;code&gt;em&lt;/code&gt;. You’re also going to learn exactly what &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; are, and how to use them to build modular components.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-is-em%3F&quot;&gt;What is EM?&lt;/h2&gt;
&lt;blockquote&gt;An EM is a unit of typography, equal to the currently specified point-size
&lt;cite&gt; Wikipedia &lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;This statement doesn’t make sense on the web since we don’t use &lt;code&gt;point-size&lt;/code&gt;. It makes complete sense if we substituted &lt;code&gt;point-size&lt;/code&gt; with &lt;code&gt;font-size&lt;/code&gt; though.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What it means is: &lt;code&gt;1em = 20px&lt;/code&gt; if a selector has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;20px&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 { font-size: 20px } /* 1em = 20px */
p { font-size: 16px } /* 1em = 16px */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;em&lt;/code&gt; unit can be used to declare font-sizes. In fact, it’s a &lt;a href=&quot;https://zellwk.com/blog/responsive-typography&quot;&gt;best practice&lt;/a&gt; to use relative units like &lt;code&gt;em&lt;/code&gt; for &lt;code&gt;font-size&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 { font-size: 2em } /* What does this even mean?! */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s the actual size of the &lt;code&gt;h1&lt;/code&gt; selector here?&lt;/p&gt;
&lt;p&gt;We have to look at the parent element in order to compute the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&#39;s &lt;code&gt;font-size&lt;/code&gt;. Let’s say the parent element is &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, and its &lt;code&gt;font-size&lt;/code&gt; is set to ``16px`.&lt;/p&gt;
&lt;p&gt;When put this way, we can see that the computed value of &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is &lt;code&gt;32px&lt;/code&gt;, or &lt;code&gt;2 * 16px&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: 16px }
h1 { font-size: 2em } /* 16px * 2 = 32px */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Although this is possible, it’s often a bad idea to set &lt;code&gt;font-size&lt;/code&gt; in the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; to a pixel value&lt;/strong&gt; because it overrides the user’s browser settings.&lt;/p&gt;
&lt;p&gt;Instead, you can either choose to use a &lt;code&gt;percentage&lt;/code&gt; value, or leave out the &lt;code&gt;font-size&lt;/code&gt; declaration entirely.&lt;/p&gt;
&lt;p&gt;Note: &lt;code&gt;font-size&lt;/code&gt; will be set to &lt;code&gt;100%&lt;/code&gt; if you left it out entirely.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: 100% } /* This means 16px by default*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For most users (and browsers), a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;100%&lt;/code&gt; would default to &lt;code&gt;16px&lt;/code&gt; unless they change the default &lt;code&gt;font-size&lt;/code&gt; through their browser settings. It’s rare that anyone would do that though.&lt;/p&gt;
&lt;p&gt;Okay so far? Let’s come back to &lt;code&gt;em&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;em&lt;/code&gt; can also be used to specify values for other properties in addition to &lt;code&gt;font-size&lt;/code&gt;&lt;/strong&gt;. &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; are two of such properties that are commonly sized in &lt;code&gt;em&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;This is where many people start to get confused with &lt;code&gt;em&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Consider the following code. What should the &lt;code&gt;margin-bottom&lt;/code&gt; value be for both the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements? (Assume &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; is set to &lt;code&gt;100%&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: 2em; /* 1em = 16px */
  margin-bottom: 1em; /* 1em = 32px */
}

p {
  font-size: 1em; /* 1em = 16px */
  margin-bottom: 1em; /* 1em = 16px */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Are you surprised that the computed value of &lt;code&gt;1em&lt;/code&gt; on &lt;code&gt;margin-bottom&lt;/code&gt; is different in these two scenarios`?&lt;/p&gt;
&lt;p&gt;This phenomenon occurs because &lt;code&gt;1em&lt;/code&gt; is equal to its current &lt;code&gt;font-size&lt;/code&gt;. &lt;strong&gt;Since the &lt;code&gt;font-size&lt;/code&gt; in &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is now set to &lt;code&gt;2em&lt;/code&gt;. Other properties computed with &lt;code&gt;em&lt;/code&gt; in &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; would see that &lt;code&gt;1em = 32px&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What throws people off is that &lt;code&gt;1em&lt;/code&gt; can take on different values in different parts of the code. It can be confusing if you’re just starting out with &lt;code&gt;em&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;Anyway, that’s &lt;code&gt;em&lt;/code&gt;. Let’s find out what &lt;code&gt;rem&lt;/code&gt; is next.&lt;/p&gt;
&lt;h2 id=&quot;what-is-rem%3F&quot;&gt;What is REM?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;rem&lt;/code&gt; means Root EM.&lt;/strong&gt; It’s built to provide some relief the &lt;code&gt;em&lt;/code&gt; computational problem that many faced.&lt;/p&gt;
&lt;p&gt;It is a unit of typography equal to the &lt;strong&gt;root &lt;code&gt;font-size&lt;/code&gt;&lt;/strong&gt;. This means &lt;code&gt;1rem&lt;/code&gt; is always equal to the &lt;code&gt;font-size&lt;/code&gt; defined in &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider the same code above, written in &lt;code&gt;rem&lt;/code&gt;s instead. What are the computed &lt;code&gt;margin-bottom&lt;/code&gt; values now?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  font-size: 2rem;
  margin-bottom: 1rem; /* 1rem = 16px */
}

p {
  font-size: 1rem;
  margin-bottom: 1rem; /* 1rem = 16px */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, &lt;strong&gt;&lt;code&gt;1rem&lt;/code&gt; would always take on the value of &lt;code&gt;16px&lt;/code&gt;&lt;/strong&gt; no matter where you set it (unless you changed the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s dependable. It’s simple to understand.&lt;/p&gt;
&lt;p&gt;That’s &lt;code&gt;rem&lt;/code&gt;. Pretty easy to get once you know what &lt;code&gt;em&lt;/code&gt; is, don’t you agree?&lt;/p&gt;
&lt;p&gt;Now, let’s get into the meat of this article. &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt;?&lt;/p&gt;
&lt;h2 id=&quot;rems-or-ems%3F&quot;&gt;REMs or EMs?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;It’s highly debatable.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some developers avoid &lt;code&gt;rem&lt;/code&gt; entirely, claiming that using &lt;code&gt;rem&lt;/code&gt; makes their components less modular. Others use &lt;code&gt;rem&lt;/code&gt; for everything, preferring the simplicity that &lt;code&gt;rem&lt;/code&gt; provides.&lt;/p&gt;
&lt;p&gt;Oddly, I fell into the trap of strictly only &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt; at different points in my development career. I loved how &lt;code&gt;em&lt;/code&gt; helped me make modular components, but I loathed the complexity it brought to my code. I also loved how &lt;code&gt;rem&lt;/code&gt; made calculations simple, but I hated the hacks I used to make my components modular.&lt;/p&gt;
&lt;p&gt;Turns out, &lt;strong&gt;&lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; have their strengths and weaknesses. They should be used differently, depending on the circumstances.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How? &lt;strong&gt;I have two simple rules&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Size in &lt;code&gt;em&lt;/code&gt; if the property scales according to its &lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Size everything else in &lt;code&gt;rem&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A tad too simple? Well, let’s consider writing a simple component (a header element) either using &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt;, and you’ll see how these two rules play out nicely.&lt;/p&gt;
&lt;h2 id=&quot;using-only-rems-to-make-a-header-element&quot;&gt;Using Only REMs to Make a Header Element&lt;/h2&gt;
&lt;p&gt;Say you have a header element (&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;) that looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header.png&quot; alt=&quot;A header element&quot;&gt;
  &lt;figcaption&gt;I&#39;m a header!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The header’s styles should be similar to the following if you sized everything in &lt;code&gt;rem&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.header {
  font-size: 1rem;
  padding: 0.5rem 0.75rem;
  background: #7F7CFF;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good.&lt;/p&gt;
&lt;p&gt;Next, let’s create a slightly bigger header element since it’s common to have differently-sized elements on the same website. While doing so, let’s try to inherit as many styles as possible.&lt;/p&gt;
&lt;p&gt;The markup of the bigger header element might be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;header header--large&amp;quot;&amp;gt;header!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.header {
  font-size: 1rem;
  padding: 0.5rem 0.75rem;
  background: #7F7CFF;
}

.header--large {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, the code doesn’t turn out well. You can see that there’s too little breathing space between the edge and text of &lt;code&gt;.header--large&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header-large.png&quot; alt=&quot;A large header with not enough breaking space&quot;&gt;
  &lt;figcaption&gt;Not enough breathing space between edge and text on this large header&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you insist on using only &lt;code&gt;rem&lt;/code&gt;s, the only way to fix this problem is to redeclare the &lt;code&gt;padding&lt;/code&gt; on the large header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.header {
  font-size: 1rem;
  padding: 0.5rem 0.75rem;
  background: #7F7CFF;
}

.header--large {
  font-size: 2rem;
  padding: 1rem 1.5rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header-large--fixed.png&quot; alt=&quot;A large header with good breathing space&quot;&gt;
  &lt;figcaption&gt;More padding the large header now!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the pattern here? &lt;strong&gt;&lt;code&gt;.header--large&lt;/code&gt;&#39;s &lt;code&gt;font-size&lt;/code&gt; is twice as large as &lt;code&gt;.header&lt;/code&gt;&#39;s. Consequently, &lt;code&gt;padding&lt;/code&gt; on &lt;code&gt;.header--large&lt;/code&gt; is twice as large as &lt;code&gt;padding&lt;/code&gt; on &lt;code&gt;.header&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What would happen if we have more headers of different sizes, or if the headers have to change in size? You can already see how coding the entire site in &lt;code&gt;rem&lt;/code&gt; can cause duplication and super complex code.&lt;/p&gt;
&lt;p&gt;We can simplify the code such that there’s no need to redeclare &lt;code&gt;padding&lt;/code&gt; on &lt;code&gt;.header--large&lt;/code&gt; if we don’t mind using both &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.header {
  font-size: 1rem;
  padding: 0.5em 0.75em;
  background: #7F7CFF;
}

.header--large {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, &lt;strong&gt;&lt;code&gt;em&lt;/code&gt; can be incredibly helpful when you have a property that needs to scale with it’s font size&lt;/strong&gt;. This is where the first rule was born.&lt;/p&gt;
&lt;p&gt;Next, let’s take a look at what happens if you use an &lt;code&gt;em&lt;/code&gt; only approach for the same header.&lt;/p&gt;
&lt;h2 id=&quot;using-only-ems-to-make-a-header-element&quot;&gt;Using Only EMs to Make a Header Element&lt;/h2&gt;
&lt;p&gt;An &lt;code&gt;em&lt;/code&gt; implementation isn’t far from the &lt;code&gt;rem&lt;/code&gt; code we left off. All we have to do is change &lt;code&gt;rem&lt;/code&gt; to &lt;code&gt;em&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.header {
  font-size: 1em;
  padding: 0.5em 0.75em;
  background: #7F7CFF;
}

.header--large {
  font-size: 2em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both &lt;code&gt;.header&lt;/code&gt; and &lt;code&gt;.header--large&lt;/code&gt; will look exactly the same as their &lt;code&gt;rem&lt;/code&gt; counterparts.&lt;/p&gt;
&lt;p&gt;Is that it?&lt;/p&gt;
&lt;p&gt;Nope!&lt;/p&gt;
&lt;p&gt;It’s highly unlikely that your website contains only one header element. We have to consider how this header interacts with other elements on your page.&lt;/p&gt;
&lt;p&gt;It’s common to see other elements before or after the header, like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header-relationship.png&quot; alt=&quot;Header has relationships with other elements&quot;&gt;
  &lt;figcaption&gt;Header elements have other relationships surrounding it&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The markup for this set of elements is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;header header--large&amp;quot;&amp;gt;A Header Element&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;A paragraph of text&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;header&amp;quot;&amp;gt;A Header Element&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;A paragraph of text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the styles, we need to add some &lt;code&gt;margin&lt;/code&gt;s to the left and right of the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;p {
  margin-left: 0.75em;
  margin-right: 0.75em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header-em.png&quot; alt=&quot;padding on the large header are doesn&#39;t align with the text&quot;&gt;
  &lt;figcaption&gt;Uh oh. `padding` on the large header are doesn&#39;t align with the text&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Nooo! :(&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;padding&lt;/code&gt; on the left and right of &lt;code&gt;.header--large&lt;/code&gt; is too big!&lt;/p&gt;
&lt;p&gt;If you insist on using only &lt;code&gt;em&lt;/code&gt;, the only way to fix this problem is to redeclare the &lt;code&gt;padding-left&lt;/code&gt;  and &lt;code&gt;padding-right&lt;/code&gt; properties on the large header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.header {
  font-size: 1em;
  padding: 0.5em 0.75em;
  /* Other styles */
}

.header--large {
  font-size: 2em;
  padding-left: 0.375em;
  padding-right: 0.375em;
  margin: 0.75em 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/header-relationship.png&quot; alt=&quot;Padding on the large header element is now align with the rest of the text&quot;&gt;
  &lt;figcaption&gt;Left and right paddings are now aligned!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the pattern here? &lt;strong&gt;The &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;.header--large&lt;/code&gt; is twice the size of the &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;.header&lt;/code&gt;. Yet, the &lt;code&gt;padding-left&lt;/code&gt; and &lt;code&gt;padding-right&lt;/code&gt; of &lt;code&gt;.header--large&lt;/code&gt; are half the &lt;code&gt;padding-left&lt;/code&gt; and &lt;code&gt;padding-right&lt;/code&gt; of &lt;code&gt;.header&lt;/code&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like in the above case, we can simplify the code if you are open to using a combination of &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; in your code. Specifically, &lt;code&gt;rem&lt;/code&gt; for left and right &lt;code&gt;padding&lt;/code&gt;s and &lt;code&gt;em&lt;/code&gt; for top and bottom &lt;code&gt;padding&lt;/code&gt;s:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.header {
  padding: 0.5em 0.75rem;
  font-size: 1em;
  background: #7F7CFF;
}

.header--large {
  font-size: 2em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the &lt;code&gt;em&lt;/code&gt; unit is useful when you need to scale a property with it’s &lt;code&gt;font-size&lt;/code&gt;. However, you’ll run into problems if you need to size the property accordingly to the root &lt;code&gt;font-size&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s much clearer to see how &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; can work together in a component now, isn’t it?&lt;/p&gt;
&lt;p&gt;Now, let’s take it a notch further and see how the header and paragraph interacts with a grid.&lt;/p&gt;
&lt;h2 id=&quot;components-on-a-grid&quot;&gt;Components on a Grid&lt;/h2&gt;
&lt;p&gt;Before we move on, let’s combine the header and paragraph elements together into a component:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/component.png&quot; alt=&quot;Component&quot;&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;component&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;component__header&amp;quot;&amp;gt;A header element&amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;Some paragraph text&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The basic styles for this component are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  background: white;
  border: 2px solid #7F7CFF;
}

.component__header {
  font-size: 2em;
  padding: 0.5em 1.5rem;
  background: #7F7CFF;
  margin: 0;
}

.component p {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  margin: 1.5rem 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good. This was everything we covered in the earlier sections.&lt;/p&gt;
&lt;p&gt;Moving on, this component can be found in differents of a website. Potential areas include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The main content area&lt;/li&gt;
&lt;li&gt;The sidebar&lt;/li&gt;
&lt;li&gt;In a 1/3 grid layout&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/component-locations.png&quot; alt=&quot;Possible Locations of the component&quot;&gt;
  &lt;figcaption&gt;Possible locations of the component&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The header element might be rendered with a smaller &lt;code&gt;font-size&lt;/code&gt; when the component is placed in a narrow location, like the sidebar.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/gridded-component.png&quot; alt=&quot;Component on a grid&quot;&gt;
  &lt;figcaption&gt;Header components on a grid.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can create a variant for this by modifying the component’s class. The markup would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;component component--small&amp;quot;&amp;gt;
  &amp;lt;!-- Contents of the component. --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the style for this variant is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component--small .component__header {
  font-size: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, on to the component’s styles. The same two rules still apply:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Size in &lt;code&gt;em&lt;/code&gt; if property should scale according to it’s &lt;code&gt;font-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Size everything else in &lt;code&gt;rem&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As with the header element, you can identify which properties to size in &lt;code&gt;em&lt;/code&gt; by seeing if they interact with the rest of the page. There are two different ways to think about building this component:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Properties of &lt;strong&gt;all inner elements&lt;/strong&gt; scale with the component’s &lt;code&gt;font-size&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Properties of &lt;strong&gt;some inner elements&lt;/strong&gt; scale with the component’s &lt;code&gt;font-size&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s build the component in both ways and you’ll see what I mean.&lt;/p&gt;
&lt;h2 id=&quot;case-1%3A-properties-of-all-elements-scale-with-the-component%E2%80%99s-font-size&quot;&gt;Case 1: Properties of all Elements Scale With The Component’s Font-Size&lt;/h2&gt;
&lt;p&gt;Let’s begin with an example of what such a component looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/case1.gif&quot; alt=&quot;Case 1 Component&quot;&gt;
  &lt;figcaption&gt;How component resizes (Case 1)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Notice how the &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; of all elements within the component change at the same time?&lt;/p&gt;
&lt;p&gt;If your component behaves in this manner when resized, you need to size everything in &lt;code&gt;em&lt;/code&gt;s. The code then becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  background: white;
  border: 2px solid #7F7CFF;
}

.component__header {
  font-size: 2em;
  padding: 0.5em 0.75em; /* Changed padding into em */
  background: #7F7CFF;
  margin: 0;
}

.component p {
  padding-left: 1.5em; /* Changed padding into em */
  padding-right: 1.5em; /* Changed padding into em */
  margin: 1.5em 0; /* Changed margin into em */
}

// Small variant
.component--small .component__header {
  font-size: 1em;
  padding-left: 1.5em; /* Added em-sized padding */
  padding-right: 1.5em; /* Added em-sized padding */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, to activate the change in sizes, all you have to do is to change the component’s &lt;code&gt;font-size&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  // Other styles
  @media (min-width: 800px) {
    font-size: 1.5em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/case1.gif&quot; alt=&quot;Case 1 Component&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;So far so good.&lt;/p&gt;
&lt;p&gt;Now, let’s bring the complexity up a bit.&lt;/p&gt;
&lt;p&gt;Imagine if you had a grid like this. The vertical and horizontal spaces between each grid item needs to remain the same across all devices (for good aesthetics).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/component-grid2.png&quot; alt=&quot;Grid with equal margins&quot;&gt;
  &lt;figcaption&gt;Equal margins on a 1 + 2 grid!&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The markup for this grid is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;grid&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;component&amp;quot;&amp;gt; &amp;lt;!-- component --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;grid-item&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;component component--small&amp;quot;&amp;gt; &amp;lt;!-- A --&amp;gt; &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;component component--small&amp;quot;&amp;gt; &amp;lt;!-- B --&amp;gt; &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve set the gutter width between each grid item to be &lt;code&gt;2em&lt;/code&gt; at a root &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt;. In order words, the computed width of the gutter is &lt;code&gt;32px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The challenge in this grid is to separate small component A and small component B with a margin of &lt;code&gt;32px&lt;/code&gt;. We can try setting a &lt;code&gt;margin-top&lt;/code&gt; of component B to be &lt;code&gt;2em&lt;/code&gt; for start.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  /* Other styles */
  @media (min-width: 800px) {
    font-size: 1.25em;
  }
}

.component + .component {
  margin-top: 2em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, this doesn’t turn out well. The &lt;code&gt;margin&lt;/code&gt; between small component A and small component B is larger than the gutter width at a viewport above 800px.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/space-between-a-b.png&quot; alt=&quot;Vertical space between the two smaller components isn&#39;t equal to the gutters when the screen is wider than 800px&quot;&gt;
  &lt;figcaption&gt;Space between the two smaller components isn&#39;t equal to the gutters when the screen is wider than 800px &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Boo :(&lt;/p&gt;
&lt;p&gt;This happens because the &lt;code&gt;font-size&lt;/code&gt; of the component is &lt;code&gt;1.5em&lt;/code&gt; (or &lt;code&gt;24px&lt;/code&gt;) when the viewport is larger than &lt;code&gt;800px&lt;/code&gt;. Since the &lt;code&gt;font-size&lt;/code&gt; is &lt;code&gt;24px&lt;/code&gt;, the computed value of &lt;code&gt;2em&lt;/code&gt; becomes &lt;code&gt;48px&lt;/code&gt;, which is different from the &lt;code&gt;32px&lt;/code&gt; we were looking for.&lt;/p&gt;
&lt;p&gt;Grrrrr! (╯°□°）╯︵ ┻━┻&lt;/p&gt;
&lt;p&gt;Thankfully, we can solve this issue simply by sizing in &lt;code&gt;rem&lt;/code&gt; since we know where the gutter width needs to be sized according to the root &lt;code&gt;font-size&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component + .component {
  margin-top: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/grid-2--fixed.png&quot; alt=&quot;spaces between component A and component B are now equal&quot;&gt;
  &lt;figcaption&gt;Vertical space is now equal! :) &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Tada! Problem solved :) Here’s a Codepen for you to play with.&lt;/p&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;JGVXOo&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/JGVXOo/&quot;&gt;REM vs EM – Case 1&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Note: You need to use Flexbox to build this grid. I won’t explain how I built it since it’s way out of scope. Check out &lt;a href=&quot;https://www.smashingmagazine.com/2015/12/website-layout-tools-compared-flexbox-vs-susy/&quot;&gt;this article&lt;/a&gt; if you’re interested in finding out more about Flexbox&lt;/p&gt;
&lt;p&gt;Oh by the way, I didn’t come up with this technique. Chris Coyier &lt;a href=&quot;https://css-tricks.com/rems-ems/&quot;&gt;wrote about it&lt;/a&gt; a year ago. (He’s a genius).&lt;/p&gt;
&lt;p&gt;Anyway, are we good so far? If yes, let’s move on to case 2. If not, feel free to leave a comment and I’ll figure a way to explain this further.&lt;/p&gt;
&lt;h2 id=&quot;case-2%3A-properties-of-some-elements-scale-with-the-component%E2%80%99s-font-size&quot;&gt;Case 2: Properties of Some Elements Scale With The Component’s Font-Size&lt;/h2&gt;
&lt;p&gt;Case 1 is easy to understand. The downsides though, are that &lt;strong&gt;it’s tough for you to stay true to your modular scale, maintain good vertical rhythms and ensure that every component is sized well AT the same time&lt;/strong&gt; (especially when building responsive websites).&lt;/p&gt;
&lt;p&gt;Sometimes you just need to tune a small section of your component instead of resizing everything at once. For example, you might want to change only the header &lt;code&gt;font-size&lt;/code&gt; at a larger viewport.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/case2.gif&quot; alt=&quot;Case 2&quot;&gt;
  &lt;figcaption&gt;Only the headers change in size when the viewport changes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Let’s start styling this case by taking a look at the basic styles we wrote above:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  background: white;
  border: 2px solid #7F7CFF;
}

.component__header {
  font-size: 2em;
  padding: 0.5em 1.5rem;
  background: #7F7CFF;
  margin: 0;
}

.component p {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  margin: 1.5rem 0;
}

.component--small .component__header {
  font-size: 1em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we’re only changing the header’s &lt;code&gt;font-size&lt;/code&gt;s at &lt;code&gt;1200px&lt;/code&gt;, we can safely size every property in &lt;code&gt;rem&lt;/code&gt; (with the exception of the header’s &lt;code&gt;padding-top&lt;/code&gt; and &lt;code&gt;padding-bottom&lt;/code&gt; properties)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component {
  background: white;
  border: 2px solid #7F7CFF;
}

.component__header {
  font-size: 2rem; /* Sized in rem instead */
  padding: 0.5em 1.5rem; /* Sized in rem instead */
  background: #7F7CFF;
}

.component p {
  padding-left: 1.5rem; /* Sized in rem instead */
  padding-right: 1.5rem; /* Sized in rem instead */
  margin: 1.5rem 0; /* Sized in rem instead */
}

.component--small .component__header {
  font-size: 1rem; /* Sized in rem instead */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then change the header’s &lt;code&gt;font-size&lt;/code&gt; at different viewports by simply adding a media query on them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.component__header {
  font-size: 2rem;
  @media (min-width: 1200px) {
    font-size: 3rem
  }
}

.component--small .component__header {
  font-size: 1rem;
  @media (min-width: 1200px) {
    font-size: 1.5rem
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/rem-vs-em/case2.gif&quot; alt=&quot;Case 2&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Tada! Notice how only the header &lt;code&gt;font-size&lt;/code&gt; changes as we resize the browser now? That’s how you build for case 2 :)&lt;/p&gt;
&lt;p&gt;One more thing.&lt;/p&gt;
&lt;p&gt;Since it’s a best practice to use only a handful of typography sizes, &lt;strong&gt;I often abstract the &lt;code&gt;font-size&lt;/code&gt; property away from the component&lt;/strong&gt;. This way, it becomes &lt;strong&gt;easy to ensure that your typography remains consistent across all components.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h2 {
  font-size: 2rem;
  @media (min-width: 1200px) {
    font-size: 3rem
  }
}

h3 {
  font-size: 1rem;
  @media (min-width: 1200px) {
    font-size: 1.5rem
  }
}

.component__header { @extend h2; }
.component--small .component__header { @extend h3; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for case 2! Here’s a Codepen for you to play with:&lt;/p&gt;
&lt;p data-height=&quot;400&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;rxbJMQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/rxbJMQ/&quot;&gt;REM vs EM – Case 2&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a question you’ll probably ask, so I thought I’ll answer it first: &lt;strong&gt;Which method should you use&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;I’ll say it depends on your design.&lt;/p&gt;
&lt;p&gt;Personally, I find myself working with Case 2 more often than Case 1 since I prefer abstracting away typography into a file of it’s own.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So, should you use &lt;code&gt;rem&lt;/code&gt; or &lt;code&gt;em&lt;/code&gt;? I think that’s not the right question to ask. Both &lt;code&gt;rem&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; has their strengths and weaknesses, and they can be used together to help you make simple, modular components!&lt;/p&gt;
&lt;p&gt;On to you now! What’s your take on this debate? I’d love to hear what you think in the comments below! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Star Rating Re-imagined with Flexbox</title>
    <link href="https://zellwk.com/blog/star-rating/"/>
    <updated>2016-02-04T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/star-rating/</id>
    <content type="html">&lt;p&gt;The rating element is one UI pattern that you’ll find everywhere on the web. I found myself building another rating element for the second time in my life a few weeks ago.&lt;/p&gt;
&lt;p&gt;Since it’s my second time working on the same element, I wanted to challenge myself to come up with a way that uses as little code as possible. Consequently, I managed to come up with a way to build the rating element with only 50 lines of code (HTML, CSS and JavaScript combined), which is incredibly sweet! This article shows how I did it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;Before we begin, let’s first take a look at the final piece of work we’re building in this article:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;bEYRbV&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/bEYRbV/&quot;&gt;Ratings with Flex&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ready to move on? Let’s begin by talking about the markup used in this rating element.&lt;/p&gt;
&lt;h2 id=&quot;the-markup&quot;&gt;The Markup&lt;/h2&gt;
&lt;p&gt;I wanted the rating element to use as little code as possible. Naturally, this meant the markup should be simple. The ideal rating element would contain a markup similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;stars&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I also wanted to be able to use SVGs to create stars because they’re scalable and flexible. While doing so, I decided to use a combination of the &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; elements to create the stars. I’m not going to cover what &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; are in this article since it’s out of scope. If you want to find out more, do check out &lt;a href=&quot;https://css-tricks.com/svg-symbol-good-choice-icons/&quot;&gt;this article by&lt;/a&gt; Chris Coyier.&lt;/p&gt;
&lt;p&gt;Here’s the SVG I used for the star. You can build this easily with any vector tool like (Illustrator or Sketch):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;svg style=&amp;quot;display: none;&amp;quot;&amp;gt;
  &amp;lt;symbol id=&amp;quot;star&amp;quot; viewBox=&amp;quot;0 0 98 92&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;star&amp;lt;/title&amp;gt;
  &amp;lt;path stroke=&#39;#000&#39; stroke-width=&#39;5&#39; d=&#39;M49 73.5L22.55 87.406l5.05-29.453-21.398-20.86 29.573-4.296L49 6l13.225 26.797 29.573 4.297-21.4 20.86 5.052 29.452z&#39; fill-rule=&#39;evenodd&#39;/&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My markup for the rating element effectively became the following because of the SVGs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;stars&amp;quot;&amp;gt;
  &amp;lt;a class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;svg&amp;gt;&amp;lt;use xlink:href=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;svg&amp;gt;&amp;lt;use xlink:href=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;svg&amp;gt;&amp;lt;use xlink:href=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;svg&amp;gt;&amp;lt;use xlink:href=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;a class=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;svg&amp;gt;&amp;lt;use xlink:href=&amp;quot;star&amp;quot;&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all the markup I used in the rating element.&lt;/p&gt;
&lt;p&gt;I also had to change the sizes of the stars and ensure they were white at this point:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;svg {
  width: 2em;
  height: 2em;
  fill: white;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/stars.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next challenge at this point was to make sure the correct number of stars got filled up whenever a star was hovered on.&lt;/p&gt;
&lt;h2 id=&quot;filling-up-stars&quot;&gt;Filling up stars&lt;/h2&gt;
&lt;p&gt;Filling up an individual star is easy. All you have to do is to change the SVG’s fill property whenever the star is hovered in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.star:hover svg {
  fill: orange;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we want to do is to make sure all the stars to the left of the hovered stars get filled up as well. At first glance, there’s no way to do this without using some JavaScript trickery.&lt;/p&gt;
&lt;p&gt;Luckily, there’s a way to overcome this problem without using JavaScript. The trick is to use a combination of the general sibling selector (&lt;code&gt;~&lt;/code&gt;) and the flexbox &lt;code&gt;flex-flow&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Let’s first take a look at what &lt;code&gt;~&lt;/code&gt; does.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;~&lt;/code&gt; selector helps to select all sibling elements after itself. It can help us select all stars to the right of the hovered star:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.star:hover svg,
.star:hover ~ .star svg {
  fill: orange;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/gif-right-stars.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Knowing this, if we can reverse the elements such that the first star is the rightmost star, and the fifth star is the leftmost star, we can use &lt;code&gt;~&lt;/code&gt; to fill up the correct number of stars.&lt;/p&gt;
&lt;p&gt;Turns out, we can reverse elements with Flexbox’s &lt;code&gt;row-reverse&lt;/code&gt; value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.stars {
  display: flex;
  flex-flow: row-reverse;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try inspecting the stars once you’ve attached the &lt;code&gt;row-reverse&lt;/code&gt; property to &lt;code&gt;.stars&lt;/code&gt;. You’ll see something like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/row-reverse.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Notice how the first star in the DOM is now the rightmost star while the last star in the DOM is the leftmost star?&lt;/p&gt;
&lt;p&gt;Now, if you hover over the second star from the left, you’ll see that two stars are filled up. That’s exactly what we need!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/hover-left.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s dive deeper and see why this works.&lt;/p&gt;
&lt;p&gt;If you’re hovering over the second star from the left, you’re effectively hovering onto the fourth star in the DOM. The &lt;code&gt;.star:hover svg&lt;/code&gt; selector we used matches the fourth star and changes it’s fill to &lt;code&gt;orange&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.star:hover ~ .star svg&lt;/code&gt; selector matches any stars that come after the hovered star. In this case, that’s the fifth star (or the leftmost star). Hence, the leftmost star gets filled up with &lt;code&gt;orange&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Yay! Problem solved with only three lines of CSS! :)&lt;/p&gt;
&lt;p&gt;Let’s move on to the next challenge. If the user hovers over the second star on the left, we (visually) know that two stars are filled up. Now, all we need is to know how many stars are filled up programmatically so we can do something with it.&lt;/p&gt;
&lt;h2 id=&quot;detecting-the-number-of-stars&quot;&gt;Detecting the number of stars&lt;/h2&gt;
&lt;p&gt;With our current markup and CSS, the only way to detect the number of stars is to use JavaScript. Make sure you disable &lt;code&gt;pointer-events&lt;/code&gt; on the SVG elements before we move on since it’ll mess around with the JavaScript functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;svg {
  pointer-events: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re ready to move on once you have pointer events turned off.&lt;/p&gt;
&lt;p&gt;The general logic for getting the correct number of stars is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the total number of stars&lt;/li&gt;
&lt;li&gt;Find out which star is being clicked on.&lt;/li&gt;
&lt;li&gt;Calculate the correct number of stars filled.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finding the total number of stars is quite straightforward. We just need to get the total number of children elements within &lt;code&gt;.stars&lt;/code&gt;. Here’s the code if you used jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var totalStars = $(&#39;.stars&#39;).children().length
console.log(totalStars) // =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although jQuery is helpful, I encourage you to switch to using vanilla JavaScript since there’s nothing we can’t do without jQuery anymore. The code for the first part is just slightly more complicated. Here’s the implementation without using jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var starContainer = document.querySelector(&#39;.stars&#39;)
var starsNodeList = starContainer.children
var stars = Array.prototype.slice.call(starsNodeList);
var totalStars = stars.length

console.log(totalStars) // =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we first have to grab the children elements within the &lt;code&gt;.stars&lt;/code&gt; container with the &lt;code&gt;.children&lt;/code&gt; method. This method returns a HTML Node List.&lt;/p&gt;
&lt;p&gt;We can’t do anything with a HTML Node List, so we have to convert it into an array with &lt;code&gt;Array.prototype.slice.call()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once it’s converted into an array, we can use the &lt;code&gt;array.length&lt;/code&gt; method to get the total number of stars.&lt;/p&gt;
&lt;p&gt;A slightly condensed version of the above code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var starContainer = document.querySelector(&#39;.stars&#39;)
var stars = Array.prototype.slice.call(starContainer.children);
var totalStars = stars.length

console.log(totalStars) // =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to find out which star is being clicked on. Here’s the code if you used jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;.stars&#39;).on(&#39;click&#39;, function(e) {
  var index = $(e.target).index()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the code if you used vanilla JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;starContainer.addEventListener(&#39;click&#39;, function(e) {
  var index = stars.indexOf(e.target)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you did a &lt;code&gt;console.log()&lt;/code&gt; of the index, you’ll see that the index is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 if you clicked on the leftmost star.&lt;/li&gt;
&lt;li&gt;3 if you clicked on the second star.&lt;/li&gt;
&lt;li&gt;2 if you clicked on the third star.&lt;/li&gt;
&lt;li&gt;1 if you clicked on the fourth star.&lt;/li&gt;
&lt;li&gt;0 if you clicked on the fifth star.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/starsindex.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The number of stars filled is hence, the total number of stars minus the index. With jQuery, the code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;.stars&#39;).on(&#39;click&#39;, function(e) {
  var index = $(e.target).index()
  var count = totalStars - index

  // Do something with the count
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with vanilla JavaScript, the code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;starContainer.addEventListener(&#39;click&#39;, function(e) {
  var index = stars.indexOf(e.target)
  var count = totalStars - index

  // Do something with the count
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whoohoo!&lt;/p&gt;
&lt;p&gt;Here’s the problem: you’ll notice the count is 6 if you clicked on the right of the stars&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/02/starsindexoutside.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is because the flexed element spans across the entire width, so we’re still clicking on it. One way to resolve this is to add a &lt;code&gt;display: inline-block&lt;/code&gt; wrapper around the &lt;code&gt;.stars&lt;/code&gt; container. Another way is to make sure you listen to click events on the individual stars instead of the &lt;code&gt;.stars&lt;/code&gt; container. Either way is fine. I personally prefer the first method since it’s slightly more performant.&lt;/p&gt;
&lt;p&gt;There’s only one more thing to do: ensure the rating state is saved once the user clicks on it.&lt;/p&gt;
&lt;h2 id=&quot;saving-the-rating-state&quot;&gt;Saving the rating state&lt;/h2&gt;
&lt;p&gt;We can save the rating element’s state easily by adding a class like &lt;code&gt;is-selected&lt;/code&gt; whenever the user clicks on a star.&lt;/p&gt;
&lt;p&gt;Here’s how you do it with jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;.stars&#39;).on(&#39;click&#39;, function(e) {
  // ... get count and do something with count

  $(e.target).addClass(&#39;is-selected&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And how you do it with vanilla JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;starContainer.addEventListener(&#39;click&#39;, function(e) {
  // ... get count and do something with count

  e.target.classList.add(&#39;is-selected&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in your CSS, you can use the same &lt;code&gt;~&lt;/code&gt; trick to style the filled stars. Make sure you place this above the &lt;code&gt;.star:hover&lt;/code&gt; selectors so the lighter orange color kicks in whenever the user hovers over the stars again.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.star.is-selected svg,
.star.is-selected ~ .star svg {
  fill: #996300;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the user clicks on a new star rating, we want to update the new state. This means we should also remove all &lt;code&gt;is-selected&lt;/code&gt; classes from all &lt;code&gt;.star&lt;/code&gt; elements before adding the new &lt;code&gt;is-selected&lt;/code&gt; class to the star that was clicked on.&lt;/p&gt;
&lt;p&gt;Here’s how you do it in jQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;$(&#39;.stars&#39;).on(&#39;click&#39;, function(e) {
  // ... get count and do something with count
  $(e.target).siblings().removeClass(&#39;is-selected&#39;)
  $(e.target).addClass(&#39;is-selected&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And vanilla JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;starContainer.addEventListener(&#39;click&#39;, function(e) {
  // ... get count and do something with count

  stars.forEach(function(el) {
    el.classList.remove(&#39;is-selected&#39;)
  })
  e.target.classList.add(&#39;is-selected&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done! Here’s the demo for the &lt;a href=&quot;http://codepen.io/zellwk/pen/XXPKKO&quot;&gt;jQuery version&lt;/a&gt; and the &lt;a href=&quot;http://codepen.io/zellwk/pen/bEYRbV/&quot;&gt;vanilla JavaScript version&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;rtl-%2F-ltr&quot;&gt;RTL / LTR&lt;/h2&gt;
&lt;p&gt;While writing this article, I found out that Chris Coyier solved the same problem &lt;a href=&quot;https://css-tricks.com/star-ratings/&quot;&gt;3 years ago&lt;/a&gt; (Doh, I’m so slow!) by setting &lt;code&gt;unicode-bidi&lt;/code&gt; to &lt;code&gt;bidi-override&lt;/code&gt; and &lt;code&gt;direction&lt;/code&gt; to &lt;code&gt;rtl&lt;/code&gt;. These two settings combined achieves the same effect as reversing the rendering order of elements like &lt;code&gt;row-reverse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, the biggest credit still goes to Chris for creating this method so many years ago! :)&lt;/p&gt;
&lt;p&gt;The only benefit my Flexbox method provides over Chris’s method is that stars will automatically face the correct direction if you set the direction to &lt;code&gt;rtl&lt;/code&gt; or &lt;code&gt;ltr&lt;/code&gt;.&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;YwjZQv&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/YwjZQv/&quot;&gt;Ratings with Flex (RTL)&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;And thats all the code you’ll ever need for a rating element. It’s pretty cool to build this UI with so little code, isn’t it?&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Building a Simple CRUD Application with Express and MongoDB – Part 2</title>
    <link href="https://zellwk.com/blog/crud-express-and-mongodb-2/"/>
    <updated>2016-01-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/crud-express-and-mongodb-2/</id>
    <content type="html">&lt;p&gt;This article is the second part on creating a CRUD application with Express and MongoDB. We’re going to venture deep into the last two operations that were not covered in the &lt;a href=&quot;https://zellwk.com/blog/crud-express-mongodb/&quot;&gt;first part&lt;/a&gt; – &lt;strong&gt;UPDATE&lt;/strong&gt; and &lt;strong&gt;DELETE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Without further ado, let’s start the second part.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;crud---update&quot;&gt;CRUD - UPDATE&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;UPDATE&lt;/strong&gt; operation is used when you want to change something. It can only be triggered by browsers through a &lt;strong&gt;PUT&lt;/strong&gt; request. Like the &lt;strong&gt;POST&lt;/strong&gt; request, the &lt;strong&gt;PUT&lt;/strong&gt; request can either be triggered through JavaScript or through a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Let’s try triggering a &lt;strong&gt;PUT&lt;/strong&gt; request through JavaScript this time since we’ve already learned how to trigger a request through a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element while going through the &lt;strong&gt;POST&lt;/strong&gt; request in the previous article.&lt;/p&gt;
&lt;p&gt;For the purpose of this tutorial, we’re going to create a button that, when clicked on, will &lt;em&gt;replace the last quote written by Master Yoda&lt;/em&gt; with a quote written by Darth Vadar.&lt;/p&gt;
&lt;p&gt;To do so, we first add a &lt;code&gt;button&lt;/code&gt; into the &lt;code&gt;index.ejs&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;Replace last quote written by Master Yoda with a quote written by Darth Vadar&amp;lt;/h2&amp;gt;
  &amp;lt;button id=&amp;quot;update&amp;quot;&amp;gt; Darth Vadar invades! &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re also going to create an external JavaScript file to execute the &lt;strong&gt;PUT&lt;/strong&gt; request when the button is clicked. According to Express conventions, this file is placed in a folder called &lt;code&gt;public&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mkdir public
$ touch public/main.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we have to tell Express to make this &lt;code&gt;public&lt;/code&gt; folder accessible to the public by using a built-in middleware called &lt;code&gt;express.static&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.use(express.static(&#39;public&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once this is done, we can add the &lt;code&gt;main.js&lt;/code&gt; file to the &lt;code&gt;index.ejs&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- ... --&amp;gt;
&amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’re going to send the &lt;strong&gt;PUT&lt;/strong&gt; request when the button is clicked:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// main.js
var update = document.getElementById(&#39;update&#39;)

update.addEventListener(&#39;click&#39;, function () {
  // Send PUT Request here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The easiest way to trigger a &lt;strong&gt;PUT&lt;/strong&gt; request in modern browsers is to use the &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&quot;&gt;Fetch API&lt;/a&gt;. It is only supported on &lt;a href=&quot;http://caniuse.com/#search=fetch&quot;&gt;Firefox, Chrome and Opera&lt;/a&gt;, so you might want to use a &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;polyfill&lt;/a&gt; if you want to use Fetch on an actual project.&lt;/p&gt;
&lt;p&gt;We’re going to send the following fetch request to the server. Have a quick look at it and I’ll explain what it all means:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;fetch(&#39;quotes&#39;, {
  method: &#39;put&#39;,
  headers: {&#39;Content-Type&#39;: &#39;application/json&#39;},
  body: JSON.stringify({
    &#39;name&#39;: &#39;Darth Vader&#39;,
    &#39;quote&#39;: &#39;I find your lack of faith disturbing.&#39;
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ready to understand why the Fetch request is written this way? :)&lt;/p&gt;
&lt;p&gt;Fetch takes in two parameters. &lt;strong&gt;The first parameter&lt;/strong&gt; is a path. In this case, we’re sending the request to &lt;code&gt;/quote&lt;/code&gt;, which will be handled on our server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second parameter, &lt;code&gt;options&lt;/code&gt;,&lt;/strong&gt; is an optional object that allows you to control a number of different settings. The ones we used above are &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;headers&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;method&lt;/code&gt; is straightforward. We set the &lt;code&gt;method&lt;/code&gt; to &lt;code&gt;put&lt;/code&gt; because we’re sending a PUT request.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;headers&lt;/code&gt; here refers to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&quot;&gt;HTTP Headers&lt;/a&gt; you want to send to the server. It is an object with multiple key-value pairs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;body&lt;/code&gt; refers to the content you send to the server.&lt;/p&gt;
&lt;p&gt;One thing you may notice is that we’ve set the &lt;code&gt;Content-Type&lt;/code&gt; to &lt;code&gt;application/json&lt;/code&gt;. We’ve also converted Darth Vadar’s quote into JSON in the body with &lt;code&gt;JSON.stringify&lt;/code&gt;. We’re making these steps because we’re sending Darth Vadar’s quote in the JSON format (a standard format for sending information on the web) to the server.&lt;/p&gt;
&lt;p&gt;Unfortunately, our server doesn’t read JSON data yet. We can teach it to read JSON data by using the &lt;code&gt;bodyparser.json()&lt;/code&gt; middleware:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.use(bodyParser.json())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we’ve done everything above, we will be able to handle this &lt;strong&gt;PUT&lt;/strong&gt; request by using the &lt;code&gt;put&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.put(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  // Handle put request
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step, then, is to learn how to look for the last quote by Master Yoda and change it to a quote by Darth Vadar in MongoDB.&lt;/p&gt;
&lt;h2 id=&quot;updating-a-collection-in-mongodb&quot;&gt;Updating a Collection in MongoDB&lt;/h2&gt;
&lt;p&gt;MongoDB Collections come with a method called &lt;code&gt;findOneAndUpdate&lt;/code&gt; that allows us to change one item from the database. It takes in four parameters – &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt; and a &lt;code&gt;callback&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;db.collections(&#39;quotes&#39;).findOneAndUpdate(
  query,
  update,
  options,
  callback
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The first parameter, &lt;code&gt;query&lt;/code&gt;&lt;/strong&gt;, allows us to filter the collection through key-value pairs given to it. We can filter the &lt;code&gt;quotes&lt;/code&gt; collection for Master Yoda’s quotes by setting the &lt;code&gt;name&lt;/code&gt; to &lt;code&gt;Yoda&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  name: &#39;Yoda&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The second parameter, &lt;code&gt;update&lt;/code&gt;,&lt;/strong&gt; tells MongoDB what to do with the update request. It uses MongoDB’s &lt;a href=&quot;https://docs.mongodb.org/manual/reference/operator/update/&quot;&gt;update operators&lt;/a&gt; like &lt;code&gt;$set&lt;/code&gt;, &lt;code&gt;$inc&lt;/code&gt; and &lt;code&gt;$push&lt;/code&gt;. We will use the &lt;code&gt;$set&lt;/code&gt; operator since we’re changing Yoda’s quotes into Darth Vadar’s quotes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  $set: {
    name: req.body.name,
    quote: req.body.quote
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The third parameter, &lt;code&gt;options&lt;/code&gt;,&lt;/strong&gt; is an optional parameter that allows you to define additional stuff. Since we’re looking for the last quote by Yoda, we will set &lt;code&gt;sort&lt;/code&gt; within options to &lt;code&gt;{_id: -1}&lt;/code&gt;. This allows MongoDB to search through the database, starting from the newest entry.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  sort: {_id:-1}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s a possibility that there aren’t any quotes by Master Yoda in our database. MongoDB does nothing by default when this happens. We can force it to create a new entry if we set the &lt;code&gt;upsert&lt;/code&gt; option, which means insert (or save) if no entries are found, to true:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  sort: {_id: -1},
  upsert: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The final parameter is a callback function&lt;/strong&gt; that allows you to do something once MongoDB has replaced the final quote by Yoda with a quote by Darth Vadar. In this case, we can send the results back to the fetch request.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(err, result) =&amp;gt; {
  if (err) return res.send(err)
  res.send(result)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the entire &lt;code&gt;findOneAndUpdate&lt;/code&gt; command we’ve written over the previous few steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.put(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  db.collection(&#39;quotes&#39;)
  .findOneAndUpdate({name: &#39;Yoda&#39;}, {
    $set: {
      name: req.body.name,
      quote: req.body.quote
    }
  }, {
    sort: {_id: -1},
    upsert: true
  }, (err, result) =&amp;gt; {
    if (err) return res.send(err)
    res.send(result)
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, whenever someone clicks on the update button, the browser will send a &lt;em&gt;PUT&lt;/em&gt; request through Fetch to our Express server. Then, the server responds by sending the changed quote back to fetch. We can then handle the response within by chaining &lt;code&gt;fetch&lt;/code&gt; with a &lt;code&gt;then&lt;/code&gt; method. This is possible because Fetch returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; object.&lt;/p&gt;
&lt;p&gt;The proper way to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful&quot;&gt;check if fetch resolved successfully&lt;/a&gt; is to use the &lt;code&gt;ok&lt;/code&gt; method on the response object. You can then &lt;code&gt;return res.json()&lt;/code&gt; if you want to read the data that was sent from the server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch({ /* request */ })
.then(res =&amp;gt; {
  if (res.ok) return res.json()
})
.then(data =&amp;gt; {
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2016/01/put-data.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you are working on a fancy webapp, this is the part where you use JavaScript to update the DOM so users can see the new changes immediately. Updating the DOM is out of the scope of this article, so we’re just going to refresh the browser to see the changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch({ /* request */ })
.then(res =&amp;gt; {
  if (res.ok) return res.json()
})
.then(data =&amp;gt; {
  console.log(data)
  window.location.reload(true)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for the &lt;strong&gt;UPDATE&lt;/strong&gt; operation! Let’s move on to the final one – &lt;strong&gt;DELETE&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;crud---delete&quot;&gt;CRUD - DELETE&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;DELETE&lt;/strong&gt; operation can only be triggered through a &lt;strong&gt;DELETE&lt;/strong&gt; request. It’s similar to the &lt;strong&gt;UPDATE&lt;/strong&gt; request so it’s simple if you understand what we’ve done earlier.&lt;/p&gt;
&lt;p&gt;For this part, let’s learn to delete the first quote by Darth Vadar. To do so, we first have to add a button to the &lt;code&gt;index.ejs&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h2&amp;gt;Delete Darth Vadar&#39;s first quote&amp;lt;/h2&amp;gt;
  &amp;lt;button id=&amp;quot;delete&amp;quot;&amp;gt; Delete first Darth Vadar quote &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we’ll trigger a &lt;strong&gt;DELETE&lt;/strong&gt; request through Fetch whenever the delete button is clicked:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var del = document.getElementById(&#39;delete&#39;)

del.addEventListener(&#39;click&#39;, function () {
  fetch(&#39;quotes&#39;, {
    method: &#39;delete&#39;,
    headers: {
      &#39;Content-Type&#39;: &#39;application/json&#39;
    },
    body: JSON.stringify({
      &#39;name&#39;: &#39;Darth Vader&#39;
    })
  })
  .then(res =&amp;gt; {
    if (res.ok) return res.json()
  }).
  then(data =&amp;gt; {
    console.log(data)
    window.location.reload()
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then handle the event on our server side with the &lt;code&gt;delete&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.delete(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  // Handle delete event here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;deleting-an-entry-in-mongodb&quot;&gt;Deleting an entry in MongoDB&lt;/h2&gt;
&lt;p&gt;MongoDB Collections come with a method called &lt;code&gt;findOneAndDelete&lt;/code&gt; that allows us to remove one item from the database. It takes in three parameters – &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;options&lt;/code&gt; and a &lt;code&gt;callback&lt;/code&gt;. These parameters are exactly the same as the ones we used in &lt;code&gt;findOneAndUpdate&lt;/code&gt; when updating an entry in MongoDB. The only difference here is that there’s no &lt;code&gt;upsert&lt;/code&gt; within &lt;code&gt;options&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;db.collections(&#39;quotes&#39;).findOneAndDelete(
  query,
  options,
  callback
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember, we are trying to delete the first quote by Darth Vadar. To do so, we filter the &lt;code&gt;quotes&lt;/code&gt; collection by the name, “Darth Vadar”. The &lt;code&gt;query&lt;/code&gt; parameter is hence:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  name: req.body.name
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can skip the &lt;code&gt;options&lt;/code&gt; parameter since we don’t have to reverse the sorting order. Then, we can send a response back to the Fetch request in the callback function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(err, result) =&amp;gt; {
  if (err) return res.send(500, err)
  res.send({message: &#39;A darth vadar quote got deleted&#39;})
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete code for the delete handler is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.delete(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  db.collection(&#39;quotes&#39;).findOneAndDelete({name: req.body.name},
  (err, result) =&amp;gt; {
    if (err) return res.send(500, err)
    res.send({message: &#39;A darth vadar quote got deleted&#39;})
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, whenever somebody clicks on the delete button, the browser will send a &lt;em&gt;DELETE&lt;/em&gt; request through Fetch to our Express server. Then, the server responds by sending either an error or a message back.&lt;/p&gt;
&lt;p&gt;As before, we can reload the website when the fetch is successfully completed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch({ /* request */ })
.then(res =&amp;gt; {
  if (res.ok) return res.json()
})
.then(data =&amp;gt; {
  console.log(data)
  window.location.reload(true)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for the &lt;strong&gt;DELETE&lt;/strong&gt; operation!&lt;/p&gt;
&lt;h2 id=&quot;other-articles-in-this-series&quot;&gt;Other articles in this series&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Part 1: &lt;a href=&quot;https://zellwk.com/blog/crud-express-mongodb&quot;&gt;Building a Simple CRUD Application with Express and MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: This article&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;You have now learned all you need to know about creating simple applications with Node and MongoDB. Now, go forth and create more applications, young padawan. May the force be with you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building a Simple CRUD Application with Express and MongoDB</title>
    <link href="https://zellwk.com/blog/crud-express-mongodb/"/>
    <updated>2016-01-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/crud-express-mongodb/</id>
    <content type="html">&lt;p&gt;If you know me, you know that I started learning about the web without having gone through any computing courses in university previously. I didn’t dare to venture into server-side programming for a long time because of my background.&lt;/p&gt;
&lt;p&gt;I remember when I eventually picked up the courage to try, I had such a hard time understanding the documentations for Express, MongDB and Node that I gave up.&lt;/p&gt;
&lt;p&gt;One year later, I finally understood how to work with these tools. Then, I decided to write a comprehensive tutorial so you won’t have to go through the same headache I went through.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;crud%2C-express-and-mongodb&quot;&gt;CRUD, Express and MongoDB&lt;/h2&gt;
&lt;p&gt;CRUD, Express and MongoDB are big words for a person who has never touched any server-side programming in their life. Let’s quickly introduce what they are before we diving into the tutorial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/strong&gt; is a framework for building web applications on top of Node.js. It simplifies the server creation process that is already available in Node. In case you were wondering, Node allows you to use JavaScript as your server-side language.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt;&lt;/strong&gt; is a database. This is the place where you store information for your web websites (or applications).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt;&lt;/strong&gt; is an acronym for Create, Read, Update and Delete. It is a set of operations we get servers to execute (POST, GET, PUT and DELETE respectively). This is what each operation does:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create (POST)&lt;/strong&gt; - Make something&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read (GET)&lt;/strong&gt;_- Get something&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update (PUT)&lt;/strong&gt; - Change something&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delete (DELETE)&lt;/strong&gt;- Remove something&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we put CRUD, Express and MongoDB together into a single diagram, this is what it would look like:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://zellwk.com/images/2016/01/crud-express-mongo.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Does CRUD, Express and MongoDB makes more sense to you now?&lt;/p&gt;
&lt;p&gt;Great. Let’s move on.&lt;/p&gt;
&lt;h2 id=&quot;what-we%E2%80%99re-building&quot;&gt;What we’re building&lt;/h2&gt;
&lt;p&gt;We’re going to build an application simple list application that allows you to keep track of things within a list (like a Todo List for example).&lt;/p&gt;
&lt;p&gt;Well, a todo list is kind of boring. How about we make a list of quotes from Star wars characters instead? Awesome, isn’t it? Feel free to take a quick look at the &lt;a href=&quot;https://crud-express-mongo.herokuapp.com/&quot;&gt;demo&lt;/a&gt; before continuing with the tutorial. Also, you can find the &lt;a href=&quot;https://github.com/zellwk/crud-express-mongo&quot;&gt;finished code on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By the way, what we’re building isn’t a sexy single page app. We’re mainly focusing on how to use CRUD, Express and Mongo DB in this tutorial, so, more server-side stuff. I’m not going to emphasize on the styles.&lt;/p&gt;
&lt;p&gt;You’ll need two things to get started with this tutorial:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You aren’t afraid of typing commands into a shell. Check out &lt;a href=&quot;https://zellwk.com/blog/fear-of-command-line/&quot;&gt;this article&lt;/a&gt; if you currently are.&lt;/li&gt;
&lt;li&gt;You need to have &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node&lt;/a&gt; installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To check if you have Node installed, open up your command line and run the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should get a version number if you have Node installed. If you don’t, you can install Node either by downloading the installer from &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node’s website&lt;/a&gt; or downloading it through package managers like &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; (Mac) and &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; (Windows).&lt;/p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Start by creating a folder for this project. Feel free to call it anything you want. Once you navigate into it, run the &lt;code&gt;npm init&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;This command creates a &lt;code&gt;package.json&lt;/code&gt; file which helps you manage dependencies that we install later in the tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just hit enter through everything that appears. I’ll talk about the ones you need to know as we go along.&lt;/p&gt;
&lt;h2 id=&quot;running-node-for-the-first-time-in-your-life&quot;&gt;Running Node for the first time in your life&lt;/h2&gt;
&lt;p&gt;The simplest way to use node is to run the &lt;code&gt;node&lt;/code&gt; command, and specify a path to a file. Let’s create a file called &lt;code&gt;server.js&lt;/code&gt; to run node with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the execute the &lt;code&gt;server.js&lt;/code&gt; file, we want to make sure it’s running properly. To do so, simply write a &lt;code&gt;console.log&lt;/code&gt; statement in &lt;code&gt;server.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(&#39;May Node be with you&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, run &lt;code&gt;node server.js&lt;/code&gt; in your command line and you should see the statement you logged:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/node-log.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Great. Let’s move on and learn how to use Express now.&lt;/p&gt;
&lt;h2 id=&quot;using-express&quot;&gt;Using Express&lt;/h2&gt;
&lt;p&gt;We first have to install Express before we can use it in our application. Installing Express is pretty easy. All we have to do is run an install command with Node package manager (npm), which comes bundled with Node.&lt;/p&gt;
&lt;p&gt;Run the &lt;code&gt;npm install express --save&lt;/code&gt; command in your command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install express --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you’re done, you should see that npm has saved Express as a dependency in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/exp-package-json.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Next, we use express in &lt;code&gt;server.js&lt;/code&gt; by requiring it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&#39;express&#39;);
const app = express();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we want to do is to create a server where browsers can connect to. We can do so with the help of a &lt;code&gt;listen&lt;/code&gt; method provided by Express:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.listen(3000, function() {
  console.log(&#39;listening on 3000&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, run &lt;code&gt;node server.js&lt;/code&gt; and navigate to &lt;code&gt;localhost:3000&lt;/code&gt; on your browser. You should see a message that says “cannot get /”.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/cannot-get.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;That’s a good sign. It means &lt;strong&gt;we can now communicate to our express server through the browser&lt;/strong&gt;. This is where we begin CRUD operations.&lt;/p&gt;
&lt;h2 id=&quot;crud---read&quot;&gt;CRUD - READ&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;READ&lt;/strong&gt; operation is performed by browsers whenever you visit a webpage. Under the hood, browsers send a &lt;strong&gt;GET&lt;/strong&gt; request to the server to perform a READ operation. The reason we see the “cannot get /” error is because we have yet to send anything back to the browser from our server.&lt;/p&gt;
&lt;p&gt;In Express, we handle a &lt;strong&gt;GET&lt;/strong&gt; request with the &lt;code&gt;get&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(path, callback)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The first argument, &lt;code&gt;path&lt;/code&gt;&lt;/strong&gt;, is the path of the GET request. It’s anything that comes after your domain name.&lt;/p&gt;
&lt;p&gt;When we’re visiting &lt;code&gt;localhost:3000&lt;/code&gt;, our browsers are actually looking for &lt;code&gt;localhost:3000/&lt;/code&gt;. The path argument in this case is &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second argument is a callback function&lt;/strong&gt; that tells the server what to do when the path is matched. It takes two arguments, a request object and a response object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, function (request, response) {
  // do something here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now, let’s write “Hello World” back to the browser. We do so by using a &lt;code&gt;send&lt;/code&gt; method that comes with the response object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, function(req, res) {
  res.send(&#39;Hello World&#39;)
})
// Note: request and response are usually written as req and res respectively.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m going to start writing in ES6 code and show you how to convert to ES6 along the way as well. First off, I’m replacing &lt;code&gt;function()&lt;/code&gt; with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;ES6 arrow function&lt;/a&gt;. The below code is the same as the above code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.send(&#39;Hello World&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, restart your server by doing the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stop the current server by hitting &lt;code&gt;CTRL + C&lt;/code&gt; in the command line.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;node server.js&lt;/code&gt; again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, navigate to &lt;code&gt;localhost:3000&lt;/code&gt; on your browser. You should be able to see a string that says “Hello World”.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/get-hello-world.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Great. Let’s change our app so we serve an &lt;code&gt;index.html&lt;/code&gt; page back to the browser instead. To do so, we use the &lt;code&gt;sendFile&lt;/code&gt; method that’s provided by the &lt;code&gt;res&lt;/code&gt; object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  res.sendFile(__dirname + &#39;/index.html&#39;)
  // Note: __dirname is directory that contains the JavaScript source code. Try logging it and see what you get!
  // Mine was &#39;/Users/zellwk/Projects/demo-repos/crud-express-mongo&#39; for this app.
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the &lt;code&gt;sendFile&lt;/code&gt; method above, we told Express to serve an &lt;code&gt;index.html&lt;/code&gt; file that can be found in the root of your project folder. We don’t have that file yet. Let’s make it now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s put some text in our &lt;code&gt;index.html&lt;/code&gt; file as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;MY APP&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  May Node and Express be with you.
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart your server and refresh your browser. You should be able to see the results of your HTML file now.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/get-index.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This is how Express handles a &lt;strong&gt;GET&lt;/strong&gt; request (&lt;strong&gt;READ&lt;/strong&gt; operation) in a nutshell.&lt;/p&gt;
&lt;p&gt;At this point, you probably have realized that you need to restart your server whenever you make a change to &lt;code&gt;server.js&lt;/code&gt;. This is process is incredibly tedious, so let’s take a quick detour and streamline it by using a package called &lt;a href=&quot;https://nodemon.io/&quot;&gt;nodemon&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;enter-nodemon&quot;&gt;Enter Nodemon&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nodemon restarts the server automatically&lt;/strong&gt; whenever you save a file that the server uses. We can install Nodemon by using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install nodemon --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: The reason we’re using a &lt;code&gt;--save-dev&lt;/code&gt; flag here is because we’re only using Nodemon when we’re developing. This flag would save Nodemon as a &lt;code&gt;devDependency&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Moving on, Nodemon behaves exactly the same as node, which means we can run our server by calling &lt;code&gt;nodemon server.js&lt;/code&gt;. However, we can’t do it in the command line right now because Nodemon isn’t installed with a &lt;code&gt;-g&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;There’s one other way to run Nodemon – we can execute Nodemon from the &lt;code&gt;node_modules&lt;/code&gt; folder. The code looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./node_modules/.bin/nodemon server.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s a handful to type. One way to make it simpler is to create a &lt;code&gt;script&lt;/code&gt; key in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  // ...
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;dev&amp;quot;: &amp;quot;nodemon server.js&amp;quot;
  }
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can run &lt;code&gt;npm run dev&lt;/code&gt; to trigger &lt;code&gt;nodemon server.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Back to the main topic. We’re going to cover the &lt;strong&gt;CREATE&lt;/strong&gt; operation next.&lt;/p&gt;
&lt;h2 id=&quot;crud---create&quot;&gt;CRUD - CREATE&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;CREATE&lt;/strong&gt; operation is only performed by the browser if a &lt;strong&gt;POST&lt;/strong&gt; request is sent to the server. This POST request can be triggered either with JavaScript or through a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Let’s find out how to use a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element to create new entries for our &lt;em&gt;Star Wars&lt;/em&gt; quote app for this part of the tutorial.&lt;/p&gt;
&lt;p&gt;To do so, you first have to create a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element and add it to your &lt;code&gt;index.html&lt;/code&gt; file. You need to have three things on this form element:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An &lt;code&gt;action&lt;/code&gt; attribute,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;method&lt;/code&gt; attribute,&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;name&lt;/code&gt; attributes on all &lt;code&gt;&amp;lt;input&lt;/code&gt;&amp;gt; elements within the form.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form action=&amp;quot;/quotes&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;quote&amp;quot; name=&amp;quot;quote&amp;quot;&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; attribute tells the browser where to navigate to in our Express app. In this case, we’re navigating to &lt;code&gt;/quotes&lt;/code&gt;. The &lt;code&gt;method&lt;/code&gt; attribute tells the browser what request to send. In this case, it’s a POST request.&lt;/p&gt;
&lt;p&gt;On our server, we can handle this POST request with a &lt;code&gt;post&lt;/code&gt; method that Express provides. It takes the same arguments as the GET method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  console.log(&#39;Hellooooooooooooooooo!&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart your server (hopefully you’ve set up Nodemon so it restarts automatically) and refresh your browser. Then, enter something into your form element. You should be able to see &lt;code&gt;Hellooooooooooooooooo!&lt;/code&gt; in your command line.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/post-log.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Great, we know that Express is handling the form for us right now. The next question is, how do we get the input values with Express?&lt;/p&gt;
&lt;p&gt;Turns out, Express doesn’t handle reading data from the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element on it’s own. We have to add another package called &lt;a href=&quot;https://www.npmjs.com/package/body-parser&quot;&gt;body-parser&lt;/a&gt; to gain this functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install body-parser --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Express allows us to add middleware like body-parser to our application with the &lt;code&gt;use&lt;/code&gt; method. You’ll hear the term middleware a lot when dealing with Express. These things are basically plugins that change the request or response object before they get handled by our application. &lt;strong&gt;Make sure you place body-parser before your CRUD handlers!&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const express = require(&#39;express&#39;)
const bodyParser= require(&#39;body-parser&#39;)
const app = express()

app.use(bodyParser.urlencoded({extended: true}))

// All your handlers here...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;urlencoded&lt;/code&gt; method within body-parser tells body-parser to extract data from the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element and add them to the &lt;code&gt;body&lt;/code&gt; property in the &lt;code&gt;request&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Now, you should be able to see everything in the form field within the &lt;code&gt;req.body&lt;/code&gt; object. Try doing a &lt;code&gt;console.log&lt;/code&gt; and see what it is!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;app.post(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  console.log(req.body)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should be able to get an object similar to the following in your command line:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/post-log-req-body.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Hmmm. Master Yoda has spoken! Let’s make sure we remember Yoda’s words. It’s important. We want to be able to retrieve it the next time we load our index page.&lt;/p&gt;
&lt;p&gt;Enter the database, MongoDB.&lt;/p&gt;
&lt;h2 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h2&gt;
&lt;p&gt;We first have to install MongoDB through npm if we want to use it as our database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mongodb --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once installed, we can connect to MongoDB through the &lt;code&gt;MongoClient&lt;/code&gt;&#39;s connect method as shown in the code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const MongoClient = require(&#39;mongodb&#39;).MongoClient

MongoClient.connect(&#39;link-to-mongodb&#39;, (err, database) =&amp;gt; {
  // ... start the server
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next part is to get the correct link to our database. Most people store their databases on cloud services like &lt;a href=&quot;https://mlab.com/&quot;&gt;mLab&lt;/a&gt; (formerly MongoLab). We’re going to do same as well.&lt;/p&gt;
&lt;p&gt;So, go ahead and create an account with mLab. (It’s free.) Once you’re done, create a new MongoDB Deployment and set the plan to &lt;code&gt;sandbox&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongolab.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Once you’re done creating the deployment, head into it and create a database user and database password. &lt;strong&gt;Remember the database user and database password&lt;/strong&gt; because you’re going to use it to connect the database you’ve just created.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongolab-dbuser.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, grab the MongoDB url and add it to your &lt;code&gt;MongoClient.connect&lt;/code&gt; method. Make sure you use your database user and password!&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongo-dburl.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;MongoClient.connect(&#39;your-mongodb-url&#39;, (err, client) =&amp;gt; {
  // ... do something here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we want to start our servers only when the database is connected. Hence, let’s move &lt;code&gt;app.listen&lt;/code&gt; into the &lt;code&gt;connect&lt;/code&gt; method. We’re also going to create a &lt;code&gt;db&lt;/code&gt; variable to allow us to use the database when we handle requests from the browser. (&lt;strong&gt;Note:&lt;/strong&gt; Mongo’s &lt;code&gt;.connect()&lt;/code&gt; used to return the database directly, but they &lt;a href=&quot;https://github.com/mongodb/node-mongodb-native/blob/3.0.0/CHANGES_3.0.0.md#api-changes&quot;&gt;changed that&lt;/a&gt; in 3.0.0. The code is updated to use the newer method here.)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var db

MongoClient.connect(&#39;your-mongodb-url&#39;, (err, client) =&amp;gt; {
  if (err) return console.log(err)
  db = client.db(&#39;star-wars-quotes&#39;) // whatever your database name is
  app.listen(3000, () =&amp;gt; {
    console.log(&#39;listening on 3000&#39;)
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done setting up MongoDB. Now, let’s create a &lt;code&gt;quotes&lt;/code&gt; collection to store quotes for our application.&lt;/p&gt;
&lt;p&gt;By the way, &lt;strong&gt;a collection is a named location to store stuff&lt;/strong&gt;. You can create as many collections as you want. It can be things like “products”, “quotes”, “groceries”, or any other labels you choose.&lt;/p&gt;
&lt;p&gt;We can create the &lt;code&gt;quotes&lt;/code&gt; collection by using the string &lt;code&gt;quotes&lt;/code&gt; while calling MongoDB’s &lt;code&gt;db.collection()&lt;/code&gt; method. While creating the quotes collection, we can also save our first entry into MongoDB with the &lt;code&gt;save&lt;/code&gt; method simultaneously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once we’re done saving, we have to redirect the user somewhere&lt;/strong&gt; (or they’ll be stuck waiting forever for our server to move). In this case, we’re going to redirect them back to &lt;code&gt;/&lt;/code&gt;, which causes their browsers to reload.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.post(&#39;/quotes&#39;, (req, res) =&amp;gt; {
  db.collection(&#39;quotes&#39;).save(req.body, (err, result) =&amp;gt; {
    if (err) return console.log(err)

    console.log(&#39;saved to database&#39;)
    res.redirect(&#39;/&#39;)
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you enter something into the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, you’ll be able to see an entry in your MongoDB collection.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongodb-collection.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Whoohoo! Since we already have some quotes in the collection, why not try showing them to our user when they land on our page?&lt;/p&gt;
&lt;h2 id=&quot;showing-quotes-to-users&quot;&gt;Showing quotes to users&lt;/h2&gt;
&lt;p&gt;We have to do two things to show the quotes stored in mLab to our users.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get quotes from mLab.&lt;/li&gt;
&lt;li&gt;Use a template engine to display the quotes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go one step at a time.&lt;/p&gt;
&lt;p&gt;We can get the quotes from mLab by using the &lt;code&gt;find&lt;/code&gt; method that’s available in the &lt;code&gt;collection&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  var cursor = db.collection(&#39;quotes&#39;).find()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method returns a &lt;code&gt;cursor&lt;/code&gt; (a Mongo object) that probably doesn’t make sense if you &lt;code&gt;console.log&lt;/code&gt; it out.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongo-cursor.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The good news is, this &lt;code&gt;cursor&lt;/code&gt; object contains all quotes from our database. It also contains a bunch of other properties and methods that allow us to work with data easily. One such method is the &lt;code&gt;toArray&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;toArray&lt;/code&gt; method&lt;/strong&gt; takes in a callback function that allows us to do stuff with quotes we retrieved from mLab. Let’s try doing a &lt;code&gt;console.log()&lt;/code&gt; for the results and see what we get!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;db.collection(&#39;quotes&#39;).find().toArray(function(err, results) {
  console.log(results)
  // send HTML file populated with quotes here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/mongodb-get.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Great! You now see an array of quotes (I only have one right now). We’ve completed the first part – getting data from MongoLab. The next part is to generate a HTML that contains all our quotes.&lt;/p&gt;
&lt;p&gt;We can’t serve our &lt;code&gt;index.html&lt;/code&gt; file and expect quotes to magically appear because there’s no way to add dynamic content to a HTML file. What we can do instead, is to use template engines to help us out. Some popular template engines include Jade, Embedded JavaScript and Nunjucks.&lt;/p&gt;
&lt;p&gt;I’ve written extensively about the how and why of template engines in a &lt;a href=&quot;https://zellwk.com/blog/nunjucks-with-gulp/&quot;&gt;separate post&lt;/a&gt;. You might want to check it out if you have no idea what template engines are. I personally use (and recommend) Nunjucks as my template engine of choice. Feel free to check out the post to find out why.&lt;/p&gt;
&lt;p&gt;For this tutorial, we’re going to use &lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;Embedded JavaScript&lt;/a&gt; (&lt;code&gt;ejs&lt;/code&gt;) as our template engine because it’s the easiest to start with. You’ll find it familiar from the get-go since you already know HTML and JavaScript.&lt;/p&gt;
&lt;p&gt;We can use EJS by first installing it, then setting the &lt;code&gt;view engine&lt;/code&gt; in Express to &lt;code&gt;ejs&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install ejs --save
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.set(&#39;view engine&#39;, &#39;ejs&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the &lt;code&gt;view engine&lt;/code&gt; is set, we can begin generating the HTML with our quotes. This process is also called &lt;strong&gt;rendering&lt;/strong&gt;. We can use the &lt;code&gt;render&lt;/code&gt; object built into the &lt;code&gt;response&lt;/code&gt; object &lt;code&gt;render&lt;/code&gt; to do so. It has the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;res.render(view, locals)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The first parameter, &lt;code&gt;view&lt;/code&gt;&lt;/strong&gt;, is the name of the file we’re rendering. This file must be placed within a &lt;code&gt;views&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second parameter, &lt;code&gt;locals&lt;/code&gt;&lt;/strong&gt;, is an object that passes data into the view.&lt;/p&gt;
&lt;p&gt;Let’s first create an &lt;code&gt;index.ejs&lt;/code&gt; file within the &lt;code&gt;views&lt;/code&gt; folder so we can start populating data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir views
touch views/index.ejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, place the following code within &lt;code&gt;index.ejs&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul class=&amp;quot;quotes&amp;quot;&amp;gt;
  &amp;lt;% for(var i=0; i&amp;lt;quotes.length; i++) {%&amp;gt;
    &amp;lt;li class=&amp;quot;quote&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;&amp;lt;%= quotes[i].name %&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;span&amp;gt;&amp;lt;%= quotes[i].quote %&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% } %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See what I mean when I say you’ll find it familiar? In EJS, you can write JavaScript within &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; tags. You can also output JavaScript as strings if you use the &lt;code&gt;&amp;lt;%=&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Here, you can see that we’re basically looping through the &lt;code&gt;quotes&lt;/code&gt; array and creating strings with &lt;code&gt;quotes[i].name&lt;/code&gt; and &lt;code&gt;quotes[i].quote&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One more thing to do before we move on from the &lt;code&gt;index.ejs&lt;/code&gt; file. Remember to copy the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element from the &lt;code&gt;index.html&lt;/code&gt; file into this file as well. The complete &lt;code&gt;index.ejs&lt;/code&gt; file so far should be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;MY APP&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  May Node and Express be with you.

  &amp;lt;ul class=&amp;quot;quotes&amp;quot;&amp;gt;
  &amp;lt;% for(var i=0; i&amp;lt;quotes.length; i++) {%&amp;gt;
    &amp;lt;li class=&amp;quot;quote&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;&amp;lt;%= quotes[i].name %&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;span&amp;gt;&amp;lt;%= quotes[i].quote %&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
  &amp;lt;% } %&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;form action=&amp;quot;/quotes&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;quote&amp;quot; name=&amp;quot;quote&amp;quot;&amp;gt;
    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we have to render this &lt;code&gt;index.ejs&lt;/code&gt; file when handling the &lt;strong&gt;GET&lt;/strong&gt; request. Here, we’re setting the results (an array) as the &lt;code&gt;quotes&lt;/code&gt; array we used in &lt;code&gt;index.ejs&lt;/code&gt; above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(&#39;/&#39;, (req, res) =&amp;gt; {
  db.collection(&#39;quotes&#39;).find().toArray((err, result) =&amp;gt; {
    if (err) return console.log(err)
    // renders index.ejs
    res.render(&#39;index.ejs&#39;, {quotes: result})
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, refresh your browser and you should be able to see Master Yoda’s quotes.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://zellwk.com/images/2016/01/get-rendered.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;Um. You maybe only have one quote if you followed the tutorial step by step until this point. The reason I have multiple quotes is because I silently added more as I worked on the application.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We’ve covered a lot of ground in just 3000 words. Here are a few bullets to sum it all up. You have…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Created an Express Server.&lt;/li&gt;
&lt;li&gt;Learned to execute CREATE and READ operations.&lt;/li&gt;
&lt;li&gt;Learned to save and read from MongoDB.&lt;/li&gt;
&lt;li&gt;Learned to use a template engine like Embedded JS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two more operations to go, but we’ll leave it to the &lt;a href=&quot;https://zellwk.com/blog/crud-express-and-mongodb-2&quot;&gt;next post&lt;/a&gt;. Catch you there!&lt;/p&gt;
&lt;p&gt;Oh, let me know in the comments if you found this tutorial useful!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Everything I know about Responsive Web Typography</title>
    <link href="https://zellwk.com/blog/responsive-typography/"/>
    <updated>2016-01-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/responsive-typography/</id>
    <content type="html">&lt;p&gt;Responsive typography is a tough nut to crack. This was the best method I could come up with when I first started creating responsive websites:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;p {
  font-size: 16px;
}

@media (min-width: 800px) {
  p {
    font-size: 18px;
  }
}

/* Repeat for h1 - h6 and other type groups */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve learned a lot more about typography since then and picked up best practices like using relative units, vertical rhythms and meaningful typography scales.&lt;/p&gt;
&lt;p&gt;These new practices were wonderful. They made my websites look more pleasing to the eye. Implementing them, however, was a horrible experience.&lt;/p&gt;
&lt;p&gt;I had to write complex code and I found myself struggling to create responsive websites under tremendous time pressure.&lt;/p&gt;
&lt;p&gt;Now, after months of hacking, I’ve finally created a solution that I’m happy to share with you. It’s called Typi.&lt;/p&gt;
&lt;p&gt;Typi is great because it allows me to use the practices I’ve learned, and at the same time solves most of the problems I’ve encountered in 3 simple steps. Let me explain these three steps by walking you through the practices I use when working with responsive typography.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;practice-1%3A-increase-font-size-and-line-height-of-your-body-copy-as-screen-sizes-increase.&quot;&gt;Practice 1: Increase font-size and line-height of your body copy as screen sizes increase.&lt;/h2&gt;
&lt;p&gt;Reading on the mobile vs the desktop are two completely different experiences. You undoubtedly hold your device closer to you when you read on the mobile since the screen is smaller.&lt;/p&gt;
&lt;p&gt;Your desktop screen will be further away from you compared to the mobile. Hence, the same font-size on the desktop looks slightly smaller due to the further distance.&lt;/p&gt;
&lt;p&gt;To increase readability and compensate for the loss in size due to distance, we increase the font size.&lt;/p&gt;
&lt;p&gt;I first got to know of this practice through the &lt;a href=&quot;https://ia.net/know-how/responsive-typography-the-basics&quot;&gt;responsive typography basics&lt;/a&gt; post on &lt;a href=&quot;http://ia.net/&quot;&gt;ia.net&lt;/a&gt;. I highly suggest checking the post out if you’re unfamiliar with what I’m talking about.&lt;/p&gt;
&lt;p&gt;An implementation of this practice in Sass can be this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;

  @media (min-width: 800px) {
    font-size: 18px;
  }

  @media (min-width: 1200px) {
    font-size: 20px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: as we increase font sizes, we might also need to increase the line height to allow more breathing room between lines of text. With Sass, this can look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;
  line-height: 1.3;

  @media (min-width: 800px) {
    font-size: 18px;
  }

  @media (min-width: 1200px) {
    font-size: 20px;
    line-height: 1.4;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;practice-2%3A-use-a-modular-scale-for-your-typography&quot;&gt;Practice 2: Use a modular scale for your typography&lt;/h2&gt;
&lt;p&gt;It’s difficult to pick the font-size of your typographic elements (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;), especially if you’re trying to pull them out of thin air. A modular scale, also called typography scale, is a tool you can use to help you pick good typography sizes that flow well with the rest of your page.&lt;/p&gt;
&lt;p&gt;It is a sequence of numbers related to each other through a ratio (a number). It can be created by multiplying (or dividing) the font-size of your body copy with the ratio. The resultant number is then multiplied (or divided) again with the ratio.&lt;/p&gt;
&lt;figure&gt;
![](/images/2016/01/modular-scale.png)
&lt;figcaption&gt; A modular scale with ratio 1.333 and body copy of 16px &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;An implementation of modular scale at work with the above scale can be this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html { font-size: 16px }
h1 { font-size: 50px }
h2 { font-size: 37px }
h3 { font-size: 28px }
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, it’s not going to be so simple. If you remember the first practice we discussed earlier in this article, you’ll notice that the body font-size should change as your screen width changes.&lt;/p&gt;
&lt;p&gt;This becomes a problem when you have to change the typography sizes of &lt;em&gt;all your elements&lt;/em&gt; at &lt;em&gt;every breakpoint&lt;/em&gt; to ensure the scale stays consistent.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;
  line-height: 1.3;
  @media (min-width: 800px) {
    font-size: 18px;
  }

  @media (min-width: 1200px) {
    font-size: 20px;
    line-height: 1.4;
  }
}

h1 {
  font-size: 50px;
  @media (min-width: 800px) {
    font-size: 56px;
  }
  @media (min-width: 1200px) {
    font-size: 63px;
  }
}

h2 {
  font-size: 37px;
  @media (min-width: 800px) {
    font-size: 42px;
  }
  @media (min-width: 1200px) {
    font-size: 47px;
  }
}

h2 {
  font-size: 28px;
  @media (min-width: 800px) {
    font-size: 32px;
  }
  @media (min-width: 1200px) {
    font-size: 35px;
  }
}
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;The solution? Check out the next practice.&lt;/p&gt;
&lt;p&gt;Note: If you need help with choosing your starting font-size and ratio for your modular scale, I suggest reading this &lt;a href=&quot;http://alistapart.com/article/more-meaningful-typography&quot;&gt;article on meaningful typography&lt;/a&gt; by Tim Brown.&lt;/p&gt;
&lt;h2 id=&quot;practice-3%3A-use-relative-typography-units&quot;&gt;Practice 3: Use relative typography units&lt;/h2&gt;
&lt;p&gt;Relative units in CSS are percentages (&lt;code&gt;%&lt;/code&gt;), viewport units (&lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt;, &lt;code&gt;vmax&lt;/code&gt;) , the em unit (&lt;code&gt;em&lt;/code&gt;) and the rem unit (&lt;code&gt;rem&lt;/code&gt;). The ones commonly used to size typography are &lt;strong&gt;em&lt;/strong&gt; and &lt;strong&gt;rem&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can use both &lt;strong&gt;em&lt;/strong&gt; and &lt;strong&gt;rem&lt;/strong&gt; in the same manner to solve the problem we encountered in practice 2. To convert pixels into em, we take the target &lt;code&gt;font-size&lt;/code&gt; and divide it against the base-font size.&lt;/p&gt;
&lt;p&gt;Here’s how it would look:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;
  @media (min-width: 800px) {
    font-size: 18px;
  }
  @media (min-width: 1200px) {
    font-size: 20px;
  }
}

h1 { font-size: 3.125em; } // 50 ÷ 16 = 3.125
h2 { font-size: 2.3125em;} // 37 ÷ 16 = 2.3125
h3 { font-size: 1.75em; } // 28 ÷ 16 = 1.75
// ...

// Note: These are approximate values.
// The actual values derived from modularscale.com are 3.129em, 2.3353em and 1.769em respectively.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much better now!&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;OMmEqg&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/OMmEqg/&quot;&gt;Responsive Typography – Relative Units &lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;There are a few more problems. Notice how &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; becomes approximately &lt;code&gt;63px&lt;/code&gt; as the screen width increases to &lt;code&gt;1200px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;63px&lt;/code&gt; is pretty large. Reading the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; text starts to get uncomfortable already. A better decision might be to tone it down to 47px instead (size of &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When this happens, you might want to decrease the size of the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element since it’s a good practice to emphasize the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element. Sometimes, you might also need to change the &lt;code&gt;line-height&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;The code then becomes…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 16px;
  @media (min-width: 800px) {
    font-size: 18px;
  }
  @media (min-width: 1200px) {
    font-size: 20px;
  }
}

h1 {
  font-size: 3.129em;
  line-height: 1.2;

  @media (min-width: 1200px) {
    font-size: 2.3353em;
    line-height: 1.3;
  }
}

h2 {
  font-size: 2.3353em;
  @media (min-width: 1200px) {
    font-size: 1.769em;
  }
}

h3 {
  font-size: 1.769em;
  @media (min-width: 1200px) {
    font-size: 1.33em;
  }
}

// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh. Back to square one :(&lt;/p&gt;
&lt;p&gt;This is where &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt; comes in. Let’s take a break from the practices and see how Typi can help you.&lt;/p&gt;
&lt;h2 id=&quot;using-typi&quot;&gt;Using Typi&lt;/h2&gt;
&lt;p&gt;Typi is a Sass library that allows you to set up &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties of all your typographic elements in separate Sass maps. These maps can then be used to output code we see in the above situation. Here’s how it works.&lt;/p&gt;
&lt;p&gt;First, you need to setup a &lt;code&gt;$typi&lt;/code&gt; map. It looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: 16px,
  small: 18px,
  large: 20px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;null&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; are breakpoints.&lt;/p&gt;
&lt;p&gt;Typi automatically looks for a &lt;code&gt;$breakpoints&lt;/code&gt; map to create your media queries (which means it can integrate perfectly with &lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;mappy-breakpoints&lt;/a&gt;, a library I created to help with media queries).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  small: 800px,
  large: 1200px
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the &lt;code&gt;$typi&lt;/code&gt; map is set up, we call the &lt;code&gt;typi-base()&lt;/code&gt; mixin within the &lt;code&gt;html&lt;/code&gt; selector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  @include typi-base();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;typi-base()&lt;/code&gt; mixin creates the same styles we wrote for the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag in Practice 2. The only difference is that the font-sizes are stated in percentages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 100%; /* This means 16px */
}

@media all and (min-width: 800px) {
  html {
    font-size: 112.5%; /* This means 18px */
  }
}

@media all and (min-width: 1200px) {
  html {
    font-size: 125%; /* This means 20px */
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also mentioned that there might be a need to change &lt;code&gt;line-height&lt;/code&gt; values as the &lt;code&gt;font-size&lt;/code&gt; changes. You can change &lt;code&gt;line-height&lt;/code&gt; values easily in Typi by providing a second &lt;code&gt;line-height&lt;/code&gt; value to each breakpoint that requires it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$typi: (
  null: (16px, 1.3), // Sets line-height to 1.3
  small: 18px,
  large: (20px, 1.4) // Sets line-height to 1.4
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resultant CSS from our updated &lt;code&gt;$typi&lt;/code&gt; map is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;html {
  font-size: 100%; /* This means 16px */
  line-height: 1.3;
}

@media all and (min-width: 800px) {
  html {
    font-size: 112.5%; /* This means 18px */
  }
}

@media all and (min-width: 1200px) {
  html {
    font-size: 125%; /* This means 20px */
    line-height: 1.4;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the &lt;code&gt;$typi&lt;/code&gt; map, we can create other font-maps using the same format. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-map: (
  null: (3.129em, 1.2),
  large: (2.3353em, 1.3)
  );

$h2-map: (
  null: 2.3353em,
  large: 1.769em
  );

$h3-map: (
  null: 1.769em,
  large: 1.333em
  );
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we call each of these font-maps using the &lt;code&gt;typi&lt;/code&gt; mixin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 { @include typi($h1-map) }
h2 { @include typi($h2-map) }
h3 { @include typi($h3-map) }
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resultant CSS would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;h1 {
  font-size: 3.129em;
  line-height: 1.2;
}

@media (min-width: 1200px) {
  h1 {
    font-size: 2.3353em;
    line-height: 1.3;
  }
}

h2 {
  font-size: 2.3353em;
}

@media (min-width: 1200px) {
  h2 {
    font-size: 1.769em;
  }
}

h3 {
  font-size: 1.769em;
}

@media (min-width: 1200px) {
  h3 {
    font-size: 1.333em;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty neat huh? You’ll have to &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;download Typi&lt;/a&gt; to play with it. (It’s not available on Sassmeister or Codepen yet)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROTIP&lt;/strong&gt;: You can use the modular scale Sass mixin if you don’t want to write exact em values (like &lt;code&gt;1.769em&lt;/code&gt;) across different font maps.&lt;/p&gt;
&lt;p&gt;To do so, you have to &lt;a href=&quot;https://github.com/modularscale/modularscale-sass&quot;&gt;download the library&lt;/a&gt; and import it into your Sass file. Then, change the font maps such that it uses the &lt;code&gt;ms()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$h1-map: (
  null: (ms(4) 1.2),
  large: (ms(3), 1.3)
  );

$h2-map: (
  null: ms(3),
  large: ms(2)
  );

$h3-map: (
  null: ms(2),
  large: ms(1)
  );
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, in a nutshell, &lt;strong&gt;&lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt;&lt;/strong&gt; makes responsive typography easier by helping you &lt;strong&gt;write &lt;code&gt;font-size&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; properties at different breakpoints`&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that I’m done introducing you to Typi, let’s move on and talk about the final two practices (and some problems that I have yet to find a solution for).&lt;/p&gt;
&lt;h2 id=&quot;practice-4%3A-apply-vertical-rhythms&quot;&gt;Practice 4: Apply vertical rhythms&lt;/h2&gt;
&lt;p&gt;Vertical Rhythms is a concept from print design (I think), where we keep vertical spaces between elements on a page consistent (and relative) to each other. The idea is similar to using a typography scale – to allow elements on your page to flow well.&lt;/p&gt;
&lt;p&gt;In practice, we often use the &lt;code&gt;line-height&lt;/code&gt; property of the body copy as the base for a consistent vertical rhythm. Let’s say the body copy of your website has &lt;strong&gt;&lt;code&gt;line-height&lt;/code&gt; of 25px&lt;/strong&gt;. You’ll do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the &lt;strong&gt;vertical white space between elements&lt;/strong&gt; to a &lt;strong&gt;multiple of 25px&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;line-height of all text elements&lt;/strong&gt; to a &lt;strong&gt;multiple of 25px&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is how it might look like in CSS (Note: This hasn’t taken the three practices I mentioned above into account yet)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 18px;
  line-height: 25px;
}

// Resets margins
body, h1, p {
  margin: 0;
}

h1 {
  font-size: 63px;
  line-height: 75px;
  margin: 25px 0;
}

p + p {
  margin-top: 25px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;WrjOoa&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/WrjOoa/&quot;&gt;Vertical Rhythms in PX&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looks pretty good! Let’s take it a step further by changing the code above into relative units. While doing so, you’ll encounter the great em vs rem debate.&lt;/p&gt;
&lt;h2 id=&quot;em-vs-rem&quot;&gt;Em vs Rem&lt;/h2&gt;
&lt;p&gt;Let’s try converting the code first into &lt;strong&gt;ems&lt;/strong&gt;, then &lt;strong&gt;rems&lt;/strong&gt;. By the way, the &lt;a href=&quot;https://css-tricks.com/almanac/properties/l/line-height/&quot;&gt;best practices states that line-height values should be unitless&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 1.125em;
  line-height: 1.4; // This is 25.2px to be accurate
}

// Resets margins
body, h1, p {
  margin: 0;
}

h1 {
  // font size is 63.147px to be more precise
  font-size: 3.5082em; // 63.147 ÷ 18 = 3.5082em
  line-height: 1.1972; // 75.6 ÷ 63.147 =  1.1972
  margin: 0.3991em 0; // 25.2 ÷ 63.147 = 0.3991
}

p + p {
  margin-top: 1.4em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pay special attention to how we converted the &lt;code&gt;margin&lt;/code&gt; property on the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element into ems.&lt;/p&gt;
&lt;p&gt;Notice how we used &lt;code&gt;63.147px&lt;/code&gt; as the base for the division? This must be done because sizes &lt;strong&gt;calculated with ems are relative to it’s current font-size&lt;/strong&gt;. It often causes confusion and involves a lot of complex math.&lt;/p&gt;
&lt;p&gt;Now, here’s the kicker. Even though we tried to be as accurate as we can be, browsers don’t seem to cooperate with us. You’ll notice that our vertical rhythms start getting screwy.&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;jWmKKZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/jWmKKZ/&quot;&gt;jWmKKZ&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two problems contributed to this screwy behavior.&lt;/p&gt;
&lt;p&gt;First, we’re not 100% precise and accurate with our math. We could get more precise (like 10 decimal places), but that would make our code ugly as hell…&lt;/p&gt;
&lt;p&gt;Second, different browsers handle subpixel rounding issues differently. This means we’ll never be able to get pixel-perfect rhythms no matter how hard we try.&lt;/p&gt;
&lt;p&gt;Well, I don’t want to harp on subpixel rounding because there’s nothing much we can do.
Let’s take a look at how the &lt;code&gt;rem&lt;/code&gt; unit handles this complex math instead, shall we?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 1.125rem;
  line-height: 1.4; // This is 25.2px to be accurate
}

// Resets margins
body, h1, p {
  margin: 0;
}

h1 {
  font-size: 3.5082rem; // 63.147 ÷ 18 = 3.5082
  line-height: 1.1972; // 75.6 ÷ 63.147 = 1.1972
  margin: 1.4rem 0; // 25.2 ÷ 18 = 1.4
}

p + p {
  margin-top: 1.4rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we used &lt;code&gt;1.4rem&lt;/code&gt; on the &lt;code&gt;margin&lt;/code&gt; property instead of &lt;code&gt;0.3991em&lt;/code&gt;? The &lt;strong&gt;rem unit makes calculations&lt;/strong&gt; with vertical rhythms &lt;strong&gt;much simpler&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This doesn’t mean you should switch blindly to the &lt;code&gt;rem&lt;/code&gt; unit&lt;/strong&gt; though. Rems and em units are both useful, and they should be used for different purposes. I’ll write about this topic another day. For now, let’s come back to vertical rhythms.&lt;/p&gt;
&lt;p&gt;Now that we’ve converted our vertical rhythms into relative units, let’s take a look at how it fares when we combine it with practice one (&lt;code&gt;font-sizes&lt;/code&gt; and &lt;code&gt;line-heights&lt;/code&gt; should change when screen sizes change).&lt;/p&gt;
&lt;p&gt;We’re going to keep this example as simple as possible by using only one media-query. We’re also going to use the &lt;code&gt;rem&lt;/code&gt; unit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;html {
  font-size: 1.125em;
  line-height: 1.4;

  @media (min-width: 1200px) {
    font-size: 1.25em; // this is 20px
    // Slight change in line heights at 1200px
    line-height: 1.45 // this is 29px
  }
}

// Resets margins
body, h1, p {
  margin: 0;
}

h1 {
  font-size: 3.5082em;
  line-height: 1.1972;
  margin: 1.45rem 0;

  @media (min-width: 1200px) {
    // font-size is now 70.164px
    line-height: 1.24; // 29px * 3 ÷ 70.164 = 1.24
    margin: 1.45rem 0;
  }
}

p + p {
  margin-top: 1.4em;
  @media (min-width: 1200px) {
    margin-top: 1.45em
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ugh. We might have to add 20,000 media queries to change &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;line-height&lt;/code&gt; of all our elements with just this one change in the &lt;code&gt;line-height&lt;/code&gt; property on &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. We haven’t even talked about &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;border&lt;/code&gt; properties yet!&lt;/p&gt;
&lt;p&gt;(╯°□°）╯︵ ┻━┻&lt;/p&gt;
&lt;p&gt;So, here’s what I realized. &lt;strong&gt;It’s impossible to apply perfect responsive vertical rhythms across different browsers&lt;/strong&gt;. At least not with the current technology.&lt;/p&gt;
&lt;p&gt;What we can do instead is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can make do with &lt;code&gt;line-height&lt;/code&gt; properties of major typographic elements by eyeballing and using Typi.&lt;/li&gt;
&lt;li&gt;Try not to change the &lt;code&gt;line-height&lt;/code&gt; property of your body copy if you can. Things will become easier when &lt;a href=&quot;http://caniuse.com/#search=css%20var&quot;&gt;CSS variables&lt;/a&gt; are finally supported in  all major browsers.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;practice-5%3A-keep-text-measures-between-45---75-characters&quot;&gt;Practice 5: Keep text measures between 45 - 75 characters&lt;/h2&gt;
&lt;p&gt;Oh, this one is easy. Just remember this: one character is approximately 0.5em. A text measure between 45 - 75 characters means the width of your text element must be between 22.5em and 37.5em.&lt;/p&gt;
&lt;p&gt;From experience, I’m mostly concerned about text overflowing 75 characters. If your text goes below 45 characters, maybe it’s time to have a change of font sizes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;article {
  max-width: 30em;
  /* Anywhere between 22.5em to 37.5em. Use your discretion */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Responsive typography is hard. There are still no perfect answers we can rely on, but let’s try to make do for now.&lt;/p&gt;
&lt;p&gt;By the way, here’s the link to &lt;a href=&quot;https://github.com/zellwk/typi&quot;&gt;Typi&lt;/a&gt; again if you want to play with it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Year End Review – 2015</title>
    <link href="https://zellwk.com/blog/2015-review/"/>
    <updated>2016-01-06T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/2015-review/</id>
    <content type="html">&lt;p&gt;2015 has gone by in just a blink of an eye. I realized that I haven’t been taking stock of my life for the past 27 years. So, I decided to do a year-end review for the first time to end 2015 completely, and the begin 2016 anew.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-went-well&quot;&gt;What went well&lt;/h2&gt;
&lt;p&gt;The first thing that went well was doing this review. I only realized I focused too much on the negative aspects of my life that I completely forgot about the amazing things that happened to me. I became so much happier once I remembered these amazing things and discovered how far I’ve grown since 2014.&lt;/p&gt;
&lt;p&gt;Here’s a quick list of things I’ve done in 2015:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I got married&lt;/li&gt;
&lt;li&gt;I completed a major consulting project&lt;/li&gt;
&lt;li&gt;I updated Learning Susy.&lt;/li&gt;
&lt;li&gt;I wrote the Mappy Breakpoints library&lt;/li&gt;
&lt;li&gt;I volunteered for Devfest.Asia&lt;/li&gt;
&lt;li&gt;I wrote Automating Your Workflow.&lt;/li&gt;
&lt;li&gt;I gave a talk at CSSConf.Asia&lt;/li&gt;
&lt;li&gt;I got to know more developers in Singapore&lt;/li&gt;
&lt;li&gt;I taught people how to code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m unhappy about completing only 9 things this year. I know I could have done so much more, but I didn’t. I’ll talk about my unhappiness in the next section. For now, let’s talk about the good parts.&lt;/p&gt;
&lt;p&gt;Even though I only did 9 things, each item in this list has contributed greatly to my personal development. I’m incredibly grateful that I had the opportunity to do them.&lt;/p&gt;
&lt;p&gt;First of all, &lt;strong&gt;I got married early this year&lt;/strong&gt;, in February. Learning to live with my wife was challenging. I constantly found myself trying to change her into who I want her to be instead of accepting who she was, which resulted in large arguments and fights. I’m still learning how to accept her for who she is though. (This is the best thing that happened in 2015!)&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;I completed and shipped the largest website I’ve built to date&lt;/strong&gt;. This consulting project began in June 2014, and lasted till April 2015. I learned how to work with non-tech team members and became more patient along the way. I also learned how to deal with difficult clients (and how to deal with my displeasure).&lt;/p&gt;
&lt;p&gt;I told myself not to consult for a while after the gig ended, and &lt;strong&gt;redirected my efforts at updating &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt;&lt;/strong&gt;. I tried making new things like video tutorials and interviews with experts. I also tried increasing prices for Learning Susy. All in all, I’m glad I exposed myself to doing things that I’m scared of.&lt;/p&gt;
&lt;p&gt;Once I’m done with Learning Susy, I began collecting information on what people would like to read on my blog, which eventually led to my second book – &lt;a href=&quot;http://automateyourworkflow.com/&quot;&gt;Automating Your Workflow&lt;/a&gt;. Creating Automating Your Workflow was the toughest period this year. I’ll talk more about it in the next section.&lt;/p&gt;
&lt;p&gt;Moving on, &lt;strong&gt;I volunteered to help create the website for &lt;a href=&quot;http://devfest.asia/&quot;&gt;Devfest.Asia&lt;/a&gt;&lt;/strong&gt;, the largest community festival organized for developers in South-east Asia. Through Devfest.Asia, I managed to (finally) meet more developers in Singapore through this gig. This shows how much of an introvert I am :)&lt;/p&gt;
&lt;p&gt;I also &lt;strong&gt;&lt;a href=&quot;https://zellwk.com/blog/animating-svgs/&quot;&gt;spoke&lt;/a&gt; at &lt;a href=&quot;http://cssconf.asia/&quot;&gt;CSSConf.Asia&lt;/a&gt;&lt;/strong&gt;. This is the first conference I attended so far, and also the first conference I spoke at. CSSConf.Asia would always hold a place in my heart for granting me two firsts in my life.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;I managed to &lt;a href=&quot;http://www.smashingmagazine.com/2015/12/website-layout-tools-compared-flexbox-vs-susy/&quot;&gt;publish a post on Smashing Magazine&lt;/a&gt;&lt;/strong&gt;. This post meant a lot to me because I felt I wasn’t good enough to write for Smashing Magazine. It’s a crazy, irrational feeling because I know I’m good enough, and I already wrote for equally amazing sites like CSS-Tricks and Sitepoint! I’m glad I overcame this self-limiting belief.&lt;/p&gt;
&lt;p&gt;On the same note, &lt;strong&gt;I got criticized heavily&lt;/strong&gt; for the post I wrote for Smashing Magazine. Looking back, I love the fact that I got criticized. It gave me a chance to reflect and &lt;a href=&quot;https://zellwk.com/blog/trolls-and-expert-opinions/&quot;&gt;learn a lot more about myself&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what-didn%E2%80%99t-go-so-well&quot;&gt;What didn’t go so well&lt;/h2&gt;
&lt;p&gt;I don’t want to admit these, but there’s no use hiding them now. Here we go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m unhappy about how I handled my low-income period between April and November&lt;/strong&gt;. This was when I decided to stop freelancing to focus on updating Learning Susy and writing Automating Your Workflow.&lt;/p&gt;
&lt;p&gt;My income levels dropped drastically since I stopped working on freelance projects. I didn’t have additional income other than from Learning Susy at this point. I felt I couldn’t afford to fail when I worked on Automating Your Workflow.&lt;/p&gt;
&lt;p&gt;Money wasn’t the complete story. Since Learning Susy did well, I gave myself the additional pressure to create a product that would do equally well, or better.&lt;/p&gt;
&lt;p&gt;These two mentalities crippled me. I tried to make Automating Your Workflow perfect. So perfect that I delayed my launch date. Twice.&lt;/p&gt;
&lt;p&gt;I eventually launched Automating Your Workflow in November. Even then, it wasn’t perfect. Furthermore, it didn’t do as well as Learning Susy. So much for perfectionism and trying to control outcomes. Bummer :(&lt;/p&gt;
&lt;p&gt;After I launched Automating Your Workflow, I realized that the amount of money the book earned didn’t matter a lot to me. What’s more important was how it helped people. I was happy, even though it didn’t do as well as Learning Susy did.&lt;/p&gt;
&lt;p&gt;I also realized I didn’t have to worry about cash so much because I have already built up enough reserves to survive for a few months. Still, it would have been a better idea to get additional income while I worked on the book.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;I’m unhappy that I indulged in my weaknesses on many occasions&lt;/strong&gt;. There were even times where I hoped miracles would happen if I waited. They didn’t, obviously.&lt;/p&gt;
&lt;p&gt;One such example was an interaction with a logo designer I knew through a friend. We agreed to barter our services. She’ll create a logo for me while I’ll make her a website.&lt;/p&gt;
&lt;p&gt;It never happened, even though I tortured myself for months trying to follow up with her to work on her website.&lt;/p&gt;
&lt;p&gt;I didn’t want to admit this. Deep down inside, I was incredibly insecure of my logo design skills. I wanted to find someone capable enough to design the perfect logo. At the same time, I knew I didn’t have enough money to hire this awesome dude.&lt;/p&gt;
&lt;p&gt;This weakness was the premise that made me hold on to the designer. I finally decided to let her go after trying to follow up for 3 months.&lt;/p&gt;
&lt;p&gt;Third, &lt;strong&gt;I hate how ineffective I was&lt;/strong&gt;. I wanted to do so much more. I wanted to…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write one blog post per week. (I only wrote 22 this year)&lt;/li&gt;
&lt;li&gt;Complete the redesign of my website&lt;/li&gt;
&lt;li&gt;Create an application that allows you to download updated copies of my book without going through Gumroad.&lt;/li&gt;
&lt;li&gt;Learn React + Flux&lt;/li&gt;
&lt;li&gt;Write README and docs for libraries I’ve built&lt;/li&gt;
&lt;li&gt;Get in shape and run a marathon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I never did any of these. I eventually realized I gave myself crap excuses for not completing these tasks. I could have done them if I was more disciplined, and if I had the courage to push through my fears.&lt;/p&gt;
&lt;h2 id=&quot;lessons-i-learned&quot;&gt;Lessons I learned&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Act&lt;/strong&gt;. Don’t wait for miracles to happen. Nothing you want will ever happen if you don’t take the initiative and work on it. Also, do the thing that scares you the most.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understand&lt;/strong&gt;. Take stock of both your negative and positive feelings, as well as the cues your physical body is giving you. Dive deep into what these cues to find out how you actually work, then put them in action.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflect&lt;/strong&gt;. Figure out what made you fail to accomplish the tasks you’ve set out to do instead of beating yourself up. Are you succumbing to lame excuses or are you just impractical in your plans? Channel your energies into action and thought, which is more useful than blame.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discover&lt;/strong&gt;. Always seek to uncover the truth. Open your eyes to what the world is like. Stop hiding behind your illusions and fantasies. The world doesn’t revolve according to your wishes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;the-plan-for-2016&quot;&gt;The plan for 2016&lt;/h2&gt;
&lt;p&gt;I want to focus on the fundamentals for 2016 and resolve my ineffectiveness in 2015. This generally means getting things done.&lt;/p&gt;
&lt;p&gt;To do so, I’ll need to work on my courage, discipline, focus and ability to prioritize. I’ll also have to understand how I work in order to get things done as efficiently as possible.&lt;/p&gt;
&lt;p&gt;Here’s are the things I want to accomplish in 2016:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Work&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Write 52 blog posts&lt;/li&gt;
&lt;li&gt;Design and build 26 things&lt;/li&gt;
&lt;li&gt;Build one Wordpress / HTML theme&lt;/li&gt;
&lt;li&gt;Create 2 products / courses / books&lt;/li&gt;
&lt;li&gt;Speak at 1 conference&lt;/li&gt;
&lt;li&gt;Redesign my website&lt;/li&gt;
&lt;li&gt;Build the app I mentioned above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Play&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Learn to doodle. Aim to draw 10 illustrations.&lt;/li&gt;
&lt;li&gt;Travel to at least 3 places&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relationships&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Deepen relationship with parents, siblings and my wife.&lt;/li&gt;
&lt;li&gt;Go to meetups at least once a month&lt;/li&gt;
&lt;li&gt;Hang out more often with friends&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Health and Fitness&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Do 100 push ups in a single seating&lt;/li&gt;
&lt;li&gt;Run a full marathon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s almost everything I got out (at least what I remembered) from this year. What’s yours? What would you do in 2016?&lt;/p&gt;
&lt;p&gt;On to a powerful 2016 :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Animating SVGs (CSSConf.Asia talk)</title>
    <link href="https://zellwk.com/blog/animating-svgs/"/>
    <updated>2015-12-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/animating-svgs/</id>
    <content type="html">&lt;p&gt;I gave a talk about animating SVGs in CSSConf.Asia 2015. The video is finally ready and I’m super stoked to share it with you! Have a look and let me know what you think! :)&lt;/p&gt;
&lt;figure&gt;
&lt;iframe width=&quot;1200&quot; height=&quot;478&quot; src=&quot;https://www.youtube.com/embed/6fdIva47wZE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Trolls &amp; Expert Opinions – Lessons Learned From Publishing on a Popular Website</title>
    <link href="https://zellwk.com/blog/trolls-and-expert-opinions/"/>
    <updated>2015-12-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/trolls-and-expert-opinions/</id>
    <content type="html">&lt;p&gt;I recently published an article on Smashing Magazine. For those who don’t know, Smashing Magazine is a well respected website in the design and development world. It’s kind of like &lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; or &lt;a href=&quot;http://tinybuddha.com/&quot;&gt;Tiny Buddha&lt;/a&gt;, but for web designers and developers.&lt;/p&gt;
&lt;p&gt;I was incredibly proud of the article I published. It took weeks of effort and I was elated that I made a contribution to the world. I went to sleep feeling awesome about it.&lt;/p&gt;
&lt;p&gt;Unfortunately, I woke up feeling horrified when I looked at my twitter notifications the next day. Many people (mostly whom I don’t know) commented on my article, saying how “the author doesn’t know what he’s talking about”, that “it was a bad article”.&lt;/p&gt;
&lt;p&gt;Even people whom I know and respect said that they felt “confused and bizzare” that an article like mine appeared on a well-curated website like Smashing Magazine, and they were “getting worried” about the contents of the article.&lt;/p&gt;
&lt;p&gt;The same happened under the comments section on Smashing Magazine as well.&lt;/p&gt;
&lt;p&gt;What a great start to the day. What would you have felt, or did?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Well, I didn’t know what to do, nor feel. I guess I was devastated. The first thing I remembered doing was jumping through my email inbox, furiously searching thank-you notes that came from others who benefited from the article.&lt;/p&gt;
&lt;p&gt;I didn’t count how many there were, but I estimated maybe 20-30 combined from my email inbox, Twitter notifications and Smashing Magazine comments. That’s exclusive of the retweets and likes I saw on Twitter.&lt;/p&gt;
&lt;p&gt;And I got confused.&lt;/p&gt;
&lt;p&gt;Was the article &lt;em&gt;so bad that the experts had to comment on it?&lt;/em&gt; If that’s the case, why did so many people like and share the article, and generally found it useful?&lt;/p&gt;
&lt;p&gt;I didn’t know how to handle the situation anymore, so I reached out for help. Specifically, I contacted Miriam Suzanne, because I know he’s awesome, and he would know how to handle it.&lt;/p&gt;
&lt;p&gt;Here’s how the conversation went:&lt;/p&gt;
&lt;figure&gt;
![](/images/2015/12/advice-from-miriam.png)
&lt;/figure&gt;
&lt;p&gt;I started sobbing uncontrollably the minute I read his words. I never knew how bad it was hurting inside until this moment.&lt;/p&gt;
&lt;p&gt;Shortly later, I got comforted by other awesome folks like Jina, James Steinbach and Stu Robson. All folks from my industry and people whom I respected.&lt;/p&gt;
&lt;p&gt;I probably cried for about half an hour before I realized I had to get my act together and head to work. So I stopped thinking about it altogether.&lt;/p&gt;
&lt;p&gt;That night (or rather, five hours ago), I woke up at 2am and started pondering about the incident. I couldn’t get to sleep once I started thinking about it. I wanted to find out what I could learn from the incident, and form proper conclusions before moving on.&lt;/p&gt;
&lt;p&gt;Once I did, I wanted to write this article for whoever (myself included), might find themselves in similar situation in future. Or in Miriam’s words, interneted.&lt;/p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I Learned&lt;/h2&gt;
&lt;p&gt;The first thing I learned was that it’s awesome if you have a great support group. If I had been alone throughout this whole fiasco, I would probably have said something like this and went on with my life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;I’m just not good enough&lt;/em&gt; to write for blogs like Smashing Magazine yet.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;I shouldn’t feel hurt&lt;/em&gt; by people like this. &lt;em&gt;There’s still a lot for me to learn, to improve myself so I don’t get hurt&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Some people can just be bastards. Experts included.&lt;/li&gt;
&lt;li&gt;Fuck this shit. I don’t care anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can you imagine how such conclusions would adversely affect someone for the rest of his life? Well, I was on the verge of forming these conclusions myself. Luckily, Miriam replied quickly and stopped me from going down this rabbit hole of self destruction.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, who you ask for help is incredibly important. You should only ask people who have gone though the same pain, lived through it, and know how to give advice.&lt;/p&gt;
&lt;p&gt;The reason I say this is because my wife saw me crying in bed when she woke up. Naturally, she was concerned and asked what happened (I’ll be damned if she doesn’t!). Yet, what she said to me after hearing what I had to say &lt;em&gt;made me feel like a fool&lt;/em&gt;. That I should have known better, that I shouldn’t take what others say seriously.&lt;/p&gt;
&lt;p&gt;Offhand note to self: I always get it wrongly when she shows her concern, but I’m so glad she tried!&lt;/p&gt;
&lt;p&gt;Anyway, enough about how awful I am at interpreting my wife’s concerns. Let’s move on to the next point I want to make.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Third&lt;/em&gt;, it is important to sit down and reflect on the reality of what has happened, and not just say “I’ll learn from it” and move on. More often than not, you’ll take the dangerous conclusions you formed when feeling hurt, apply that into your life. I know it would have happened to me.&lt;/p&gt;
&lt;p&gt;Here, I first had to realize that I have the tendency to shrug things off and forget about it. I’ll say things like “I’ll just have to do better next time” without sitting down and reflecting.&lt;/p&gt;
&lt;p&gt;So, I say to reflect on the reality of what happened. How do we reflect? What is the reality?&lt;/p&gt;
&lt;p&gt;There are two parts of the equation here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My reality&lt;/li&gt;
&lt;li&gt;Truth of how the world works&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I had to ask myself this question: &lt;strong&gt;&amp;quot;Why did I react so strongly to these comments?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After thinking about it, I realized I wouldn’t have taken the comments seriously if those who commented were people I didn’t know. I’d just treat them as trolls, throw in the hashtag #hatersgonnahate and ignore them entirely.&lt;/p&gt;
&lt;p&gt;What hurt me, the part where I reacted to strongly, was that the experts I looked up to had similar comments!&lt;/p&gt;
&lt;p&gt;“Why didn’t they understand me?!”, I kept thinking to myself. I thought I made my point incredibly clear while writing the article. Yet, the reactions and comments I get are &lt;strong&gt;EXACTLY THE SAME THINGS&lt;/strong&gt; I’d concluded in the article itself! And they are “worried and confused” over my article?&lt;/p&gt;
&lt;p&gt;That conversation with myself went downhill quickly. Just like how an avalanche builds up quickly from a little snowball:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“Am I not making myself clear?”&lt;/li&gt;
&lt;li&gt;“Are my concepts wrong?”&lt;/li&gt;
&lt;li&gt;“Is it that bad?”&lt;/li&gt;
&lt;li&gt;“Am I harming more than helping?”&lt;/li&gt;
&lt;li&gt;“Should I ask Smashing Magazine to take down my article?”&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;“Am I worthless?”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s dangerous. No wonder I felt like shit.&lt;/p&gt;
&lt;p&gt;As I sat down and tried to figure out why the conversation went this way, I realized that I have this deep-rooted belief that great people are rational. They would think things through before shooting their mouth off, and whatever they say holds truth. This was the reality I held in my mind.&lt;/p&gt;
&lt;p&gt;Understanding my reality was a revelation. It resulted in a complete shift in my perspective and my expectation of human beings.&lt;/p&gt;
&lt;p&gt;In reality, people aren’t rational at all. We already know from research done by people like Dan Arielly. If you don’t, have a look at &lt;a href=&quot;http://www.amazon.com/Predictably-Irrational-Revised-Expanded-Edition/dp/0061353248&quot;&gt;Predictably Irrational&lt;/a&gt;. It’s guaranteed to blow your mind.&lt;/p&gt;
&lt;p&gt;Since people aren’t rational, it’s ridiculous to expect that experts are completely rational and understanding 100% of the time.&lt;/p&gt;
&lt;p&gt;They’re people too! They have their lives, their beliefs and their emotions.&lt;/p&gt;
&lt;p&gt;Sometimes they get grumpy because it’s a bad day in their lives. It’s gloomy, it’s rainy, and they lose control over their better selves. We all do.&lt;/p&gt;
&lt;p&gt;The question then, is &lt;em&gt;“what made them react so much to what I said?”&lt;/em&gt;, so much that it prompted a reaction from them to lash out at me through their tweets and comments?&lt;/p&gt;
&lt;p&gt;Discounting bastards who shoot their mouth off without thinking, I believe it’s because the things I said triggered their deeply held beliefs, just like how mine got triggered when they “got worried” over my article.&lt;/p&gt;
&lt;p&gt;As experts, they’re teachers. They’re may feel that they’re responsible for educating the community, They may believe (and pride) themselves for teaching only the &lt;em&gt;correct&lt;/em&gt; solutions people &lt;em&gt;should&lt;/em&gt; be using, and hence, are incredibly apprehensive about comparisons done in their industry. They may even go as far as worrying about the terminology used in articles.&lt;/p&gt;
&lt;p&gt;As an author of two technical books so far, I share the same apprehension. I have the same belief system, that I should only teach correct things to students who are learning, &lt;em&gt;so they don’t fall into a trap of jumping to conclusions quickly&lt;/em&gt;, which is so prevalent in the world of web development.&lt;/p&gt;
&lt;p&gt;That’s about everything I wanted to say in this article. There are two things to quickly summarize:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find people that can support you when shit happens&lt;/li&gt;
&lt;li&gt;Dig deep within yourself to discover the truth of what’s happening. Then, learn from it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, one last note to experts who happen to be reading this. I sincerely appreciate what you do, you’ve been a great help to the community.&lt;/p&gt;
&lt;p&gt;But please, remember your words weigh twenty thousand times more compared to other people. Remember that there’s someone else on the other side of the internet, that whatever you’re saying may hurt them so badly that they’ll never find the courage to stand up again. You’ll never know who these silent sufferers are, and you’ll never know how many bright talents you have accidentally stifled.&lt;/p&gt;
&lt;p&gt;Please be careful with your words. And if you want to comment on anything, please explain everything you want to say. Don’t let us try to read your mind and destroy ourselves in the process.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Website Layout Tools Compared—Flexbox Vs. Susy</title>
    <link href="https://zellwk.com/blog/https:/www.smashingmagazine.com/2015/12/website-layout-tools-compared-flexbox-vs-susy/"/>
    <updated>2015-12-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.smashingmagazine.com/2015/12/website-layout-tools-compared-flexbox-vs-susy/</id>
    <content type="html">&lt;p&gt;Flexbox has become one of the most popular tools for creating website layouts. Susy is another layout tool that has gained popularity with the Sass community over the last few years.&lt;/p&gt;
&lt;p&gt;Many developers I’ve spoken with are unsure which tool is best for creating layouts for their websites. Some feel that flexbox is powerful enough to handle all of their layout problems. However, they are unsure whether to learn it because of its confusing syntax. Others feel that Susy is much simpler and prefer its simplicity to flexbox.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Overcoming Your Fears</title>
    <link href="https://zellwk.com/blog/overcoming-your-fears/"/>
    <updated>2015-11-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/overcoming-your-fears/</id>
    <content type="html">&lt;p&gt;“Thanks for helping to organize Devfest.Asia!” Someone said to me as the largest community-organized web developer festival in South-east Asia draws to a close. “I really enjoyed it!”.&lt;/p&gt;
&lt;p&gt;I should be happy when I hear things like this. Right? Well, I thought so too. But I didn’t feel it.&lt;/p&gt;
&lt;p&gt;Deep down inside, instead of happiness, I feel a stab of pain whenever someone thanked me for organizing Devfest.Asia.&lt;/p&gt;
&lt;p&gt;Strange, isn’t it? I couldn’t explain this feeling for a long time.&lt;/p&gt;
&lt;p&gt;Now, I finally understood what has happened, and how it affects my life. I’d like to share this story since it might affect yours positively too.&lt;/p&gt;
&lt;p&gt;Note: This would be an interesting read if you are someone who constantly feels you’re not good enough, or you haven’t done enough. For the rest, you can stop reading here now.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-backstory&quot;&gt;The Backstory&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://2015.devfest.asia/&quot;&gt;Devfest.Asia&lt;/a&gt; was a ten-day festival that contains over 20 developer related workshops and meetups. It also contained two major web conferences – &lt;a href=&quot;http://2015.cssconf.asia/&quot;&gt;CSSConf.Asia&lt;/a&gt; and &lt;a href=&quot;http://2015.jsconf.asia/&quot;&gt;JSConf.Asia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Four people organized this entire thing – &lt;a href=&quot;https://twitter.com/serrynaimo&quot;&gt;Thomas&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jacinsofialeew&quot;&gt;Jacin&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/iammoritz&quot;&gt;Moritz&lt;/a&gt; and me.&lt;/p&gt;
&lt;h2 id=&quot;the-pain&quot;&gt;The Pain&lt;/h2&gt;
&lt;p&gt;As I was saying, I felt a pain whenever someone thanked me for organizing Devfest.Asia. Upon further inspection, I found out that this pain turned out to be guilt for accepting the thanks.&lt;/p&gt;
&lt;p&gt;The guilt came from my perverse interpretation of the word – &lt;strong&gt;organizing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Organizing, to me, means doing a shit-load of things. It means putting the events together, curating the content, getting speakers, getting organizers, vendors, setting up the venue, making sure the events run smoothly …&lt;/p&gt;
&lt;p&gt;Bulk of the tasks mentioned here fell on Thomas’s and Jacin’s shoulders.&lt;/p&gt;
&lt;p&gt;Throughout Devfest.Asia, all I helped with was the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Created the Devfest.Asia Website&lt;/li&gt;
&lt;li&gt;Helped with registration&lt;/li&gt;
&lt;li&gt;Create CSSConf.Asia and JSConf.Asia animations&lt;/li&gt;
&lt;li&gt;Give a talk at CSSConf.Asia&lt;/li&gt;
&lt;li&gt;Help with setup and teardown of venues&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, to me, I &lt;em&gt;helped out&lt;/em&gt; at Devfest.Asia. I didn’t organize it, and hence didn’t feel that I deserved to be thanked for &lt;em&gt;organizing&lt;/em&gt; it. This explains the perverse guilt I felt whenever someone thanked me.&lt;/p&gt;
&lt;p&gt;Welcome to the world of someone who always thinks he’s not good enough! :)&lt;/p&gt;
&lt;h2 id=&quot;why-am-i-sharing-this%3F&quot;&gt;Why am I sharing this?&lt;/h2&gt;
&lt;p&gt;I want to share this with you because I want to help you realize that emotions can sometimes be ridiculous. There is no logical ground for them to stand on. Yet, emotions, especially negative ones, eat us up like no tomorrow.&lt;/p&gt;
&lt;p&gt;Fear is another emotion that runs rampant in all of us. We’re afraid that we’re not good enough. Not smart enough. Not fast enough.&lt;/p&gt;
&lt;p&gt;We feel that our opinions don’t matter. We don’t want to be laughed at. We don’t want to be exposed for being a fraud.&lt;/p&gt;
&lt;p&gt;These fears are excruciatingly real in our heads. Yet, they rarely, almost never, manifest in real life situations.&lt;/p&gt;
&lt;p&gt;In reality, contrary to our fears, most people feel opinions matter. We’re good enough, and they appreciate our work.&lt;/p&gt;
&lt;p&gt;The next time you catch yourself saying that you’re not good enough, take a step back and look at your fear. Are you really not good enough? Or are you allowing your fears to run rampant?&lt;/p&gt;
&lt;p&gt;Fear usually crumbles right before your eyes once you understand why they’re screaming at you. Once you do, you can find an answer to curb the fear, and you’ll be able to push through it.&lt;/p&gt;
&lt;p&gt;Want to write a book? Be a speaker? Start a blog? Please, go right ahead. We’re waiting for you to do it.&lt;/p&gt;
&lt;p&gt;Just to help you (and me) out, here are some ammunitions you can use against the irrational fear of not being good enough.&lt;/p&gt;
&lt;h2 id=&quot;ammunitions&quot;&gt;Ammunitions&lt;/h2&gt;
&lt;p&gt;Note: These are things I found to help me battle my “not good enough-ness”. They may or may not work for you.&lt;/p&gt;
&lt;h3 id=&quot;speaking-%2F-teaching&quot;&gt;Speaking / Teaching&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fears:&lt;/strong&gt; I only have less than 3 years of coding experience. What right do I have to speak to developers with way more qualifications than I do at a conference or talk?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ammo(s):&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Not everyone has the same experience as you do. They may have 10 years of backend experience, but maybe lesser than one year of actual frontend experience! If you do frontend, there’s a high chance you know something that they don’t!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speakers don’t need to have a solid 10,000 hours under their belt. Some awesome speakers, like &lt;a href=&quot;https://twitter.com/mybluewristband&quot;&gt;Jennifer Wong&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/kosamari&quot;&gt;Mariko Kosaka&lt;/a&gt;, have given over 5 talks (each) even though they only have 2-3 years of experience under their belt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you have at least one person who wants to learn the things you know? Start by teaching them if you’re super afraid of everything else. See how they react.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;organizing-events-%2F-meetups&quot;&gt;Organizing Events / Meetups&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fears:&lt;/strong&gt; My events won’t be good enough. Nobody would want to come. I don’t know anyone in the industry / area.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible ammo(s):&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nobody said you have to run an event. How about volunteering yourself to help at one? Organizers always need help, and that’s how I ended up helping at Devfest.Asia anyway :)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;writing-%2F-blogging&quot;&gt;Writing / Blogging&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fears:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My opinions don’t matter. Nobody would read what I would write&lt;/li&gt;
&lt;li&gt;English isn’t my main language&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Possible ammo(s)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read number (3) at the speaker section. Try answering one question someone asked you through your blog. Send that blog post to them and see how they react.&lt;/li&gt;
&lt;li&gt;You a &lt;em&gt;web developer&lt;/em&gt;. You’re not an &lt;em&gt;english teacher&lt;/em&gt;. You don’t need perfect english to write a blog post (although it’s an excellent asset to have). Try using multiple short sentences. Just like how I’m writing in this paragraph. Does it makes sense? Good. Now, try it.&lt;/li&gt;
&lt;li&gt;If you’re still &lt;em&gt;super uncomfortable with english&lt;/em&gt;, try writing in your native language. Russian, Chinese, Norwegian, whatever it is. People would appreciate you for doing so.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;It’s a hard battle to fight your fears. I know. I’m still constantly fighting mine. I won some battles. I have lost some as well.&lt;/p&gt;
&lt;p&gt;I don’t think it’s possible to ever feel fearless. Fear always comes back to bite you no matter your level of achievement. The only way to overcome it, then, is to pick up your courage, look at fear straight in the eyes, and move on even though you’re afraid.&lt;/p&gt;
&lt;p&gt;And that’s what I have done by publishing this weird, morbid article that begins with an irrational pain.&lt;/p&gt;
&lt;p&gt;Now, I’m waiting for your turn. If this article inspires you, I hope to see you write something and link it to the comments below. (You can tell me how turned off you are :))&lt;/p&gt;
&lt;p&gt;PS: Also apply to be a speaker at next year’s JSConf.Asia and CSSConf.Asia. It’s going to be a blast :)&lt;/p&gt;
&lt;p&gt;/rant /weird-encouragement&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrating From Bootstrap to Susy</title>
    <link href="https://zellwk.com/blog/migrating-from-bootstrap-to-susy/"/>
    <updated>2015-11-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/migrating-from-bootstrap-to-susy/</id>
    <content type="html">&lt;p&gt;One of the most asked questions I get about migrating from Bootstrap to Susy is this: “How do I build a Bootstrap-like grid with Susy?”&lt;/p&gt;
&lt;p&gt;I feel that if I answer this question, I’ll be leading you down a path that I don’t agree with. That’s why I hesitated with answering this question previously.&lt;/p&gt;
&lt;p&gt;In this article, I want to tell show you why this is a wrong question to ask, and what to do instead.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-shouldn%E2%80%99t-you-build-a-bootstrap-grid-with-susy%3F&quot;&gt;Why shouldn’t you build a Bootstrap grid with Susy?&lt;/h2&gt;
&lt;p&gt;Here’s a question I want you to ask yourself before you read on:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why are you migrating from Bootstrap to Susy?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many people I know switch to Susy because they’re sick of the bloated HTML that Bootstrap forces on them. They want a cleaner HTML for a change. They also want the flexibility that Susy provides.&lt;/p&gt;
&lt;p&gt;Ponder this question. Then read on if you are migrating from Bootstrap to Susy for the same reason.&lt;/p&gt;
&lt;p&gt;We need to look at the two types of grid systems out there in order to answer the question. I call them &lt;strong&gt;HTML grid systems&lt;/strong&gt; and &lt;strong&gt;CSS grid systems&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bootstrap is an exemplary example of a &lt;strong&gt;HTML grid system&lt;/strong&gt;. These systems come with predefined classes that you need to put into your markup. Another popular example is Foundation.&lt;/p&gt;
&lt;p&gt;Here’s an example of a markup with Bootstrap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-lg-8&amp;quot;&amp;gt;Gallery Item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-lg-4&amp;quot;&amp;gt;Gallery Item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS grid systems, on the other hand, allow you to make your grids with any HTML tag, class or even attributes. The markup for CSS systems are often cleaner, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;Gallery Item&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Gallery Item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we don’t need to add &lt;code&gt;.col-&lt;/code&gt; classes in here? That’s where a CSS Grid system shine.&lt;/p&gt;
&lt;p&gt;Susy is a tool that falls into the CSS grid system category. Yet, at the same time, it has the power and flexibility for you to create a HTML grid system (if you want to).&lt;/p&gt;
&lt;p&gt;I say &lt;strong&gt;it’s a wrong question to ask because you’re trying to write a HTML grid system with Susy when you dislike the bloatness that comes with a HTML grid system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On the contrary, I highly recommend you use Susy as a CSS grid system because they’re so much more powerful than HTML ones. Here’s why I think so:&lt;/p&gt;
&lt;h2 id=&quot;why-css-grid-systems-better-than-html-grid-systems&quot;&gt;Why CSS grid systems better than HTML grid systems&lt;/h2&gt;
&lt;p&gt;My argument boils down into two criteria: &lt;strong&gt;maintainability&lt;/strong&gt; and &lt;strong&gt;speed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt; refers to how quickly you can setup your grid for the first time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;, on the other hand, refers to how easy it is for you to add, change or remove grids from your website.&lt;/p&gt;
&lt;p&gt;Let’s explore speed first.&lt;/p&gt;
&lt;h3 id=&quot;criteria-%231%3A-speed&quot;&gt;Criteria #1: Speed&lt;/h3&gt;
&lt;p&gt;Assuming you have no knowledge of both HTML and CSS grids, you’ll find that you’ll make websites more quickly with HTML grids on the get go.&lt;/p&gt;
&lt;p&gt;This is because properties are already created for you, and you just have to follow their classes to make your grids.&lt;/p&gt;
&lt;p&gt;This only applies to simple websites though. Responsive websites are whole different story. They can become difficult to handle quickly since you have to deal with lots of grid classes.&lt;/p&gt;
&lt;p&gt;Let’s imagine we’re creating the following grid layout.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/11/layout-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you write grid classes with Bootstrap, your markup would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-8 col-lg-6&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4 col-lg-6&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you write grid classes with CSS based systems, your markup would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;I just want to point out two things here.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, when you write markup with HTML grids, you have to think of the layout as you work through the markup. If you aren’t exactly sure how this website is going to respond yet, you’ll have a hard time figuring out what classes you need.&lt;/p&gt;
&lt;p&gt;When you write HTML with CSS grids, all you have to do is write content for that page. You don’t have to be distracted and work on other things at the same time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This, I feel, is one of the most important benefits you get from CSS grids. You can focus on one thing at a time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;you’ll find CSS grids challenging at first,&lt;/strong&gt; especially if you have never wrote a layout manually before. You may find it so challenging that you’d think that it’s far easier to write HTML grids.&lt;/p&gt;
&lt;p&gt;Well, that’s normal at first. You won’t be awesome at something you’re doing for the first time.&lt;/p&gt;
&lt;p&gt;However, once you get the basics down flat, it might even come to a point where you build websites far quicker with CSS based grids. I experienced it personally.&lt;/p&gt;
&lt;p&gt;The crux is that you need to know the foundations of creating a layout. You have to learn things like &lt;a href=&quot;https://css-tricks.com/all-about-floats/&quot;&gt;floats&lt;/a&gt;, &lt;a href=&quot;https://css-tricks.com/snippets/css/clear-fix/&quot;&gt;clearfixes&lt;/a&gt;, &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css/&quot;&gt;mobile-first media queries&lt;/a&gt; …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once you learn these foundations, you’d be free to create any kind of layout you want to.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FYI, I’ll help you build your foundations in &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt; if you’re looking for a faster way to master them. If you’re not interested, feel free to browse around the web and form your own conclusions.&lt;/p&gt;
&lt;p&gt;Next, let’s talk about maintainability.&lt;/p&gt;
&lt;h3 id=&quot;criteria-%232%3A-maintainability&quot;&gt;Criteria #2: Maintainability&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Maintainability is important. To me, it’s more important than speed.&lt;/strong&gt; This is because you’ll be maintaining websites most of the time. You’ll either be changing grids around, or you’ll be adding new grids.&lt;/p&gt;
&lt;p&gt;Now, what happens if you had to change the above layout mid-way into your project such that the content is on the right, and the sidebar is on the left instead?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/11/layout-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you worked on a HTML-based grid, you’ll have to change the markup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4 col-lg-6&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-8 col-lg-6&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;There’s one big problem with this markup&lt;/strong&gt;. You’ll show the sidebar content, followed by your main content when people visit your websites on the mobile. That’s not what you want… right?&lt;/p&gt;
&lt;p&gt;Anyway, &lt;strong&gt;if you used a CSS grid instead, you don’t have to do anything to the markup.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you have to do is change the CSS. (Note: I’m writing SCSS here)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  @media screen (min-width: 900px) {
    width: /* width of 8 columns here */
    float: right;
  }
}

.sidebar {
  @media screen (min-width: 900px) {
    width: /* width of 4 columns here */
    float: left;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: I’m not using Susy in the above code to make it easier to understand. This is also the underlying code that Susy will create for you if you want such a layout.&lt;/p&gt;
&lt;p&gt;Cool. We established that it’s much easier to maintain CSS grids. &lt;strong&gt;There’s however, one major concern you should know about – You need rock-solid foundations on CSS layouts to write and maintain CSS grids&lt;/strong&gt;. This means you have to educate people on CSS layouts if you want them to help you maintain your grids.&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;So, if you want to migrate to Susy because you’re sick and tired to HTML grid systems, you should learn the foundations to CSS layouts and not hope to write Bootstrap-like classes with Susy.&lt;/p&gt;
&lt;p&gt;It’s going to be tough at first. But it’s the only (and best) way I know to migrate completely over from Bootstrap to Susy. If you are interested in learning the foundations and how to use Susy, I highly recommend you check out my book, &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;learning susy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: This article is my personal opinion. Miriam and the others at Susy are much less opinionated about how people use Susy.&lt;/p&gt;
&lt;p&gt;If you still want to build Bootstrap-like grids after reading through this article, I’m sure you have a very good reason to do so. In that case, I’ve whipped up a &lt;a href=&quot;http://codepen.io/zellwk/pen/JYBNqL#0&quot;&gt;quick demo on Codepen&lt;/a&gt; that you can use as a base to build your classes. I’ll explain how this works in a separate article.&lt;/p&gt;
&lt;p&gt;Oh yes, please share your reason with me in the comments below. I’d love to hear them :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>What to add to your Gitignore File</title>
    <link href="https://zellwk.com/blog/gitignore/"/>
    <updated>2015-10-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gitignore/</id>
    <content type="html">&lt;p&gt;What files should you push up into a Git repository? What files should you ignore? These are two questions that plague most beginners when they’re learning about Git.&lt;/p&gt;
&lt;p&gt;We’re going to explore these two questions in this article so you’ll never have doubts on whether you should ignore a file in the future.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let’s begin by understanding why we use Git.&lt;/p&gt;
&lt;h2 id=&quot;why-we-use-git&quot;&gt;Why we use Git&lt;/h2&gt;
&lt;p&gt;Git, as you know, is a version control system. We use git to help us track changes we made to our projects to make it easy to backtrack if we made any mistakes.&lt;/p&gt;
&lt;p&gt;Since Git is used to track changes, we want to keep the commit history as clean as possible. This means we try not to commit files that can introduce unnecessary conflicts. We also try not to commit files that aren’t needed by the project.&lt;/p&gt;
&lt;p&gt;Here’s a rule of thumb I created to help you understand when to ignore a file – &lt;strong&gt;A file should be ignored if any of the following is true:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The file is not used by your project&lt;/li&gt;
&lt;li&gt;The file is not used by anyone else in your team&lt;/li&gt;
&lt;li&gt;The file is generated by another process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep this rule of thumb in mind as we walk through the rest of this article. You’ll see why it helps you understand when to ignore a file :)&lt;/p&gt;
&lt;p&gt;Now, let’s take a look at common types of files we would ignore. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Operating system files&lt;/li&gt;
&lt;li&gt;Application files&lt;/li&gt;
&lt;li&gt;Language and framework files&lt;/li&gt;
&lt;li&gt;Files downloaded with package managers&lt;/li&gt;
&lt;li&gt;Credentials&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;operating-system-files&quot;&gt;Operating System Files&lt;/h2&gt;
&lt;p&gt;Operating system files are files that are used by your operating system (like Windows, Mac or Linux). Some examples of these files are &lt;code&gt;Thumbs.db&lt;/code&gt; (on Windows) and &lt;code&gt;.DS_Store&lt;/code&gt; (on Mac).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Thumbs.db&lt;/code&gt; is a file that allows Windows to display a thumbnail for each icon in the folder. &lt;code&gt;.DS_Store&lt;/code&gt; on the mac does a similar thing as &lt;code&gt;Thumbs.db&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since these files are used for display purposes by your computer, they don’t affect your project in any way. Furthermore, each member of the team likely has their own &lt;code&gt;.DS_Store&lt;/code&gt; or &lt;code&gt;Thumbs.db&lt;/code&gt; files on their computer, and it’s unlikely that they need yours to work on the project.&lt;/p&gt;
&lt;p&gt;If you do commit operating system files into your project, they will become unnecessary changes in the Git commit history. Hence, we ignore operating system files.&lt;/p&gt;
&lt;p&gt;Here are some recommended git ignore rules for each operating system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Windows.gitignore&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/macOS.gitignore&quot;&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Linux.gitignore&quot;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hang on to these rules for a while. We’ll come back to them later in the article.&lt;/p&gt;
&lt;p&gt;For now, let’s move on to the next category.&lt;/p&gt;
&lt;h2 id=&quot;application-files&quot;&gt;Application Files&lt;/h2&gt;
&lt;p&gt;Application files are files that are used by applications you installed on your computer. For most developers, these files are files that are generated by code editors. They can also be generated by other applications like Codekit.&lt;/p&gt;
&lt;p&gt;Like system files, application files are not required by your project at all. It is also unlikely that any of your team members would require these files in order for them to work on their project. Hence, we ignore application files.&lt;/p&gt;
&lt;p&gt;Github has compiled recommended gitignore rules for &lt;a href=&quot;https://github.com/github/gitignore/tree/master/Global&quot;&gt;a list of popular code editors&lt;/a&gt;. Take a look and see if you find yours.&lt;/p&gt;
&lt;p&gt;Not all editors produce files that are placed in the project folder. If you code editor is not in the list provided by Github, then it’s likely that it doesn’t produce any of such files.&lt;/p&gt;
&lt;p&gt;Hold on to these gitignore rules as well. We’ll come back to them later in this article.&lt;/p&gt;
&lt;p&gt;Let’s move on to the next category.&lt;/p&gt;
&lt;h2 id=&quot;language-and-framework-files&quot;&gt;Language and Framework Files&lt;/h2&gt;
&lt;p&gt;Language and framework files refer to files that are generated (or required) by the languages and frameworks you use for your project.&lt;/p&gt;
&lt;p&gt;For example, the sass gem produces a &lt;code&gt;.sass-cache&lt;/code&gt; folder whenever it compiles Sass into CSS. Node generates a &lt;code&gt;npm-debug.log&lt;/code&gt; in your project file whenever an error occurs with npm.&lt;/p&gt;
&lt;p&gt;Most of the time, these files aren’t required by your project to function, and hence, we don’t need to keep them in the repository.&lt;/p&gt;
&lt;p&gt;Once again, Github has been kind enough to compile a &lt;a href=&quot;https://github.com/github/gitignore&quot;&gt;list of recommended gitignore items&lt;/a&gt; for many languages and frameworks.&lt;/p&gt;
&lt;p&gt;Let’s move on to the next category.&lt;/p&gt;
&lt;h2 id=&quot;files-downloaded-with-package-managers&quot;&gt;Files downloaded with package managers&lt;/h2&gt;
&lt;p&gt;Package managers are tools to help you download libraries off the web quickly. Popular ones for frontend development are Bower and npm.&lt;/p&gt;
&lt;p&gt;Since files that are downloaded with package managers can be re-downloaded quickly by running one command (like &lt;code&gt;bower install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;), many people feel that they should ignore the &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;This is indeed what Node recommends. However, Bower suggests that you should check in the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;This discrepancy has left many people feeling confused. Thankfully Addy Osmani stepped up and discussed &lt;a href=&quot;http://addyosmani.com/blog/checking-in-front-end-dependencies/&quot;&gt;this issue&lt;/a&gt; over on &lt;a href=&quot;http://addyosmani.com/blog/&quot;&gt;his blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recommend that you have a look at Addy’s article to have a clearer picture between the two viewpoints.&lt;/p&gt;
&lt;p&gt;Long story short, it’s up to you whether you want to check in the &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;node_modules&lt;/code&gt; folder. I would check them in personally.&lt;/p&gt;
&lt;p&gt;Let’s move on to the final category.&lt;/p&gt;
&lt;h2 id=&quot;credentials&quot;&gt;Credentials&lt;/h2&gt;
&lt;p&gt;Credentials are username and passwords. One example of this file is &lt;code&gt;wp-config.php&lt;/code&gt;, which contains username and passwords for a Wordpress databases.&lt;/p&gt;
&lt;p&gt;You don’t want the public to get hold of your credentials at all. Once, I almost had to pay $87,000 to Amazon because a friend accidentally checked my credentials into a public Git repo. Thankfully, Amazon was kind enough to waive this amount off for me.&lt;/p&gt;
&lt;p&gt;So um yes. Ignore your credentials if you need to put them in your project repository, or fear having awful consequences like paying $87,000 for nothing.&lt;/p&gt;
&lt;p&gt;We’ve covered the five categories of files you should should ignore from your Git repository.&lt;/p&gt;
&lt;p&gt;There’s only thing I want to highlight here. Some of the rules we discussed can go into a global &lt;code&gt;.gitignore&lt;/code&gt; file, while others should go into a local &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let’s find out what to put into these two &lt;code&gt;.gitignore&lt;/code&gt; files and how to set them up.&lt;/p&gt;
&lt;h2 id=&quot;the-global-gitignore-file&quot;&gt;The Global gitignore file&lt;/h2&gt;
&lt;p&gt;The global &lt;code&gt;.gitignore&lt;/code&gt; file contains rules for ignoring files for every Git repository on your computer. This is a good place to ignore files from the first two categories: Operating System files and Application files.&lt;/p&gt;
&lt;p&gt;Let’s create a global &lt;code&gt;.gitignore&lt;/code&gt; file together.&lt;/p&gt;
&lt;p&gt;First, create a file in your root folder and name it &lt;code&gt;.gitignore_global&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch ~/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, open up the &lt;code&gt;.gitignore_global&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ open ~/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, paste the rules you obtained in the links from the first two categories into the file. Since I’m on a Mac and I use Sublime Text as my code editor, this is how my &lt;code&gt;.gitignore_global&lt;/code&gt; file looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;## Ignore Mac OS Stuff
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


## Ignore Sublime text stuff

# cache files for sublime text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache

# workspace files are user-specific
*.sublime-workspace

# project files should be checked into the repository, unless a significant
# proportion of contributors will probably not be using SublimeText
*.sublime-project

# sftp configuration file
sftp-config.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final step to the process is to add the &lt;code&gt;.gitignore_global&lt;/code&gt; file to your Git config with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git config --global core.excludesfile ~/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done with the &lt;code&gt;.gitignore_global&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;the-local-gitignore-file&quot;&gt;The local gitignore file&lt;/h2&gt;
&lt;p&gt;The local &lt;code&gt;.gitignore&lt;/code&gt; file is the file we’re used to seeing. It lives in the root of your project folder and contains rules for ignore the rest of the files we mentioned above.&lt;/p&gt;
&lt;p&gt;One thing to note here is that many people don’t know about the existence of a global &lt;code&gt;.gitignore&lt;/code&gt; file (I didn’t know about it either). It’s highly possible that they may still check system and application files into your project if you’re not careful about it.&lt;/p&gt;
&lt;p&gt;Hence, most local &lt;code&gt;.gitignore&lt;/code&gt; files also contain some rules from system files to mitigate this issue. The two common rules that are used here are &lt;code&gt;.DS_Store&lt;/code&gt; and &lt;code&gt;Thumbs.db&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’re not going to create the local &lt;code&gt;.gitignore&lt;/code&gt; file since you’ll probably know how to do it :)&lt;/p&gt;
&lt;p&gt;Let’s wrap the article up now.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;In this article, we explored why we use Git, and we understood why we should ignore some files and folders. Then, we discussed the rule of thumb regarding files to be ignored, and went through various categories of files we ignore.&lt;/p&gt;
&lt;p&gt;Finally, we learned what to place in both the global and local &lt;code&gt;.gitignore&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;That’s the end of this article! Has this article helped clarify your questions on &lt;code&gt;.gitignore&lt;/code&gt;? Let me know what you think in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Modularize HTML Using Template Engines and Gulp</title>
    <link href="https://zellwk.com/blog/nunjucks-with-gulp/"/>
    <updated>2015-09-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/nunjucks-with-gulp/</id>
    <content type="html">&lt;p&gt;Template Engines are tools that help us break HTML code into smaller pieces that we can reuse across multiple HTML files. They also give you the power to feed data into variables that help you simplify your code.&lt;/p&gt;
&lt;p&gt;You can only use template engines if you had a way to compile them into HTML. This means that you can only use them if you’re working with a backend language, or if you’re using client-side JavaScript.&lt;/p&gt;
&lt;p&gt;However, with Node.js, we can now harness the power of template engines easily through the use of tools like Gulp.&lt;/p&gt;
&lt;p&gt;That’s what we’re going to cover today in this chapter. We’re going to find out what template engines are, why we should use them, and how to set one up with Gulp.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let’s start by looking more closely at the two main benefits that template engines bring.&lt;/p&gt;
&lt;h2 id=&quot;two-benefits-of-template-engines&quot;&gt;Two benefits of template engines&lt;/h2&gt;
&lt;p&gt;Here are the two benefits that template engines bring:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It lets you break HTML code into smaller files&lt;/li&gt;
&lt;li&gt;It lets you use data to populate your markup&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go through them one by one.&lt;/p&gt;
&lt;h3 id=&quot;breaking-html-into-smaller-files&quot;&gt;Breaking HTML into smaller files&lt;/h3&gt;
&lt;p&gt;It’s common for a HTML file to contain blocks of code that are repeated across the website. Consider this markup for a second:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
  &amp;lt;nav&amp;gt; ... &amp;lt;/nav&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;footer&amp;gt; ... &amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Much of these code, particularly those within &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt;, are repeated across multiple pages.&lt;/p&gt;
&lt;p&gt;Since they are repeated, we can pull them out and place them into smaller files called &lt;strong&gt;partials&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For example, the navigation partial may contain a simple navigation like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- Navigation Partial --&amp;gt;
&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;about.html&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;contact.html&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we can reuse this partial across our HTML files. Here’s what HTML files might look like with partials included:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
  {% include partials &amp;quot;nav&amp;quot; %}
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  {% include partials &amp;quot;footer&amp;quot; %}
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: The syntax for including partials are different for each template engine. This one shown above is for Nunjucks or Swig.&lt;/p&gt;
&lt;p&gt;There’s one great thing about being able to break code up like this.&lt;/p&gt;
&lt;p&gt;Just imagine what you would do if you had to change the navigation now. When you use a partial, all you have to do is change code in the navigation partial and all your pages will be updated. Contrast that with having to change the same code across every file the navigation is used on. Which is easier and more effective?&lt;/p&gt;
&lt;p&gt;This ability to break code up into smaller files helps us write lesser (duplicated) code while at the same time preserve our sanity when code need to be changed.&lt;/p&gt;
&lt;p&gt;Let’s move on to the second benefit.&lt;/p&gt;
&lt;h3 id=&quot;using-data-to-populate-markup&quot;&gt;Using data to populate markup&lt;/h3&gt;
&lt;p&gt;This benefit is best explained with an example. Let’s say you’re creating a gallery of images. Your markup would be something similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;item-1.png&amp;quot; alt=&amp;quot;item-1&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;item-2.png&amp;quot; alt=&amp;quot;item-2&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;item-3.png&amp;quot; alt=&amp;quot;item-3&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;item-4.png&amp;quot; alt=&amp;quot;item-4&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;item-5.png&amp;quot; alt=&amp;quot;item-5&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the &lt;code&gt;.gallery__item&lt;/code&gt; div was repeated multiple times above?&lt;/p&gt;
&lt;p&gt;If you had to change the markup of one &lt;code&gt;.gallery__item&lt;/code&gt;, you’d have to change it in five different places.&lt;/p&gt;
&lt;p&gt;Now, imagine if you had the ability to write HTML with some sort of logic. You’d probably write something similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  // Some code to loop through the following 5 times:
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;$path-to-image&amp;quot; alt=&amp;quot;$alt-text&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  // end loop
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Template engines gives you the ability to use such a loop. Instead of looping exactly five times, it loops through a set of data that you pass to it. The html would become:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  {% for image in images %}
    &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
      &amp;lt;img src=&amp;quot;{{src}}&amp;quot; alt=&amp;quot;{{alt}}&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  {% endfor %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data would be a JSON file that resembles the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;images&amp;quot;: [{
    &amp;quot;src&amp;quot;: &amp;quot;item1.png&amp;quot;,
    &amp;quot;alt&amp;quot;: &amp;quot;alt text for item1&amp;quot;
    }, {
    &amp;quot;src&amp;quot;: &amp;quot;item2.png&amp;quot;,
    &amp;quot;alt&amp;quot;: &amp;quot;alt text for item1&amp;quot;
    },
    // ... Until the end of your data
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the data is supplied, the template engine would create a markup such that the number of &lt;code&gt;.gallery__items&lt;/code&gt; would correspond to the number of items in the &lt;code&gt;images&lt;/code&gt; array of the data.&lt;/p&gt;
&lt;p&gt;The best part is that you only have to change the markup once and all &lt;code&gt;.gallery__items&lt;/code&gt; would be updated.&lt;/p&gt;
&lt;p&gt;Here, template engines once again gives you the ability to write lesser code, and helps preserve your sanity when code needs to be changed.&lt;/p&gt;
&lt;p&gt;Since we know what template engines does now, lets move on and learn how use a template engine with Gulp.&lt;/p&gt;
&lt;h2 id=&quot;using-a-template-engine-with-gulp&quot;&gt;Using a template engine with Gulp&lt;/h2&gt;
&lt;p&gt;Before we move on and create a gulp task that uses a template engine, let’s look at a list of popular template engines that Gulp is able to use (Note: They’re all JavaScript based templat engines).&lt;/p&gt;
&lt;p&gt;Here’s the list in alphabetical order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://akdubya.github.io/dustjs/&quot;&gt;Dust.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.embeddedjs.com/&quot;&gt;Embedded JS&lt;/a&gt; (ejs)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.github.io/hogan.js/&quot;&gt;Hogan.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jade-lang.com/&quot;&gt;Jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mustache.github.io/&quot;&gt;Mustache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjucks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paularmstrong/swig&quot;&gt;Swig&lt;/a&gt; (Note: no longer maintained)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each template engine is unique. It has it’s pros and cons and it’s syntax can be wildly different from other template engines. Because of this, let’s learn to use one template engine in this article – Nunjucks.&lt;/p&gt;
&lt;p&gt;You can opt to use other template engines if you wish to, but the instructions to use them will be different.&lt;/p&gt;
&lt;p&gt;I highly recommend Nunjucks because it’s extremely powerful. It has features (like inheritance) that most template engines do not have. I’ve also used Mustache and Handlebars previously, and found that they weren’t powerful enough in many circumstances.&lt;/p&gt;
&lt;p&gt;Now, let’s implement Nunjucks into our workflow.&lt;/p&gt;
&lt;h2 id=&quot;using-nunjucks-with-gulp&quot;&gt;Using Nunjucks with Gulp&lt;/h2&gt;
&lt;p&gt;We can use Nunjucks through a plugin called &lt;a href=&quot;https://github.com/carlosl/gulp-nunjucks-render&quot;&gt;gulp-nunjucks-render&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s start by installing gulp-nunjucks-render.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install gulp-nunjucks-render --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var nunjucksRender = require(&#39;gulp-nunjucks-render&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to create a project structure that allows us to use Nunjucks easily. We will use this structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;project/
  |- app/
      |- index.html and other .html files
      |- pages/
      |- templates/
          |- partials/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;templates&lt;/code&gt; folder&lt;/strong&gt; is used for storing all Nunjucks partials and other Nunjucks files that will be added to files in the &lt;code&gt;pages&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;pages&lt;/code&gt; folder&lt;/strong&gt; is used for storing files that will be compiled into HTML. Once they are compiled, they will be created in the &lt;code&gt;app&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Let’s work through the process of creating some Nunjucks files before creating the Gulp task.&lt;/p&gt;
&lt;p&gt;First of all, one good thing about Nunjucks (that other template engines might not have) is that it allows you to create a template that contains boilerplate HTMl code which can be inherited by other pages. Let’s call this boilerplate HTML &lt;code&gt;layout.nunjucks&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;code&gt;layout.nunjucks&lt;/code&gt; and place it in your &lt;code&gt;templates&lt;/code&gt; folder. It should contain some boilerplate code like &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags. It can also contain things that are similar across all your pages, like links to CSS and JavaScript files.&lt;/p&gt;
&lt;p&gt;Here’s an example of a &lt;code&gt;layout.nunjucks&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- layout.nunjucks --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;!-- You write code for this content block in another file --&amp;gt;
    {% block content %} {% endblock %}

    &amp;lt;script src=&amp;quot;bower_components/jquery/dist/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;js/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By the way, I prefer to use the &lt;code&gt;.nunjucks&lt;/code&gt; extension for Nunjucks files and partials because it lets me know that I’m working with Nunjucks. If you’re not comfortable with &lt;code&gt;.nunjucks&lt;/code&gt;, feel free to leave your files as &lt;code&gt;.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Edit: You can use&lt;code&gt;.njk&lt;/code&gt; now. It has became the standard.&lt;/p&gt;
&lt;p&gt;Next, let’s create a &lt;code&gt;index.nunjucks&lt;/code&gt; file in the &lt;code&gt;pages&lt;/code&gt; directory. This file would eventually be converted into &lt;code&gt;index.html&lt;/code&gt; and placed in the &lt;code&gt;app&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;It should extend &lt;code&gt;layouts.nunjucks&lt;/code&gt; so it contains the boilerplate code we defined in &lt;code&gt;layout.nunjucks&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- index.nunjucks --&amp;gt;
{% extends &amp;quot;layout.nunjucks&amp;quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then add HTML code that’s specific to &lt;code&gt;index.nunjucks&lt;/code&gt; between &lt;code&gt;{% block content %}&lt;/code&gt; and &lt;code&gt;{% endblock %}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- index.nunjucks --&amp;gt;
{% extends &amp;quot;layout.nunjucks&amp;quot; %}

{% block content %}
  &amp;lt;h1&amp;gt;This is the index page&amp;lt;/h1&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with setting up Nunjucks files. Now, let’s create a &lt;code&gt;nunjucks&lt;/code&gt; task that coverts &lt;code&gt;index.nunjucks&lt;/code&gt; into &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;gulp.task(&#39;nunjucks&#39;, function() {
  // nunjucks stuff here
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;nunjucks-render&lt;/code&gt; allows us to specify a path to the templates with the &lt;code&gt;path&lt;/code&gt; option:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;gulp.task(&#39;nunjucks&#39;, function() {
  // Gets .html and .nunjucks files in pages
  return gulp.src(&#39;app/pages/**/*.+(html|nunjucks)&#39;)
  // Renders template with nunjucks
  .pipe(nunjucksRender({
      path: [&#39;app/templates&#39;]
    }))
  // output files in app folder
  .pipe(gulp.dest(&#39;app&#39;))
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, try running &lt;code&gt;gulp nunjucks&lt;/code&gt; in your command line. Gulp would have created an &lt;code&gt;index.html&lt;/code&gt; and placed it in the &lt;code&gt;app&lt;/code&gt; folder for you.&lt;/p&gt;
&lt;p&gt;Now, try running &lt;code&gt;gulp nunjucks&lt;/code&gt; in your command line. Gulp would have created an &lt;code&gt;index.html&lt;/code&gt; and placed it in the &lt;code&gt;app&lt;/code&gt; folder for you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/09/index-html-by-nunjucks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you opened up this &lt;code&gt;index.html&lt;/code&gt; file, you should see the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;This is the index page&amp;lt;/h1&amp;gt;
    &amp;lt;script src=&amp;quot;js/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how everything (except the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag) came from &lt;code&gt;layouts.nunjucks&lt;/code&gt;? That’s what &lt;code&gt;layout.nunjucks&lt;/code&gt; is for. If you need to mess around with the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, add JavaScript or change CSS files, you know you can do it in &lt;code&gt;layouts.nunjucks&lt;/code&gt; and every single page will be updated accordingly.&lt;/p&gt;
&lt;p&gt;At this point, you’ve successfully extended &lt;code&gt;layouts.nunjucks&lt;/code&gt; into &lt;code&gt;index.nunjucks&lt;/code&gt; and rendered it &lt;code&gt;index.nunjucks&lt;/code&gt; into &lt;code&gt;index.html&lt;/code&gt;. There’s a few more things we can improve on. One of the things we can do is to learn to use a partial.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-nunjucks-partial&quot;&gt;Adding a Nunjucks Partial&lt;/h2&gt;
&lt;p&gt;We need to create a partial before we can add it to &lt;code&gt;index.nunjucks&lt;/code&gt;. Let’s create a partial called &lt;code&gt;navigation.nunjucks&lt;/code&gt; and place it in a &lt;code&gt;partials&lt;/code&gt; folder that’s within the &lt;code&gt;templates&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/09/nav-partial.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then, let’s add a simple navigation to this partial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- navigation.nunjucks --&amp;gt;
&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s now add the partial to our &lt;code&gt;index.nunjucks&lt;/code&gt; file. We can add partials with the help of the &lt;code&gt;{% include &amp;quot;path-to-partial&amp;quot; %}&lt;/code&gt; statement that Nunjucks provides.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% block content %}

&amp;lt;h1&amp;gt;This is the index page&amp;lt;/h1&amp;gt;
&amp;lt;!-- Adds the navigation partial --&amp;gt;
{% include &amp;quot;partials/navigation.nunjucks&amp;quot; %}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you run &lt;code&gt;gulp nunjucks&lt;/code&gt;, you should get a &lt;code&gt;index.html&lt;/code&gt; file with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- &amp;lt;head&amp;gt; and CSS --&amp;gt;

&amp;lt;h1&amp;gt;This is the index page&amp;lt;/h1&amp;gt;

&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;

&amp;lt;!-- JavaScript and &amp;lt;/body&amp;gt;    --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That wasn’t so hard, was it? :)&lt;/p&gt;
&lt;p&gt;Let’s move on. When using partials like navigation, we can often run into situations where we had to add a class to one of the links when we’re on the page. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav&amp;gt;
  &amp;lt;!-- active class should only on be present on the homepage --&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;active&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;active&lt;/code&gt; class should only be present on the &lt;code&gt;homepage&lt;/code&gt; link if we’re on the homepage. If we’re on the about page, then the &lt;code&gt;active&lt;/code&gt; class should only be present on the &lt;code&gt;about&lt;/code&gt; link.&lt;/p&gt;
&lt;p&gt;We can do this with a slightly modified version of partials called &lt;strong&gt;Macros&lt;/strong&gt;. The only difference is that you can add variables to it just like working with a function in JavaScript&lt;/p&gt;
&lt;p&gt;Now, let’s learn to use a macro as the navigation instead.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-nunjucks-macro&quot;&gt;Adding a Nunjucks Macro&lt;/h2&gt;
&lt;p&gt;First, let’s create a &lt;code&gt;nav-macro.nunjucks&lt;/code&gt; file in a &lt;code&gt;macros&lt;/code&gt; folder that is within the &lt;code&gt;templates&lt;/code&gt; folder. (We’re using &lt;code&gt;nav-macro&lt;/code&gt; to make sure you don’t get confused between the two navigation nunjuck files)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/09/path-to-macros.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can begin writing macros once you have created the &lt;code&gt;nav-macro.nunjucks&lt;/code&gt; file. All macros begin and end with the following tags:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% macro functionName() %}
  &amp;lt;!-- Macro stuff here --&amp;gt;
{% endmacro %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s create a macro called &lt;code&gt;active&lt;/code&gt;. It’s purpose is to output the &lt;code&gt;active&lt;/code&gt; class for the navigation. It should take one argument, &lt;code&gt;activePage&lt;/code&gt;, that defaults to &lt;code&gt;&#39;home&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% macro active(activePage=&#39;home&#39;) %}
  &amp;lt;!-- Macro stuff here --&amp;gt;
{% endmacro %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll write HTML that would be created within the macro. Here, we can also use the &lt;code&gt;if&lt;/code&gt; function provided by Nunjucks to check if an &lt;code&gt;active&lt;/code&gt; class should be added:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% macro active(activePage=&#39;home&#39;) %}
&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;{%if activePage == &#39;home&#39; %} active {% endif %}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;!-- Repeat for about and contact --&amp;gt;
&amp;lt;/nav&amp;gt;
{% endmacro %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done writing the macro now. Let’s learn to use it in &lt;code&gt;index.nunjucks&lt;/code&gt; next.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;import&lt;/code&gt; function in Nunjucks to add a macro file. (We used an &lt;code&gt;include&lt;/code&gt; function when we added a partial previously). When we import a macro file, we have to set it as a variable as well. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- index.nunjucks --&amp;gt;
{% block content %}

&amp;lt;!-- Importing Nunjucks Macro --&amp;gt;
{% import &#39;macros/nav-macro.nunjucks&#39; as nav %}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, we’ve set the &lt;code&gt;nav&lt;/code&gt; variable as the entire &lt;code&gt;nav-macro.nunjucks&lt;/code&gt; macro file. We can then use the &lt;code&gt;nav&lt;/code&gt; variable to call any macro that were written in the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{% import &#39;macros/nav-macro.nunjucks&#39; as nav %}
&amp;lt;!-- Creating the navigation with activePage = &#39;home&#39; --&amp;gt;
{{nav.active(&#39;home&#39;)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this change, try running &lt;code&gt;gulp nunjucks&lt;/code&gt; again and you should be able to see this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot; active &amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it for using Macros. Knowing this would invariably help you out a lot while using Nunjucks :)&lt;/p&gt;
&lt;p&gt;There’s one more thing we can do to enhance our templating experience with Nunjucks, and that’s  populating the HTML with data.&lt;/p&gt;
&lt;h2 id=&quot;populating-html-with-data&quot;&gt;Populating HTML with data&lt;/h2&gt;
&lt;p&gt;Let’s start by creating a file called &lt;code&gt;data.json&lt;/code&gt; that contains your data. I’d recommend you place this &lt;code&gt;data.json&lt;/code&gt; in the &lt;code&gt;app&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd app
$ touch data.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s add some data now. We can use the data from the earlier example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  &amp;quot;images&amp;quot;: [{
    &amp;quot;src&amp;quot;: &amp;quot;image-one.png&amp;quot;,
    &amp;quot;alt&amp;quot;: &amp;quot;Image one alt text&amp;quot;
  }, {
    &amp;quot;src&amp;quot;: &amp;quot;image-two.png&amp;quot;,
    &amp;quot;alt&amp;quot;: &amp;quot;Image two alt text&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We then have to tweak the &lt;code&gt;nunjucks&lt;/code&gt; task slightly to use data from this &lt;code&gt;data.json&lt;/code&gt; file. To do so, we need to use to the help of another gulp plugin called &lt;a href=&quot;https://www.npmjs.com/package/gulp-data&quot;&gt;gulp-data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s install gulp-data before moving on.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-data --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var data = require(&#39;gulp-data&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gulp-data takes in a function that allows you to return a file. We can use the &lt;code&gt;require&lt;/code&gt; function Node provides to get this &lt;code&gt;data&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;.pipe(data(function() {
  return require(&#39;./app/data.json&#39;)
}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using &lt;code&gt;require&lt;/code&gt; to get files from a custom directory (not &lt;code&gt;node_modules&lt;/code&gt;), we need to tell Node the path to the directory. Here, we start with a &lt;code&gt;./&lt;/code&gt; that tells Node to start with the current directory, then look into &lt;code&gt;app&lt;/code&gt; for the &lt;code&gt;data.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Note: A better way is to use two functions, &lt;code&gt;JSON.parse()&lt;/code&gt; and &lt;code&gt;fs.readFileSync()&lt;/code&gt; instead of &lt;code&gt;require&lt;/code&gt;. We will cover how to do so in &lt;a href=&quot;https://automateyourworkflow.com/&quot;&gt;“Automating Your Workflow with Gulp”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s add the gulp-data to our &lt;code&gt;nunjucks&lt;/code&gt; task now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;gulp.task(&#39;nunjucks&#39;, function() {
  return gulp.src(&#39;app/pages/**/*.+(html|nunjucks)&#39;)
    // Adding data to Nunjucks
    .pipe(data(function() {
      return require(&#39;./app/data.json&#39;)
    }))
    .pipe(nunjucksRender({
      path: [&#39;app/templates&#39;]
    }))
    .pipe(gulp.dest(&#39;app&#39;))
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s add some markup to &lt;code&gt;index.nunjucks&lt;/code&gt; so it uses the data we’ve added.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- index.nunjucks --&amp;gt;
{% block content %}
&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;!-- Loops through &amp;quot;images&amp;quot; array --&amp;gt;
  {% for image in images %}
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;{{image.src}}&amp;quot; alt=&amp;quot;{{image.alt}}&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  {% endfor %}
&amp;lt;/div&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- index.html --&amp;gt;
&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;image-one.png&amp;quot; alt=&amp;quot;Image one alt text&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;Now, if you run `gulp nunjucks`, you should get a `index.html` file with the following markup:

  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;image-two.png&amp;quot; alt=&amp;quot;Image two alt text&amp;quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice!&lt;/p&gt;
&lt;p&gt;That’s the basics to using the Nunjucks template engine with Gulp. Let’s wrap this article up now.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;We’ve learned how template engines make development much easier and how to use them in general.&lt;/p&gt;
&lt;p&gt;In this chapter we’ve learned how template engines make development much easier, and how to use them (in a general sense).&lt;/p&gt;
&lt;p&gt;We then dove deeper into one template engine, Nunjucks, got it to work with Gulp, and learned how to use three Nunjucks provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extend&lt;/code&gt; to inherit a Nunjucks file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt; to include a partial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; to import a macro&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FYI, the information we covered here is just half of one chapter in &lt;a href=&quot;http://automateyourworkflow.com/&quot;&gt;Automating Your Workflow&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;The rest of this chapter are about three things that I’m unable to cover in this article since it requires information from earlier parts of the book. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watching and compiling nunjucks files&lt;/li&gt;
&lt;li&gt;Preventing errors from Nunjucks from breaking Gulp’s watch&lt;/li&gt;
&lt;li&gt;Reloading the browser automatically whenever a file changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three things help speed your entire workflow up, so it can be super beneficial for you if you manage to integrate them into your workflow.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://automateyourworkflow.com/&quot;&gt;Automating Your Workflow&lt;/a&gt; if you’re curious to learn how to do so.&lt;/p&gt;
&lt;p&gt;What did you think of this article? I’d love to hear your questions and comments so please leave them below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Gulp for Beginners</title>
    <link href="https://zellwk.com/blog/https:/css-tricks.com/gulp-for-beginners/"/>
    <updated>2015-09-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/css-tricks.com/gulp-for-beginners/</id>
    <content type="html">&lt;p&gt;Gulp is a tool that helps you out with several tasks when it comes to web development. It’s often used to do front end tasks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spinning up a web server&lt;/li&gt;
&lt;li&gt;Reloading the browser automatically whenever a file is saved&lt;/li&gt;
&lt;li&gt;Using preprocessors like Sass or LESS&lt;/li&gt;
&lt;li&gt;Optimizing assets like CSS, JavaScript, and images&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a comprehensive list of things Gulp can do. If you’re crazy enough, you can even build a static site generator with Gulp (I’ve done it!). So yes, Gulp is extremely powerful, but you’ll have to learn how to use Gulp if you want to create your own customized build processes.&lt;/p&gt;
&lt;p&gt;So that’s what this article is for. It helps you get so good with the basics of Gulp that you can begin exploring everything else for yourself.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>A Gulp.js Tutorial (Part 2)</title>
    <link href="https://zellwk.com/blog/gulp-tutorial-2/"/>
    <updated>2015-07-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gulp-tutorial-2/</id>
    <content type="html">&lt;p&gt;Last week, we set up a simple gulp task to convert Sass into CSS. We also touched on how to watch the &lt;code&gt;styles.scss&lt;/code&gt; file for changes and how to reload the browser automatically with Browser Sync.&lt;/p&gt;
&lt;p&gt;In this article, we’re going to dive further into the &lt;code&gt;sass&lt;/code&gt; task to find out how to watch more than one file for changes, and how to customize options for the plugins that we have used.&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;Note: This article is outdated. The latest version can be found &lt;a href=&quot;https://css-tricks.com/gulp-for-beginners/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;before-you-read-this-article&quot;&gt;Before you read this article&lt;/h2&gt;
&lt;p&gt;Make sure you’ve checked out the &lt;a href=&quot;https://zellwk.com/blog/gulp-tutorial/&quot;&gt;first article&lt;/a&gt; before continuing on to this article. We’re building up on what we have made previously.&lt;/p&gt;
&lt;p&gt;A key thing about build workflows is that you’ll often need to watch more than one file.&lt;/p&gt;
&lt;p&gt;Let’s begin here.&lt;/p&gt;
&lt;h2 id=&quot;watching-more-than-one-file&quot;&gt;Watching more than one file&lt;/h2&gt;
&lt;p&gt;You’ll need to use a &lt;code&gt;glob&lt;/code&gt;, a matching pattern for files, to watch more than one file. The idea of a glob is similar to that of a regular expression, where you check if a file name has a specific pattern. Once the pattern is identified, we say that it is matched.&lt;/p&gt;
&lt;p&gt;Most workflows tend to only use these 4 different globbing patterns. They are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;*.scss&lt;/code&gt; - The &lt;code&gt;*&lt;/code&gt; pattern is a wildcard that matches any pattern in the specified folder. In this case, we’re matching any files ending with &lt;code&gt;.scss&lt;/code&gt; in the root folder.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**/*.scss&lt;/code&gt; - This is a more extreme version of the &lt;code&gt;*&lt;/code&gt; pattern that matches any file ending with &lt;code&gt;.scss&lt;/code&gt; in the root folder and any child directories.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!not-me.scss&lt;/code&gt; - The &lt;code&gt;!&lt;/code&gt; indicates that Gulp should exclude the pattern from its matches, which is useful if you had to exclude a file from a matched pattern. In this case, &lt;code&gt;not-me.scss&lt;/code&gt; would be excluded from a match.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.+(scss|sass)&lt;/code&gt; - The plus &lt;code&gt;+&lt;/code&gt; and parenthesis &lt;code&gt;()&lt;/code&gt; allows Gulp to match multiple patterns, with patterns separated by the pipe &lt;code&gt;|&lt;/code&gt; character. In this case, Gulp will match any file ending with &lt;code&gt;.scss&lt;/code&gt; or &lt;code&gt;.sass&lt;/code&gt; in the root folder.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can use these globbing patterns in 3 different gulp methods. – &lt;code&gt;gulp.src&lt;/code&gt;, &lt;code&gt;gulp.dest&lt;/code&gt; and &lt;code&gt;gulp.watch&lt;/code&gt;. Let’s see how to place globs into these methods in our current &lt;code&gt;sass&lt;/code&gt; task.&lt;/p&gt;
&lt;p&gt;First of all, we may need to compile more than one Sass file into CSS within the &lt;code&gt;app/scss&lt;/code&gt; folder. We can check for all &lt;code&gt;.scss&lt;/code&gt; files by using the &lt;code&gt;**/*&lt;/code&gt; pattern.&lt;/p&gt;
&lt;p&gt;You might also have a mix of files ending with &lt;code&gt;.scss&lt;/code&gt; and &lt;code&gt;.sass&lt;/code&gt; in some projects. If that’s true, you can also use the &lt;code&gt;+(|)&lt;/code&gt; pattern to allow Gulp to match files ending with both &lt;code&gt;.sass&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s how we can modify the &lt;code&gt;sass&lt;/code&gt; task to include globbing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function() {
  return gulp.src(&#39;app/scss/**/*.+(scss|sass)&#39;) // Gets all files ending with .scss or .sass in app/scss
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(&#39;app/css&#39;))
    .pipe(browserSync.reload({
      stream: true
    }));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;sass&lt;/code&gt; task should now pick up any additional &lt;code&gt;.sass&lt;/code&gt; or &lt;code&gt;.scss&lt;/code&gt; files we have in the &lt;code&gt;app/scss&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;So if you created a new &lt;code&gt;print.scss&lt;/code&gt; file within &lt;code&gt;app/scss&lt;/code&gt; and ran &lt;code&gt;gulp sass&lt;/code&gt;, you should be able to see &lt;code&gt;print.css&lt;/code&gt; file in &lt;code&gt;app/css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We want to add the same globs to our &lt;code&gt;watch&lt;/code&gt; task as well so Gulp will automatically run the &lt;code&gt;sass&lt;/code&gt; task if any &lt;code&gt;.scss&lt;/code&gt; or &lt;code&gt;.sass&lt;/code&gt; file is changed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, [&#39;sass&#39;, &#39;browserSync&#39;], function() {
  gulp.watch(&#39;app/scss/**/*.+(scss|sass)&#39;, [&#39;sass&#39;]);
  gulp.watch(&#39;app/index.html&#39;, browserSync.reload);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s add globbing to reload the browser whenever any &lt;code&gt;.html&lt;/code&gt; files are changed since we’re now on the watch task:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, [&#39;sass&#39;, &#39;browserSync&#39;], function() {
  gulp.watch(&#39;app/scss/**/*.+(scss|sass)&#39;, [&#39;sass&#39;]);
  gulp.watch(&#39;app/*.html&#39;, browserSync.reload);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, Gulp will detect changes and reload the browser for all files ending with &lt;code&gt;.html&lt;/code&gt;as well as &lt;code&gt;.scss&lt;/code&gt; or &lt;code&gt;.sass&lt;/code&gt; in the respective folders.&lt;/p&gt;
&lt;p&gt;And that’s everything you need to know about globbing to configure Gulp tasks for different folders in your project.&lt;/p&gt;
&lt;p&gt;Let’s find out how to change the default options for Gulp plugins next.&lt;/p&gt;
&lt;h2 id=&quot;changing-plugin-options&quot;&gt;Changing Plugin Options&lt;/h2&gt;
&lt;p&gt;Most gulp plugins can be customized to a certain extend if you passed an &lt;code&gt;options&lt;/code&gt; object into them. Here’s how a task would look like if the &lt;code&gt;options&lt;/code&gt; object has been predefined:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;.gulp.task(&#39;task-name&#39;, function() {
  return gulp.src(&#39;source-files&#39;)
    .pipe(plugin(options))
    .pipe(gulp.dest(&#39;destination&#39;))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you were wondering, each &lt;code&gt;options&lt;/code&gt; object is a JavaScript object that may contain one or more key-value pairs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// JavaScript Object
var options = {
  key1: value1,
  key2: value2
  //... Other key-value pairs
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You don’t necessarily have to create a separate options object for each gulp plugin. In fact, you can leave the options object within the gulp plugin itself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;.gulp.task(&#39;task-name&#39;, function() {
  return gulp.src(&#39;source-files&#39;)
    .pipe(plugin({
      key1: value1,
      key2: value2
      }))
    .pipe(gulp.dest(&#39;destination&#39;))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Different plugins will contain different key-value pairs. Hence you’ll have to read the plugin documentation if you want to customize them.&lt;/p&gt;
&lt;p&gt;Let’s use gulp-autoprefixer as an example as we walk through how to customize a plugin.&lt;/p&gt;
&lt;p&gt;First, head over to &lt;a href=&quot;https://www.npmjs.com/package/gulp-autoprefixer&quot;&gt;gulp-autoprefixer’s documentation&lt;/a&gt; to find out what key-value pairs are available for customization.&lt;/p&gt;
&lt;p&gt;At the documentation page, there’s an example of how gulp-autoprefixer can be used with different options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/autoprefixer-usage.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Perfect, so now we know that there are at least two keys for the gulp-autporefixer plugin, &lt;code&gt;browsers&lt;/code&gt; and &lt;code&gt;cascade&lt;/code&gt;, and what they do. There’s also a third key, &lt;code&gt;browsers&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/autoprefixer-descriptions.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can also find out what values each key can take.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/autoprefixer-values.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The values for &lt;code&gt;cascade&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; are &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; since they’re Booleans. The &lt;code&gt;browsers&lt;/code&gt; key, however, is not as straightforward as it seems, and we can find out more by clicking on the browsers link, which leads us to &lt;a href=&quot;https://github.com/postcss/autoprefixer#browsers&quot;&gt;autoprefixer’s repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/browserlink.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We still don’t know exactly what values the &lt;code&gt;browsers&lt;/code&gt; array can take though. Luckily, there’s another clue for us to find out more. Let’s click on the &lt;a href=&quot;https://github.com/ai/browserslist#queries&quot;&gt;browserlist&lt;/a&gt; link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/browserlist.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And here is the information we need for the &lt;code&gt;browsers&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;It turns out that Gulp-autoprefixer depends on autoprefixer, which in turn depends on Browserlist. Open source tools work like this sometimes, and you’ll have to dive further in to figure out certain key-value pairs.&lt;/p&gt;
&lt;p&gt;We can finally customize the &lt;code&gt;browser&lt;/code&gt; values now. If we wanted to prefix for both IE 8 and IE 9, plus 2 recent versions of all other browsers, we can simple set the &lt;code&gt;browsers&lt;/code&gt; value to &lt;code&gt;[&#39;ie 8-9&#39;, &#39;last 2 versions&#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s how it would look in the &lt;code&gt;sass&lt;/code&gt; task:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function(){
  return gulp.src(&#39;app/scss/**/*.+(scss|sass)&#39;)
    //.. sourcemaps and sass
    .pipe(autoprefixer({
      browsers: [&#39;ie 8-9&#39;, &#39;last 2 versions&#39;]
      }))
    //... other plugins
    .pipe(gulp.dest(&#39;app/css&#39;))
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too difficult was it? :)&lt;/p&gt;
&lt;p&gt;All gulp-related plugins have the same configuration, so you can check out &lt;a href=&quot;https://www.npmjs.com/package/gulp-sass&quot;&gt;gulp-sass&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/gulp-sourcemaps&quot;&gt;gulp-sourcemaps&lt;/a&gt; to see their options object as well.&lt;/p&gt;
&lt;p&gt;For now, let’s try customizing another package that’s slightly different – Browser Sync&lt;/p&gt;
&lt;h3 id=&quot;customizing-browser-sync&quot;&gt;Customizing Browser Sync&lt;/h3&gt;
&lt;p&gt;Browser Sync has a &lt;a href=&quot;http://www.browsersync.io/docs/options/&quot;&gt;shitload of options to configure&lt;/a&gt;. Instead of jumping in and reading every option in there, let’s take a step back and first think about what kind of configurations we might need with browser sync.&lt;/p&gt;
&lt;p&gt;We have already set up browser sync to spin up a server and serve &lt;code&gt;app&lt;/code&gt; directory on &lt;code&gt;localhost:3000&lt;/code&gt; when the &lt;code&gt;browserSync&lt;/code&gt; task starts.&lt;/p&gt;
&lt;p&gt;Sometimes you might want to run the server on a port other than 3000. We can configure the &lt;code&gt;port&lt;/code&gt; key to do so.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;browserSync&#39;, function() {
  browserSync({
    server: {
      baseDir: &#39;app&#39;
    },
    port: 8080
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browser Sync will now spin up a server on port 8080 instead of 3000 once we set this configuration.&lt;/p&gt;
&lt;p&gt;In some cases you might already have a server running with Mamp Pro or another method, and you want Browser Sync to run on that host instead.&lt;/p&gt;
&lt;p&gt;You can configure Browser Sync to do so by using the &lt;code&gt;proxy&lt;/code&gt; key instead of the &lt;code&gt;server&lt;/code&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;browserSync&#39;, function(){
  browserSync({
    proxy: &#39;local.dev&#39;
    // Or if it&#39;s a localhost url:
    // proxy: &#39;localhost:8080&#39;
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’d also have noticed that Browser Sync automatically opens the default browser for you when the task starts. If you want Browser Sync to stop this behavior, or use another browser instead, you can change the &lt;code&gt;browser&lt;/code&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;browserSync&#39;, function() {
  browserSync({
    server: {
      baseDir: &#39;app&#39;
    },
    // Opens Google chrome browser
    browser: &#39;google chrome&#39;
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, if the notification on the top right side of BrowserSync is irritating for you, you might want to consider removing it by setting the &lt;code&gt;notify&lt;/code&gt; key to false.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;browserSync&#39;, function() {
  browserSync({
    server: {
      baseDir: &#39;app&#39;
    },
    // Opens Google chrome browser
    browser: &#39;google chrome&#39;,
    notify: false
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browser Sync provides lots of options to configure, if there’s something you want to do, but isn’t covered in this article, you might want to try looking at the &lt;a href=&quot;http://www.browsersync.io/docs/options/&quot;&gt;documentation directly&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;These two articles would have taught you the very basics of Gulp. You’ve learned how to set things up, how to write a gulp task, use gulp plugins and find more information on each plugin you use.&lt;/p&gt;
&lt;p&gt;Of course, there’s still way more to Gulp than what was covered in these two tutorials, but with this knowledge you can go ahead and figure out what other gulp plugins might be great to add to your workflow.&lt;/p&gt;
&lt;p&gt;Here are some ideas you’ll want to consider for a great workflow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating CSS-sprites with &lt;a href=&quot;https://www.npmjs.com/package/sprity&quot;&gt;sprity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compiling only files that have changed with &lt;a href=&quot;https://www.npmjs.com/package/gulp-changed&quot;&gt;gulp-changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing ES6 with &lt;a href=&quot;https://www.npmjs.com/package/gulp-babel&quot;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;modularizing JavaScripts with &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modularizing HTML with Template engines like &lt;a href=&quot;https://www.npmjs.com/package/gulp-handlebars&quot;&gt;Handlebars&lt;/a&gt; or &lt;a href=&quot;https://www.npmjs.com/package/gulp-swig&quot;&gt;Swig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Image and SVG optimization with &lt;a href=&quot;https://www.npmjs.com/package/gulp-imagemin&quot;&gt;imagemin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Optimizing CSS and JavaScripts with &lt;a href=&quot;https://www.npmjs.com/package/gulp-useref&quot;&gt;useref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Removing unused CSS with &lt;a href=&quot;https://www.npmjs.com/package/gulp-uncss&quot;&gt;unCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Further optimizing CSS with &lt;a href=&quot;https://www.npmjs.com/package/gulp-csso&quot;&gt;CSSO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Generating inline CSS for performance with &lt;a href=&quot;https://www.npmjs.com/package/critical&quot;&gt;Critical&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deploying with &lt;a href=&quot;https://www.npmjs.com/package/gulp-rsync&quot;&gt;rSync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chaining tasks together with &lt;a href=&quot;https://www.npmjs.com/package/run-sequence&quot;&gt;run sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Splitting Gulpfile into smaller files with &lt;a href=&quot;https://www.npmjs.com/package/require-directory&quot;&gt;require-dir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be honest that’s a pretty big list of things you can do to setup your workflow. It can get overwhelming to set everything up if you’re still new to it.&lt;/p&gt;
&lt;p&gt;To help you out, I’m writing a book on &lt;a href=&quot;https://automateyourworkflow.com/&quot;&gt;automating your workflow&lt;/a&gt; to help you dive even deeper into Gulp and add these awesome tools to your workflow in a simple, coherent manner.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://automateyourworkflow.com/&quot;&gt;Check out the book if you’d like to find out more&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;What did you learn from this articles? What else are you stuck with? I’d love to hear your questions and comments so I can help you out!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Gulp.js Tutorial</title>
    <link href="https://zellwk.com/blog/gulp-tutorial/"/>
    <updated>2015-07-01T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gulp-tutorial/</id>
    <content type="html">&lt;p&gt;Gulp is a build tool that helps you automate your development workflow. In this article, we will dive deep into Gulp to show you how to use it effectively to create a simple workflow.&lt;/p&gt;
&lt;p&gt;Let’s get started.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;Note: This article is outdated. The latest version can be found &lt;a href=&quot;https://css-tricks.com/gulp-for-beginners/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;installing-gulp&quot;&gt;Installing Gulp&lt;/h2&gt;
&lt;p&gt;We’ll start off the process by installing Gulp onto your computer. Gulp requires you to have Node.js and Node Package Manager (NPM) installed on your system, so if you haven’t gotten them yet, just head over to &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js’s website&lt;/a&gt; and download the installer.&lt;/p&gt;
&lt;p&gt;Once you’re done installing Node.js and NPM, you can install Gulp by typing the following command in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo npm install gulp -g
# Note: Only Mac users require the `sudo` keyword
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh btw, you can opt not to use the sudo keyword by following &lt;a href=&quot;http://studiorgb.uk/fix-priviliges-and-never-again-use-sudo-with-npm/&quot;&gt;these instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This command installs gulp globally and allows you to use the &lt;code&gt;gulp&lt;/code&gt; command anywhere on your computer.&lt;/p&gt;
&lt;p&gt;We’re now done with installing Gulp and we can move on to create a new project that uses Gulp.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-gulp-project&quot;&gt;Creating a Gulp Project&lt;/h2&gt;
&lt;p&gt;Let’s create a folder named &lt;code&gt;project&lt;/code&gt; as we work through this article. Once you have created the folder, you’ll want to run &lt;code&gt;npm init&lt;/code&gt; in it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;npm init&lt;/code&gt; command asks you a few questions and creates a &lt;code&gt;package.json&lt;/code&gt; file to store information about dependencies that you’ll use in this project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/npm-init.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first dependency in our project is Gulp since we’re using it as our build tool. You’ll have to install gulp within the &lt;code&gt;project&lt;/code&gt; folder by augmenting the install code slightly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See that we have removed &lt;code&gt;sudo&lt;/code&gt; from the command and replaced the &lt;code&gt;-g&lt;/code&gt; flag with the &lt;code&gt;--save-dev&lt;/code&gt; flag?&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;--save-dev&lt;/code&gt; flag tells NPM to install gulp locally in (a dev term for within) the project, and save this dependency information in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Since we’re installing a package locally, we don’t have a need for administrator rights and hence the &lt;code&gt;sudo&lt;/code&gt; was dropped. Removing this &lt;code&gt;sudo&lt;/code&gt; is important and could potentially cause errors if you don’t.&lt;/p&gt;
&lt;p&gt;Now, if you take a look at your &lt;code&gt;package.json&lt;/code&gt; file, you should see that Gulp has been added as a dev dependency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/package-json.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You should also see a &lt;code&gt;gulp&lt;/code&gt; folder within the new &lt;code&gt;node_modules&lt;/code&gt; folder that was created when you ran the &lt;code&gt;npm install gulp --save-dev&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/node-modules.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, we’ll have to create a &lt;code&gt;gulpfile.js&lt;/code&gt; file to store all our Gulp configurations.&lt;/p&gt;
&lt;p&gt;There’s one more thing to do before we start configuring Gulp to create a workflow. We have to make sure we’re clear on how the project is structured.&lt;/p&gt;
&lt;h2 id=&quot;determining-project-structure&quot;&gt;Determining Project Structure&lt;/h2&gt;
&lt;p&gt;Let’s start off with a generic structure for a webapp:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;project/
  |- app/
      |- css/
      |- fonts/
      |- images/
      |- index.html
      |- js/
      |- scss/
  |- dist/
  |- gulpfile.js
  |- node_modules/
  |- package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this structure, the &lt;code&gt;app&lt;/code&gt; folder will store all our written code, and the &lt;code&gt;dist&lt;/code&gt; folder will be used to store code that’s production-ready.&lt;/p&gt;
&lt;p&gt;Don’t worry if your actual projects has a structure that’s different from the current one we’re using right now. Once you’ve gotten the hang of Gulp, you’ll see how to tweak the gulpfile to work with your structure easily. So let’s work with this structure for now.&lt;/p&gt;
&lt;p&gt;Once you’ve created the project structure with the corresponding folders, we can proceed on to writing your first Gulp task.&lt;/p&gt;
&lt;h2 id=&quot;writing-your-first-task&quot;&gt;Writing Your First Task&lt;/h2&gt;
&lt;p&gt;To configure Gulp, you’ll first have to &lt;code&gt;require&lt;/code&gt; gulp within your &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Requiring Gulp
var gulp = require(&#39;gulp&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;require&lt;/code&gt; statement tells Node.js to look under the &lt;code&gt;node_modules&lt;/code&gt; folder, find a package named &lt;code&gt;gulp&lt;/code&gt; and pass it to the &lt;code&gt;gulp&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Once we have this &lt;code&gt;gulp&lt;/code&gt; variable, we can use it to write different Gulp tasks. Here’s the basic syntax of a gulp task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Basic Gulp task syntax
gulp.task(&#39;task-name&#39;, function () {
  // Stuff here
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s write a task named ‘hello’ for a start, and let the task do a log that says “Hello Zell!”.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Basic Gulp task syntax
gulp.task(&#39;hello&#39;, function () {
  console.log(&#39;Hello Zell!&#39;);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The task name is important since you’ll be able to use the task anywhere else in the Gulpfile to run the task.&lt;/p&gt;
&lt;p&gt;You can also use run a task with the command line by using &lt;code&gt;gulp&lt;/code&gt; plus the name of the task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gulp hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see a log from the terminal saying “Hello Zell!” once you ran the code in the terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/hello.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;In reality, gulp tasks are slightly more complex that what we have written so far. You’ll have to use two other gulp methods, &lt;code&gt;gulp.src&lt;/code&gt; and &lt;code&gt;gulp.dest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-real-task&quot;&gt;Creating a Real Task&lt;/h2&gt;
&lt;p&gt;Here’s what a real task may look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;task-name&#39;, function () {
  gulp.src(&#39;src&#39;) // Get source files with gulp.src
    .pipe(somePlugin()) // Sends it through a gulp plugin
    .pipe(gulp.dest(&#39;dest&#39;)) // Outputs the file in the destination folder
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s put this template to use with a real example where we compile Sass to CSS. I’ll explain how to set up the task while we’re at it.&lt;/p&gt;
&lt;p&gt;First, we’ll need to install a gulp plugin, &lt;code&gt;gulp-sass&lt;/code&gt;, to compile Sass to CSS. We can install it with the &lt;code&gt;npm install&lt;/code&gt; command with the &lt;code&gt;--save-dev&lt;/code&gt; flag like what we did above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will then need to require this plugin in the gulpfile.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var gulp = require(&#39;gulp&#39;);
// Requires the gulp-sass plugin
var sass = require(&#39;gulp-sass&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, create a &lt;code&gt;styles.scss&lt;/code&gt; file within the &lt;code&gt;app/scss&lt;/code&gt; folder and give it some styles to convert from Sass to CSS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.testing {
  display: flex;
  width: percentage(5/7);
  // Percentage is a Sass function that will be evaluated to CSS when compiled
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;styles.scss&lt;/code&gt; file will be converted into CSS by passing through the &lt;code&gt;gulp-sass&lt;/code&gt; plugin we installed. After passing through the plugin, it’ll be created as &lt;code&gt;styles.css&lt;/code&gt; in the &lt;code&gt;app/css&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/pipe-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here’s how the task would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;app/scss/styles.scss&#39;) // Gets the styles.scss file
    .pipe(sass()) // Passes it through a gulp-sass task
    .pipe(gulp.dest(&#39;app/css&#39;)) // Outputs it in the css folder
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can test this &lt;code&gt;sass&lt;/code&gt; task by running it in the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gulp sass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, if you take a look at the &lt;code&gt;styles.css&lt;/code&gt; file in &lt;code&gt;app/css&lt;/code&gt;, you’ll see that the &lt;code&gt;percentage()&lt;/code&gt; function has been evaluated into the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.testing {
  display: flex;
  width: 71.42857%; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means our &lt;code&gt;styles.scss&lt;/code&gt; file has successfully been compiled into CSS.&lt;/p&gt;
&lt;h2 id=&quot;adding-more-functionality-to-the-sass-task&quot;&gt;Adding more functionality to the sass task&lt;/h2&gt;
&lt;p&gt;Just compiling from Sass to CSS isn’t good enough. Sometimes it makes more sense to add more plugins to make thing simpler for us. One of the best plugins that you’ll ever use when converting from Sass to CSS is &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;autoprefixer&lt;/a&gt;,which helps you write vendor prefixes according to &lt;a href=&quot;http://www.caniuse.com/&quot;&gt;caniuse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s try adding autoprefixer to our &lt;code&gt;sass&lt;/code&gt; task.&lt;/p&gt;
&lt;p&gt;To do so, we’ll have to install the gulp plugin for autoprefixer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-autoprefixer --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we’ll have to require &lt;code&gt;autoprefixer&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var gulp = require(&#39;gulp&#39;);
var sass = require(&#39;gulp-sass&#39;);
// Requiring autoprefixer
var autoprefixer = require(&#39;gulp-autoprefixer&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Autoprefixer is usually placed after Sass is compiled into CSS. In Gulp, we’ll want to add another &lt;code&gt;.pipe()&lt;/code&gt; so the resultant CSS gets passed through autoprefixer before it’s created as &lt;code&gt;styles.css&lt;/code&gt; in &lt;code&gt;app/css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/pipe-autoprefixer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The modified code is hence:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;app/scss/styles.scss&#39;)
    .pipe(sass())
    .pipe(autoprefixer()) // Passes it through gulp-autoprefixer
    .pipe(gulp.dest(&#39;app/css&#39;))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you run &lt;code&gt;gulp sass&lt;/code&gt; again, you’ll notice that the output in the &lt;code&gt;styles.css&lt;/code&gt; file has changed to include vendor prefixes for the display flex property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.testing {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 71.42857%; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another task that’ll help you out during development is to add sourcemaps.&lt;/p&gt;
&lt;p&gt;A sourcemap is a string of information that tells the browser where different sections of the code is stored. With a CSS sourcemap, you can easily locate the original source code of specific lines of CSS just by checking out the inspector.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/sourcemap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To add sourcemaps to the &lt;code&gt;sass&lt;/code&gt; task, we’ll have to install the &lt;code&gt;gulp-sourcemaps&lt;/code&gt; plugin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-sourcemaps --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Requiring Sourcemaps
var sourcemaps = require(&#39;gulp-sourcemaps&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process to adding sourcemaps to our &lt;code&gt;sass&lt;/code&gt; task is slightly different from adding autoprefixer. We’ll have to add two &lt;code&gt;pipes&lt;/code&gt; instead of one.&lt;/p&gt;
&lt;p&gt;First, we’ll need to initialize the sourcemap plugin right after getting source files from gulp.&lt;/p&gt;
&lt;p&gt;Then, we’ll have to let the files pass through &lt;code&gt;gulp-sass&lt;/code&gt; and &lt;code&gt;gulp-autoprefixer&lt;/code&gt; before writing the sourcemaps at the end of the css file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/pipe-sourcemap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;app/scss/styles.scss&#39;) // Gets the styles.scss file
    .pipe(sourcemaps.init()) // Initialize sourcemap plugin
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(sourcemaps.write()) // Writing sourcemaps
    .pipe(gulp.dest(&#39;app/css&#39;))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you run &lt;code&gt;gulp sass&lt;/code&gt; on the terminal, you should be able to see that Gulp has written a sourcemap at the end of your CSS file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.testing {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 71.42857%; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UscUJBQWM7RUFBZCxzQkFBYztFQUFkLHFCQUFjO0VBQWQsY0FBYztFQUNkLGlCQUFpQixFQUZUIiwiZmlsZSI6InN0eWxlcy5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGVzdGluZyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHdpZHRoOiBwZXJjZW50YWdlKDUvNyk7XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;automatically-update-the-css-file-when-you-save&quot;&gt;Automatically update the CSS file when you save&lt;/h2&gt;
&lt;p&gt;Now it’s quite some work to run the &lt;code&gt;gulp sass&lt;/code&gt; task whenever we want to compile Sass to CSS. Wouldn’t it be awesome if Gulp would run it automatically?&lt;/p&gt;
&lt;p&gt;Gulp can do that! You’ll just have to let Gulp check whether the &lt;code&gt;styles.scss&lt;/code&gt; file was changed when you save it. This checking process is called &lt;code&gt;watching&lt;/code&gt; in programming terms.&lt;/p&gt;
&lt;p&gt;Gulp does this watching by providing us with a &lt;code&gt;watch&lt;/code&gt; method that allows you to run any task whenever a file is changed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Gulp watch syntax
gulp.watch(&#39;files-to-watch&#39;, [&#39;tasks&#39;, &#39;to&#39;, &#39;run&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of just watching the Sass files alone, you’ll often want to watch many types of files and run different tasks during a development process. In order to achieve that, we can create a &lt;code&gt;watch&lt;/code&gt; gulp task that watches different files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, function() {
  gulp.watch(&#39;app/scss/styles.scss&#39;, [&#39;sass&#39;]);
  // ... Other watchers
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you run the watch command you’ll see that gulp immediately starts watching your files for changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/watch-changes.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;And if you change a line in &lt;code&gt;styles.scss&lt;/code&gt;, Gulp will automatically run the sass task.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/watch-compile.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;There’s only one thing that’s lacking here. Gulp didn’t run the &lt;code&gt;sass&lt;/code&gt; task first before running &lt;code&gt;watch&lt;/code&gt;, which means the CSS might not be the most updated one. Hence, we’ll want to make sure the &lt;code&gt;watch&lt;/code&gt; task runs after the &lt;code&gt;sass&lt;/code&gt; task.&lt;/p&gt;
&lt;p&gt;We can do so by adding a second parameter to the &lt;code&gt;watch&lt;/code&gt; task. This second parameter is an array of tasks that must be completed before Gulp runs &lt;code&gt;watch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, [&#39;sass&#39;], function() {
  gulp.watch(&#39;app/scss/styles.scss&#39;, [&#39;sass&#39;]);
  // ... Other watchers
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you run the &lt;code&gt;watch&lt;/code&gt; task, you’ll see that Gulp tells the command line to first run the &lt;code&gt;sass&lt;/code&gt; task, followed by the &lt;code&gt;watch&lt;/code&gt; task.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/sass-watch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since we’re already watching and recompiling Sass files when it’s changed, why not bring it further and reload the browser each time the file is saved?&lt;/p&gt;
&lt;h2 id=&quot;automatically-refreshing-the-browser-when-you-save&quot;&gt;Automatically Refreshing the Browser when you save&lt;/h2&gt;
&lt;p&gt;Having the browser automatically refreshing when you save a file is a task that saves you lots of time and hand-ache.&lt;/p&gt;
&lt;p&gt;The best project for refreshing the browser right now is &lt;a href=&quot;http://www.browsersync.io/&quot;&gt;Browser Sync&lt;/a&gt;, and we can use with Gulp easily.&lt;/p&gt;
&lt;p&gt;First, we’ll have to install Browser Sync.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install browser-sync --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that there’s no more &lt;code&gt;gulp-&lt;/code&gt; prefix when installing Browser Sync. This is because Browser Sync can be made to work with Gulp right out of the box; you don’t need a Gulp plugin.&lt;/p&gt;
&lt;p&gt;We’ll have to &lt;code&gt;require&lt;/code&gt; Browser Sync, as usual.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var browserSync = require(&#39;browser-sync&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browser Sync spins up a local server to load static HTML files. We’ll have to provide it with some initial configurations so it knows where to find our &lt;code&gt;index.html&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let’s make a &lt;code&gt;browserSync&lt;/code&gt; task for spinning up this server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Start browserSync server
gulp.task(&#39;browserSync&#39;, function() {
  browserSync({
    server: {
      baseDir: &#39;app&#39;
    }
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll need to change the &lt;code&gt;sass&lt;/code&gt; task slightly to allow Browser Sync to inject new CSS into the HTML. To do so, we’ll hav eto add a &lt;code&gt;return&lt;/code&gt; before &lt;code&gt;gulp.src&lt;/code&gt; and we’ll have to &lt;code&gt;.pipe()&lt;/code&gt; a Browser Sync reload method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function() {
  return gulp.src(&#39;app/scss/styles.scss&#39;) // added return
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(autoprefixer())
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(&#39;app/css&#39;))
    // Reloading the stream
    .pipe(browserSync.reload({
      stream: true
    }));
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll also have to make sure the &lt;code&gt;browserSync&lt;/code&gt; task runs before the &lt;code&gt;watch&lt;/code&gt; task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, [&#39;browserSync&#39;, &#39;sass&#39;], function() {
  gulp.watch(&#39;app/scss/styles.scss&#39;, [&#39;sass&#39;]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run &lt;code&gt;gulp watch&lt;/code&gt; in the terminal now, you’ll see that &lt;code&gt;browserSync&lt;/code&gt; and &lt;code&gt;sass&lt;/code&gt; runs concurrently, followed by &lt;code&gt;watch&lt;/code&gt;. In addition, a browser pops up to show you the current &lt;code&gt;index.html&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/bs-watch.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;So if you change the &lt;code&gt;styles.scss&lt;/code&gt; file and save…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/07/bs-change-bg.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Viola! :)&lt;/p&gt;
&lt;p&gt;Since we’re already watching for changes and refreshing the browser when we save &lt;code&gt;styles.scss&lt;/code&gt;, why not do it for &lt;code&gt;index.html&lt;/code&gt; as well?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;watch&#39;, [&#39;sass&#39;], function() {
  gulp.watch(&#39;app/scss/styles.scss&#39;, [&#39;sass&#39;]);
  gulp.watch(&#39;app/index.html&#39;, browserSync.reload);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that’s an example of a decent workflow that converts Sass to CSS. Of course, there’s a lot of improvements you can make to it. For instance, you can configure options for each of the plugins used, and you can also watch more files with some node globbing knowledge.&lt;/p&gt;
&lt;p&gt;We’ll cover those in the next article :)&lt;/p&gt;
&lt;p&gt;Now let’s do a quick summary.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So in this article we learned how to install Gulp and we learn to set up a basic task with Gulp.&lt;/p&gt;
&lt;p&gt;Then we went ahead and setup a real task by adding different gulp plugins to the mix.&lt;/p&gt;
&lt;p&gt;Eventually, we made it much better by watching the files for change and refreshing the browser whenever possible.&lt;/p&gt;
&lt;p&gt;There’s still a whole lot more to configuring Gulp, but we’ll pause here for now. Let’s continue in the next article.&lt;/p&gt;
&lt;p&gt;What is one thing you’ve learned about Gulp in this tutorial? Let me know in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Choosing a Build Tool</title>
    <link href="https://zellwk.com/blog/choosing-a-build-tool/"/>
    <updated>2015-06-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/choosing-a-build-tool/</id>
    <content type="html">&lt;p&gt;Choosing to use one tool over another is one of the largest challenges developers face. Regardless of what you’re choosing, be it a code editor, a framework, or even a build tool. It’s never an easy decision.&lt;/p&gt;
&lt;p&gt;When it comes to build tools, the two most popular options right now are Grunt and Gulp. But are these the only two you should choose from? If not, what other choices do you have?&lt;/p&gt;
&lt;p&gt;Let’s answer this question.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1 id=&quot;what-are-build-tools-and-why-should-you-use-them%3F&quot;&gt;What are build tools and why should you use them?&lt;/h1&gt;
&lt;p&gt;Build tools are tools that help you automate your development processes. They can potentially help to automate up to four of the &lt;a href=&quot;https://zellwk.com/blog/workflow-overview/&quot;&gt;six different parts of a development process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 4 parts that can be automated by a build tool are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Development&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Optimization and&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are two different kinds of build tools you can choose from. First, we have GUI tools like &lt;a href=&quot;https://incident57.com/codekit/&quot;&gt;Codekit&lt;/a&gt; and &lt;a href=&quot;https://prepros.io/&quot;&gt;Prepros&lt;/a&gt;, that provide a graphical interface for you to choose from various options.&lt;/p&gt;
&lt;p&gt;The second kind of build tools are CLI tools like &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;, &lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt; and even &lt;a href=&quot;http://npmjs.com/&quot;&gt;npm&lt;/a&gt;. You can only use these tools by writing code or configurations, and you’ll need to use the command line.&lt;/p&gt;
&lt;p&gt;So, should you choose GUI tools over CLI tools or vice versa? Let’s take a look.&lt;/p&gt;
&lt;h2 id=&quot;why-gui-tools%3F&quot;&gt;Why GUI Tools?&lt;/h2&gt;
&lt;p&gt;GUI tools help you automate your workflow without any complex code configuration, and they’re ideal if you’re just getting your feet wet with web development.&lt;/p&gt;
&lt;p&gt;They help you do things like compiling Sass to CSS, and refreshing the browser when you save a file, which speeds up your development process tremendously.&lt;/p&gt;
&lt;p&gt;In addition, GUI tools can also help you test JavaScript code for errors with tools like &lt;a href=&quot;http://jshint.com/&quot;&gt;JShint&lt;/a&gt; and also optimize all your assets for production.&lt;/p&gt;
&lt;p&gt;Aside from the common tasks mentioned above, different tools have different functions. For example, Codekit allows you to use &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; while Prepros allows you to deploy through FTP.&lt;/p&gt;
&lt;p&gt;One major concern you may have with GUI tools is they may not be updated as quickly as you want them to be. If you find that you need the extra flexibility, you might want to check out CLI tools instead.&lt;/p&gt;
&lt;h2 id=&quot;why-cli-tools%3F&quot;&gt;Why CLI tools?&lt;/h2&gt;
&lt;p&gt;CLI tools are much more powerful and flexible when compared to GUI tools. They allow you to set up workflows that are far more advanced compared to what GUI tools can offer.&lt;/p&gt;
&lt;p&gt;You can also harness the power of many tools out there that aren’t supported by GUI tools. You can use tools like &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;, which allow you to require modules in the browser like how you would with Node.JS, and HTML templating tools like &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt; and &lt;a href=&quot;https://github.com/paularmstrong/swig&quot;&gt;Swig&lt;/a&gt; (Note: Swig is no longer maintained).&lt;/p&gt;
&lt;p&gt;If you want control over your build processes and don’t want to get stuck with any software, then CLI tools are definitely going to be for you.&lt;/p&gt;
&lt;p&gt;The only drawback to CLI tools is that they’re far more complex to configure. You may have to spend a few hours understanding how a workflow fits together and how you can code it up.&lt;/p&gt;
&lt;p&gt;The two major competitors for CLI tools are Grunt and Gulp. You can find many different articles comparing the two of them like &lt;a href=&quot;http://sixrevisions.com/web-development/grunt-vs-gulp/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;http://ponyfoo.com/articles/choose-grunt-gulp-or-npm&quot;&gt;this&lt;/a&gt; and  &lt;a href=&quot;http://markdalgleish.github.io/presentation-build-wars-gulp-vs-grunt/&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You’ll also find articles on using &lt;a href=&quot;http://blog.jetbrains.com/webstorm/2014/06/the-brunch-build-tool/&quot;&gt;Brunch&lt;/a&gt; or &lt;a href=&quot;https://www.google.com.sg/search?client=safari&amp;amp;rls=en&amp;amp;q=brunch+vs+gulp&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;gfe_rd=cr&amp;amp;ei=MzqKVc2wBsbLugSuiIHQAQ&quot;&gt;npm&lt;/a&gt; as your build tool instead of Grunt or Gulp.&lt;/p&gt;
&lt;p&gt;How should you choose since there’s so much conflicting advice out there?&lt;/p&gt;
&lt;p&gt;Most articles you’ll find online compare the benefits of one tool against another. I thought I’d come from a slightly different angle and share with you how I ended up choosing Gulp as my build tool.&lt;/p&gt;
&lt;h2 id=&quot;how-i-came-to-choose-gulp&quot;&gt;How I came to choose Gulp&lt;/h2&gt;
&lt;p&gt;If you’re wondering, I didn’t start automating with Gulp. I started automating my workflows with Codekit. After a couple of months, I switched over to Grunt and eventually to Gulp.&lt;/p&gt;
&lt;p&gt;When I started to automate my workflows, I had just started to learn Sass and Compass. I was petrified by the command line. It went so far that I even avoided using the &lt;code&gt;compass watch&lt;/code&gt; command if I could help it.&lt;/p&gt;
&lt;p&gt;Since I was using a Mac, I bought Codekit and I was happy with it.&lt;/p&gt;
&lt;p&gt;A couple of months later, I started playing with Angular JS and I was fascinated by how the &lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;yeoman angular generator&lt;/a&gt; could spin up a server with just a single Grunt command.&lt;/p&gt;
&lt;p&gt;I loved how simple the command was that I wanted to use Grunt straight away. However, I’m a huge control freak and I couldn’t use a tool if I didn’t understand how it was built and how to configure it to my liking.&lt;/p&gt;
&lt;p&gt;That was when I started playing with Grunt. It took me a couple of weeks to create a semi-decent workflow which could rival what Codekit had to offer. But once I got that working, I stopped using Codekit immediately.&lt;/p&gt;
&lt;p&gt;I’ve never looked back since, and &lt;strong&gt;I swore to myself I would stick with Grunt forever&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I didn’t keep my word six months later :(&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://zellwk.com/blog/grunt-sass-with-susy/&quot;&gt;created an article for a simple Grunt workflow that uses Libsass&lt;/a&gt; to compile Sass to CSS, and I show people how to use Susy with the process.&lt;/p&gt;
&lt;p&gt;People started requesting for LibSass with Susy using Gulp instead. That’s when I forced myself to learn Gulp to &lt;a href=&quot;https://zellwk.com/blog/gulp-libsass-with-susy/&quot;&gt;create the same tutorial&lt;/a&gt;, this time with Gulp.&lt;/p&gt;
&lt;p&gt;I was so surprised that the workflow with Gulp ended up being much easier than the one with Grunt that I decided to switch up my entire workflow to use Gulp.&lt;/p&gt;
&lt;p&gt;And that’s the story of how I got into Gulp.&lt;/p&gt;
&lt;p&gt;Well, so what’s my point of sharing this story?&lt;/p&gt;
&lt;h2 id=&quot;just-choose-whatever-that-you-feel-you-should-use-right-now.&quot;&gt;Just choose whatever that you feel you should use right now.&lt;/h2&gt;
&lt;p&gt;There’s no need to hesitate between the different tools. If you want to automate, and you know what you want to achieve, then you’ll know what tool you’ll want to use.&lt;/p&gt;
&lt;p&gt;Just pick it up and go.&lt;/p&gt;
&lt;p&gt;If there comes a time where you’ll have to learn another tool, you’ll know it when the time comes.&lt;/p&gt;
&lt;h2 id=&quot;what-if-a-better-tool-popped-up%3F&quot;&gt;What if a better tool popped up?&lt;/h2&gt;
&lt;p&gt;Better tools will always pop up. That’s the nature of the web industry.&lt;/p&gt;
&lt;p&gt;I first heard about Gulp right after I did the hard work of learning to use Grunt, and it was supposedly a better tool compared to Grunt.&lt;/p&gt;
&lt;p&gt;And I decided to stick with Grunt after asking myself two questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you want to improve your current build process?&lt;/li&gt;
&lt;li&gt;Can the new tool help you achieve that?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I couldn’t think of ways to improve my build process at the time, hence learning Gulp to craft the same build process was a waste of time and effort that could be better spent elsewhere.&lt;/p&gt;
&lt;p&gt;Circumstances changed a few months later after I was forced to learn Gulp. I wanted to improve my processes again, and Gulp came in at the perfect time.&lt;/p&gt;
&lt;p&gt;So yes, I was late to the Gulp party because Grunt was satisfactory for me. For now, I’d still stick with Gulp even with all the new methods and tools I discovered since.&lt;/p&gt;
&lt;p&gt;Who knows how long I’ll stick with Gulp. Maybe someday I’ll even &lt;a href=&quot;http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/&quot;&gt;ditch Gulp in preference for using NPM as a build tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll update you when that happens.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;So what I’m trying to say here is this: Pick a tool. Any tool. Go with it if it feels right for you right now.&lt;/p&gt;
&lt;p&gt;You might change your tool, or you might not, and you’ll know you want to change when the time comes.&lt;/p&gt;
&lt;p&gt;If you’re thinking about choosing Gulp, but aren’t sure where to start, I invite you to sign up for my automation newsletter below as I share more about how I configure Gulp and use several other frontend tools.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Overcoming your Fear of the Command Line</title>
    <link href="https://zellwk.com/blog/fear-of-command-line/"/>
    <updated>2015-06-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/fear-of-command-line/</id>
    <content type="html">&lt;p&gt;Most tools that help you automate your workflow require the use of the command line. Hence, the first obstacle you have to overcome is getting comfortable with the command line.&lt;/p&gt;
&lt;p&gt;But the command line is scary.&lt;/p&gt;
&lt;p&gt;Playing with it feels like you’re dismantling a bomb that could go off any moment. One wrong move and that’ll mean the end of your life, and your computer.&lt;/p&gt;
&lt;p&gt;I didn’t dare to touch it when I first began to code. I felt that the command line was a tool that only experts could use.&lt;/p&gt;
&lt;p&gt;However, as I got to know more about it, I began to realize that the command line isn’t scary at all! It’s incredibly safe, even for beginners, and anyone can use it to help improve their workflow.&lt;/p&gt;
&lt;p&gt;In this article I’ll show you why the command line isn’t that scary, and how to start to get comfortable with it.&lt;/p&gt;
&lt;p&gt;Ready to go? Let’s begin!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;starting-up-the-command-line&quot;&gt;Starting Up the Command Line&lt;/h2&gt;
&lt;p&gt;The command line is a program that takes in written commands and performs them with your operating system.&lt;/p&gt;
&lt;p&gt;Your operating system should have a program built in to run the command line. It’s called the Terminal on the Mac, and the Command Prompt on Windows. Fire that up and you’re already looking at the command line (Note: Windows users might want to use a command line emulator like &lt;a href=&quot;http://cmder.net/&quot;&gt;Cmder&lt;/a&gt; instead).&lt;/p&gt;
&lt;p&gt;Here’s how it looks like on a Mac&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/command-line.png&quot; alt=&quot;command line&quot;&gt;&lt;/p&gt;
&lt;p&gt;You don’t see anything you can do with it, there’s no step by step instructions you can follow and everything you type in seems to return an error.&lt;/p&gt;
&lt;p&gt;No wonder it’s so scary!&lt;/p&gt;
&lt;p&gt;Well, don’t worry.&lt;/p&gt;
&lt;h2 id=&quot;nothing-you-do-will-break-your-computer&quot;&gt;Nothing you do will break your computer&lt;/h2&gt;
&lt;p&gt;Even if you entered multiple invalid commands.&lt;/p&gt;
&lt;p&gt;When you enter an invalid command, all the command line does is to show you an error message, then do nothing.&lt;/p&gt;
&lt;p&gt;Here’s an example if what it does if you enter an invalid command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ blah
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/invalid-command.png&quot; alt=&quot;invalid-command&quot;&gt;&lt;/p&gt;
&lt;p&gt;You’ll get is a “command not found” error message, then nothing happens. You’re still safe and your computer didn’t explode.&lt;/p&gt;
&lt;p&gt;The only command you need to be wary of is the &lt;code&gt;rm&lt;/code&gt; command. This means to remove files permanently, which deletes your file and leaves it nowhere to be found, not even in your trash.&lt;/p&gt;
&lt;p&gt;Next, you’ll want to learn a few commands that you can use with the command line. It comes with &lt;a href=&quot;http://ss64.com/osx/&quot;&gt;a big list of commands&lt;/a&gt;, but you’ll only need to know 6 of them.&lt;/p&gt;
&lt;h2 id=&quot;the-6-commands-you-need-to-know&quot;&gt;The 6 commands you need to know&lt;/h2&gt;
&lt;p&gt;The 6 commands you need to know are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pwd&lt;/li&gt;
&lt;li&gt;cd&lt;/li&gt;
&lt;li&gt;ls&lt;/li&gt;
&lt;li&gt;mkdir&lt;/li&gt;
&lt;li&gt;touch&lt;/li&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s go through them one by one.&lt;/p&gt;
&lt;h3 id=&quot;pwd&quot;&gt;pwd&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pwd&lt;/code&gt; means print working directory. All it does is to let you see the location you are at in the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ pwd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/pwd.png&quot; alt=&quot;pwd&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;ls&quot;&gt;ls&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; means list files. If you enter this command you’ll get a list of all the files and folders that is in your current location.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/ls.png&quot; alt=&quot;ls&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this case, you’ll see that I have folders such as Desktop, Music, Pictures and Library within my current working directory.&lt;/p&gt;
&lt;p&gt;This information is good knowledge for the next command you’ll use.&lt;/p&gt;
&lt;h3 id=&quot;cd&quot;&gt;cd&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; means change directory. It allows you to change the current directory to different folders. It is the most used command of all.&lt;/p&gt;
&lt;p&gt;When combined with the &lt;code&gt;ls&lt;/code&gt; command, you’ll be able to see the folders you can navigate to. If I wanted to navigate to Desktop, all I have to do is to write this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd Desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/cd.png&quot; alt=&quot;cd&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you wanted to go back up a directory, you’ll just have to type in &lt;code&gt;..&lt;/code&gt; after &lt;code&gt;cd&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/cd2.png&quot; alt=&quot;cd back a directory&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can repeat this &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; combination to get to any folder you want to get to.&lt;/p&gt;
&lt;p&gt;Here’s a neat thing. You can type cd and drag any folder on the mac into the terminal, and it’ll fill up the correct path for you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/cd-drag.gif&quot; alt=&quot;cd with drag&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;mkdir&quot;&gt;mkdir&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; means make directory. It’s the same as creating a new folder by right clicking with your mouse and selecting create new folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ mkdir testing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates the testing directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/mkdir.png&quot; alt=&quot;mkdir&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;touch&quot;&gt;touch&lt;/h3&gt;
&lt;p&gt;Touch is the command to create a file. You can create any kind of file with touch.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ touch index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means to create a file named &lt;code&gt;index&lt;/code&gt; with the extension &lt;code&gt;html&lt;/code&gt; in the current working directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/touch.png&quot; alt=&quot;touch&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;clear&quot;&gt;clear&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;clear&lt;/code&gt; means to clear the terminal screen. It’ll remove all the clutter you have on the screen and revert it back to the clean state you had when you open the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ clear
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/clear.png&quot; alt=&quot;clear&quot;&gt;&lt;/p&gt;
&lt;p&gt;There you go, the 6 commands you’ll need to know to use the terminal effectively.&lt;/p&gt;
&lt;p&gt;And this point you may be wondering about other commands like &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;bower&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;gulp&lt;/code&gt; and all other kinds of commands you see around the internet.&lt;/p&gt;
&lt;p&gt;The thing is these commands are not native to the command line. You’ll wont be able to use them unless you have installed their command line interfaces (CLIs).&lt;/p&gt;
&lt;p&gt;This means you don’t have to worry about these commands for now. You can pick them up one by one as you learn more about them.&lt;/p&gt;
&lt;p&gt;But even if you make mistakes with these additional commands, you’re still safe. Let’s take a look at an example with the &lt;code&gt;git&lt;/code&gt; command&lt;/p&gt;
&lt;h2 id=&quot;addtional-commands-from-other-clis&quot;&gt;Addtional commands from other CLIs&lt;/h2&gt;
&lt;p&gt;To use the &lt;code&gt;git&lt;/code&gt; command, you’ll need to make sure that Git is installed on your machine.&lt;/p&gt;
&lt;p&gt;Git is already installed on the Mac, so Mac users can skip the installation step. Windows users will have to &lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;install Git&lt;/a&gt; though.&lt;/p&gt;
&lt;p&gt;Once you have Git installed, you can type commands that Git provides. You’ll see a scary bunch of text if you type in an invalid command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/git1.png&quot; alt=&quot;Invalid command git&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s look at it part by part so it’s not so overwhelming. Here’s the first part:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/git2.png&quot; alt=&quot;git usage&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here we can see that the &lt;code&gt;git&lt;/code&gt; command doesn’t work alone. You’ll have to accompany it with either an argument or a command.&lt;/p&gt;
&lt;p&gt;So commands like these would work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git --version # shows you the version of git installed
$ git --help # shows git help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second part of this huge chunk tells you the common commands that people use with Git.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/git3.png&quot; alt=&quot;Git commands&quot;&gt;&lt;/p&gt;
&lt;p&gt;One of these commands is the &lt;code&gt;checkout&lt;/code&gt; command, where you can check out a branch. Here’s an example of how you can use it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git checkout development # checks out the development branch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the last part simply tells you to enter the commands if you need more help:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/git4.png&quot; alt=&quot;git4&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, &lt;strong&gt;nothing broke even when you entered an invalid command&lt;/strong&gt;. The command line is smart enough to prompt you that something is wrong, and ask you to correct your commands.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;We’ve covered the basics of the command line and you’ve seen why there’s nothing to be afraid of. We also took a look at other CLIs with &lt;code&gt;git&lt;/code&gt; as an example. I hope this article has helped you overcome your fear with the command line.&lt;/p&gt;
&lt;p&gt;Don’t worry if you don’t understand what the &lt;code&gt;git&lt;/code&gt; commands do right now. Every CLI has its own set of commands and you’ll have to learn them by reading through their documentation or viewing tutorials on the web.&lt;/p&gt;
&lt;p&gt;What’s important right now is for you to get your feet wet with the command line and make sure you’re comfortable typing in it.&lt;/p&gt;
&lt;p&gt;One more thing. If you want to up your command line game, I highly suggest checking out the &lt;a href=&quot;http://commandlinepoweruser.com/&quot;&gt;free command line video series&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/wesbos&quot;&gt;Wes Bos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Try playing around with the 6 commands mentioned in the article – &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt; and let me know how you feel about the command line in the comments section below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Manage your Frontend Dependencies with Bower</title>
    <link href="https://zellwk.com/blog/bower/"/>
    <updated>2015-06-07T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/bower/</id>
    <content type="html">&lt;p&gt;Bower is a great dependency manager that’s specially created to help you manage different frontend libraries.&lt;/p&gt;
&lt;p&gt;It reduces the time and energy you need to spend hunting around the web for libraries like Susy and jQuery by helping you install, update or delete them with a single command.&lt;/p&gt;
&lt;p&gt;To top it off, it can help you download all the libraries you need whenever you scaffold a new project with a single command.&lt;/p&gt;
&lt;p&gt;In this article we’ll talk about how to install Bower and how to use it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;installing-bower&quot;&gt;Installing Bower&lt;/h2&gt;
&lt;p&gt;Bower requires you to have 3 things installed on your system:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Node Package Manager (npm)&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can install NodeJS by downloading the installer from &lt;a href=&quot;https://nodejs.org/&quot;&gt;its website&lt;/a&gt; and double clicking on it.&lt;/p&gt;
&lt;p&gt;Npm comes bundled together with the NodeJS installation and so you don’t have to install anything extra for it.&lt;/p&gt;
&lt;p&gt;Finally, Windows users will need to download and &lt;a href=&quot;http://git-scm.com/download/win&quot;&gt;install git&lt;/a&gt; if you haven’t done so already. Mac has Git installed by default.&lt;/p&gt;
&lt;p&gt;Once you have these three prerequisites installed, you can install bower by firing up the command line and entering the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install bower -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;npm&lt;/code&gt; is a command made available to your command line after you installed npm. The &lt;code&gt;install&lt;/code&gt; command tells npm to install a node package that can be found on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bower is one such package and hence we’re installing it with npm.&lt;/p&gt;
&lt;p&gt;The final &lt;code&gt;-g&lt;/code&gt; flag tells npm to install Bower globally, which allows you to use the &lt;code&gt;bower&lt;/code&gt; command anywhere on your computer.&lt;/p&gt;
&lt;p&gt;We’re now ready to start managing dependencies with Bower! Let’s start by creating an empty folder called test and navigate into it.&lt;/p&gt;
&lt;h2 id=&quot;creating-a-bower.json-file&quot;&gt;Creating a bower.json file&lt;/h2&gt;
&lt;p&gt;Bower looks at a file called &lt;code&gt;bower.json&lt;/code&gt; to identify the dependencies in your project, so you’ll want to make sure you create this &lt;code&gt;bower.json&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;You can do that by running &lt;code&gt;bower init&lt;/code&gt; from your command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upon hitting enter, Bower immediately runs you through a series of questions and creates the &lt;code&gt;bower.json&lt;/code&gt; file for you at the end.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-init.png&quot; alt=&quot;bower init&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once the &lt;code&gt;bower.json&lt;/code&gt; file is created, you can begin installing libraries into your project.&lt;/p&gt;
&lt;h2 id=&quot;installing-bower-packages&quot;&gt;Installing Bower Packages&lt;/h2&gt;
&lt;p&gt;By the way, libraries in Bower and npm are also called packages (in case you’re wondering where the “package” word came from).&lt;/p&gt;
&lt;p&gt;You can install packages with Bower the same way as you would install packages with npm. The difference is that you’ll have to use the &lt;code&gt;bower&lt;/code&gt; command instead.&lt;/p&gt;
&lt;p&gt;So fire up your command line and enter this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install jquery --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bower will install the latest version of jQuery with this command. The additional &lt;code&gt;--save&lt;/code&gt; flag tells Bower to add jQuery into your &lt;code&gt;bower.json&lt;/code&gt; file as a dependency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-json.png&quot; alt=&quot;bower json&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you take a look at your folders now you’ll see a &lt;code&gt;bower_components&lt;/code&gt; directory, followed by a &lt;code&gt;jquery&lt;/code&gt; folder within it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-components.png&quot; alt=&quot;Bower components with jQuery&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s try to use this jQuery package you’ve just installed.&lt;/p&gt;
&lt;h2 id=&quot;using-a-library-installed-with-bower&quot;&gt;Using a library installed with Bower&lt;/h2&gt;
&lt;p&gt;You’ll first have to identify the files you need in the package before you can use it with your project.&lt;/p&gt;
&lt;p&gt;Here’s where I got confused when I first started with Bower.&lt;/p&gt;
&lt;p&gt;Bower allows developers to freely structure their Bower packages. This means that every Bower package is different and you’ll have to find the correct file for each package.&lt;/p&gt;
&lt;p&gt;It can be daunting at first, so let’s run through this together.&lt;/p&gt;
&lt;p&gt;First you’ll have to navigate to the &lt;code&gt;jquery&lt;/code&gt; folder within &lt;code&gt;bower_components&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’ll see that there’s a &lt;code&gt;src&lt;/code&gt; folder and a &lt;code&gt;dist&lt;/code&gt; folder within this package. Both &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt; are short names for folders that developers use. &lt;code&gt;src&lt;/code&gt; means source while &lt;code&gt;dist&lt;/code&gt; means distribution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/jquery.png&quot; alt=&quot;jquery folder&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this case, you’ll want to search under &lt;code&gt;distribution&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/jquery-2.png&quot; alt=&quot;jquery.js location&quot;&gt;&lt;/p&gt;
&lt;p&gt;In here, you’ll find &lt;code&gt;jquery.js&lt;/code&gt;, which is what we’re looking for.&lt;/p&gt;
&lt;p&gt;What you need to do to use this file is to reference this script in your html. If you have an &lt;code&gt;index.html&lt;/code&gt; file in the &lt;code&gt;test&lt;/code&gt; folder, you can use this jQuery library with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;bower_components/jquery/dist/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the process for using Javascript files installed with Bower.&lt;/p&gt;
&lt;p&gt;In addition to JavaScript libraries, you can often find Sass libraries as well. Let’s try our hand at installing Susy and using it with Sass.&lt;/p&gt;
&lt;h2 id=&quot;using-a-sass-library-with-bower&quot;&gt;Using a Sass library with Bower&lt;/h2&gt;
&lt;p&gt;You can install Susy the same way you installed jQuery – by using the &lt;code&gt;bower install&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install susy --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check that you now have a &lt;code&gt;susy&lt;/code&gt; folder in the &lt;code&gt;bower_components&lt;/code&gt; directory and a &lt;code&gt;susy&lt;/code&gt; dependency in your &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/susy.png&quot; alt=&quot;susy folder&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/susy-dep.png&quot; alt=&quot;susy dependency&quot;&gt;&lt;/p&gt;
&lt;p&gt;Similar to what we did before with the jQuery package, you’ll need to look into the &lt;code&gt;susy&lt;/code&gt; folder to find out what files to add to your Sass project.&lt;/p&gt;
&lt;p&gt;In this case, the file you want is &lt;code&gt;susy.scss&lt;/code&gt;, which can be found in the &lt;code&gt;sass&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/susy-2.png&quot; alt=&quot;Susy sass file&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, you have to import this file to your Sass partial. The code will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &amp;quot;../bower_components/susy/sass/susy&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done with adding a Sass file from a bower package into your project!&lt;/p&gt;
&lt;p&gt;So far so good. Let’s take a step back and look at how to search for packages on Bower if you’re not sure of the name of the package you’re trying to install.&lt;/p&gt;
&lt;h2 id=&quot;searching-for-bower-packages&quot;&gt;Searching for Bower Packages&lt;/h2&gt;
&lt;p&gt;Let’s say you’re trying to install the &lt;a href=&quot;https://github.com/at-import/breakpoint&quot;&gt;breakpoint library&lt;/a&gt; by Team Sass (who changed their github repo to at-import), but you’re not too sure whether the bower package is called breakpoint.&lt;/p&gt;
&lt;p&gt;In this case, you can search for the breakpoint package with the &lt;code&gt;bower search&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower search breakpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-search.png&quot; alt=&quot;breakpoint result&quot;&gt;&lt;/p&gt;
&lt;p&gt;And as you can see, there are multiple results for &lt;code&gt;breakpoint&lt;/code&gt;. If you went ahead and typed &lt;code&gt;bower install breakpoints&lt;/code&gt;, you would have installed an incorrect bower package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/breakpoint-result.png&quot; alt=&quot;breakpoint result&quot;&gt;&lt;/p&gt;
&lt;p&gt;So if you’re unsure, the best thing to do is always to search for the Bower package first, take a look at their git repository before deciding what to install.&lt;/p&gt;
&lt;p&gt;The other way is to look through the documentation since most package authors will tell you how to install their package through Bower.&lt;/p&gt;
&lt;p&gt;Now let’s see how Bower can help you install all your dependencies with just one command!&lt;/p&gt;
&lt;h2 id=&quot;installing-dependencies-with-one-command&quot;&gt;Installing dependencies with one command&lt;/h2&gt;
&lt;p&gt;First, you’ll want to delete the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Next, run this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bower will then look through your &lt;code&gt;bower.json&lt;/code&gt; and download all dependencies for you. After it’s done, you’ll be able to find your dependencies back in the &lt;code&gt;bower_components&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;This makes it easy for you to automate your scaffolding and allows team members to quickly get their project up to speed with the correct dependencies.&lt;/p&gt;
&lt;p&gt;What about uninstalling packages that you don’t need?&lt;/p&gt;
&lt;h2 id=&quot;uninstalling-bower-packages&quot;&gt;Uninstalling Bower Packages&lt;/h2&gt;
&lt;p&gt;Uninstalling Bower packages is almost the same as installing them. You’ll just have to use the &lt;code&gt;bower uninstall&lt;/code&gt; command instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower uninstall susy --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with this command, Susy will be removed from both your folder and your bower.json file.&lt;/p&gt;
&lt;p&gt;That’s the basic Bower stuff. Now, let’s talk about something slightly more advanced (but good to know) stuff. These are the things that tripped me up when I wanted to use Bower with my projects initially.&lt;/p&gt;
&lt;h2 id=&quot;advanced-bower-stuff&quot;&gt;Advanced Bower Stuff&lt;/h2&gt;
&lt;p&gt;Alright. What we’re going to cover in this section is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to install a specific version of a library&lt;/li&gt;
&lt;li&gt;What to do if there’s a conflicting version of a library&lt;/li&gt;
&lt;li&gt;How to update all Bower packages to their latest available versions&lt;/li&gt;
&lt;li&gt;How to change the location of &lt;code&gt;bower_components&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;installing-a-specific-version-of-a-package&quot;&gt;Installing a specific version of a package&lt;/h3&gt;
&lt;p&gt;Say you discovered that you have to use jQuery version 1.11.3 instead of 2.1.4 that we have installed. You can install this specific version by appending a &lt;code&gt;#&lt;/code&gt; plus the version number you’re trying to install.&lt;/p&gt;
&lt;p&gt;Here’s what you’ll do:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower install jquery#1.11.3 --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would install jQuery v1.11.3 into your project.&lt;/p&gt;
&lt;p&gt;However, since you already have jQuery v2.1.4 in your project, you’ll be greeted with a dependency conflict.&lt;/p&gt;
&lt;h3 id=&quot;resolving-dependency-conflicts&quot;&gt;Resolving Dependency Conflicts&lt;/h3&gt;
&lt;p&gt;Bower knows when you have two versions of the same library installed and asks you to choose between them when this happens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/dependency-conflict.png&quot; alt=&quot;dependency conflict&quot;&gt;&lt;/p&gt;
&lt;p&gt;All you have to do is to select the correct version with &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; and Bower will resolve the conflict for you automatically.&lt;/p&gt;
&lt;p&gt;Since we’re on a older version of jQuery right now, let’s talk about how we can bump it up to the latest version with Bower.&lt;/p&gt;
&lt;h2 id=&quot;updating-bower-packages-to-their-latest-versions&quot;&gt;Updating Bower Packages to their latest versions&lt;/h2&gt;
&lt;p&gt;Once in a while when you’re scaffolding new projects you’ll probably want to bump your dependencies to the latest possible version.&lt;/p&gt;
&lt;p&gt;That, unfortunately, is not doable with Bower’s native &lt;code&gt;bower update&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;What I’ve found helpful with this problem is the &lt;a href=&quot;https://www.npmjs.com/package/bower-update&quot;&gt;bower-update&lt;/a&gt; npm package written by &lt;a href=&quot;https://twitter.com/sapegin&quot;&gt;@sagepin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s install this package via npm first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install bower-update -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This package gives you the ability to use the &lt;code&gt;bower-update&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower-update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What it does is that it’ll run through all the bower components in your project and check if they are the latest version. Then, it gives you the opportunity to individually update each package to its latest version.&lt;/p&gt;
&lt;p&gt;If you run this &lt;code&gt;bower-update&lt;/code&gt; command in the &lt;code&gt;test&lt;/code&gt; folder, you’ll get a prompt like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-update.png&quot; alt=&quot;bower-update&quot;&gt;&lt;/p&gt;
&lt;p&gt;The only thing I dislike about the &lt;code&gt;bower-update&lt;/code&gt; command is that it adds a “resolutions” object in the &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/06/bower-resolution.png&quot; alt=&quot;bower resolution&quot;&gt;&lt;/p&gt;
&lt;p&gt;I haven’t found a need for resolutions myself and I often delete it manually.&lt;/p&gt;
&lt;p&gt;Finally, let’s see how we can change the directory where Bower installs its files.&lt;/p&gt;
&lt;h3 id=&quot;changing-bower-components-directory&quot;&gt;Changing bower components directory&lt;/h3&gt;
&lt;p&gt;Bower now installs your components into the &lt;code&gt;bower_components&lt;/code&gt; in the root folder by default.&lt;/p&gt;
&lt;p&gt;However, in older versions, Bower installs them in &lt;code&gt;app/bower_components&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;This inconsistency may cause some problems for you since the location of &lt;code&gt;bower_components&lt;/code&gt; is incredibly important.&lt;/p&gt;
&lt;p&gt;The good news is you can control this install directory with a &lt;code&gt;.bowerrc&lt;/code&gt; file and this should be placed in the folder where you run bower commands.&lt;/p&gt;
&lt;p&gt;Once you have the &lt;code&gt;.bowerrc&lt;/code&gt; file, all you have to do is to state the directory at which bower should install its components at. I tend to leave mine as this &lt;code&gt;app/bower_components&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;directory&amp;quot; : &amp;quot;app/bower_components&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That’s everything you need to know about Bower in order to use it in your projects.&lt;/p&gt;
&lt;p&gt;You’ve learned how to install, update and use packages that you need. You’ve also learnt to uninstall packages that you no longer need.&lt;/p&gt;
&lt;p&gt;What’s more, you’ve learn how to customize the directory where Bower installs packages and that would help you fit Bower into your project, no matter how it looks like.&lt;/p&gt;
&lt;p&gt;How do you feel towards Bower after reading this article? Have you managed to integrate it into your projects yet? Let me know in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An Overview of a Development Workflow</title>
    <link href="https://zellwk.com/blog/workflow-overview/"/>
    <updated>2015-06-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/workflow-overview/</id>
    <content type="html">&lt;p&gt;A good workflow is crucial for development because it saves time. We know this, and yet we constantly procrastinate this important task.&lt;/p&gt;
&lt;p&gt;We can’t blame ourselves really. New technologies pop up and we have no idea how to use them. The web industry moves too fast and sometimes causes us to be completely overwhelmed.&lt;/p&gt;
&lt;p&gt;So for the first post in the workflow series, I wanna show you what a development workflow is, and how to automate different parts of the workflow.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-6-parts-of-a-development-workflow&quot;&gt;The 6 parts of a development workflow&lt;/h2&gt;
&lt;p&gt;There are 6 parts in a development workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scaffold&lt;/li&gt;
&lt;li&gt;Develop&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;li&gt;Integrate&lt;/li&gt;
&lt;li&gt;Optimize&lt;/li&gt;
&lt;li&gt;Deploy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Scaffold&lt;/strong&gt; is where you setup your web project. This is where you’ll create a git repo, prepare file structures, download libraries and dependencies and all other tasks just to make sure your project is ready to go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Develop&lt;/strong&gt; is where you spend the most of your time - writing code!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test&lt;/strong&gt; is where you test to see if your code works. You’ll go back and develop more if things aren’t working out, or if your new code breaks some other stuff on your website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrate&lt;/strong&gt; is where you merge your code with the rest of your team. This usually involves merging git branches. You skip integration if you work solo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimize&lt;/strong&gt; is where you prepare all your assets for use on the production server. Files are optimized such that they allow your visitors to view your site as quickly as possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deploy&lt;/strong&gt; is where you push your code and assets up into the server and allow changes to be viewed by the public.&lt;/p&gt;
&lt;p&gt;We will dive into each part and figure out what can be automated. Here’s a question for you before we do so though:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which part(s) are a major pain in the ass for you?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Keep that in mind as you continue through the rest of this article. All 6 parts of the workflow can be automated so you’ll reap the largest benefit from automating your most painful areas first.&lt;/p&gt;
&lt;p&gt;Let’s go through each part one by one.&lt;/p&gt;
&lt;h2 id=&quot;automating-scaffold&quot;&gt;Automating Scaffold&lt;/h2&gt;
&lt;p&gt;We know that scaffold is the process where you first setup your project.&lt;/p&gt;
&lt;p&gt;One of the things you’ll have to do here is to install libraries like Susy and jQuery.&lt;/p&gt;
&lt;p&gt;You know you’re still on a manual process if you have to go to the Susy or jQuery website, download the source files and add them to your project.&lt;/p&gt;
&lt;p&gt;This manual process takes up a huge amount of time and energy, which could have been used for development instead.&lt;/p&gt;
&lt;p&gt;You could have saved the time and energy if you used a dependency manager like &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt;. You just have to enter two commands in the command line and both Susy and jQuery will be downloaded for you.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bower install susy --save
bower install jquery --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A 5-minute task of downloading libraries off the net can effectively become a 10-second task!&lt;/p&gt;
&lt;p&gt;Another great thing about dependency managers is that you can install multiple libraries with a single command if you have it set up already.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bower install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one command can effectively install any number of libraries as long as you have it configured beforehand, which saves your team members the trouble of downloading libraries.&lt;/p&gt;
&lt;p&gt;Don’t worry if you’re unfamiliar with Bower or the command line because we can talk about these tools in detail in later posts. For now, just be aware that these are possible processes that you can put in place to quicken your workflow.&lt;/p&gt;
&lt;p&gt;Now, back to dependency managers.&lt;/p&gt;
&lt;p&gt;Different dependency managers work with different languages. Bower is one that specializes in frontend libraries.&lt;/p&gt;
&lt;p&gt;If you use other languages, you’ll want to keep these package managers in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;Node Package Manager(NPM)&lt;/a&gt; for NodeJS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt; for Ruby and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; for PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another level of automation will be to use Yeoman to scaffold the entire project for you, including files and folders. That’s way more advanced though. We can come back to this at a later stage.&lt;/p&gt;
&lt;p&gt;Now on to develop.&lt;/p&gt;
&lt;h2 id=&quot;automating-development&quot;&gt;Automating Development&lt;/h2&gt;
&lt;p&gt;Go back to the good old days when we use only HTML and CSS. When you save any of these files, you’ll have to manually reload the browser to see your changes, right?&lt;/p&gt;
&lt;p&gt;Have you thought about the possibility of having your browser reloading the page for you?&lt;/p&gt;
&lt;p&gt;Now, you probably use some preprocessing languages like Sass or CoffeeScript that require compilation into normal CSS or JavaScript before the browser can render them.&lt;/p&gt;
&lt;p&gt;What if you could compile the languages and reload the browser as well when you save these files?&lt;/p&gt;
&lt;p&gt;There’s more. You might have to manually reload the pages if you used a templating language like Mustache or a CMS like Wordpress. What if you can watch for mustache or php files and reload the browser as well?&lt;/p&gt;
&lt;p&gt;One more thing. You probably have different environments like development, staging and production set up. What would it mean for you if you could get the website to detect the environment you’re on and serve the correct files automatically?&lt;/p&gt;
&lt;p&gt;Wouldn’t you want something like this? Developing and seeing your changes straight in the browser is definitely one of the most awesome automations you can do in the development stage. And you know what, it’s possible now!&lt;/p&gt;
&lt;p&gt;Doing so requires you to learn how to use a build tool, like &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; or &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re happy with a subset of what we mentioned here, and are afraid of the command line, you might want to check out GUI tools like &lt;a href=&quot;https://incident57.com/codekit/&quot;&gt;Codekit&lt;/a&gt; or &lt;a href=&quot;https://prepros.io/&quot;&gt;Prepros&lt;/a&gt; instead.&lt;/p&gt;
&lt;p&gt;There’s really more to this, but let’s talk more about it at a later stage. Onto the next part.&lt;/p&gt;
&lt;h2 id=&quot;automating-testing&quot;&gt;Automating Testing&lt;/h2&gt;
&lt;p&gt;There are three kinds of tests you can run to ensure that your code is up to standard, works great and doesn’t break anything.&lt;/p&gt;
&lt;p&gt;The first kind of test is code format tests, where you check your code formatting to see if they follow industry practices using tools like &lt;a href=&quot;http://jshint.com/&quot;&gt;JShint&lt;/a&gt; and &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;SCSSlint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second kind of test is unit tests, where you check your code against tests you have written to ensure that they work correctly, and new code doesn’t break the functionality of other parts of the site. These tests are usually JavaScript-oriented and you’ll have to learn to write tests with a JavaScript unit testing framework like &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The third type of tests is CSS Regression testing, where you check the output of the browser to see whether it breaks parts of the page that you have previously coded. These tests helps catch visual errors on even on parts of the site that you may fail to notice yourself. They require you to learn more stuff, like &lt;a href=&quot;https://github.com/Huddle/PhantomCSS&quot;&gt;PhantomCSS&lt;/a&gt; and more.&lt;/p&gt;
&lt;p&gt;You can run these tests with their own commands or you can use a tool to run all these tests together with a single command, which saves time and energy again, because you don’t have to run the tests manually every single time.&lt;/p&gt;
&lt;p&gt;If you want to run these tools with a single command, you’ll have to learn how to use a build tool, and that means Grunt or Gulp again.&lt;/p&gt;
&lt;p&gt;Next to integration!&lt;/p&gt;
&lt;h2 id=&quot;automating-integration&quot;&gt;Automating Integration&lt;/h2&gt;
&lt;p&gt;Integration is normally done purely with Git, where you push, pull and merge code from different developers into a single repository.&lt;/p&gt;
&lt;p&gt;If you want to make sure code from every developer is up to the standard and doesn’t break any part of the website, you can run tests while integrating the code into the git repo.&lt;/p&gt;
&lt;p&gt;To do so, you can set up a continuous integration (CI), which basically means automated testing after you integrate the codebase.&lt;/p&gt;
&lt;p&gt;You’ll have to learn how to write a CI config file to set this up.&lt;/p&gt;
&lt;p&gt;Next!&lt;/p&gt;
&lt;h2 id=&quot;automating-your-optimization-process&quot;&gt;Automating your optimization process&lt;/h2&gt;
&lt;p&gt;You’ll want to optimize all your assets for use on the production server to ensure the page loads as quickly as possible.&lt;/p&gt;
&lt;p&gt;That’ll involve minifying and concatenating CSS and JavaScript, optimizing images and SVGs and other processes.&lt;/p&gt;
&lt;p&gt;You can also optionally amend your file structure such that production assets are placed in a specific folder.&lt;/p&gt;
&lt;p&gt;If you only wanted to do basic minifying and concatenation of CSS and JavaScript without having to touch the command line, you can choose to use GUI apps like Codekit and Prepros.&lt;/p&gt;
&lt;p&gt;However, if you want to have better control over asset management, then you’ll want to use a build tool like Grunt or Gulp instead.&lt;/p&gt;
&lt;p&gt;Finally, we have deployment.&lt;/p&gt;
&lt;h2 id=&quot;automating-deployment&quot;&gt;Automating Deployment&lt;/h2&gt;
&lt;p&gt;This is the process where you push your code and assets into the server and allow the changes you make to be viewed by the public.&lt;/p&gt;
&lt;p&gt;The old manual way would be to use FTP and upload the necessary files.&lt;/p&gt;
&lt;p&gt;A more modern method is to ssh into the server and do a git pull, which removes a ton of hassle already.&lt;/p&gt;
&lt;p&gt;An automated way would be to create a post-receive hook where your server automatically pulls the new project whenever there is an update.&lt;/p&gt;
&lt;p&gt;You’ll just need to learn how to write this post-receive hook if you want to automate this process.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;And we have a quick 1500+ word nutshell of what makes up a development workflow, along with some automate-able ideas for each part. I hope this article has given you more clarity on what to expect and what to learn in this jargon-filled dev world.&lt;/p&gt;
&lt;p&gt;What would you like to automate for your own workflow? What’s your biggest pain point? I’d love to hear them in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Results Are Out! Ready To Hear What&#39;s Coming Up Next?</title>
    <link href="https://zellwk.com/blog/what-coming-next/"/>
    <updated>2015-05-27T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/what-coming-next/</id>
    <content type="html">&lt;p&gt;Two weeks ago, I said I wanted to write about a new topic in addition to Susy. I had 3 major themes in mind and wanted to find out if you’d be interested in them. So I posted up a survey and asked for feedback.&lt;/p&gt;
&lt;p&gt;After two weeks of non-stop email interviews, as well as from the survey results, I’m happy to announce that I’ve came to a conclusion on what to write about next.&lt;/p&gt;
&lt;p&gt;I think you’ll be excited to hear this!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;
&lt;p&gt;Here are the results from the survey:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/05/surveyresults.png&quot; alt=&quot;survey results&quot;&gt;&lt;/p&gt;
&lt;p&gt;People wanted to read about workflows, followed by web design and finally, animations.&lt;/p&gt;
&lt;p&gt;This was a huge surprise because I thought only code nerds like me would be interested in workflows! Well, maybe you’re a code nerd too :)&lt;/p&gt;
&lt;p&gt;In short, I’ll be writing about workflows over the next couple of months.&lt;/p&gt;
&lt;h2 id=&quot;why-workflow%3F&quot;&gt;Why workflow?&lt;/h2&gt;
&lt;p&gt;Because workflows can be a huge pain in the ass if you haven’t managed to create one that you’re happy with, and it can be one of the best investments you make for your development cycle.&lt;/p&gt;
&lt;p&gt;You may use CMSes like Wordpress or Drupal, prefer certain tools over others or need to structure files and folders in a specific way.&lt;/p&gt;
&lt;p&gt;These preferences requires you to create a customized workflow unique to your project or your team. Often, this makes it difficult to learn about workflows from others because different people have different preferences and therefore teach it differently.&lt;/p&gt;
&lt;p&gt;To make matters worse, many tutorials are written in a way that only experienced developers can understand (which is especially challenging if you’re self-taught like me).&lt;/p&gt;
&lt;p&gt;There’s also too much information out there, and too many tools and plugins you can use. You have to choose your tools and plugins yourself, which can get confusing and daunting if you’ve never done it before.&lt;/p&gt;
&lt;p&gt;It’s tough to set up a good workflow. It takes huge amounts of effort to make it work for you. The upsides are tremendous once you get it done though.&lt;/p&gt;
&lt;p&gt;You’ll get complete control over your processes.
You can speed up your CSS compile times, setup your project for different development environments and concatenate CSS and JavaScript in the order you want. To top it off, you can even make your process work with Wordpress or Drupal.&lt;/p&gt;
&lt;p&gt;You can ensure that things don’t break without you knowing. Just count the number of times you tried not to change CSS or JS because you’re afraid of breaking the site! Wouldn’t it be great if you had a process to make sure that this never happens?&lt;/p&gt;
&lt;p&gt;Most importantly, you’ll get to free up time to do things that matters to you. You’ll get extra time to design, make projects or hang out with your family.&lt;/p&gt;
&lt;p&gt;It took me months of trial and error to get the workflow I created for myself today. Now that I’ve done it, I realized that it’s easier to make your own customized workflow than you think! It’s hard work, but you can get there in a fraction of the time I took.&lt;/p&gt;
&lt;p&gt;That’s the reason why I want to dive into workflows. I wanna show you how to make your own workflow so you can enjoy the benefits that come with them.&lt;/p&gt;
&lt;h2 id=&quot;what-about-susy-and-other-themes%3F&quot;&gt;What about Susy and other themes?&lt;/h2&gt;
&lt;p&gt;I’ll definitely keep talking about Susy when new ideas come about. You’re still welcome to ask me anything Susy-related via comments and emails!&lt;/p&gt;
&lt;p&gt;As for the other themes, I’m going to put them on hold and concentrate solely on workflows for the next couple of months.&lt;/p&gt;
&lt;p&gt;So, are you excited to hear more? Let me know in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Common Problems With Susy Gallery And How To Solve Them</title>
    <link href="https://zellwk.com/blog/susy-gallery-problems/"/>
    <updated>2015-05-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/susy-gallery-problems/</id>
    <content type="html">&lt;p&gt;Susy has a &lt;code&gt;gallery()&lt;/code&gt; mixin that helps us create galleries easily. It abstracts away a lot of complexity.
Because of this abstraction, it sometimes leaves people puzzled about why something isn’t working. This often boils down to two problems.&lt;/p&gt;
&lt;p&gt;This post reveals the two problems and shows you how to solve them.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-problems&quot;&gt;The Problems&lt;/h2&gt;
&lt;p&gt;The first problem happens when you get a gallery where the first item is not positioned in the correct place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/05/first-item-position.png&quot; alt=&quot;First item is placed in the wrong position&quot;&gt;&lt;/p&gt;
&lt;p&gt;The second problem happens when you want to create a gallery of different sizes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/05/different-gallery-widths.png&quot; alt=&quot;Having different galleries items of different width&quot;&gt;&lt;/p&gt;
&lt;p&gt;These two problems are relatively easy to solve once you know what goes on in the &lt;code&gt;gallery()&lt;/code&gt; mixin. Let’s explore how the &lt;code&gt;gallery()&lt;/code&gt; mixin works again before diving into solving these problems.&lt;/p&gt;
&lt;h2 id=&quot;susy-gallery&quot;&gt;Susy Gallery&lt;/h2&gt;
&lt;p&gt;Let’s say we’re creating a gallery with 3 columns. The sass code for this &lt;code&gt;gallery()&lt;/code&gt; will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include gallery(4 of 12);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of this &lt;code&gt;gallery()&lt;/code&gt; mixin is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  width: 32.20339%;
  float: left; }
  .gallery__item:nth-child(3n+1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0; }
  .gallery__item:nth-child(3n+2) {
    margin-left: 33.89831%;
    margin-right: -100%;
    clear: none; }
  .gallery__item:nth-child(3n+3) {
    margin-left: 67.79661%;
    margin-right: -100%;
    clear: none; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two points of interest in this code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Susy uses &lt;code&gt;nth-child&lt;/code&gt; to position elements with the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;Isolate Technique&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Susy calculates and allocate the same &lt;code&gt;width&lt;/code&gt; to all &lt;code&gt;.gallery__items&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these points is a big clue to solving one of the earlier mentioned problems. Keep them in mind as we move on.&lt;/p&gt;
&lt;h2 id=&quot;problem-1%3A-the-first-item-is-not-positioned-in-the-correct-place&quot;&gt;Problem 1: The first item is not positioned in the correct place&lt;/h2&gt;
&lt;p&gt;This problem usually happens when people misunderstand how to use the &lt;code&gt;nth-child&lt;/code&gt; pseudo class. Let’s take a look at this HTML code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Gallery!&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery Item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery Item&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery Item&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which child do you think the first &lt;code&gt;.gallery__item&lt;/code&gt; is?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;nth-child&lt;/code&gt; selector matches elements according to its position. The first immediate tag is the first child (&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in this case), the second tag is the second child and so on.&lt;/p&gt;
&lt;p&gt;Hence the correct answer to the question should be the second child. Pay attention if you got this wrong!&lt;/p&gt;
&lt;p&gt;Now let’s take a look at the &lt;code&gt;nth-child&lt;/code&gt; selectors created by Susy again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gallery__item:nth-child(3n+1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0; }
  .gallery__item:nth-child(3n+2) {
    margin-left: 33.89831%;
    margin-right: -100%;
    clear: none; }
  .gallery__item:nth-child(3n+3) {
    margin-left: 67.79661%;
    margin-right: -100%;
    clear: none; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see three different &lt;code&gt;nth-child&lt;/code&gt; selectors, &lt;code&gt;3n+1&lt;/code&gt;, &lt;code&gt;3n+2&lt;/code&gt; and &lt;code&gt;3n+3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can think of the &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;nth-child&lt;/code&gt; as a multiple that goes from 0 to infinity. What this means is that an &lt;code&gt;nth-child(2n)&lt;/code&gt; will match these children: 2, 4, 6, 8 and so on.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+ number&lt;/code&gt; in &lt;code&gt;nth-child&lt;/code&gt; is an offset for child number. &lt;code&gt;nth-child(2n+1)&lt;/code&gt; will match 3, 5, 7, 9 and so on.&lt;/p&gt;
&lt;p&gt;Here’s what the &lt;code&gt;nth-child&lt;/code&gt; selectors produced by Susy do if we go with the same line of thought:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nth-child(3n+1)&lt;/code&gt; - Targets children 1, 4, 7, 10 …&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nth-child(3n+2)&lt;/code&gt; - Targets children 2, 5, 8, 11 …&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nth-child(3n+3)&lt;/code&gt; - Targets children 3, 6, 9, 12 …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You now know the first &lt;code&gt;gallery__item&lt;/code&gt; is rightfully the second child. The CSS produced targets the second child and places it in the second column with the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;Isolate Technique&lt;/a&gt;. That could be one of the reasons why your &lt;code&gt;gallery()&lt;/code&gt; doesn’t seem to work correctly sometimes.&lt;/p&gt;
&lt;p&gt;One way to solve it is to remove this &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; tag and ensure that the intended &lt;code&gt;.gallery__item&lt;/code&gt; matches the &lt;code&gt;nth-child&lt;/code&gt; selector produced by Susy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;gallery&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery item &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery item &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;gallery__item&amp;quot;&amp;gt; Gallery item &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’ll be ideal if you can do that. Of course, there’s always going to be times when it’s a pain in the ass to change the HTML. Here’s where Susy shines, because you can change the CSS instead!&lt;/p&gt;
&lt;p&gt;You can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a custom gallery with your own &lt;code&gt;nth-child&lt;/code&gt; patterns or&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;span()&lt;/code&gt; instead of &lt;code&gt;gallery()&lt;/code&gt; to create the gallery.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s explore these options now.&lt;/p&gt;
&lt;h3 id=&quot;custom-gallery-with-custom-nth-child&quot;&gt;Custom gallery with custom nth-child&lt;/h3&gt;
&lt;p&gt;This option is recommended if you want to keep using the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;Isolate Technique&lt;/a&gt;. It takes more time and requires more experience with Sass.&lt;/p&gt;
&lt;p&gt;If we have the same HTML as above, we want to make sure the first &lt;code&gt;.gallery__item&lt;/code&gt; falls onto the first column. The fourth &lt;code&gt;.gallery__item&lt;/code&gt; also falls onto the first column.&lt;/p&gt;
&lt;p&gt;This means we need to use a &lt;code&gt;3n+2&lt;/code&gt; to target the first column, &lt;code&gt;3n+3&lt;/code&gt; for the second column and &lt;code&gt;3n+4&lt;/code&gt; for the third column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  width: span(4);
  float: left;
  &amp;amp;:nth-child(3n+2) {
    clear: both;
    @include isolate(1);
  }
  &amp;amp;:nth-child(3n+3) { @include isolate(5) }
  &amp;amp;:nth-child(3n+4) { @include isolate(9) }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen of this method working:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;MwjbYe&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/MwjbYe/&quot;&gt;MwjbYe&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;use-span-instead-of-gallery&quot;&gt;Use Span instead of Gallery&lt;/h3&gt;
&lt;p&gt;This option involves less work but exposes you to subpixel rounding errors. You’re safe to use this if you don’t have a large number of gallery items on the same row.&lt;/p&gt;
&lt;p&gt;The code for this option also changes depending on the &lt;code&gt;gutter-position&lt;/code&gt; you have set. If you are using the default Susy settings (or the &lt;code&gt;after&lt;/code&gt; position), you’ll want to ensure that you add a margin-right of 0 for every last item of the row.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(4 of 12);

  &amp;amp;:nth-child(3n+3) {
    @include last;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen of this:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;EjgNaX&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/EjgNaX/&quot;&gt;EjgNaX&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;split&lt;/code&gt; or &lt;code&gt;inside&lt;/code&gt; gutters though, you don’t need that. Just do use a normal span.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(4 of 12 split);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen of this:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;GJjNgP&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/GJjNgP/&quot;&gt;GJjNgP&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’re done with the first problem. You can use any of these methods and the results will be the same. Let’s move onto the second problem&lt;/p&gt;
&lt;h2 id=&quot;problem-2%3A-creating-a-gallery-of-with-columns-of-different-sizes.&quot;&gt;Problem 2: Creating a gallery of with columns of different sizes.&lt;/h2&gt;
&lt;p&gt;This problem is much simpler compared to the first one. You can see that the &lt;code&gt;gallery()&lt;/code&gt; mixin produces only one width for every &lt;code&gt;.gallery__item&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.gallery__item {
  width: 32.20339%;
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The answer then, is to change the width of the gallery item when needed.&lt;/p&gt;
&lt;p&gt;However, since the &lt;code&gt;gallery()&lt;/code&gt; uses the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;Isolate Technique&lt;/a&gt;, we can’t simply change the width or we’ll end up with overlapping elements:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/05/overlapping-elements.png&quot; alt=&quot;Overlapping elements&quot;&gt;&lt;/p&gt;
&lt;p&gt;The solution for this is exactly the same as the problem from before. You can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom gallery with custom nth-child and widths or&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;span()&lt;/code&gt; mixin to create the gallery instead.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;custom-gallery-with-custom-widths&quot;&gt;Custom gallery with custom widths&lt;/h3&gt;
&lt;p&gt;This option is preferable if you want to continue using the &lt;a href=&quot;https://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;Isolate Technique&lt;/a&gt;. The limitation, however, is that you’ll need to ensure that the items within a single column are of equal widths.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/05/equal-width-columns.png&quot; alt=&quot;Equal width columns&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here’s what the Sass may look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Assuming output is set to isolate and columns of 12
.gallery__item {
  &amp;amp;:nth-child(3n+1) {
    clear: both;
    @include span(6 first);
  }
  &amp;amp;:nth-child(3n+2) {
    @include span(3 at 7);
  }
  &amp;amp;:nth-child(3n+3) {
    @include span(3 last);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a Codepen of this:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;YXGpyO&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/YXGpyO/&quot;&gt;YXGpyO&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;using-span-to-create-the-gallery&quot;&gt;Using span to create the gallery&lt;/h3&gt;
&lt;p&gt;This option is preferable if you don’t have to worry about isolation or if you have items of different sizes at different columns. In this case, you just have to change the width of the gallery item with the &lt;code&gt;span()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Here’s what the Sass may look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  @include span(4 of 12 split);

  &amp;amp;:nth-child(4),
  &amp;amp;:nth-child(7), {
    width: span(8 of 12 split);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the Codepen of this:&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;bdwBEb&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/bdwBEb/&quot;&gt;bdwBEb&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And we’re done with the second problem!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Susy &lt;code&gt;gallery()&lt;/code&gt; mixin is awesome for creating standard galleries. It doesn’t cut it if you need to make the gallery custom though.&lt;/p&gt;
&lt;p&gt;But fret not! Once you understand the output from the Gallery mixin, you can always make your own custom gallery with the methods mentioned above!&lt;/p&gt;
&lt;p&gt;Are you now able to resolve the biggest gallery problems you have when using Susy? Which of the methods in this article have you used? Let me know in the comments below!&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I stopped blogging, and what do you want to read about next?</title>
    <link href="https://zellwk.com/blog/why-i-stopped-blogging-and-what-do-you-wanna-read-about-next/"/>
    <updated>2015-05-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/why-i-stopped-blogging-and-what-do-you-wanna-read-about-next/</id>
    <content type="html">&lt;p&gt;I have only written about Susy since the release of Learning Susy a few months ago. I’ve been working on the update since then and now that it’s finally complete, I wanna move on to a new topic.&lt;/p&gt;
&lt;p&gt;There are 3 themes that I’m interested to explore and I’ll need your help in choosing which one to work on.&lt;/p&gt;
&lt;p&gt;But first, let me be completely honest to you about my feelings for the past few months.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;it%E2%80%99s-been-a-great-ride&quot;&gt;It’s been a great ride&lt;/h2&gt;
&lt;p&gt;Learning Susy has been a smashing success for me and it would never have been possible if you weren’t part of it. I’d like to thank you from the bottom of my heart for your support and for sticking around with me.&lt;/p&gt;
&lt;p&gt;In addition to this immense joy and gratitude, I need to acknowledge another deeper, darker feeling – fear.&lt;/p&gt;
&lt;p&gt;I never said this publicly before, but I was scared stiff by the decisions that I had to make while writing Learning Susy, especially when it came to pricing the new update.&lt;/p&gt;
&lt;p&gt;On the surface, I was afraid that nobody would buy at the new price point. On a deeper level though, I was worried you would reject me and decide to boycott me forever.&lt;/p&gt;
&lt;p&gt;This fear of rejection eventually manifested big time in my blog over the last couple of months.&lt;/p&gt;
&lt;p&gt;My posts became shorter, for fear I may be wrong.&lt;/p&gt;
&lt;p&gt;I removed my emotions and opinions from my posts, worrying that you’ll find them boring or worse, repulsive.&lt;/p&gt;
&lt;p&gt;I stuck only to Susy-related posts, quietly clinging to my safety net where I’m an “expert”.&lt;/p&gt;
&lt;p&gt;I would spend hours staring at a blank screen every week, trying to come up with something decent to blog about. On good days, I would manage to squeeze out a draft. But those drafts often got deleted the very next day.&lt;/p&gt;
&lt;p&gt;This vicious cycle kept repeating itself. It came to a point where I was afraid to write anything. And I hid under the facade that I was busy updating Learning Susy.&lt;/p&gt;
&lt;p&gt;Well, now that Learning Susy is finally complete, I can no longer use it as an excuse, and that’s when I decided to be totally honest about these feelings of inadequacy to you, and most importantly, to myself.&lt;/p&gt;
&lt;p&gt;I am afraid of making mistakes, of failing, of writing useless junk, and I am fucking afraid of you leaving my world and hitting the unsubscribe button (Oh, and of what you’d think of me when I use the word “fuck”).&lt;/p&gt;
&lt;p&gt;It’s now time to face these fears head on, start blogging again and make this blog super worthy of your time.&lt;/p&gt;
&lt;p&gt;And to do that, I’ll need your help to choose one of these three themes which I’d like to explore:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modern Web Development Workflow&lt;/li&gt;
&lt;li&gt;Web Animation with CSS and JS&lt;/li&gt;
&lt;li&gt;User Experience and Web Design&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;(Early disclaimer: I fully intend to make a book out of the chosen theme. You’ll get to voice your opinions in this new book, so read on if you’re interested.)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;modern-web-development-workflow&quot;&gt;Modern Web Development Workflow&lt;/h2&gt;
&lt;p&gt;Speed matters. If we can streamline our processes and get the computer to automate our tasks, then we free up time to do things that matter.&lt;/p&gt;
&lt;p&gt;That’s what the workflow theme is about. It’ll cover anything that will help you master your web tools so your development process becomes lightning fast.&lt;/p&gt;
&lt;p&gt;We will explore topics like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up your text editor environment&lt;/li&gt;
&lt;li&gt;Using Bower to manage your frontend dependencies easily&lt;/li&gt;
&lt;li&gt;Frontend optimization practices with Gulp and its plugins&lt;/li&gt;
&lt;li&gt;Frontend templating with tools like Handlebars&lt;/li&gt;
&lt;li&gt;Automated Visual Regression testing (CSS Testing)&lt;/li&gt;
&lt;li&gt;JavaScript Testing&lt;/li&gt;
&lt;li&gt;and many others…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Workflows is a topic which I’m most comfortable writing about since I’m a workflow geek myself. I love experimenting with new processes for my development with the latest tools. My guiding principle is that it has to be easy to use, fast and automated. A large part of my workflow has been chiselled to perfection and I’ll be more than happy to share it with you.&lt;/p&gt;
&lt;h2 id=&quot;web-animation-with-css-and-javascript&quot;&gt;Web Animation with CSS and JavaScript&lt;/h2&gt;
&lt;p&gt;Web animations are the next big thing and, with the right touch, can enhance websites and make them come to life.&lt;/p&gt;
&lt;p&gt;But the question remains: how do we get this elusive “right touch” for every single project? When should we use bigger, more dynamic animations and when should we keep to simpler, subtle ones?&lt;/p&gt;
&lt;p&gt;These will be questions on the design side of things. We’ll also cover stuff on the technical side of things, like how-tos, when to use CSS or JavaScript for animations, performance and other technical mumbo-jumbo to create the magic.&lt;/p&gt;
&lt;p&gt;This will be an exciting theme to explore.&lt;/p&gt;
&lt;h2 id=&quot;web-design-and-user-experience&quot;&gt;Web Design and User Experience&lt;/h2&gt;
&lt;p&gt;Web design and user experience is one of those themes that many people have covered and are still covering. You’ll probably have a good idea of the type of posts that’ll fall under this theme. They may be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the basic principles to design and how to apply them&lt;/li&gt;
&lt;li&gt;What is white space and how much of it is enough?&lt;/li&gt;
&lt;li&gt;How to come up with a great colour palette&lt;/li&gt;
&lt;li&gt;How to create visually pleasing contrasts&lt;/li&gt;
&lt;li&gt;Posts about user experience&lt;/li&gt;
&lt;li&gt;and many more …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanna talk about this topic because I have received multiple questions on design and UX in the last few months. There’s also a hidden agenda if I talk about this topic – I wanna get better at web design and user experience myself, and I realised that teaching design would make me more knowledgeable about design.&lt;/p&gt;
&lt;p&gt;Since design is subjective and I’m always equipped with a “I’m not good enough” personal framework, this theme would be a big challenge for me.&lt;/p&gt;
&lt;h2 id=&quot;it%E2%80%99s-your-turn-to-choose&quot;&gt;It’s Your Turn to Choose&lt;/h2&gt;
&lt;p&gt;I hope you’re excited about the themes I proposed and you’re eager to see me jump into one of them.&lt;/p&gt;
&lt;p&gt;I’m interested in all 3 and so it’s difficult for me to choose what to move onto. I want to make sure this blog is worthy of your time, hence I’d like you to help me choose an area to focus on for the next couple of months.&lt;/p&gt;
&lt;p&gt;In addition to that, I’d love to hear any burning questions you may have with regards to all three proposed themes (or any other topic you have in mind).&lt;/p&gt;
&lt;p&gt;Just let me know in &lt;a href=&quot;https://zell1.typeform.com/to/hOe4JW&quot;&gt;this quick survey&lt;/a&gt; I made (It’s only gonna take you two mins to complete).&lt;/p&gt;
&lt;p&gt;I’m super grateful to have you with me on this journey and I look forward to disclosing the results next week!&lt;/p&gt;
&lt;p&gt;Thanks for everything!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use Masonry with Susy</title>
    <link href="https://zellwk.com/blog/masonry-with-susy/"/>
    <updated>2015-04-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/masonry-with-susy/</id>
    <content type="html">&lt;p&gt;Masonry is a popular JavaScript library that helps you create a pinterest-like gallery even if your content has irregular heights and widths.&lt;/p&gt;
&lt;p&gt;This article is here to help you out if you’re having trouble using Masonry with Susy.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;how-susy-works-with-masonry&quot;&gt;How Susy Works with Masonry&lt;/h2&gt;
&lt;p&gt;Masonry provides many options with its API, what we’re looking out for is the “Element Sizing” option.&lt;/p&gt;
&lt;p&gt;“Element Sizing” tells Masonry to get gutter and column width values from the HTML and CSS.&lt;/p&gt;
&lt;p&gt;If we’re using “Element Sizing”, we need to tell Masonry 3 things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;columnWidth&lt;/code&gt; - The width of each column.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gutter&lt;/code&gt; - The width of gutters of the grid.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;item__selector&lt;/code&gt; - The items of the grid.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code for this JavaScript would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jQuery(document).ready(function($) {
  var $masonryContainer = $(&#39;.masonry&#39;);

  $masonryContainer.masonry({
    columnWidth: &#39;.masonry__column&#39;,
    gutter: &#39;.masonry__gutter&#39;,
    itemSelector: &#39;.masonry__item&#39;
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a clue on how to use Susy to feed Masonry with the &lt;code&gt;columnWidth&lt;/code&gt; and &lt;code&gt;gutter&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;We just have to do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a selector named &lt;code&gt;.masonry__column&lt;/code&gt; and give it a width of 1 (or several) columns.&lt;/li&gt;
&lt;li&gt;Create a selector named &lt;code&gt;.masonry__gutter&lt;/code&gt; and give it a width of 1 gutter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s work through an example.&lt;/p&gt;
&lt;h2 id=&quot;the-html&quot;&gt;The HTML&lt;/h2&gt;
&lt;p&gt;We need a few elements to form the HTML for a Masonry grid. As you may expect from the above JavaScript code, we need 4 different elements.&lt;/p&gt;
&lt;p&gt;First off, we need the Masonry grid container.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;masonry&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the Masonry container, we need to have the other 3 elements. The &lt;code&gt;columnWidth&lt;/code&gt;, &lt;code&gt;gutter&lt;/code&gt; and &lt;code&gt;item-selector&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;masonry&amp;quot;&amp;gt;
  &amp;lt;!-- Masonry gutter sizer--&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__gutter&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;!-- Masonry columnWidth sizer --&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__column&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;!-- Masonry items --&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;masonry__item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s everything we need in the HTML for Masonry and Susy to work properly.&lt;/p&gt;
&lt;h2 id=&quot;create-masonry-classes-with-susy&quot;&gt;Create Masonry Classes with Susy&lt;/h2&gt;
&lt;p&gt;Next, we will need to create these Masonry classes with Susy. You will have start of with creating the &lt;code&gt;$susy&lt;/code&gt; map.&lt;/p&gt;
&lt;p&gt;Say we have 12 columns in our Susy map, with a container width of 1140px.&lt;/p&gt;
&lt;p&gt;Here’s the map we’re looking at:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  container: 1140px,
  columns: 12,
  global-box-sizing: border-box,
  debug: (image: show),
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to put in the border-box &lt;a href=&quot;https://zellwk.com/blog/masonry-with-susy/&quot;&gt;box sizing&lt;/a&gt; mixin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include border-box-sizing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all we need to set up Susy.&lt;/p&gt;
&lt;p&gt;Next, we will need to create the Susy container. In this case, we can just use it with the Masonry container (&lt;code&gt;.masonry&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.masonry {
  @include container();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we will need to give the correct widths to the &lt;code&gt;.masonry__gutter&lt;/code&gt; and &lt;code&gt;.masonry__column&lt;/code&gt; selectors. We can use the &lt;code&gt;gutter()&lt;/code&gt; function to get the width of 1 gutter.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.masonry__gutter {
  width: gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will then need to decide how many columns one Masonry grid item will take up. If we have 4 columns of grid items in total, then each Masonry grid item will take up 3 of 12 columns on the grid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.masonry__column {
  width: span(3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, we will have to give the same width to each Masonry Grid item, just like how we would normally create a Susy grid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.masonry__item {
  width: span(3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last of all, we need to give the &lt;code&gt;.masonry__item&lt;/code&gt; a margin top or bottom to separate the current element from the one above or below it. If we want the horizontal and vertical margins to be the same, then this margin should be &lt;code&gt;gutter()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.masonry__item {
  width: span(3);
  margin-top: gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh yes, remember to add the JavaScript mentioned at the beginning of this article to your JavaScript file!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jQuery(document).ready(function($) {
  var $masonryContainer = $(&#39;.masonry&#39;);

  $masonryContainer.masonry({
    columnWidth: &#39;.masonry__column&#39;,
    gutter: &#39;.masonry__gutter&#39;,
    itemSelector: &#39;.masonry__item&#39;
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to use Masonry with Susy!&lt;/p&gt;
&lt;p&gt;Aaaand Tadaa! Here’s demo of the code above, packed with some demo styles.&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;WveqVZ&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/WveqVZ/&quot;&gt;WveqVZ&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;masonry-with-images&quot;&gt;Masonry with Images&lt;/h2&gt;
&lt;p&gt;Well, things get slightly more complicated when you have images. This is because images aren’t ready when the DOM is ready.&lt;/p&gt;
&lt;p&gt;Masonry can only calculate the grids correctly if all of the images within are already loaded.&lt;/p&gt;
&lt;p&gt;Hence, you’ll have to make sure you add &lt;a href=&quot;http://imagesloaded.desandro.com/&quot;&gt;imagesLoaded&lt;/a&gt; to your JavaScript files.&lt;/p&gt;
&lt;p&gt;You’ll also need to tweak the JavaScript slightly to ensure that Masonry only triggers when images are loaded.&lt;/p&gt;
&lt;p&gt;Here’s the JavaScript you’re looking for:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jQuery(document).ready(function($) {
  var $masonryContainer = $(&#39;.masonry&#39;);

  $masonryContainer.imagesLoaded(function() {
    $masonryContainer.masonry({
      columnWidth: &#39;.masonry__column&#39;,
      gutter: &#39;.masonry__gutter&#39;,
      itemSelector: &#39;.masonry__item&#39;
    });
  })

});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not too hard was it? :)&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Many people get stuck when trying to integrate Susy with other solutions, like Masonry. The trick is to be aware that Susy helps calculate widths, then find out how to add utilise these widths into the solution you’re using.&lt;/p&gt;
&lt;p&gt;Have you thought about using Susy with Masonry? Has this article helped you do so? I’d love to hear your thoughts in the comments below :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mappy Breakpoints, A Breakpoint Mixin that uses Sass Maps</title>
    <link href="https://zellwk.com/blog/mappy-breakpoints/"/>
    <updated>2015-03-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mappy-breakpoints/</id>
    <content type="html">&lt;p&gt;I have been using &lt;a href=&quot;http://breakpoint-sass.com/&quot;&gt;Breakpoint&lt;/a&gt; to handle my media queries for a long time and I have been happy with it. However, during my previous project, I discovered that I needed something more.&lt;/p&gt;
&lt;p&gt;Since I was working on rebuilding my starter template for Learning Susy, I went about hacking my own breakpoint mixin that satisfied all my needs. I thought you’d be interested to hear what I came up with :)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-is-breakpoint%3F&quot;&gt;What Is Breakpoint?&lt;/h2&gt;
&lt;p&gt;If you haven’t heard of Breakpoint, you’re really missing out on a superb breakpoint mixin that helps you handle most media queries effortlessly. Let’s first explore what Breakpoint has to offer.&lt;/p&gt;
&lt;p&gt;Breakpoint provides you with a &lt;code&gt;breakpoint()&lt;/code&gt; mixin that accepts several arguments. It then translates the information you give into a media query.&lt;/p&gt;
&lt;p&gt;Breakpoint will create a &lt;code&gt;min-width&lt;/code&gt; query if one query is given to it. It creates a &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; query if two queries are given to it. It also has the capability to create a &lt;code&gt;max-width&lt;/code&gt; query if you gave it a &lt;code&gt;max-width&lt;/code&gt; string and a query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Min Width Query
// ---------------
@include breakpoint(600px) {
  // stuff
}

// Translates into
@media (min-width: 600px) {
  // stuff
}

// Min Width And Max Width Query
// -----------------------------
@include breakpoint(600px 900px) {
  // stuff
}

// Translates into
@media (min-width: 600px) and (max-width: 900px) {
  // stuff
}

// Max Width Query
// ---------------
@include breakpoint(max-width 900px) {
  // stuff
}

// Translates into
@media (max-width: 900px) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have written extensively about these three types of media queries and &lt;a href=&quot;https://zellwk.com/blog/how-to-write-mobile-first-css/&quot;&gt;how they can be used to write mobile first css&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-lacking-for-me-in-breakpoint&quot;&gt;What’s Lacking For Me in Breakpoint&lt;/h2&gt;
&lt;p&gt;Breakpoint had been perfect for a long time, until I decided to refactor my Sass starter to use Sass Maps to hold my breakpoints.&lt;/p&gt;
&lt;p&gt;I wanted three things that were missing from Breakpoint.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I wanted the ability to use a map key from a Sass map immediately in my breakpoint mixin&lt;/li&gt;
&lt;li&gt;I wanted to be able to subtract one pixel from the max-width argument to prevent queries from overlapping.&lt;/li&gt;
&lt;li&gt;I wanted to write in pixels but output in a relative width (ems or rems).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First, I wanted the ability to use a map key from a Sass map immediately in my breakpoint mixin because I store all my breakpoints in a Sass map named &lt;code&gt;$breakpoints&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  &#39;small&#39;     : 320px,
  &#39;med&#39;       : 640px,
  &#39;large&#39;     : 920px,
  &#39;wide&#39;      : 1200px,
  &#39;mega&#39;      : 1400px,
  // ...
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I needed to get the map key within the breakpoint mixin in order to get my values. I had to use a semi-complex query to get a min-width and max-width query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include breakpoint(map-get($breakpoints, small) map-get($breakpoints, large)) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would have been much cleaner if I had the ability to write map keys instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include breakpoint(small large) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This factor was a deal breaker and it prompted me to write my own breakpoint mixin.&lt;/p&gt;
&lt;p&gt;Second, I wanted to be able to subtract one pixel from the max-width argument to prevent queries from overlapping, which caused me a lot of heartache in a recent project that I had done.&lt;/p&gt;
&lt;p&gt;Here’s an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.query {
  @include breakpoint(800px) {
    // stuff
  }
}

.query.with.more.weight {
  @include breakpoint(max-width 800px) {
    // stuff
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There were cases where I wanted styles within &lt;code&gt;.query&lt;/code&gt; to trigger at 800px.&lt;/p&gt;
&lt;p&gt;The actual styles at 800px was however, overwritten by the second selector because it had more specificity. This issue would have been mitigated if my max-width selector stopped at 799px instead of 800px.&lt;/p&gt;
&lt;p&gt;Third, I wanted to write in pixels but output in a relative width (rems). Brad Frost spoke about using relative width units in his article on &lt;a href=&quot;http://bradfrost.com/blog/post/7-habits-of-highly-effective-media-queries/#relative&quot;&gt;7 habits of highly effective media queries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since I’m already ditching pixels in favor of rems for all my Sass units, why not bring it up a notch and use rems for media queries as well?&lt;/p&gt;
&lt;p&gt;Unfortunately, I needed to calculate these relative widths manually if I was using Breakpoint, which kind of defeats the purpose of using Sass to automate the process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$breakpoints: (
  &#39;small&#39;     : 20rem, // 320px
  &#39;med&#39;       : 40rem, // 640px
  &#39;large&#39;     : 57.5rem, // 920px
  // ...
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another plus from this practice as Brad mentioned is that it allows browsers to adjust the design based on the user zoom level, allowing a more accessible experience if the user decides to zoom in.&lt;/p&gt;
&lt;p&gt;As you can see, I wanted something super specific that had the ability to simplify a lot of things for me. So I went ahead and hacked my own breakpoint mixin that does all of the above!&lt;/p&gt;
&lt;h2 id=&quot;introducing-mappy-breakpoints&quot;&gt;Introducing Mappy Breakpoints&lt;/h2&gt;
&lt;p&gt;Uhh… I decided to call it mappy breakpoints since it uses a map for the breakpoint mixin. If you have a better name for it, please throw it up! All suggestions are welcome!&lt;/p&gt;
&lt;p&gt;Let’s get down to what it does.&lt;/p&gt;
&lt;p&gt;Mappy breakpoints does all of the 3 things I mentioned above. It creates &lt;code&gt;min-width&lt;/code&gt;, &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; queries easily, just like how Breakpoint does it.&lt;/p&gt;
&lt;p&gt;While doing so, it also converts pixels to rems and subtracts one pixel from the eventual rem value for every &lt;code&gt;max-width&lt;/code&gt; query.&lt;/p&gt;
&lt;p&gt;This breakpoint mixin also integrates with Compass vertical rhythm and uses the &lt;code&gt;$base-font-size&lt;/code&gt; variable to determine the value used to convert into rems.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$base-font-size: 16px;

$breakpoints: (
  &#39;small&#39;     : 320px,
  &#39;med&#39;       : 640px,
  &#39;large&#39;     : 920px,
  &#39;wide&#39;      : 1200px,
  &#39;mega&#39;      : 1400px,
  // ...
  );

// Min Width Query
// ---------------
@include mappy-bp(small) {
  // stuff
}

// Translates into
@media all and (min-width: 20rem) {
  // stuff
}


// Min Width And Max Width Query
// -----------------------------
@include mappy-bp(small large) {
  // stuff
}

// Translates into
@media all and (min-width: 20rem) and (max-width: 57.4375rem) {
  //stuff
}

// Max Width Query
// ---------------

// You can also use `max` instead of `max-width`
@include mappy-bp(max-width small) {
  // stuff
}

// Translates into
@media all and (max-width: 19.9375rem) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to using maps, Mappy breakpoints also retains the original feature in Breakpoint where you can turn any value given to it into a query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include mappy-bp(small 920px) {
  // stuff
}

// Translates into
@media all and (min-width: 20rem) and (max-width: 57.4375rem) {
  //stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mappy breakpoints also respond to height queries in the same way as width queries. You just have to tell it that you’re trying to detect height.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// You could also use the `h` identifier instead of `height`
@include mappy-bp(height 480px large) {
  // stuff
}

// Translates into
@media all and (min-height: 30rem) and (max-height: 57.4375rem) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, Mappy breakpoints allows you to have any other query pair simply by writing them one after another without commas and parentheses.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include mappy-bp(orientation portrait) {
  // stuff
}

// Translates into
@media all and (orientation: portrait) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;there%E2%80%99s-more!&quot;&gt;There’s More!&lt;/h2&gt;
&lt;p&gt;Mappy breakpoints give you the ability to control two more things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Media type&lt;/li&gt;
&lt;li&gt;Provide a fallback class for browsers that don’t support media queries.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just add these two as the second and third argument to the &lt;code&gt;mappy-bp()&lt;/code&gt; mixin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include mappy-bp($query, $media-type, $fallback-query) {
  // stuff
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;check-out-mappy-breakpoints&quot;&gt;Check Out Mappy Breakpoints&lt;/h2&gt;
&lt;p&gt;If you work a lot with Sass maps and want some additional map-like functionality to your breakpoints then definitely &lt;a href=&quot;https://github.com/zellwk/mappy-breakpoints&quot;&gt;check out Mappy Breakpoints&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m sure you’ll enjoy it as much as I do :)&lt;/p&gt;
&lt;p&gt;What do you think of Mappy Breakpoints? I’d love to hear them in the comments!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Configuring Gulp to use LibSass with Susy</title>
    <link href="https://zellwk.com/blog/gulp-libsass-with-susy/"/>
    <updated>2015-02-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/gulp-libsass-with-susy/</id>
    <content type="html">&lt;p&gt;I wrote about configuring Grunt to use LibSass with Susy in the last article and feedback has been amazing. There were multiple requests for me to write another article to use LibSass with Gulp instead, so here it is :)&lt;/p&gt;
&lt;p&gt;In case you never heard of Gulp, it is another Javascript task runner that helps you automate your development workflow. It was created slightly later than Grunt and aims to resolve issues that Grunt has.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes that you have Node JS, Bower and Gulp JS installed. You can find the instructions to install these tools from the following links if you don’t have them installed already.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node JS - &lt;a href=&quot;http://nodejs.org/&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bower - &lt;a href=&quot;http://bower.io/&quot;&gt;http://bower.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gulp Js - &lt;a href=&quot;http://gulpjs.com/&quot;&gt;http://gulpjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have the tools installed, open up a new folder and let’s begin to setup your project.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-the-project&quot;&gt;Setting Up The Project&lt;/h2&gt;
&lt;p&gt;Since we are using Gulp and Bower in this project, we can set the project up to easily add or manage both node and bower dependencies for the project.&lt;/p&gt;
&lt;p&gt;To do so, we require the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;npm init&lt;/code&gt; command to create the &lt;code&gt;package.json&lt;/code&gt; file and the &lt;code&gt;bower init&lt;/code&gt; command to create the &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/npminit1.png&quot; alt=&quot;NPM Init&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/bowerinit1.png&quot; alt=&quot;Bower Init&quot;&gt;&lt;/p&gt;
&lt;p&gt;These two files combined will allow you to easily add or manage dependencies in your project. Your folder structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/gulp-folder-1.png&quot; alt=&quot;Folder Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can proceed on to install the gulp packages we need to run LibSass with Susy.&lt;/p&gt;
&lt;h2 id=&quot;installing-gulp-packages&quot;&gt;Installing Gulp Packages&lt;/h2&gt;
&lt;p&gt;We have to install the &lt;code&gt;gulp&lt;/code&gt; package to run Gulp in a project. Let’s begin by installing that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to install the &lt;code&gt;gulp-sass&lt;/code&gt; package in order to use LibSass to compile Sass into CSS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we’re compiling Sass into CSS, we should also include a source map for debugging purposes. You have to install the &lt;code&gt;gulp-sourcemaps&lt;/code&gt; package in order to use sourcemaps with Gulp.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install gulp-sourcemaps --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your project structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/gulp-folder-2.png&quot; alt=&quot;Folder Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;We now have the necessary packages to compile Sass into CSS with LibSass. Let’s move on to installing our front-end dependencies with Bower.&lt;/p&gt;
&lt;h2 id=&quot;installing-bower-packages&quot;&gt;Installing Bower Packages&lt;/h2&gt;
&lt;p&gt;The only bower package we need to install in this article is Susy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bower install susy --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your folder structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/gulp-folder-3.png&quot; alt=&quot;Folder Structure 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Remember to add your HTML, SCSS and CSS folders into the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/gulp-folder-4.png&quot; alt=&quot;Folder Structure 4&quot;&gt;&lt;/p&gt;
&lt;p&gt;We have to import Susy into the stylesheets to use it. This is how you import Susy if you have the same folder structure as the picture above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &amp;quot;../bower_components/susy/sass/susy&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optionally, you may also want breakpoint-sass if you want to use the breakpoint mixin. Susy doesn’t depend on breakpoint-sass anymore since version 2.2.2 so you can safely omit it if you don’t use it. I still use the breakpoint mixin heavily in my workflow though.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Note! This is optional!
bower install breakpoint-sass --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do install breakpoint-sass, you’ll have to import it in your stylesheets as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@import &amp;quot;../bower_components/breakpoint-sass/stylesheets/breakpoint&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have all the necessary libraries for this setup to work properly. Let’s proceed with writing the Gulpfile – the heart of the process.&lt;/p&gt;
&lt;h2 id=&quot;writing-the-gulpfile&quot;&gt;Writing the Gulpfile&lt;/h2&gt;
&lt;p&gt;We begin writing the Gulpfile by creating the a &lt;code&gt;gulpfile.js&lt;/code&gt; and add that into your the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/gulp-folder-5.png&quot; alt=&quot;Folder Structure 5&quot;&gt;&lt;/p&gt;
&lt;p&gt;You start off by requiring all the packages that are installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var gulp = require(&#39;gulp&#39;);
var sass = require(&#39;gulp-sass&#39;);
var sourcemaps = require(&#39;gulp-sourcemaps&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we have to create a task for Gulp to run. The basic syntax for a task is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;taskName&#39;, function () {
 // ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s create the &lt;code&gt;sass&lt;/code&gt; task so we can compile Sass into CSS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;gulp.task(&#39;sass&#39;, function () {
  // gulp.src locates the source files for the process.
  // This globbing function tells gulp to use all files
  // ending with .scss or .sass within the scss folder.
  gulp.src(&#39;./scss/**/*.{scss,sass}&#39;)
    // Converts Sass into CSS with Gulp Sass
    .pipe(sass())
    // Outputs CSS files in the css folder
    .pipe(gulp.dest(&#39;./css&#39;));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the basic &lt;code&gt;sass&lt;/code&gt; task. We can enhance it by adding sourcemaps like we mentioned above. We need to add two lines of code to the &lt;code&gt;sass&lt;/code&gt; task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Gulp Sass Task
gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;./scss/**/*.{scss,sass}&#39;)
    // Initializes sourcemaps
    .pipe(sourcemaps.init())
    .pipe(sass())
    // Writes sourcemaps into the CSS file
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(&#39;./css&#39;));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The one tiny irritating thing about Gulp is that it stops the terminal from running whenever you have any errors in your code, and that really disrupts the workflow.&lt;/p&gt;
&lt;p&gt;We can resolve that by adding a &lt;code&gt;errLogToConsole: true&lt;/code&gt; option to the &lt;code&gt;sass&lt;/code&gt; task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Gulp Sass Task
gulp.task(&#39;sass&#39;, function() {
  gulp.src(&#39;./scss/**/*.{scss,sass}&#39;)
    // Initializes sourcemaps
    .pipe(sourcemaps.init())
    .pipe(sass({
      errLogToConsole: true
      }))
    // Writes sourcemaps into the CSS file
    .pipe(sourcemaps.write())
    .pipe(gulp.dest(&#39;./css&#39;));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also want to watch the &lt;code&gt;scss&lt;/code&gt; folder for any changes and run the &lt;code&gt;sass&lt;/code&gt; task again as necessary. We have to create the &lt;code&gt;watch&lt;/code&gt; task in Gulp to do so.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Watch scss folder for changes
gulp.task(&#39;watch&#39;, function() {
  // Watches the scss folder for all .scss and .sass files
  // If any file changes, run the sass task
  gulp.watch(&#39;./scss/**/*.{scss,sass}&#39;, [&#39;sass&#39;])
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we need to define a task to run both &lt;code&gt;sass&lt;/code&gt; and &lt;code&gt;watch&lt;/code&gt; so the Sass is compiled to CSS when the task is run and Gulp will continue watching the scss folders for any further changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Creating a default task
gulp.task(&#39;default&#39;, [&#39;sass&#39;, &#39;watch&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;running-gulp&quot;&gt;Running Gulp&lt;/h2&gt;
&lt;p&gt;We created a default task in the above step that can be run with the command &lt;code&gt;gulp default&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gulp default
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gulp makes it slightly more simple if you’re using the default task. You can omit the word &lt;code&gt;default&lt;/code&gt; and it will still run the default task:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gulp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the command is given, Gulp should run Sass and begin to watch for changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/run-gulp-1.png&quot; alt=&quot;Run Gulp&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you save any Sass or Scss files within the scss directory, Gulp will compile the new updates and keep watching the directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/run-gulp-2.png&quot; alt=&quot;Run Gulp&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enjoy your new LibSass compiler :)&lt;/p&gt;
&lt;p&gt;Here’s a github repo for the LibSass compiler we just built: &lt;a href=&quot;https://github.com/zellwk/gulp-susy-starter&quot;&gt;https://github.com/zellwk/gulp-susy-starter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We built a basic Gulp setup that allows you to use LibSass with Susy in this short article. Once you get this running, feel free to add more packages to make this starter more robust. Things that come to mind straight away are livereload, autoprefixer and even CSS and JS minification!&lt;/p&gt;
&lt;p&gt;Whatever you do, have fun with the process and feel free to let me know if you have any questions via the comments!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Configuring Grunt To Use LibSass With Susy</title>
    <link href="https://zellwk.com/blog/grunt-sass-with-susy/"/>
    <updated>2015-02-11T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/grunt-sass-with-susy/</id>
    <content type="html">&lt;p&gt;Every developer I know has been eagerly awaiting to use LibSass in their development process. When Eric announced that Susy is now compatible with LibSass, I jumped out of my seat and began tinkering with Grunt to create a build process.&lt;/p&gt;
&lt;p&gt;Unfortunately, it didn’t work out then :(&lt;/p&gt;
&lt;p&gt;The good news is that we can now use Grunt to compile LibSass with Susy without a hitch! I’ll show you how I configured Grunt to use LibSass with Susy in this article.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes that you have Node JS, Bower and Grunt JS installed. You can find the instructions to install these tools from the following links if you don’t have them installed already.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node JS - &lt;a href=&quot;http://nodejs.org/&quot;&gt;http://nodejs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bower - &lt;a href=&quot;http://bower.io/&quot;&gt;http://bower.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Grunt Js - &lt;a href=&quot;http://gruntjs.com/&quot;&gt;http://gruntjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have the tools installed, open up a new folder and let’s begin to setup your project.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-the-project&quot;&gt;Setting Up The Project&lt;/h2&gt;
&lt;p&gt;Since we are using grunt and bower in this project, we can set the project up to easily add or manage both node and bower dependencies for the project.&lt;/p&gt;
&lt;p&gt;To do so, we require the &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;npm init&lt;/code&gt; command to create the &lt;code&gt;package.json&lt;/code&gt; file and the &lt;code&gt;bower init&lt;/code&gt; command to create the &lt;code&gt;bower.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/npminit.png&quot; alt=&quot;NPM Init&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ bower init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/bowerinit.png&quot; alt=&quot;Bower Init&quot;&gt;&lt;/p&gt;
&lt;p&gt;These two files combined will allow you to easily add or manage dependencies in your project. Your folder structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/folder-1.png&quot; alt=&quot;Folder Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can proceed on to install the grunt packages we need to run LibSass with Susy.&lt;/p&gt;
&lt;h2 id=&quot;installing-grunt-packages&quot;&gt;Installing Grunt Packages&lt;/h2&gt;
&lt;p&gt;The node package named &lt;code&gt;grunt-sass&lt;/code&gt; is required for you to run LibSass with Susy. Let’s begin be installing that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install grunt-sass --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll also want to watch for changes and recompile any Sass files into CSS whenever you save a file. To do so, we need the &lt;code&gt;grunt-contrib-watch&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install grunt-contrib-watch --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your project structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/folder-2.png&quot; alt=&quot;Folder Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;We now have the necessary node packages to compile Sass into CSS with LibSass. Let’s move on to installing our front-end dependencies with Bower.&lt;/p&gt;
&lt;h2 id=&quot;installing-bower-packages&quot;&gt;Installing Bower Packages&lt;/h2&gt;
&lt;p&gt;The only bower package we need to install in this article is Susy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;bower install susy --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your folder structure should now be:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/folder-3.png&quot; alt=&quot;Folder Structure 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Remember to add your HTML, SCSS and CSS folders into the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/folder-4.png&quot; alt=&quot;Folder Structure 4&quot;&gt;&lt;/p&gt;
&lt;p&gt;We have to import Susy into the stylesheets to use it. This is how you import Susy if you have the same folder structure as the picture above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;@import &amp;quot;../bower_components/susy/sass/susy&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Optionally, you may also want &lt;code&gt;breakpoint-sass&lt;/code&gt; if you want to use the &lt;code&gt;breakpoint&lt;/code&gt; mixin. Susy doesn’t depend on &lt;code&gt;breakpoint-sass&lt;/code&gt; anymore since version 2.2.2 so you can safely omit it if you want to. I still use the &lt;code&gt;breakpoint&lt;/code&gt; mixin heavily in my workflow though.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Note! This is optional!
bower install breakpoint-sass --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do install &lt;code&gt;breakpoint-sass&lt;/code&gt;, you’ll have to import it in your stylesheets as well&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;@import &amp;quot;../bower_components/breakpoint-sass/stylesheets/breakpoint&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have all the necessary libraries for this setup to work properly. Let’s proceed with writing the Gruntfile – the heart of the process.&lt;/p&gt;
&lt;h2 id=&quot;writing-the-gruntfile&quot;&gt;Writing the Gruntfile&lt;/h2&gt;
&lt;p&gt;The simplest way to begin writing the Gruntfile is to create a &lt;code&gt;Gruntfile.js&lt;/code&gt; and add that to your project structure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/folder-5.png&quot; alt=&quot;Folder Structure 5&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then add the following anatomy of the Gruntfile into your &lt;code&gt;Gruntfile.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({

  });

  // Loads Grunt Tasks

  // Default task(s).
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We begin writing the Gruntfile by loading the various tasks that we have to run. In this case, we have to load up the &lt;code&gt;grunt-sass&lt;/code&gt; package and &lt;code&gt;grunt-contrib-watch&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function(grunt) {
  // Project configuration.
  // ...

  // Loads Grunt Tasks
  grunt.loadNpmTasks(&#39;grunt-sass&#39;);
  grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);

  // Default task(s).
  // ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can configure the Grunt project to run according to how we have set up the folder structure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function(grunt) {
  // Project configuration.
  grunt.initConfig({

    // Grunt-sass
    sass: {
      app: {
        // Takes every file that ends with .scss from the scss
        // directory and compile them into the css directory.
        // Also changes the extension from .scss into .css.
        // Note: file name that begins with _ are ignored automatically
        files: [{
          expand: true,
          cwd: &#39;scss&#39;,
          src: [&#39;*.scss&#39;],
          dest: &#39;css&#39;,
          ext: &#39;.css&#39;
        }]
      },
      options: {
        sourceMap: true,
        outputStyle: &#39;nested&#39;,
        imagePath: &amp;quot;../&amp;quot;,
      }
    },

    // Grunt-contrib-watch
    watch: {
      sass: {
        // Watches all Sass or Scss files within the scss folder and one level down.
        // If you want to watch all scss files instead, use the &amp;quot;**/*&amp;quot; globbing pattern
        files: [&#39;scss/{,*/}*.{scss,sass}&#39;],
        // runs the task `sass` whenever any watched file changes
        tasks: [&#39;sass&#39;]
      },
      options: {
        // Sets livereload to true for livereload to work
        // (livereload is not covered in this article)
        livereload: true,
        spawn: false
      }
    },
  });

  // Loads Grunt Tasks
  // ...

  // Default task(s).
  // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we have to create a task in order to run it with Grunt. We can use the &lt;code&gt;registerTask&lt;/code&gt; command to create such a task.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = function(grunt) {
  // ...

  // Default task(s).
  // This registers a task that runs `sass`, followed by `watch`.
  grunt.registerTask(&#39;default&#39;, [&#39;sass&#39;, &#39;watch&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with writing the Gruntfile.&lt;/p&gt;
&lt;h2 id=&quot;running-grunt&quot;&gt;Running Grunt&lt;/h2&gt;
&lt;p&gt;We have created a default task in the above step. Defaults tasks can be ran with the &lt;code&gt;grunt&lt;/code&gt; command in the terminal&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ grunt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the command is given, Grunt should run Sass and begin to watch for changes&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/run-grunt-1.png&quot; alt=&quot;Run Grunt&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you save any Sass or Scss files within the scss directory, Grunt will compile the new updates and keep watching the directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2015/02/run-grunt-2.png&quot; alt=&quot;Run Grunt&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enjoy your new LibSass compiler!&lt;/p&gt;
&lt;p&gt;Here’s a github repo for the LibSass compiler we just built: &lt;a href=&quot;https://github.com/zellwk/grunt-susy-starter&quot;&gt;https://github.com/zellwk/grunt-susy-starter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We built a basic Grunt setup that allows you to use LibSass with Susy in this short article. Once you get this running, feel free to add more packages to make this starter more robust. Things that  come to mind straight away are livereload, autoprefixer and even CSS and JS minification!&lt;/p&gt;
&lt;p&gt;Whatever you do, have fun with the process and feel free to let me know if you have any questions via the comments!&lt;/p&gt;
&lt;p&gt;PS: I’m updating my starter template to include everything mentioned here. You can grab it if you bought the full version of Learning Susy :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning Susy Update Is Going To Be Delayed</title>
    <link href="https://zellwk.com/blog/learning-susy-update-delayed/"/>
    <updated>2015-01-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learning-susy-update-delayed/</id>
    <content type="html">&lt;p&gt;I mentioned that Learning Susy will be updated with more content by 31st January. Unfortunately, I’m afraid I have to disappoint. I’m sorry.&lt;/p&gt;
&lt;p&gt;Letting you down sucks, but it just doesn’t feel right to apologize and shrug it off. I want to be honest about my failures and learnings to make sure that I won’t fail to deliver again. Hence, the reason for this blog post.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: The new Learning Susy Book is now live at &lt;a href=&quot;http://learnsusy.zellwk.com/&quot;&gt;http://learnsusy.zellwk.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-i-failed&quot;&gt;Why I Failed&lt;/h2&gt;
&lt;p&gt;The very reason why I failed to deliver the update was because I set the date to 31st January &lt;strong&gt;tentatively&lt;/strong&gt;. I have already set myself up for failure with the word &lt;strong&gt;tentative&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because the date wasn’t fixed in stone, I had the possibility of postponing whenever I need to. That gave me too much wriggle room to play around with.&lt;/p&gt;
&lt;p&gt;I gave in to my fears of doing interviews and screencasts because I have never done those before. I’m afraid the interview will turn out to be shit. I got paralyzed so much with fear that and I didn’t  even dare to draft the questions I for my interviewees.&lt;/p&gt;
&lt;p&gt;And because the date wasn’t fixed in stone, I was able to rationalize that something else in my life was more important and urgent right now. I shifted house recently and I’m planning to get married in February. I allowed my marriage to be the convenient excuse to run away from my fears.&lt;/p&gt;
&lt;p&gt;That is why I have failed this time.&lt;/p&gt;
&lt;h2 id=&quot;how-i-can-do-better&quot;&gt;How I Can Do Better&lt;/h2&gt;
&lt;p&gt;Failing to commit to the date I declared breaks my integrity and makes me feel like shit. I have also realized other parts of my life falling into shambles just because of this one decision.&lt;/p&gt;
&lt;p&gt;The guilt, shame and regret I had from this episode fueled my fears and my avoidance. I ran away from what I was supposed to do. I even ran away from posting new content onto this blog.&lt;/p&gt;
&lt;p&gt;Ironically, I have failed terribly in the planning of my marriage as well even though it was my excuse for not writing the book.&lt;/p&gt;
&lt;p&gt;I learnt that every commitment I make is not to be taken lightly. Breaking more and more commitments to myself eventually breaks my own trust in myself, and I must never let that happen.&lt;/p&gt;
&lt;p&gt;So in future, I will deliver everything that I say I will deliver by the date I said I am going to deliver. All my commitments will be set in stone so I don’t wriggle my way out of them.&lt;/p&gt;
&lt;p&gt;After apologizing and making these commitments, allow me to give you an update on the status of the book, and also when I will deliver.&lt;/p&gt;
&lt;h2 id=&quot;the-progress&quot;&gt;The Progress&lt;/h2&gt;
&lt;p&gt;I realized that there was more work to be done as I was working through the book chapters. The language was horrible and contained numerous passive voices that make the book difficult to understand.&lt;/p&gt;
&lt;p&gt;Chapters also started to get disorganized right after chapter 7. There were many duplicated mentions that signaled a lack of proper planning in the book.&lt;/p&gt;
&lt;p&gt;Since I’m going through this again, I wanted the book to be the best reflection of my current ability and that resulted in almost a full rewrite and reorganization of the book.&lt;/p&gt;
&lt;p&gt;The table of contents now look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Installing Susy and creating your first project&lt;/li&gt;
&lt;li&gt;The Scss syntax&lt;/li&gt;
&lt;li&gt;Understanding the Susy map&lt;/li&gt;
&lt;li&gt;Creating your first layout&lt;/li&gt;
&lt;li&gt;Understanding Susy context&lt;/li&gt;
&lt;li&gt;Creating a complex layout (part 1)&lt;/li&gt;
&lt;li&gt;Creating a complex layout (part 2)&lt;/li&gt;
&lt;li&gt;Learning to write mobile-first Media Queries&lt;/li&gt;
&lt;li&gt;Learning to create responsive breakpoints&lt;/li&gt;
&lt;li&gt;Understanding the Susy grid background&lt;/li&gt;
&lt;li&gt;Building a responsive website&lt;/li&gt;
&lt;li&gt;Understanding gutter positions&lt;/li&gt;
&lt;li&gt;Understanding the Isolate Technique&lt;/li&gt;
&lt;li&gt;Creating an asymmetric layout (part 1)&lt;/li&gt;
&lt;li&gt;Creating an asymmetric layout (part 2)&lt;/li&gt;
&lt;li&gt;Other useful Susy map settings&lt;/li&gt;
&lt;li&gt;Other useful Susy functions or mixins&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Chapters 1 - 15 are now complete and ready to be shipped anytime.&lt;/p&gt;
&lt;p&gt;I also mentioned templates for the premium package of the book, but didn’t go further than that. Here is a breakdown of what templates to expect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to make a sticky sidebar&lt;/li&gt;
&lt;li&gt;How to make gutter-less grids&lt;/li&gt;
&lt;li&gt;How to make static-width grids&lt;/li&gt;
&lt;li&gt;How to make off-canvas layouts&lt;/li&gt;
&lt;li&gt;How to make non-responsive grids&lt;/li&gt;
&lt;li&gt;How to make grids with square blocks&lt;/li&gt;
&lt;li&gt;How to make magic grids (old Susy 1 grid)&lt;/li&gt;
&lt;li&gt;How to make self-adjusting grids with Susy&lt;/li&gt;
&lt;li&gt;How to make a grid where items a floated “center”&lt;/li&gt;
&lt;li&gt;How to use more than one Susy layout on the same page&lt;/li&gt;
&lt;li&gt;How to change gutter settings on different layouts on the same page&lt;/li&gt;
&lt;li&gt;How to use different grid layout settings with different breakpoints&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m also mentioned that I will record videos for building 5 different websites with Susy in the full package. I’m currently out of ideas on what sites to use for these screencast and it’ll be great if you let me know what sites you like to see featured :)&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I learnt a hard lesson from this failure and the importance of keeping to my word. I have failed and I’m sorry for not being able to deliver.&lt;/p&gt;
&lt;p&gt;I’m going to be completely honest with you and let you know that I’m not able to commit to a delivery date right now. I can promise you that this update is definitely going to happen, but I need to direct all my attention to fulfilling my promises to my partner regarding the wedding first.&lt;/p&gt;
&lt;p&gt;Right after that is cleared, I will come back to this book and I will give you a date that I will deliver.&lt;/p&gt;
&lt;p&gt;Hope that’s cool with you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How To Write Mobile-first CSS</title>
    <link href="https://zellwk.com/blog/how-to-write-mobile-first-css/"/>
    <updated>2014-12-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/how-to-write-mobile-first-css/</id>
    <content type="html">&lt;p&gt;Building responsive websites is a must-have skill for front-end developers today. When we speak about responsive websites, the term mobile-first pops into mind immediately.&lt;/p&gt;
&lt;p&gt;We know the importance of designing from a mobile-first perspective. Unfortunately, much less was said about coding from a mobile-first approach.&lt;/p&gt;
&lt;p&gt;Today, I’d like to share with you about the mobile-first approach to styling, why it is much better, and how to work its magic.&lt;/p&gt;
&lt;p&gt;Note: This article will be immensely helpful if you are learning to build responsive layouts with Susy.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-are-mobile-first-and-desktop-first-approaches%3F&quot;&gt;What are Mobile-first and Desktop-first approaches?&lt;/h2&gt;
&lt;p&gt;Let’s understand the differences between mobile-first and desktop-first before we dive into why the mobile-first approach is better.&lt;/p&gt;
&lt;p&gt;A mobile-first approach to styling means that styles are applied first to mobile devices. Advanced styles and other overrides for larger screens are then added into the stylesheet via media queries.&lt;/p&gt;
&lt;p&gt;This approach uses &lt;code&gt;min-width&lt;/code&gt; media queries.&lt;/p&gt;
&lt;p&gt;Here’s a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// This applies from 0px to 600px
body {
  background: red;
}

// This applies from 600px onwards
@media (min-width: 600px) {
  body {
    background: green;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; will have a red background below 600px. Its background changes to green at 600px and beyond.&lt;/p&gt;
&lt;p&gt;On the flipside, a desktop-first approach to styling means that styles are applied first to desktop devices. Advanced styles and overrides for smaller screens are then added into the stylesheet via media queries.&lt;/p&gt;
&lt;p&gt;This approach uses &lt;code&gt;max-width&lt;/code&gt; media queries.&lt;/p&gt;
&lt;p&gt;Here’s a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// This applies from 600px onwards
body {
  background: green;
}

// This applies from 0px to 600px
@media (max-width: 600px) {
  body {
    background: red;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; will have a background colour of green for all widths. If the screen goes below 600px, the background colour becomes red instead.&lt;/p&gt;
&lt;h2 id=&quot;why-code-mobile-first%3F&quot;&gt;Why Code Mobile-first?&lt;/h2&gt;
&lt;p&gt;Code for larger screens is usually more complicated than the codes for smaller screens. This is why coding mobile first helps simplify your code.&lt;/p&gt;
&lt;p&gt;Consider a situation where you have a content-sidebar layout for a website. &lt;code&gt;.content&lt;/code&gt; takes up a 100% width on mobile, and 66% on the desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Most of the time, we can rely on default properties to style content for smaller screens. In this case, a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; has a width of 100% by default.&lt;/p&gt;
&lt;p&gt;If we work with the mobile-first approach, the Sass code will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  // Properties for smaller screens.
  // Nothing is required here because we can use the default styles

  // Properties for larger screens
  @media (min-width: 800px) {
    float: left;
    width: 60%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we go with the desktop-first approach instead, we will have to restore the default properties for smaller viewports most of the time. The Sass code for the same result is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  // Properties for larger screens.
  float: left;
  width: 60%;

  // Properties for smaller screens.
  // Note that we have to write two default properties to make the layout work
  @media (max-width: 800px) {
    float: none;
    width: 100%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this one example, we save two lines of code and a few seconds of mind-bending CSS. Imagine how much time and effort this will save you if you worked on a larger site.&lt;/p&gt;
&lt;p&gt;Most of the time &lt;code&gt;min-width&lt;/code&gt; queries would be enough to help you code a website. There are however instances where a combination of both &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; queries helps to reduce complications that pure &lt;code&gt;min-width&lt;/code&gt; queries cannot hope to achieve.&lt;/p&gt;
&lt;p&gt;Let’s explore some of these instances.&lt;/p&gt;
&lt;h2 id=&quot;using-max-width-queries-with-a-mobile-first-approach&quot;&gt;Using Max-width Queries With A Mobile-First Approach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Max-width&lt;/code&gt; queries come into play when you want styles to be constrained below a certain viewport size. A combination of both &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; media queries will help to constrain the styles between two different viewport sizes.&lt;/p&gt;
&lt;p&gt;Consider a case of a gallery of thumbnails. This gallery has 3 thumbnails in a row on a smaller viewport and 4 items in a row on a larger viewport.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since there are no spaces between each item, its simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  width: 33.33%;
  @media (min-width: 800px) {
    width: 25%;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It gets slightly complicated if there are empty spaces within each item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Say these spaces each take up 5% of the width:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  width: 30%;
  margin-right: 5%;
  margin-bottom: 5%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will also have to give the final (3rd item) on the row a &lt;code&gt;margin-right&lt;/code&gt; of 0 to make sure it doesn’t get pushed down into the next column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  width: 30%;
  margin-right: 5%;
  margin-bottom: 5%;
  &amp;amp;:nth-child(3n) {
    margin-right: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code must also work for the case where there are four items in the row. If we go according to the min-width query we had above…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  width: 30%;
  margin-right: 5%;
  margin-bottom: 5%;
  &amp;amp;:nth-child(3n) {
    margin-right: 0;
  }

  @media (min-width: 800px) {
    width: 21.25%; // (100% - 15%) / 4
    &amp;amp;:nth-child (4n) {
      margin-right: 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This doesn’t work properly because we specified that every 3rd item should have a &lt;code&gt;margin-right&lt;/code&gt; of 0px. This property gets cascaded towards a larger viewport and breaks the pattern we wanted.&lt;/p&gt;
&lt;p&gt;We can fix it by resetting the &lt;code&gt;margin-right&lt;/code&gt; property of every 3rd item to 5%:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  // ...
  @media (min-width: 800px) {
    // ...
    &amp;amp;:nth-child (3n) {
      margin-right: 5%;
    }
    &amp;amp;:nth-child(4n) {
      margin-right: 0%;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn’t a very nice approach since we are going to repeat the 5% &lt;code&gt;margin-right&lt;/code&gt; property if we have to change the number of items on a larger viewport.&lt;/p&gt;
&lt;p&gt;We should keep the code as DRY as possible.&lt;/p&gt;
&lt;p&gt;A better way is to constrain &lt;code&gt;nth-child(3n)&lt;/code&gt; selector within its rightful viewport by using a &lt;code&gt;max-width&lt;/code&gt; query.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  margin-right: 5%;
  margin-bottom: 5%;
  @media (max-width: 800px) {
    width: 30%;
    &amp;amp;:nth-child(3n) {
      margin-right: 0;
    }
  }

  @media (min-width: 800px) {
    width: 21.25%; // (100% - 15%) / 4
    &amp;amp;:nth-child (4n) {
      margin-right: 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This works because the  &lt;code&gt;max-width&lt;/code&gt; property limits the selectors to below 800px and the styles given within will not affect styles for any other viewports.&lt;/p&gt;
&lt;p&gt;Now imagine if you have a larger viewport and you wanted to show 5 items per row in the gallery. This is when a combination of &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt; queries come together.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery__item {
  float: left;
  margin-right: 5%;
  margin-bottom: 5%;
  @media (max-width: 800px) {
    width: 30%;

    &amp;amp;:nth-child(3n) {
      margin-right: 0;
    }
  }

  // combining both min-width and max-width queries
  @media (min-width: 800px) and (max-width: 1200px) {
    width: 21.25%; // (100% - 15%) / 4
    &amp;amp;:nth-child (4n) {
      margin-right: 0;
    }
  }

  @media (min-width: 1200px){
    width: 16%; // (100% - 20%) / 5
    &amp;amp;:nth-child (5n) {
      margin-right: 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/12/mw-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;a-video!&quot;&gt;A Video!&lt;/h2&gt;
&lt;p&gt;The guys over at &lt;a href=&quot;https://www.webucator.com/mobile-training/mobile-web-development.cfm&quot;&gt;Webucator&lt;/a&gt; were extremely kind and volunteered to create a video to summarize this blog post. So if videos are your thing, do check this out.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/LCveWtlvSbM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Min-width&lt;/code&gt; media queries are extremely helpful when it comes to coding responsive websites because it reduces code complexity. &lt;code&gt;Min-width&lt;/code&gt; queries are, however, not the solution to every problem as you can see from the examples above. It can sometimes be beneficial to add &lt;code&gt;max-width&lt;/code&gt; queries into your stylesheet to help keep things DRYer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use susy with bootstrap</title>
    <link href="https://zellwk.com/blog/https:/www.sitepoint.com/use-susy-bootstrap/"/>
    <updated>2014-11-25T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.sitepoint.com/use-susy-bootstrap/</id>
    <content type="html">&lt;p&gt;Susy is a grid layout engine that was built to help web developers create web layouts easily. It allows us to create custom grids and it does its job extremely well.&lt;/p&gt;
&lt;p&gt;One of the common complaints about Susy is that it is too simple, it’s only the grid layout engine. There are no UI kits that come with it, and that slows down developers who want to prototype quickly.&lt;/p&gt;
&lt;p&gt;The good news is Susy can be integrated into almost any framework or UI kit, including the major ones, like Bootstrap and Foundation.&lt;/p&gt;
&lt;p&gt;This is precisely what this tutorial is all about – integrating Susy with another framework, Bootstrap, to be specific. Even if you are not a fan of Bootstrap, you can still glean insights on how to integrate Susy with your UI kit of choice through this tutorial.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>I&#39;m Going To Make The Learning Susy Book Better, And What That Means For You</title>
    <link href="https://zellwk.com/blog/updating-learning-susy/"/>
    <updated>2014-11-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/updating-learning-susy/</id>
    <content type="html">&lt;p&gt;It’s been 3 months since Learning Susy has been released and the support from the community has been wonderful. It’s heartening to see so many people start to learn about Susy, and how they have benefited as a result.&lt;/p&gt;
&lt;p&gt;I have learned a lot more about what people are looking for since releasing the book through observations, questions and surveys, and I feel that I am now able to make Learning Susy 10x better.&lt;/p&gt;
&lt;p&gt;In this post, I’d like to share with you my observations of issues that people often encounter, how I intend to help solve these issues in the next version of Learning Susy, and what all this means to you.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: The new Learning Susy Book is now live at &lt;a href=&quot;http://learnsusy.zellwk.com/&quot;&gt;http://learnsusy.zellwk.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;the-bucket-list-of-issues&quot;&gt;The Bucket List of Issues&lt;/h2&gt;
&lt;p&gt;I discovered that there are 5 main areas where people have problems with Susy. A quick overview of these 5 areas are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Installing and running Susy&lt;/li&gt;
&lt;li&gt;Structuring your project with Susy&lt;/li&gt;
&lt;li&gt;Using Susy correctly&lt;/li&gt;
&lt;li&gt;Using Susy to make more complicated layouts&lt;/li&gt;
&lt;li&gt;Using Susy to quickly prototype and build websites&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1.-installing-susy&quot;&gt;1. Installing Susy&lt;/h3&gt;
&lt;p&gt;Installation is often the biggest headache for beginners. It is especially challenging and scary if you are still very new to Sass. It can also be incredibly frustrating to spend hours and hours trying to figure out how Sass and Susy work, and not find the answer, or discover that it was just a tiny typo you made earlier.&lt;/p&gt;
&lt;p&gt;The issue is usually not with the installation process, but rather, making sure you are able to compile Sass to CSS with Susy. This is the step in the process where you can choose to use different tools to help you out. Some of these tools are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The terminal (with Sass or Compass)&lt;/li&gt;
&lt;li&gt;Applications like Codekit or Prepros&lt;/li&gt;
&lt;li&gt;Task builders like Grunt or Gulp&lt;/li&gt;
&lt;li&gt;Special cases like with Rails or Bundler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just in case you didn’t know, there are three ways you can install Susy into your project. You can install the Susy gem via the terminal, or opt to use only the Sass files by installing them via Bower or downloading them manually.&lt;/p&gt;
&lt;p&gt;The configuration required for each of these tools differ slightly depending on how you have chosen to install Susy.&lt;/p&gt;
&lt;p&gt;If you are just starting out with Sass, you may feel overwhelmed by all this.&lt;/p&gt;
&lt;p&gt;Unfortunately, the installation process specific to most of these tools isn’t covered very well in the current version of Learning Susy. I could have helped more by explaining how to install Susy in conjunction with some of these tools.&lt;/p&gt;
&lt;p&gt;If you are slightly more seasoned, you might have heard of LibSass and how it’s lightning fast. Susy is almost ready to support LibSass right now, and instructions on how to use LibSass with Susy will be useful for you if you are looking to speed up your development time.&lt;/p&gt;
&lt;p&gt;That’s what I’m doing for the next version. It will include instructions on installing Susy using a variety of methods, and these instructions will go onto Susy’s documentation when I’m done.&lt;/p&gt;
&lt;h3 id=&quot;2.-structuring-projects-with-susy&quot;&gt;2. Structuring Projects with Susy&lt;/h3&gt;
&lt;p&gt;Right after installation and compilation comes the topic of structuring project files within Susy.&lt;/p&gt;
&lt;p&gt;This question was asked because there have been many instances where frameworks require you to structure your project in a specific way. Most people wondered if Susy required this as well.&lt;/p&gt;
&lt;p&gt;Thankfully, you don’t have to do anything special with Susy. You can just structure your project as if you are running a standard Sass project.&lt;/p&gt;
&lt;p&gt;Such questions and frustrations are inevitable if you are new to Sass. I could have improved the earlier parts of the book by slowly doing more, and explaining how to create a recommended starting point for all your projects.&lt;/p&gt;
&lt;p&gt;I ran into the same problems when I started out learning. I got so familiar with them over time that I missed this point entirely. The new version of Learning Susy will also teach you how to structure your first project so you can start out smoothly.&lt;/p&gt;
&lt;h3 id=&quot;3.-understanding-how-to-use-susy-correctly&quot;&gt;3. Understanding how to use Susy correctly&lt;/h3&gt;
&lt;p&gt;Most people have no problems with the first two areas, but trip up in this section. Although Susy is built to simple and flexible, the flexibility comes with a price of complexity. It’s somewhat of an oxymoron and can be mind-boggling when you are just getting started.&lt;/p&gt;
&lt;p&gt;In a nutshell, you need to know certain core concepts in order to understand how Susy works. One of the most important is to &lt;a href=&quot;https://zellwk.com/blog/updating-learning-susy/blog/context-with-susy/&quot;&gt;understand what context is&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few other concepts that get people confused. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/susy-grid-background-image/&quot;&gt;The steps to debug Susy with the Susy background grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/susy-gutter-positions/&quot;&gt;The difference between each gutter position, and how to use them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What the &lt;code&gt;container()&lt;/code&gt; mixin does, and when to use it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are more concepts that you will need to fully understand in order to use Susy for every situation possible. Most of these are already covered in the book. Right now, it’s not written in a way that highlights that these are key things you will need to know.&lt;/p&gt;
&lt;p&gt;I’m rewriting most of the book to change that. I would be dedicating chapters to these core concepts so you know where to look for them, and know what all of them are.&lt;/p&gt;
&lt;p&gt;In addition to rewriting the book, I’m going to include a cheatsheet on the different Susy settings that you can quickly refer to, so you can set up your Susy grid immediately. You no longer have to flip through the book to find this information.&lt;/p&gt;
&lt;h3 id=&quot;4.-understanding-how-to-make-complex-layouts-with-susy&quot;&gt;4. Understanding how to make complex layouts with Susy&lt;/h3&gt;
&lt;p&gt;I assumed people would start with learning how to work with basic layouts in Susy, then progress onto the more advanced layouts.&lt;/p&gt;
&lt;p&gt;What I realised was that most people don’t follow that path. People start trying to make more complex layouts without first understanding how Susy works, and they run into problems. In retrospect, I too was like that when I started as well.&lt;/p&gt;
&lt;p&gt;Some of the questions I got were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to centre the Susy container&lt;/li&gt;
&lt;li&gt;How to centre every item in a Susy layout&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/off-canvas-layouts-susy/&quot;&gt;How to make off-canvas layouts with Susy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to use more than one Susy layout on the same page&lt;/li&gt;
&lt;li&gt;How to change gutter settings on different layouts on the same page&lt;/li&gt;
&lt;li&gt;… among many others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all great questions that would challenge your understanding of Susy, and you might have to spend hours figuring them out.&lt;/p&gt;
&lt;p&gt;Instead of letting you figure it out on your own, I will show you how to make these layouts, step by step, through different tutorials, then provide you with the code templates so you can run with them. This would mean remaking the 20 templates I currently have within the Full Package so the instructions are baked into them. The actual number of templates is still unconfirmed yet, but there will be a minimum of 10 templates.&lt;/p&gt;
&lt;p&gt;In addition to these 10 solid templates, there will also be more chapters on best practices, organising code, handling context and other good-to-know information to help you out with learning Susy.&lt;/p&gt;
&lt;p&gt;Also, to take it to the next level, I’m intending to interview experts on how they use Susy and why they prefer to use it in certain ways. That should help you gain deep insights into when and why some Susy methods are used, and how to use them.&lt;/p&gt;
&lt;p&gt;To beef it up even more, I’m including video tutorials on how to code 5 different websites from scratch with Susy (even if those websites are not using Susy right now). This should give you a complete understanding on how to start from scratch when building Susy sites. It will also be beneficial for those of you who are more video-oriented :)&lt;/p&gt;
&lt;h3 id=&quot;5.-how-to-use-susy-to-quickly-prototype-or-build-websites&quot;&gt;5. How to use Susy to quickly prototype or build websites&lt;/h3&gt;
&lt;p&gt;Finally, it matters how fast you are able to prototype or build your website.&lt;/p&gt;
&lt;p&gt;Although Susy makes it quick to get the layout right, there’s a huge gap when it comes to prototyping or building websites because it doesn’t provide any UI kits to go along with it.&lt;/p&gt;
&lt;p&gt;It’s also hard to justify to your company if you switched to Susy, and built sites slower than you previously could, because you are missing these UI elements.&lt;/p&gt;
&lt;p&gt;The good news is, Susy can integrate with ANY framework you want to use. It can play nicely with major frameworks like Bootstrap and Foundation, or even your home-grown UI kit as long as you know how to integrate it.&lt;/p&gt;
&lt;p&gt;And I’ll help you out with this integration process by dedicating a bonus chapter to it.&lt;/p&gt;
&lt;p&gt;To help you build websites quicker, I’ll also create starter templates that integrate Susy tightly with existing frameworks like Bootstrap, Foundation (and even the awesome looking Startup Design Framework if I manage to get permission for it)&lt;/p&gt;
&lt;p&gt;All of these starter templates will also come with a build process that automatically helps you streamline concatenation, minification and all other optimisation processes that you’ll need to run.&lt;/p&gt;
&lt;h2 id=&quot;what-this-means-for-you&quot;&gt;What This Means For You&lt;/h2&gt;
&lt;p&gt;There’s going to be a tonne of additions to the book, and prices are definitely going to increase. Let me first tell you about the revised packages before telling you the good news :)&lt;/p&gt;
&lt;h3 id=&quot;the-full-package&quot;&gt;The full package&lt;/h3&gt;
&lt;p&gt;The full package will contain everything you will ever need to get started with Susy, and understand it so well you can do anything you want with it.&lt;/p&gt;
&lt;p&gt;TL; DR: It will contain everything mentioned in this article :)&lt;/p&gt;
&lt;p&gt;It will contain the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The book (in ePub, Mobi, PDF and HTML versions)&lt;/li&gt;
&lt;li&gt;Source code for all examples mentioned in the book&lt;/li&gt;
&lt;li&gt;A step-by-step checklist on how to use Susy for all grid combinations&lt;/li&gt;
&lt;li&gt;4 bonus chapters on best practices, code organisation, handling complex context and integration with frameworks&lt;/li&gt;
&lt;li&gt;10 code templates with detailed explanations to help you understand how to use Susy to the extremes, like the &lt;a href=&quot;https://zellwk.com/blog/off-canvas-layouts-susy/&quot;&gt;off canvas layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sass starter template&lt;/li&gt;
&lt;li&gt;Sass starter template with Bootstrap&lt;/li&gt;
&lt;li&gt;Sass starter template with Foundation&lt;/li&gt;
&lt;li&gt;Sass starter template with Startup Design Framework (Possibly)&lt;/li&gt;
&lt;li&gt;5 videos on rebuilding popular sites with Susy&lt;/li&gt;
&lt;li&gt;5 video interviews on how experts use Susy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Price for the package: $199.&lt;/p&gt;
&lt;h3 id=&quot;the-premium-package&quot;&gt;The premium package&lt;/h3&gt;
&lt;p&gt;The premium package will contain everything you will need to understand Susy and use it at a expert level. It will teach you everything you need to know about Susy to the extremes.&lt;/p&gt;
&lt;p&gt;You’ll be missing out on the speedy prototyping templates and detailed videos from the full package though :(&lt;/p&gt;
&lt;p&gt;However, this is good if you are comfortable with figuring out how you want to use Susy by yourself and cobble together your own framework.&lt;/p&gt;
&lt;p&gt;It will contain the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The book (in ePub, Mobi, PDF and HTML versions)&lt;/li&gt;
&lt;li&gt;Source code for all examples mentioned in the book&lt;/li&gt;
&lt;li&gt;A step-by-step checklist on how to use Susy for all grid combinations&lt;/li&gt;
&lt;li&gt;4 bonus chapters on best practices, code organisation, handling complex context and integration with frameworks&lt;/li&gt;
&lt;li&gt;10 code templates with detailed explanations to help you understand how to use Susy to the extremes, like the &lt;a href=&quot;https://zellwk.com/blog/off-canvas-layouts-susy/&quot;&gt;off canvas layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Price for the package: $99.&lt;/p&gt;
&lt;h3 id=&quot;the-book&quot;&gt;The book&lt;/h3&gt;
&lt;p&gt;If you are on a tight budget and still want to learn to use Susy to build your websites, the book is a good choice for you.&lt;/p&gt;
&lt;p&gt;I want to make sure the book doesn’t get undervalued. It really is where I spent the most time and effort. The content in the book will help build up your foundation with Susy, and once you have that, figuring out the rest of it by yourself becomes much simpler.&lt;/p&gt;
&lt;p&gt;Note that you’ll now get the source code for all examples mentioned in the book to help you learn quicker!&lt;/p&gt;
&lt;p&gt;It will contain the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML, EPUB, MOBI and HTML versions&lt;/li&gt;
&lt;li&gt;Source code for all examples mentioned in the book&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Price: $49.&lt;/p&gt;
&lt;h2 id=&quot;release-date&quot;&gt;Release Date&lt;/h2&gt;
&lt;p&gt;This new version will contain lots of new material that will take some time to produce. I’d like to get it to your hands as soon as I can. The tentative release date will be 31st Jan, 2015.&lt;/p&gt;
&lt;h2 id=&quot;the-good-news&quot;&gt;The Good News&lt;/h2&gt;
&lt;p&gt;And here’s what you have been waiting for :)&lt;/p&gt;
&lt;p&gt;If you have already bought any of the current packages (book, premium or full), you will be given a free update to the next version of the book with the same package.&lt;/p&gt;
&lt;p&gt;This means that if you already bought the full package at $79, you’ll get the new full package worth $199 without spending an extra cent.&lt;/p&gt;
&lt;p&gt;This extends to anyone who has bought the book recently, or way long ago, up till the day where the new version is released.&lt;/p&gt;
&lt;p&gt;Sounds good? :)&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-going-to-happen-next&quot;&gt;What’s Going To Happen Next&lt;/h2&gt;
&lt;p&gt;I’m focusing on these areas for the next release of the book. If you happen to catch an area that I have missed out, please do leave a comment and let me know what it is!&lt;/p&gt;
&lt;p&gt;As I continue to write the book, I’m planning to share with you the writing process and show you snippets of the book from time to time. I will also be doing some polls to find out what websites to make for the video tutorial. Make sure you’re on my email list if you want to follow along and be updated!&lt;/p&gt;
&lt;p&gt;Finally, I’d love to hear what you think of these improvements and changes to the packages. Let me know in the comments!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Fix 90% of Your Problems With Susy by Getting This One Concept Right</title>
    <link href="https://zellwk.com/blog/context-with-susy/"/>
    <updated>2014-10-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/context-with-susy/</id>
    <content type="html">&lt;p&gt;In the last month, I had the privilege of helping a few people find out what went wrong with their Susy code while suggesting a few areas of improvement.&lt;/p&gt;
&lt;p&gt;I noticed one problem kept popping up in the questions I answered. People find it difficult to get Susy to work correctly in nested grids. They sometimes employ workarounds that tweak Susy so badly that it hinders instead of helps.&lt;/p&gt;
&lt;p&gt;Even though Susy is built to be extremely flexible and easy to use, it has its own key concepts and rules like all other frameworks. You will need to understand these concepts to get Susy to work for you properly.&lt;/p&gt;
&lt;p&gt;I’ll like to share one of these concepts with you today to help you overcome a large majority of your Susy problems.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-questions-i-received&quot;&gt;The Questions I Received&lt;/h2&gt;
&lt;p&gt;Most of the questions I receive boil down to these two different variations:&lt;/p&gt;
&lt;p&gt;(1) How to create a uniform spacing between the edges of grid elements and their parent containers? In other words, how do I make the layout in this image?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(2) Why are the gutters of elements within the nested grid different from the ones outside? In other words, why does this happen?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;People have a variety of ways to deal with these two situations, most resorting to a trial and error method that eventually lead to super complex &lt;code&gt;span()&lt;/code&gt; mixins like &lt;code&gt;span(15 of 27)&lt;/code&gt;. Some others tweak the gutter ratio within the nested grids to balance out these situations.&lt;/p&gt;
&lt;p&gt;The best way to overcome these questions isn’t any of the methods above. There is a clear and direct way to solve these issues. To do so, you’ll have to understand a fundamental concept within Susy. You’ll have to &lt;strong&gt;know how to identify the &amp;quot;context&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-context%3F&quot;&gt;What is Context?&lt;/h2&gt;
&lt;p&gt;Context is present in every single line of Susy code. You can find it if you look out for the &lt;code&gt;of&lt;/code&gt; keyword. Here’s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  @include span(8 of 12);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s no way to miss the &lt;code&gt;of&lt;/code&gt; keyword in this example. &lt;strong&gt;What follows the &lt;code&gt;of&lt;/code&gt; keyword is the context&lt;/strong&gt;. In this case, we are specifying that the &lt;code&gt;.content&lt;/code&gt; element has a context of 12 columns.&lt;/p&gt;
&lt;p&gt;This is what happens if we translate the above code into an image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can clearly see that &lt;code&gt;.content&lt;/code&gt; takes up 8 of 12 columns in the image. You could also say that &lt;strong&gt;context is the number of columns in the parent element&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes the &lt;code&gt;of&lt;/code&gt; keyword is deliberately left out of the mixin so we coders can write less. There is no way of knowing what the context is without more information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  @include span(8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In these cases, you’ll have to look upwards to find the context.&lt;/p&gt;
&lt;p&gt;Susy will look for a &lt;code&gt;nested()&lt;/code&gt; mixin or a &lt;code&gt;with-layout()&lt;/code&gt; mixin that the &lt;code&gt;span()&lt;/code&gt; function is nested in. If it finds either of these mixins, Susy will take the context passed into them as the context of &lt;code&gt;span()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include nested(12) {
  // This is equivalent to @include span(8 of 12);
  .content {
    @include span(8);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fret not if this is the first time you are seeing the &lt;code&gt;nested()&lt;/code&gt; or &lt;code&gt;with-layout()&lt;/code&gt; mixin. It is perfectly fine not to use &lt;code&gt;nested()&lt;/code&gt; or &lt;code&gt;with-layout()&lt;/code&gt; in your code.&lt;/p&gt;
&lt;p&gt;These mixins are not talked about often because they are built to help reduce repetition when coding large websites. I would argue that the use of &lt;code&gt;nested()&lt;/code&gt; or &lt;code&gt;with-layout()&lt;/code&gt; is a best practice, but I’ll leave that for the next article.&lt;/p&gt;
&lt;p&gt;Let’s continue with context for now.&lt;/p&gt;
&lt;p&gt;If Susy doesn’t find any &lt;code&gt;nested()&lt;/code&gt; or &lt;code&gt;with-layout()&lt;/code&gt; mixins that wrap around the &lt;code&gt;span()&lt;/code&gt; mixin, it will use the &lt;code&gt;columns&lt;/code&gt; setting found within the &lt;code&gt;$susy&lt;/code&gt; map as the context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  columns: 12,
  );

  .content {
  // This is equivalent to @include span(8 of 12);
  @include span(8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take it a step further and identify the context within nested grids. If we wanted to build something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The HTML should be straightforward. &lt;code&gt;.nested-item&lt;/code&gt; will be nested within &lt;code&gt;.content&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;nested-item&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To write the Sass, we need to know the contexts of both &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.nested-item&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since context is the number of columns in the parent element, the context for &lt;code&gt;.nested-item&lt;/code&gt; is the number of columns in &lt;code&gt;.content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The parent element for &lt;code&gt;.content&lt;/code&gt; is wrap, and wrap uses the number of columns declared in the &lt;code&gt;$susy&lt;/code&gt; map.&lt;/p&gt;
&lt;p&gt;So context for &lt;code&gt;.content&lt;/code&gt; is 12 while context for &lt;code&gt;.nested-item&lt;/code&gt; is 8.&lt;/p&gt;
&lt;p&gt;It’s easy to write the Susy code for both &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.nested-item&lt;/code&gt; once we know the context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
  @include span(8 of 12);
}

.nested-item {
  @include span(4 of 8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Say you wanted to center &lt;code&gt;.nested-item&lt;/code&gt; within content.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;One way to do so is to offset the &lt;code&gt;.nested-item&lt;/code&gt; by 2 spans and one gutter from the left. You have to make sure you use the correct context when offsetting the &lt;code&gt;.nested-item&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;The way I prefer to offset is to use the &lt;code&gt;span()&lt;/code&gt; function instead of &lt;code&gt;pre()&lt;/code&gt; or &lt;code&gt;post()&lt;/code&gt; mixins.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.nested-item {
  @include span(4 of 8);
  margin-left: span(2 of 8) + gutter(8);
  // Alternatively, you can write margin-left: span(2 wide of 8)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And with this, the &lt;code&gt;.nested-item&lt;/code&gt; is centred within &lt;code&gt;.content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see that context is used in almost every single function and mixin in the examples above. Susy becomes super easy, once you understand context.&lt;/p&gt;
&lt;p&gt;There is just one more small thing that you might want to keep in mind.&lt;/p&gt;
&lt;p&gt;Susy calculates the width of columns and gutters in percentages. The exact width of the columns and gutters are affected by the available width of the element.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When we add padding to the parent container (assuming you are on border-box sizing), we push the content within inwards. The column and gutter sizes will not be exactly the same as the ones we used in the outer content. Most of the time though, this effect is negligible at about a 1px difference.&lt;/p&gt;
&lt;p&gt;That’s everything you should know about context.&lt;/p&gt;
&lt;p&gt;Now let’s take it up a level and answer one of the most popular questions: “How do I make top and bottom margins between each item equal?”&lt;/p&gt;
&lt;h2 id=&quot;how-to-make-equal-spaces-with-galleries&quot;&gt;How To Make Equal Spaces with Galleries&lt;/h2&gt;
&lt;p&gt;Let’s revisit what we have to make first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We know that this is a gallery and each of these gallery items can found within a &lt;code&gt;.content&lt;/code&gt; div.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;ul class=&amp;quot;gallery&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;gallery-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the &lt;code&gt;gallery()&lt;/code&gt; mixin to quickly create the gallery. Since there are four items on each row, and the context is 8 columns, we know that each gallery item will take up 2 columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery-item {
  @include gallery(2 of 8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take note that the &lt;code&gt;gallery()&lt;/code&gt; mixins use floats. We have to add a clearfix to force the gallery to clear its children.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery {
  @include clearfix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can provide an equal vertical space between each gallery item by adding some margins to the bottom of each item. We can use the context again to create the exact amount of margins we need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery-item {
  @include gallery(2 of 8);
  margin-bottom: gutter(8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we need to add the left, top and right spaces to reach our end goal.&lt;/p&gt;
&lt;p&gt;The simplest way to get to it is to add paddings that are worth a gutter size to the left, top and right to the parent element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.gallery {
  padding: gutter(8);
  padding-bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The final step of this method isn’t perfect. Since we are adding padding to the parent element, we have reduce the total available width for its child elements. Because of this, the widths of columns and gutters will be slightly smaller. It isn’t much of a problem because the difference is at most 1px in this case.&lt;/p&gt;
&lt;p&gt;There is another method to create paddings that are equal on all sides if you dislike having this small error. The method involves bleeding the parent’s background out of its boundaries instead.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content {
    @include span(8 of 12);
    @include bleed(gutter(12));
    margin-bottom: 0;
    padding-bottom: 0;
}

.gallery-item {
  @include gallery(2 of 8);
  margin-bottom: gutter(8);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you will get a similar result, with the exception that the parent container is pushed off the grid instead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/10/img10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;See how with an understanding of the proper context, things become more intuitive? :)&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next%3F&quot;&gt;What’s Next?&lt;/h2&gt;
&lt;p&gt;Context is incredibly important when it comes to Susy. You can solve almost any Susy problem in a quick and elegant manner once you understand context.&lt;/p&gt;
&lt;p&gt;If this concept is new to you, take some time and go back to your code to see how you could potentially refactor it and make it better with the proper use of context.&lt;/p&gt;
&lt;p&gt;Let me know in the comments how this has helped :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I Wrote and Sold My First Ebook (and how you can do it too)</title>
    <link href="https://zellwk.com/blog/how-i-wrote-and-sold-my-first-ebook-and-how-you-can-do-it-too/"/>
    <updated>2014-10-15T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/how-i-wrote-and-sold-my-first-ebook-and-how-you-can-do-it-too/</id>
    <content type="html">&lt;p&gt;September 19, 2014 is one day of my life that I will never forget. It is the day when I sold the 50th copy of my first ebook.&lt;/p&gt;
&lt;p&gt;I didn’t have many resources when I started writing the book. I didn’t have any influential friends, money or experience. All I had was 67 people on my email list. Worst of all, I felt I wasn’t even qualified to write a book.&lt;/p&gt;
&lt;p&gt;I now understand that it is possible to make something people want, even if you don’t feel like you are an expert on the subject.&lt;/p&gt;
&lt;p&gt;I’m consolidating this valuable learning experience into an article, which I am sharing with you now.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;In this article, you’ll find out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How I &lt;strong&gt;plucked up the courage&lt;/strong&gt; to start writing&lt;/li&gt;
&lt;li&gt;The process I took to &lt;strong&gt;validate&lt;/strong&gt; the book&lt;/li&gt;
&lt;li&gt;The process I took to &lt;strong&gt;write&lt;/strong&gt; the book&lt;/li&gt;
&lt;li&gt;The process I took to &lt;strong&gt;market&lt;/strong&gt; the book&lt;/li&gt;
&lt;li&gt;The process I took to &lt;strong&gt;sell&lt;/strong&gt; the book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s begin by understanding what the book is all about.&lt;/p&gt;
&lt;h2 id=&quot;what-is-the-book-about%3F&quot;&gt;What Is The Book About?&lt;/h2&gt;
&lt;p&gt;The book is a digital guide for web developers to learn to use a layout tool called “Susy” to create websites easily. It is called “Learning Susy”.&lt;/p&gt;
&lt;p&gt;Since it’s a digital guide, the book comes in PDF, ePub and Mobi formats only. There is no physical book.&lt;/p&gt;
&lt;p&gt;It was a huge struggle for me to pluck up the courage to begin writing this book because I felt that I wasn’t good enough. I was a finance student before I picked up coding on my own, and it hadn’t even been two years since I first started.&lt;/p&gt;
&lt;p&gt;I felt like a total fraud.&lt;/p&gt;
&lt;p&gt;I can bet my life that you are struggling with &lt;a href=&quot;http://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;imposter syndrome&lt;/a&gt; as well, and that may have scared you away from writing your book.&lt;/p&gt;
&lt;p&gt;If you feel the same way, you may find it helpful to know how I managed to gather up my courage.&lt;/p&gt;
&lt;h2 id=&quot;how-i-gathered-enough-courage-to-write-the-book&quot;&gt;How I Gathered Enough Courage to Write The Book&lt;/h2&gt;
&lt;p&gt;It all started because of one thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Blog.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had been blogging consistently for more than a year before I started to write the book. The articles I wrote in the beginning were so horrible that I dread looking back at them now.&lt;/p&gt;
&lt;p&gt;I noticed my writing got better as I continued to churn out more posts, and my confidence increased along with them. After a while, I started to receive thanks for the content that I had written, and that boosted my confidence level even more.&lt;/p&gt;
&lt;p&gt;Blogging was a necessary step that I had to go through. I would never have believed that I could write a book if I never blogged, and publishing a book would have been inconceivable.&lt;/p&gt;
&lt;p&gt;The best part is this: the idea for the book came from the blog.&lt;/p&gt;
&lt;h2 id=&quot;how-the-idea-came-about&quot;&gt;How The Idea Came About&lt;/h2&gt;
&lt;p&gt;I went through 5 months without any success in blogging when I first started. My first break came about when I published a tutorial post about Susy (the older version of the tool, now renamed as Susyone). This post was retweeted by Eric (The creator of the tool).&lt;/p&gt;
&lt;p&gt;I had the affirmation that someone else had thought that my article was good enough to be shared. That tweet became the anchor for my confidence.&lt;/p&gt;
&lt;p&gt;I started to write more posts about front-end development after that incident. I tried different topics, but nothing seemed to have an impact as strongly as the article on Susyone.&lt;/p&gt;
&lt;p&gt;A few months later, a new version of Susy was released. Everything about the tool had changed, and I took the time to understand it and created a second tutorial.&lt;/p&gt;
&lt;p&gt;People started to comment on that Susy post, and I helped to answer the questions as much as I could.&lt;/p&gt;
&lt;p&gt;Eric tweeted the article again, and linked to it on his website. That was the second affirmation I received.&lt;/p&gt;
&lt;p&gt;I continued to write more about Susy and I started harbouring the thought of creating a book about Susy.&lt;/p&gt;
&lt;p&gt;That thought lasted for the next 3 months and I did nothing with it.&lt;/p&gt;
&lt;p&gt;I was deathly afraid of writing a book. I froze at the possibility of being a fraud and I talked myself out of writing the book unknowingly.&lt;/p&gt;
&lt;p&gt;3 months later, after I attended a life coaching program, I decided to make an announcement to my email list that I would be consolidating common questions about Susy in the form of a book. That was the whole story of how the book came about.&lt;/p&gt;
&lt;p&gt;When I made this announcement, I had no idea whether it would work. I didn’t want to write a book that nobody would read, and I had to find out whether this topic was something people wanted.&lt;/p&gt;
&lt;h2 id=&quot;how-i-validated-my-book-idea&quot;&gt;How I Validated My Book Idea&lt;/h2&gt;
&lt;p&gt;The first step was to verify that people who were already on my email list were at least interested enough about the topic to ask some questions.&lt;/p&gt;
&lt;p&gt;My list had 67 people at the time. 3 people replied with questions about Susy, and that was the giant confirmation that I was on to something.&lt;/p&gt;
&lt;p&gt;I have learnt through articles and programs that one sure-fire way to find out if an idea is already validated is to check if anyone is selling it already. Since I was going to write a book about Susy, the best place would be to check Amazon for any books on it. I was devastated when I found that no one had written anything on Susy before.&lt;/p&gt;
&lt;p&gt;It became more of a challenge to confirm that Susy was indeed worth writing about afterwards. I searched for other tutorials, forums and I even checked the official twitter account to see if anyone was interested.&lt;/p&gt;
&lt;p&gt;I found that there were over 400 questions on Stack Overflow, a few written tutorials on Susy and one solid video tutorial. This suggested that people were interested to find out about Susy even though not much had been written about it.&lt;/p&gt;
&lt;p&gt;In addition to the questions, I saw that the official Susy twitter account (@SassSusy) had over 2000 followers. It was a strong signal that this would be a worthy topic.&lt;/p&gt;
&lt;p&gt;Furthermore, I received an average of 150 daily visitors to my articles on Susy. It was also because of this, that I reasoned most of the people on my email list likely signed up to know more about Susy.&lt;/p&gt;
&lt;p&gt;After going through the above steps, I felt quite confident that there was a keen interest in the topic even though no money had exchanged hands.&lt;/p&gt;
&lt;p&gt;One more thing. I mentioned I had the thought of writing a Susy book for the last few months. That thought kept coming back to me. It became stronger over time and it got to a point where I knew I had to write this book. I would have written it even if only 3 people in the world read it.&lt;/p&gt;
&lt;p&gt;But at this stage, I was quite confident that I could reach more than 3 people because Susy is just so darn good.&lt;/p&gt;
&lt;p&gt;Since I was going to write the book regardless, I decided to continue moving forward to find out what information people were looking for.&lt;/p&gt;
&lt;h2 id=&quot;how-i-found-out-what-to-write-about&quot;&gt;How I Found Out What To Write About&lt;/h2&gt;
&lt;p&gt;The target audience was web developers, particularly novices who were interested to learn more about Susy. They could also be individuals who have grown tired of existing frameworks and are looking for an alternate solution.&lt;/p&gt;
&lt;p&gt;It was likely that the questions people had regarding Susy could be readily found in 3 places. Susy’s github, Stack Overflow and Susy’s twitter feed.&lt;/p&gt;
&lt;p&gt;I started to gather questions from these three locations and the questions formed the foundation for the book. Once I got the questions down, it was time to start work on the book.&lt;/p&gt;
&lt;p&gt;Just one more step before that: I needed to make sure that I was using the correct tools before I started to write.&lt;/p&gt;
&lt;h2 id=&quot;what-i-wrote-my-book-with&quot;&gt;What I Wrote My Book With&lt;/h2&gt;
&lt;p&gt;I had 3 different considerations while searching for the tool to write my book with.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has to support Markdown&lt;/li&gt;
&lt;li&gt;It has to have good syntax highlighting for code&lt;/li&gt;
&lt;li&gt;It needs to be able to generate the book in PDF, ePub and Mobi formats&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Markdown allowed me to separate the content from the visual presentation of the book. This allowed me to focus on writing the content and not get distracted by how it should look. I was already familiar with markdown after blogging for so long and it felt unnatural if I were to write in any other format.&lt;/p&gt;
&lt;p&gt;The second consideration was that the tool needed to produce good syntax highlighting. The book is full of code and it would be tough for a programmer to read through it without proper highlighting. Thus, this was an important consideration.&lt;/p&gt;
&lt;p&gt;Finally, I wanted to distribute in all 3 digital formats so people can read the book on their favourite devices.&lt;/p&gt;
&lt;p&gt;As an aside, I also wanted the possibility of creating a web format straight from my markdown files and be able to update the book with a simple git push.&lt;/p&gt;
&lt;p&gt;I wasn’t able to find any program that fit the bill at that time even though there are many good writing tools out there. Thinking back, it might have been because I was too picky about the code highlighting part.&lt;/p&gt;
&lt;p&gt;Just when I was about to run out of options, I remembered seeing a book that was created with the exact specifications I was looking for.&lt;/p&gt;
&lt;p&gt;That book was &lt;a href=&quot;http://discovermeteor.com/&quot;&gt;Discover Meteor&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/SachaGreif&quot;&gt;Sacha Greif&lt;/a&gt;, and he was kind enough to share it with me.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/DiscoverMeteor/DiscoverMeteorStatic&quot;&gt;proprietary codebase&lt;/a&gt; that Sacha created for Discover Meteor is a static website built with &lt;a href=&quot;http://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;. It produces a HTML version that can be converted into ePub and Mobi formats via &lt;a href=&quot;http://calibre-ebook.com/&quot;&gt;Calibre&lt;/a&gt;. The generator can also create a PDF version. That was exactly what I wanted.&lt;/p&gt;
&lt;p&gt;The code by Sacha was what I used to write the book with eventually.&lt;/p&gt;
&lt;p&gt;Although I used Middleman myself, I’d like to highlight some other tools that you may find useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ulyssesapp.com/&quot;&gt;Ulysses III &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/scrivener/id418889511?mt=12&quot;&gt;Scrivener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.penflip.com/&quot;&gt;Penflip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.io/&quot;&gt;Gitbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are good tools that at least have the capability to export either to ePub or Mobi formats. Once you have one of these formats, you can create other formats with &lt;a href=&quot;http://calibre-ebook.com/&quot;&gt;Calibre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that you can also convert Microsoft Word or Pages files into all 3 formats as well. That may be slightly trickier though.&lt;/p&gt;
&lt;p&gt;You might have noticed that you can use any tool you want to. I would recommended you to write with something that you are already comfortable with.&lt;/p&gt;
&lt;h2 id=&quot;the-writing-process&quot;&gt;The Writing Process&lt;/h2&gt;
&lt;p&gt;Deciding to write a book was simple. Writing the book was much harder than I imagined.&lt;/p&gt;
&lt;p&gt;If I were to draw an analogy, I would say that writing a book is similar to running a full marathon. You need to go through careful preparation and have the willpower to tough it out.&lt;/p&gt;
&lt;p&gt;I managed to complete the book eventually, and I am very thankful for some of the tricks I stole from all the experts that came before me. I may never have completed the book if it weren’t for these tricks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Outline the content&lt;/li&gt;
&lt;li&gt;Write everyday&lt;/li&gt;
&lt;li&gt;Get an accountability partner&lt;/li&gt;
&lt;li&gt;Get an editor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first trick is to &lt;strong&gt;outline all the content&lt;/strong&gt; you intend to write. This crucial first step is akin to planning the route for your marathon. After all, how could you run a marathon if you didn’t even know which route to take?&lt;/p&gt;
&lt;p&gt;Outlining the content helped to organize my thoughts into a coherent structure. Once I know what route I had to take in this marathon, I wasted less time trying to find out which corner to turn, or what to write.&lt;/p&gt;
&lt;p&gt;The second helpful trick is to &lt;strong&gt;write everyday&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It is not possible to finish a marathon in a single sprint. You’ll have to keep running consistently over a period of time to finish one.&lt;/p&gt;
&lt;p&gt;Just like a marathon, it is not possible to finish a book in a single sitting. You have to keep writing.&lt;/p&gt;
&lt;p&gt;The truth is, it takes much longer to complete a book than a marathon and we are also exposed to more distractions like Facebook, beer and the bed while writing a book. No wonder is so difficult to write a book!&lt;/p&gt;
&lt;p&gt;Writing everyday is a good way to force ourselves to keep moving forward with the book.&lt;/p&gt;
&lt;p&gt;I chose to write 1000 words a day to finish my book within a 5 week deadline. If 1000 words a day is too extreme for you, feel free to keep a less rigorous schedule. One of my good friends is now writing at a rate of 300 words per day on his new book as we speak.&lt;/p&gt;
&lt;p&gt;The third trick for writing a book is to &lt;strong&gt;get someone to keep you accountable&lt;/strong&gt; for your work.&lt;/p&gt;
&lt;p&gt;A marathon can get incredibly difficult to finish if you are the only person running it. It can get lonely and demoralising when you think of the long journey ahead.&lt;/p&gt;
&lt;p&gt;Writing a book is the same way. It may be an even tougher journey than the marathon since you not only have to write, but also, sell your book.&lt;/p&gt;
&lt;p&gt;Also, the book is never quite finished, no matter how much you have written.&lt;/p&gt;
&lt;p&gt;It is easy to cut yourself some slack and let the book fall apart when the going gets tough.&lt;/p&gt;
&lt;p&gt;I almost gave up writing, and I almost gave up selling. My partner was the one who pulled me back on track. You would never have heard from me today if I didn’t have a partner with me.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;get an editor&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Editors are like marshals. They stand at choke points to help guide a path for you. They make sure that you keep running on the path that you are supposed to run.&lt;/p&gt;
&lt;p&gt;Editors do the same job when working with a book. They help to check the structure and flow of your book and make sure everything makes sense. They also let you know if you need to add anything, or if something is wrong.&lt;/p&gt;
&lt;p&gt;My editor practically saved my life with the book. She helped me correct tonnes of my ill-written sentences when I sped through the writing process. Without her, the book may have been unreadable.&lt;/p&gt;
&lt;p&gt;One more small tip. Besides getting an editor, it’ll also be helpful to get someone to review the book for you. This will also make sure you’re on the right track.&lt;/p&gt;
&lt;p&gt;I was lucky to get Sacha Greif to take a look at the first few chapters of the book, and the comments he gave made a big difference to how the book turned out eventually.&lt;/p&gt;
&lt;h2 id=&quot;marketing-the-book&quot;&gt;Marketing The Book&lt;/h2&gt;
&lt;p&gt;Marketing is the prelude to selling and this is the hardest process to crack. I have certainly not cracked the entire code yet, but I think I’m beginning to see some light.&lt;/p&gt;
&lt;p&gt;Have you heard of the cliché “the money is in the list”? Forget about the money for a moment and consider the list, where does it even come from?&lt;/p&gt;
&lt;p&gt;Do you buy it? Or do you create it?&lt;/p&gt;
&lt;p&gt;The list is a community of people who want to hear from you. They gather around you because they feel that there is real value in listening to what you have to say. Naturally, the community only grows when you keep providing new value to the people in it.&lt;/p&gt;
&lt;p&gt;A major mistake I made early before I started the journey was to treat the list as a money making tool. I viewed it as nothing more than a list of names.&lt;/p&gt;
&lt;p&gt;Things started to change when I started to view them as individuals, as a community that I could help to grow.&lt;/p&gt;
&lt;p&gt;Marketing became intuitive, humane, and honest. It became all about giving away as much value as possible.&lt;/p&gt;
&lt;p&gt;The value I could give to my community is straightforward since I’m writing a book about Susy – More information about Susy. I decided to give away sample chapters for free.&lt;/p&gt;
&lt;p&gt;I created a landing page, hooked it up to a Mailchimp list and started giving away a third of my book (5 chapters) for free.&lt;/p&gt;
&lt;p&gt;I shared this giveaway on Twitter as well because it was such great value. Specifically, I sent a tweet to Eric, who helped to retweet the message to his followers. That brought in some initial subscribers.&lt;/p&gt;
&lt;p&gt;Twitter wasn’t the end of the story.&lt;/p&gt;
&lt;p&gt;I created a series of blog posts that helped to educate and share more of what I had learnt about Susy in the last few months. I made sure to send it to everyone on my list, and tweet it out whenever I published a new post.&lt;/p&gt;
&lt;p&gt;One other channel that brought a significant number of people into the community was writing guest posts.&lt;/p&gt;
&lt;p&gt;I sent an email to &lt;a href=&quot;https://twitter.com/ImpressiveWebs&quot;&gt;Louis&lt;/a&gt; at &lt;a href=&quot;http://www.sitepoint.com/&quot;&gt;Sitepoint&lt;/a&gt; expressing my interest to write for them, and I was fortunate enough to be &lt;a href=&quot;http://www.sitepoint.com/bootstraps-grid-system-vs-susy-comparison/&quot;&gt;given a chance&lt;/a&gt; to do so (You can find this email at the end of the article).&lt;/p&gt;
&lt;p&gt;There is one more thing I want to share with you. You have to contact people in the industry and give them value, without asking for anything in return.&lt;/p&gt;
&lt;p&gt;You will be amazed at what happens when you do so.&lt;/p&gt;
&lt;p&gt;I contacted many people who have used or want to use Susy and offered to send them a copy of my book without asking for anything in return.&lt;/p&gt;
&lt;p&gt;One of these emails unexpectedly landed me a guest post with &lt;a href=&quot;http://css-tricks.com/build-web-layouts-easily-susy/&quot;&gt;CSS Tricks&lt;/a&gt; (You can find the email I sent to &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt; at the end of the article as well).&lt;/p&gt;
&lt;p&gt;I’m thankful to Chris and Louis for giving me the chance to write my first two guest posts ever.&lt;/p&gt;
&lt;h2 id=&quot;selling-the-book&quot;&gt;Selling the Book&lt;/h2&gt;
&lt;p&gt;I had a bad experience with selling, and I was afraid that the community I worked so hard to build would disperse as soon as I tried to sell them something.&lt;/p&gt;
&lt;p&gt;It was a barrier that I couldn’t break until I came across &lt;a href=&quot;http://www.psychotactics.com/blog/free-excerpt-pre-sell-course-details/&quot;&gt;“Presell”&lt;/a&gt; by Sean D’Souza.&lt;/p&gt;
&lt;p&gt;Note: The link above contains a free sample to pre-selling and that was exactly what I used in my sales process.&lt;/p&gt;
&lt;p&gt;The selling process became a series of announcements and blog posts filled with great information about Susy. Each post had a small mention about the book.&lt;/p&gt;
&lt;p&gt;I also decided to reward people who took the plunge and stayed with me early on in the journey by giving them a pre-order discount of 50%.&lt;/p&gt;
&lt;p&gt;Everyone else had the chance to grab the book and related packages at 20% off up till the book was made public.&lt;/p&gt;
&lt;p&gt;And the book has been full price from launch date onwards.&lt;/p&gt;
&lt;p&gt;Selling became sharing, telling and giving. That was all I did. I’m extremely grateful towards the community for believing in what I had written and have chosen to purchase my work.&lt;/p&gt;
&lt;p&gt;Before I end the selling section, I’ll like to share with you the tool that I used to sell the book.&lt;/p&gt;
&lt;p&gt;I used Gumroad.&lt;/p&gt;
&lt;p&gt;Gumroad has a friendly user experience that makes selling super easy and enjoyable. People I know have had great experiences like &lt;a href=&quot;http://fizzle.co/sparkline/gumroad&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;http://nathanbarry.com/experience-selling-gumroad/&quot;&gt;this&lt;/a&gt;  when selling with Gumroad.&lt;/p&gt;
&lt;p&gt;It’s also much easier to set up Gumroad to sell when you compare the process to setting up PayPal buttons on your site. &lt;a href=&quot;http://fizzle.co/gumroad/&quot;&gt;Here&lt;/a&gt; is a detailed Gumroad tutorial made by the &lt;a href=&quot;http://fizzle.co/&quot;&gt;Fizzle&lt;/a&gt; guys where you can learn everything you need to set up Gumroad and start selling.&lt;/p&gt;
&lt;p&gt;Finally, &lt;a href=&quot;http://help.gumroad.com/11163-products-and-customizations/preorders&quot;&gt;this&lt;/a&gt; has you covered if you wanted to set up pre-orders.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That’s everything I know about writing and selling a book in a 3000-word nutshell.&lt;/p&gt;
&lt;p&gt;I hope that this has given you the courage and know-how to begin working on your own project. Please give yourself the permission to make and sell your product.&lt;/p&gt;
&lt;p&gt;I would like to end this article with a list of helpful courses and books that I have used on this journey.&lt;/p&gt;
&lt;p&gt;Most of them are paid items and some can be expensive. Please feel free to explore the list and pick up anything you may find useful.&lt;/p&gt;
&lt;p&gt;Note: I don’t get any money for promoting any of them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mydamnbook.com/&quot;&gt;Write and Sell Your Damn Book&lt;/a&gt; is a short free course by Paul Jarvis that helps you start your book, finish writing it, &amp;amp; get it out there for other people to read.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nathanbarry.com/authority/&quot;&gt;Authority&lt;/a&gt; by Nathan Barry is a book that shares the details about writing a book. It covers topics from writing to designing your book cover to selling it and beyond.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/This-book-teach-write-better/dp/0989895300/ref=sr_1_1?ie=UTF8&amp;amp;qid=1413074489&amp;amp;sr=8-1&amp;amp;keywords=kopywriting&quot;&gt;This book will teach you how to write better&lt;/a&gt; is a tiny ebook on copywriting by Neville that may change the way you write everything.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.psychotactics.com/blog/free-excerpt-pre-sell-course-details/&quot;&gt;Presell&lt;/a&gt; by Sean D’Souza teaches you how to presell your products without being sleazy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lifestyleliberationacademy.com/&quot;&gt;Lifestyle Liberation Academy&lt;/a&gt; by Henri Junttila is a small cozy community where you can share and get direct feedback about your business and the troubles you are facing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zerotolaunchsystem.com/&quot;&gt;Zero To Launch&lt;/a&gt; is a course by Ramit Sethi that teaches you everything you need to know about running an online business. It tells you what to do next in every stage of your business, even if you don’t have one yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are the two emails I sent out while marketing my book:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/how-i-wrote-and-sold-my-first-ebook-and-how-you-can-do-it-too/&quot;&gt;The email&lt;/a&gt; to Louis from Sitepoint&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey Louis,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How’s it going? I’m Zell Liew. I saw your article on writing for Sitepoint and I thought I’ll shoot you an email with a few ideas and a little on my background.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A little about me&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;After starting from scratch and learning to code two years ago, I am now a freelance frontend developer and I dedicate part of my time contributing back to the industry by sharing the things I know on my blog&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I have written a few tutorials for Susy – a flexible and lightweight grid system – like this and this and this, which have been featured on Susy’s tutorial page. These articles are very beginner focused and have generated considerable interaction with the community on my own blog.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Here are some ideas I think would resonate well with your people:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Idea 1&lt;/li&gt;
&lt;li&gt;Idea 2&lt;/li&gt;
&lt;li&gt;Idea 3&lt;/li&gt;
&lt;li&gt;Idea 4&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Of course, I’m also interested in writing stuff that are Sass related as well if you happen to have a certain topic that’s trending right now. Its just generally tough to catch any cracks that Hugo has left opened :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for your time, I look forward to hearing back from you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zellwk.com/blog/how-i-wrote-and-sold-my-first-ebook-and-how-you-can-do-it-too/&quot;&gt;The first email&lt;/a&gt; to Chris Coyier from CSS Tricks.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey Chris,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How’s it going? I saw you tweet about wanting to use Susy a few months ago and I thought I’ll write back to you regarding this.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m currently writing a book on Susy and I think it’ll really help you out alot if you haven’t had a chance to touch Susy yet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll love to send it over when I’m done with the book. It’ll be awesome if you could give me some feedback or review, but thats not necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Let me know :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, thanks to all my friends and heroes for helping me make this book happen. I could never have done it without you guys. In no order of merit,&lt;/p&gt;
&lt;p&gt;Eric Suzanne, Sacha Grief, Hui Jing, Wei Ping, Julia, Meiyee, Seth Godin, Ramit Sethi, Henri Juntilla, Chris Coyier, Scott Tolinski, Louis Lazaris, Paul Jarvis, Sean D Souza, Jordan Lewis, everyone at ECI…&lt;/p&gt;
&lt;p&gt;And you.&lt;/p&gt;
&lt;p&gt;Thanks for everything.&lt;/p&gt;
&lt;p&gt;PS: Let me know if I missed you out accidentally.
PPS: Give yourself the permission and make something! Feel free to &lt;a href=&quot;https://zellwk.com/contact/&quot;&gt;contact me&lt;/a&gt; if I can help you with anything.&lt;/p&gt;
&lt;p&gt;Oh yes. If you want to find out about the book, its &lt;a href=&quot;http://bit.ly/learnsusy&quot;&gt;here&lt;/a&gt;. :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Create Off Canvas Layouts with Susy</title>
    <link href="https://zellwk.com/blog/off-canvas-layouts-susy/"/>
    <updated>2014-09-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/off-canvas-layouts-susy/</id>
    <content type="html">&lt;p&gt;Off-canvas layouts have became an increasingly common design pattern for many websites. They are often used to create additional space in most mobile layouts. Quite a few articles on the web have explained how to code these layouts with CSS and JavaScript. Today, let’s have a quick look at how to do the same using Susy.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-are-off-canvas-layouts%3F&quot;&gt;What Are Off-Canvas Layouts?&lt;/h2&gt;
&lt;p&gt;First, you may be wondering where the term “off-canvas” came from. Canvas (when referred to art) are pieces of material that painting is done on. In other words, it’s the drawing board of the art piece.&lt;/p&gt;
&lt;p&gt;In the web world, you can think of the viewport of your browser as the canvas (It’s not the HTML5 canvas element, in case you were wondering).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-canvas.png&quot; alt=&quot;Web canvas&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are no absolute boundaries on any side of the canvas and you can move it anywhere to reveal previously unseen spaces. The term “off-canvas” is used to refer to these spaces that are outside of the visible canvas.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-off-canvas.png&quot; alt=&quot;off-canvas&quot;&gt;&lt;/p&gt;
&lt;p&gt;You’re really missing out if you haven’t seen the vast number of use cases for off-canvas layouts. I suggest popping by this &lt;a href=&quot;http://www.smashingmagazine.com/2014/02/24/off-the-beaten-canvas-exploring-the-potential-of-the-off-canvas-pattern/&quot;&gt;smashing magazine article&lt;/a&gt; to get a feel of what these layouts can potentially do. Luke Wroblewski also has a &lt;a href=&quot;http://www.lukew.com/ff/entry.asp?1569&quot;&gt;dedicated article&lt;/a&gt; on off-canvas layouts that I suggest you check out as well.&lt;/p&gt;
&lt;p&gt;For today, we will be focusing on coding a navigation item off the canvas. That should set the basics right for you to create any other off-canvas layouts.&lt;/p&gt;
&lt;p&gt;Before we move into building off-canvas layouts with Susy, we have to start off by understanding how they are created via pure HTML and CSS. This will be the layout we’ll be creating in this tutorial.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-demo.png&quot; alt=&quot;Image of final result&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zell-weekeat.com/labs/off-canvas/index.html&quot; class=&quot;btn&quot;&gt;View Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s begin.&lt;/p&gt;
&lt;h2 id=&quot;the-anatomy-of-an-off-canvas-layout&quot;&gt;The Anatomy of an Off-Canvas Layout&lt;/h2&gt;
&lt;p&gt;Things may seem to be a little confusing initially when you code your first off-canvas layout. The very first problem you may encounter is coding the markup. And that is where we will begin.&lt;/p&gt;
&lt;p&gt;Firstly, we know the off-canvas element is definitely going to be wrapped within a separate &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; from the main canvas. You might write something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;off-canvas&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a great start. We can position &lt;code&gt;.off-canvas&lt;/code&gt; outside of the normal canvas with a negative absolute position to the left.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.off-canvas {
  position: absolute;
  width: 260px;
  left: -260px;
  top: 0;
  bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are unable to see how &lt;code&gt;.off-canvas&lt;/code&gt; looks like now, since it has been placed off the canvas. We need to push the element back from the left to view it.&lt;/p&gt;
&lt;p&gt;One possible way to move this particular item back is to add a transform property to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.off-canvas {
  transform: translate3d(260px,0,0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Do take note that 3D transformations are not supported in IE9, and 2D translations are not supported in IE8. Try changing the margin-left property instead of using transformations if you have to support these browsers. For the rest of the tutorial, I’m going to assume that 3D transformations work for your browser.&lt;/p&gt;
&lt;p&gt;The only problem with translating &lt;code&gt;.off-canvas&lt;/code&gt; alone, is that part of &lt;code&gt;.main&lt;/code&gt; is now hidden by &lt;code&gt;.off-canvas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can resolve this by translating &lt;code&gt;.main&lt;/code&gt; as well, but we are introducing two different movements with this method, and that’s not very ideal. A better way is to translate the body instead.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
  transform: translate3d(260px, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-1.png&quot; alt=&quot;off-canvas Step 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Translating the body seems to work well (at first glance). The off-canvas item has appeared and &lt;code&gt;main&lt;/code&gt; is now pushed to the right. There is, however, one major problem.&lt;/p&gt;
&lt;p&gt;Users can scroll to the left and right of the screen. If you’re on Internet Explorer, you’ll probably find the horizontal scrollbar showing up as well.&lt;/p&gt;
&lt;p&gt;We need to fix this issue, and one way to fix it, is by adding two extra divs to the markup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;transformer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;off-canvas&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These two divs each have their own special purpose. The &lt;code&gt;.container&lt;/code&gt; will have an &lt;code&gt;overflow: hidden&lt;/code&gt; property to prevent people from scrolling horizontally while the &lt;code&gt;.transformer&lt;/code&gt; div will be the one which translates when &lt;code&gt;.off-canvas&lt;/code&gt; is shown.&lt;/p&gt;
&lt;p&gt;We also want to show &lt;code&gt;.off-canvas&lt;/code&gt; only when the user specifically requests for &lt;code&gt;off-canvas&lt;/code&gt;. One of the best ways to do so is to use an additional class for this. We will be using the &lt;code&gt;.is-open&lt;/code&gt; class in this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.container {
  overflow: hidden;
}

.transformer.is-open {
  transform: translate3d(260px, 0, 0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We ensured that &lt;code&gt;.off-canvas&lt;/code&gt; only shows when &lt;code&gt;.transformer&lt;/code&gt; has an &lt;code&gt;.is-open&lt;/code&gt; class in the CSS above. Now, we need a button to let the user choose to show or hide &lt;code&gt;.off-canvas&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;transformer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;off-canvas&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;
      &amp;lt;!-- adding the button in the header --&amp;gt;
      &amp;lt;header&amp;gt;
        &amp;lt;div class=&amp;quot;menu&amp;quot;&amp;gt;
          &amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot; class=&amp;quot;menu-toggle&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first click on &lt;code&gt;.menu-toggle&lt;/code&gt; should reveal &lt;code&gt;.off-canvas&lt;/code&gt; while the next click should hide it.&lt;/p&gt;
&lt;p&gt;The simplest way to do so is to use the &lt;code&gt;toggleClass()&lt;/code&gt; function in jQuery when &lt;code&gt;.menu-toggle&lt;/code&gt; is clicked on.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;jQuery(document).ready(function($) {
  var $transformer = $(&#39;.transformer&#39;),
  $menuToggle = $(&#39;.menu-toggle&#39;);

  // Attaches event handler when .menu-toggle is clicked
  $menuToggle.on(&#39;click&#39;, function(event) {
    event.preventDefault();
    $transformer.toggleClass(&#39;is-open&#39;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all we need for an off-canvas layout. Let’s do a quick summary before we move onto adding Susy to the mix.&lt;/p&gt;
&lt;p&gt;You need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create two separate divs to hold the off-canvas content and the main content&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;.container&lt;/code&gt; and &lt;code&gt;.transformer&lt;/code&gt; divs to the markup and CSS&lt;/li&gt;
&lt;li&gt;Add translate to &lt;code&gt;.transformer&lt;/code&gt; when a &lt;code&gt;.menu-toggle&lt;/code&gt; button is clicked on&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s add Susy into the mix now. As always, we will start by identifying where the Susy container should be.&lt;/p&gt;
&lt;h2 id=&quot;where-should-you-declare-the-susy-container%3F&quot;&gt;Where Should You Declare The Susy Container?&lt;/h2&gt;
&lt;p&gt;There are two possible locations that can be used as the Susy container.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the &lt;code&gt;.transformer&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;On the &lt;code&gt;.main&lt;/code&gt; element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once again, there are no hard and fast rules for this. Both locations work quite well and can be used for different purposes. Let me bring you through three different examples where these areas are used as the container.&lt;/p&gt;
&lt;p&gt;No matter where you choose to locate the Susy container, you’ll still have to set the global settings correctly. Let’s set the number of columns to 12 in this case. We’re also going to change the &lt;a href=&quot;https://zellwk.com/blog/understanding-css-box-sizing/&quot;&gt;box model&lt;/a&gt; to border-box.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  columns: 12,
  global-box-sizing: border-box,
  debug: (
    image: show-columns,
    output: overlay,
    toggle: bottom left
  )
);

@include border-box-sizing;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;off-canvas-layouts-with-susy-(example-1)&quot;&gt;Off-canvas Layouts With Susy (Example 1)&lt;/h2&gt;
&lt;p&gt;In this example, we will declare the Susy container on the &lt;code&gt;.transformer&lt;/code&gt; element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.transformer {
  @include container();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method can work very well if you wanted the off-canvas layout to be part of the grid.&lt;/p&gt;
&lt;p&gt;The pros of declaring the Susy container on &lt;code&gt;.transformer&lt;/code&gt; is that both the child elements of &lt;code&gt;.transformer&lt;/code&gt; (&lt;code&gt;.off-canvas&lt;/code&gt; and &lt;code&gt;.main&lt;/code&gt;) will have the same context. We can make use of this context to create an off-canvas item that has the proportions of the grid.&lt;/p&gt;
&lt;p&gt;Let’s just say that the off-canvas item takes up 3 of 12 columns. Here’s what the code would look like.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.transformer {
  @include container();
  transition: transform 0.3s ease;
  &amp;amp;.is-open {
    transform: translate3d( span(3 wide), 0, 0);
  }
}
.left {
  position: absolute;
  width:  span(3 wide);
  left: - span(3 wide);
  top: 0;
  bottom: 0;
}
.main {
  padding: 0 gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we’re repeating &lt;code&gt;span(3 wide)&lt;/code&gt; 3 times, we can replace it with a variable to make it slightly DRYer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt; $off-canvas-width: span(3 wide);
  .transformer {
    @include container();
    transition: transform 0.3s ease;
    &amp;amp;.is-open {
      transform: translate3d($off-canvas-width, 0, 0);
    }
  }
  .left {
    position: absolute;
    width: $off-canvas-width;
    left: -$off-canvas-width;
    top: 0;
    bottom: 0;
  }
  .main {
    padding: 0 gutter();
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you noticed, we did not even use the &lt;code&gt;span&lt;/code&gt; mixin while building the off-canvas layout. This is because we didn’t need the extra &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;margin&lt;/code&gt; properties created by the &lt;code&gt;span&lt;/code&gt; mixin. We only used the &lt;code&gt;span&lt;/code&gt; function to calculate the width of the off-canvas item.&lt;/p&gt;
&lt;p&gt;Now if you resized the browser down to a smaller screen, you’ll realize that sometimes the links on the left will extend to two lines instead of one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This happens because we are using percentage widths for &lt;code&gt;.off-canvas&lt;/code&gt;. Since the canvas width is smaller, it’s natural that the width of &lt;code&gt;.off-canvas&lt;/code&gt; will be smaller as well.&lt;/p&gt;
&lt;p&gt;Sometimes that is not entirely ideal, especially if you had a specific design to work with. For this particular design, I didn’t want the links to pop down into two rows. It would be much better if I had a fixed-width &lt;code&gt;.off-canvas&lt;/code&gt; instead. That brings us to the next example.&lt;/p&gt;
&lt;h2 id=&quot;off-canvas-layouts-with-susy-(example-2)&quot;&gt;Off-canvas Layouts With Susy (Example 2)&lt;/h2&gt;
&lt;p&gt;The approach to &lt;code&gt;.off-canvas&lt;/code&gt; in example 2 will almost be the same as the one we discussed within the anatomy section. We are going to skip the things mentioned above and go straight to using Susy.&lt;/p&gt;
&lt;p&gt;The difference here is that we will be adding the Susy container to &lt;code&gt;.main&lt;/code&gt;, and that allows us to use Susy as we normally would.&lt;/p&gt;
&lt;p&gt;You can also optionally include paddings in &lt;code&gt;.main&lt;/code&gt; to provide some breathing space for the text.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.main {
  @include container();
  padding-left: gutter();
  padding-right: gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get the exact same layout as example 1. The only exception is that the off-canvas item now has a fixed width.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-demo.png&quot; alt=&quot;Example 2 result&quot;&gt;&lt;/p&gt;
&lt;p&gt;The full Sass code for example 2 is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$off-canvas-width-2: 300px;

.container {
  overflow: hidden;
}
// .transformer {
  @include trans-prep;
  transition: transform 0.3s ease;
  &amp;amp;.is-open {
    transform: translate3d($off-canvas-width-2, 0, 0);
  }
// }
.left {
  position: absolute;
  width: $off-canvas-width-2;
  left: -$off-canvas-width-2;
  top: 0;
  bottom: 0;
}
.main {
  @include container;
  padding-left: gutter();
  padding-right: gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this point onwards, you could treat &lt;code&gt;.main&lt;/code&gt; as your usual Susy container and create your layout as you normally would.&lt;/p&gt;
&lt;p&gt;The two examples above are great implementations for simple off-canvas items. They would not do as well if you needed something more complex. The Squarespace blog has a perfect of example what I meant by a complex off-canvas item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-squarespace.png&quot; alt=&quot;Squarespace Blog&quot;&gt;&lt;/p&gt;
&lt;p&gt;You want to code this? Then this brings us to example 3.&lt;/p&gt;
&lt;h2 id=&quot;off-canvas-layout-with-susy-(example-3)&quot;&gt;Off-Canvas Layout With Susy (Example 3)&lt;/h2&gt;
&lt;p&gt;Example 3 has a very different use case compared to example 1 and example 2 above as you may have imagined. The implementation for the off-canvas layout however, is exactly the same.&lt;/p&gt;
&lt;p&gt;Let’s take a look at what we’re making for example 3 before we dive in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-3.png&quot; alt=&quot;Example 3 Layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;The very first thing to notice in example 3 is that the off-canvas item occupies 50% of the viewport when opened up. The width that we have to translate here is hence 50% of the viewport.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$off-canvas-width-3: 50%;

.transformer.is-open {
  transform: translate3d($off-canvas-width-3: 50%, 0, 0);
}

.off-canvas {
  position: absolute;
  width: $off-canvas-width-3: 50%;
  left: -$off-canvas-width-3: 50%;
  top: 0;
  bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a simple change in percentage, we managed to get the off-canvas item to occupy 50% of the viewport when it is opened.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-4.png&quot; alt=&quot;Off-canvas talking up half of viewport&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since there is a grid for both on and off-canvas, we can declare a Susy container on each of them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.off-canvas {
  @include container();
}

.main {
  @include container();
  margin: 0 gutter();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we have the container, you may begin to output the navigation items on the off-canvas item just as you would normally do when using Susy. It would be quite clear that each item takes up 6 columns in our case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.off-canvas {
  li {
    @include gallery(6);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/oc-5.png&quot; alt=&quot;Complex layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to view the demo and grab the source codes for this layout :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://labs.zellwk.com/off-canvas/index.html&quot; class=&quot;btn&quot;&gt;View Demo&lt;/a&gt;
&lt;a href=&quot;http://labs.zellwk.com/off-canvas/off-canvas.zip&quot; class=&quot;btn&quot;&gt;Download Source Codes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have gone a very long way today in looking at off-canvas layouts. We dug deep into the code and found out how to code these layouts without Susy. Then we proceeded to add Susy into the mix.&lt;/p&gt;
&lt;p&gt;You should also have realized by now that there are many different ways you can add Susy to an off-canvas layout. There are no hard and fast rules on this and I hope that this post has helped you bridge the gap on creating these layouts.&lt;/p&gt;
&lt;p&gt;If the post has been helpful, leave a comment below saying how it helped you!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Build Web Layouts Easily with Susy</title>
    <link href="https://zellwk.com/blog/https:/css-tricks.com/build-web-layouts-easily-susy/"/>
    <updated>2014-09-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/css-tricks.com/build-web-layouts-easily-susy/</id>
    <content type="html">&lt;p&gt;Susy provides you with the tools to build your own grid layouts that match the needs of your website. It gives you the freedom and flexibility to build any design that you can imagine. It doesn’t matter if your design has 5, 14 or 48 columns. Unequal width columns? Susy’s got you covered.&lt;/p&gt;
&lt;p&gt;Why would you pick Susy over the million other frameworks out there on the internet? You may never even heard of it before. What if it’s beauty is only skin deep?&lt;/p&gt;
&lt;p&gt;Susy is one of the best things that happened to me in terms of my front-end development workflow over the past few months. It has helped me out so much that I decided to write a book about it to share it’s merits with the world. It’s an in-depth guide on Susy and how you can use it to easily create any website design you want.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Build a Responsive Website That Supports Older Browsers</title>
    <link href="https://zellwk.com/blog/support-for-older-browsers/"/>
    <updated>2014-09-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/support-for-older-browsers/</id>
    <content type="html">&lt;p&gt;Responsive websites have became increasingly important over the years. Unfortunately, we still need to make older browsers support responsive websites due to various reasons once in a while, and searching around for the correct way of doing it can take up some of your precious time. This article is designed to help you answer the question on supporting responsive websites on older browsers.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-browsers-should-we-continue-supporting%3F&quot;&gt;What Browsers Should We Continue Supporting?&lt;/h2&gt;
&lt;p&gt;The most important question of all is what old browsers should we support?  Internet Explorer 8 and below naturally comes to mind. All other browsers (Internet Explorer 9 and above included) have great support for modern coding practices, which we do not have to worry about.&lt;/p&gt;
&lt;p&gt;According to the latest stats on &lt;a href=&quot;http://www.w3schools.com/browsers/browsers_explorer.asp&quot;&gt;W3 Schools&lt;/a&gt;, &lt;strong&gt;only 1.8% of the global population uses IE8 and 0.2% of the population uses IE7&lt;/strong&gt;. No one is using IE6 now!&lt;/p&gt;
&lt;p&gt;Should you support IE8 or IE7?&lt;/p&gt;
&lt;p&gt;There are no hard and fast rules to this and it really depends on the project you’re working on. &lt;strong&gt;The best answer is to check the analytics of your website and find out what browsers people are actually using.&lt;/strong&gt; I would personally choose not to support IE8 as much as I can help it, and I’ll not support IE7 because the global usage is just too justify the extra effort required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the main concern is still IE8.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And to help IE8 support your responsive website, we a polyfill – Respond.js.&lt;/p&gt;
&lt;h2 id=&quot;installing-respond.js&quot;&gt;Installing Respond.js&lt;/h2&gt;
&lt;p&gt;A polyfill is a browser fallback, made in JavaScript, that allows functionality you expect to work in modern browsers to work in older browsers.&lt;/p&gt;
&lt;p&gt;As you may know, &lt;strong&gt;media queries are the essential thing that helps us make our websites responsive&lt;/strong&gt;. We have to give this function to IE8, and Respond.js helps us with that.&lt;/p&gt;
&lt;p&gt;Respond.js is a polyfill for CSS min-width and max-width media queries. It is extremely lightweight (3kb minified / 1kb gzipped) and that ensures that the script is downloaded and ran as quickly as possible.&lt;/p&gt;
&lt;p&gt;There are two steps to include Respond.js into your project.&lt;/p&gt;
&lt;p&gt;First, you have to &lt;a href=&quot;https://github.com/scottjehl/Respond&quot;&gt;download the repo&lt;/a&gt; from Github and place it into your project. Then, you’ll have to reference the script in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your document, after your stylesheets.&lt;/p&gt;
&lt;p&gt;Assuming that you have placed Respond.js in the “lib” folder, the html may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;
  &amp;lt;script src=&amp;quot;lib/respond/dest/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we know that we are only working with IE8 and below when we try to include Respond.js, &lt;strong&gt;we can specifically target these browsers to include the polyfills&lt;/strong&gt;. We can do that with IE-only conditional comments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;

  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;lib/respond/dest/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;![endif] --&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once Respond.js is successfully installed with the above steps, you can simply use any min-width or max-width media queries in your CSS and they would render perfectly fine in IE8.&lt;/p&gt;
&lt;p&gt;Note: Alternatively, you can also install Respond.js with bower, a frontend package manager.&lt;/p&gt;
&lt;p&gt;Since we’re on the topic of polyfills, let me introduce you to a few other polyfills that you probably cannot do without in IE8.&lt;/p&gt;
&lt;h2 id=&quot;3-polyfills-you-might-want-to-include-in-your-project&quot;&gt;3 Polyfills You Might Want To Include In Your Project&lt;/h2&gt;
&lt;h3 id=&quot;1.-html5shiv&quot;&gt;1. html5shiv&lt;/h3&gt;
&lt;p&gt;The very first polyfill that you might want to include into your project is html5shiv. It enables IE8 to support HTML 5 elements like &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; and you will need to use this polyfill if you have used html5 elements in your project.&lt;/p&gt;
&lt;p&gt;The installation process is exactly the same as above. You can either html5shiv from its &lt;a href=&quot;https://github.com/aFarkas/html5shiv&quot;&gt;Github repo&lt;/a&gt;, or install it with Bower.&lt;/p&gt;
&lt;p&gt;If you included both html5shiv and Respond.js, the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section should contain both of these codes, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;

  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;lib/html5shiv/dist/html5shiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/respond/dest/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;![endif] --&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2.-selectivizr&quot;&gt;2. Selectivizr&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://selectivizr.com/&quot;&gt;Selectivizr&lt;/a&gt; is another incredibly important polyfill that helps IE8 render styles that are created with CSS3 pseudo-classes and attribute selectors. These pseudo-classes, like &lt;code&gt;nth-child&lt;/code&gt; and &lt;code&gt;last-child&lt;/code&gt;, have to be used to create &lt;a href=&quot;https://zellwk.com/blog/support-for-older-browsers/&quot;&gt;smarter HTML layouts&lt;/a&gt; that can adjust itself when viewports changes.&lt;/p&gt;
&lt;p&gt;The installation of Selectivizr is slightly more complex than what we did above, especially if you have to make Selectivizr work together with Respond.js. Let’s walk through the installation process step by step.&lt;/p&gt;
&lt;p&gt;First, you’ll have to &lt;strong&gt;include an external JavaScript library&lt;/strong&gt; in order for Selectivizr to work. Each JavaScript library allows Selectivizr to give support for different pseudo classes and attribute selectors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/selectivizr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mootools.net/&quot;&gt;MooTools&lt;/a&gt; and &lt;a href=&quot;https://github.com/dperini/nwmatcher/&quot;&gt;NWMatcher&lt;/a&gt; are the only two JavaScript libraries allows Selectivizr to provide support for all CSS3 selectors in IE8. jQuery unfortunately, provides the least support of all.&lt;/p&gt;
&lt;p&gt;If you are only going to be using &lt;code&gt;nth-child&lt;/code&gt; and &lt;code&gt;last-child&lt;/code&gt; like what we have done previously when writing &lt;a href=&quot;https://zellwk.com/blog/support-for-older-browsers/&quot;&gt;smarter HTML layouts&lt;/a&gt;, jQuery is plenty enough. Let’s work with jQuery for this tutorial.&lt;/p&gt;
&lt;p&gt;jQuery has two major versions. &lt;strong&gt;While &lt;a href=&quot;http://jquery.com/download/&quot;&gt;downloading jQuery&lt;/a&gt;, be sure to get jQuery v1.11&lt;/strong&gt; because jQuery v2 has dropped the support for IE8. You can also grab jQuery from bower if you would like to. Just remember to grab the correct version&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bower install jquery#1.11 --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Downloading Selectivizr can be a little tricky because of versioning issues. &lt;strong&gt;You’ll need Selectivizr v1.0.3b, which can only be found in the &lt;a href=&quot;https://github.com/keithclark/selectivizr&quot;&gt;github repo&lt;/a&gt;.&lt;/strong&gt; If you chose to download from the webpage or bower instead, you’ll get v1.0.2, which won’t work in this setup.&lt;/p&gt;
&lt;p&gt;Then, include these files in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your project. Make sure to reference the JavaScript library, followed by Selectivizr and finally Respond.js. The scripts must be inserted that order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;head&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/styles.css&amp;quot;&amp;gt;
  &amp;lt;script src=&amp;quot;lib/jquery/dist/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;lib/selectivizr/selectivizr.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/html5shiv/dist/html5shiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/respond/dest/respond.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;![endif] --&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;3.-rem-unit-polyfill&quot;&gt;3. REM Unit Polyfill&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/chuckcarpenter/REM-unit-polyfill&quot;&gt;REM-unit-polyfill&lt;/a&gt; is a polyfill for the REM unit. You will need this polyfill if you use the REM unit in your CSS.&lt;/p&gt;
&lt;p&gt;Installing the REM unit is simple as well. You can either get it from &lt;a href=&quot;https://github.com/chuckcarpenter/REM-unit-polyfill&quot;&gt;Github&lt;/a&gt; or through bower. The only exception to this is that you’ll need to insert this polyfill just before the closing body tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;body&amp;gt;
  &amp;lt;!-- ... --&amp;gt;

  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;lib/REM-unit-polyfill/js/rem.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;!-- &amp;lt;![endif] --&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we have come to the end of the polyfills section. Each polyfill above allows IE8 to support a specific feature. If you happened to require other features that are not present, try doing a search for that polyfill and you might just end up with a solution.&lt;/p&gt;
&lt;p&gt;Since we are inserting so many additional JavaScripts into the DOM, the very next question you might want to ask is whether these polyfills hinder speed and performance.&lt;/p&gt;
&lt;h2 id=&quot;will-polyfills-hinder-performance%3F&quot;&gt;Will Polyfills Hinder Performance?&lt;/h2&gt;
&lt;p&gt;Performance is critically important and I believe we should have a large focus on performance for every project that we do.&lt;/p&gt;
&lt;p&gt;Each of these polyfills are super small (3kb minified), and can be even smaller if you gzip it. The only exception is requirement of a JavaScript library belong loaded upfront by Selectivizr, which is slightly larger than the rest.&lt;/p&gt;
&lt;p&gt;Yes, although these polyfills might slow down rendering a little because of the extra http requests to get these polyfills. You might want to concatenate all these polyfills into a single file if that is a concern.&lt;/p&gt;
&lt;p&gt;If we didn’t want to use polyfills with IE8, we might have to stick to older coding standards which will either take up a lot of time, or make the website obselete easily in the future. When thinking along these lines, it seems that the gain better development process outweighs the cons of the slight performance drop with polyfills, and its well worth the effort.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To cap it all off, each polyfill gives IE8 the ability to emulate one of the functions, methods, selectors or properties you may require in your project. You’ll have to provide polyfills for all these methods and properties that you have used in your project if you want to support a mobile responsive IE8.&lt;/p&gt;
&lt;p&gt;Although these polyfills might slow down the rendering of IE8 a little, there’s no worry in that.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Smarter Layouts with Susy</title>
    <link href="https://zellwk.com/blog/smarter-layouts-with-susy/"/>
    <updated>2014-09-08T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/smarter-layouts-with-susy/</id>
    <content type="html">&lt;p&gt;I chanced upon &lt;a href=&quot;https://twitter.com/heydonworks&quot;&gt;heydon’s&lt;/a&gt; Codepen for creating &lt;a href=&quot;http://codepen.io/heydon/pen/bcdrl&quot;&gt;self-correcting grids&lt;/a&gt; with pseudo classes a while ago and that totally blew my mind away. I started to think about how we can use pseudo selectors to create smarter HTML layouts and I have summarised my thoughts on this in this article.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;first-off%2C-what-are-smart-layouts%3F&quot;&gt;First Off, What Are Smart Layouts?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Smart layouts&lt;/strong&gt;, in my definition, are &lt;strong&gt;layouts that appear correctly without the use of classes to specifically tell an element how it should be presented&lt;/strong&gt;. I believe that all frontend presentational code and information should be found only in the CSS file, and backend developers should not have to remember the specific class names used in the markup.&lt;/p&gt;
&lt;p&gt;That sounds abit vague, so let’s start this with a simple example to see what I really mean by smart layouts. If you are given a layout like this,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/content-sidebar.png&quot; alt=&quot;Basic Content - Sidebar Layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;and if used either Bootstrap or Foundation to create this layout, your html will end up looking like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-8&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;col-md-4&amp;quot;&amp;gt;Sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not entirely smart, and &lt;strong&gt;we have to trouble the backend developers&lt;/strong&gt; (if you don’t work alone) &lt;strong&gt;to remember the classes used&lt;/strong&gt; for presentation. Ideally, that shouldn’t happen because these poor chaps have too many other complications to deal with. We should try to help them out a little, since we’re the good guys :)&lt;/p&gt;
&lt;p&gt;Because I didn’t want the poor backend guys to remember and use presentational classes everywhere, Susy appeared super attractive to me.&lt;/p&gt;
&lt;p&gt;I quickly transited to semantic code, and you might have code something similar to what I have done previously:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;Content&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;Sidebar&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So much better!&lt;/p&gt;
&lt;p&gt;Presentational classes like &lt;code&gt;col-md-8&lt;/code&gt; are now hidden from view and it looks much better. What’s left in its place are now semantic class names &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, if you really think about it, &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt; &lt;strong&gt;ARE presentational classes as well!&lt;/strong&gt;  Its more semantic compared to &lt;code&gt;.col-md-8&lt;/code&gt;, but that doesn’t entirely solve the problem of requiring developers to remember specific classes!&lt;/p&gt;
&lt;p&gt;A much better way is to abstract out the &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt; classes and have the items within be targeted with a common HTML element like a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. If that’s a little too extreme, you can also use an attribute or class as necessary. The idea is to keep the class or attribute used constant across all layouts, and only change the layout name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;content-sidebar&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;Content&amp;lt;/div&amp;gt; &amp;lt;!-- If you want a class, replace with --&amp;gt;
    &amp;lt;div&amp;gt;Sidebar&amp;lt;/div&amp;gt; &amp;lt;!-- &amp;lt;div class=&amp;quot;susy-grid-item&amp;quot;&amp;gt; * &amp;lt;/div&amp;gt;--&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt; are abstracted one level upwards onto a layout pattern named &lt;code&gt;.content-sidebar&lt;/code&gt;. Although this doesn’t entirely remove the need for developers to remember the specific grid classes, I believe it reduces their cognitive overload because they now only have to remember one class instead multiple classes for the layout they are trying to create. Note: I haven’t tested the theory out with developers yet, so I’m really thinking aloud here :)&lt;/p&gt;
&lt;p&gt;Writing the HTML code this way also helps to organize my Sass codes better as well. The Sass (with Susy) may look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.content-sidebar {
  &amp;gt; div {
    // content
    &amp;amp;:nth-child(1) {
      @include span(8);
    }

    // Sidebar
    &amp;amp;:nth-child(2) {
      @include span(4 last);
    }
  }
}

// Another Layout Pattern
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;This methods helps to split layouts patterns out in the CSS files&lt;/strong&gt; easily without even even using comments between each pattern. &lt;strong&gt;You do however, need to provide proper comments within the layouts themselves&lt;/strong&gt; or these &lt;code&gt;nth-child()&lt;/code&gt; selectors may not make sense.&lt;/p&gt;
&lt;p&gt;But why is this even needed? Isn’t this complicating things? To answer this question, we can bring in a slightly more complex example that helped me derive this method: Mixpanel’s blog.&lt;/p&gt;
&lt;h2 id=&quot;mixpanel%E2%80%99s-blog-layout-pattern&quot;&gt;Mixpanel’s Blog Layout Pattern&lt;/h2&gt;
&lt;p&gt;Mixpanel’s blog has a very unique layout that changes depending on the viewport. This is how the layout looks like on a tablet sized viewport:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/mixpanel-tablet.png&quot; alt=&quot;Mixpanel Blog Layout when viewed on a tablet&quot;&gt;&lt;/p&gt;
&lt;p&gt;and on a desktop sized viewport:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/09/mixpanel-desktop.png&quot; alt=&quot;Mixpanel Blog Layout when viewed on a desktop&quot;&gt;&lt;/p&gt;
&lt;p&gt;These patterns repeat over and over if there are more than 5 items or 10 items on the tablet viewport and desktop viewport respectively.&lt;/p&gt;
&lt;p&gt;Essentially, you can also say that the tablet sized viewport has a layout pattern that consists of 5-items while the desktop sized viewport has a layout pattern that consists of 10 items.&lt;/p&gt;
&lt;p&gt;If we go along with the conventional wisdom of adding classes into the HTML for each different layout, you might add classes like &lt;code&gt;.blog__item&lt;/code&gt; and &lt;code&gt;.blog__item--large&lt;/code&gt; to help differentiate between the large block (shaded green), and the standard block.&lt;/p&gt;
&lt;p&gt;The HTML for the tablet viewport may be&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
  &amp;lt;ul class=&amp;quot;blog-list&amp;quot;&amp;gt;
    &amp;lt;li class=&amp;quot;blog__item blog__item--large&amp;quot;&amp;gt;Large&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;blog__item&amp;quot;&amp;gt;Normal&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;blog__item&amp;quot;&amp;gt;Normal&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;blog__item&amp;quot;&amp;gt;Normal&amp;lt;/li&amp;gt;
    &amp;lt;li class=&amp;quot;blog__item&amp;quot;&amp;gt;Normal&amp;lt;/li&amp;gt;
    &amp;lt;!-- ... and the pattern repeats --&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, &lt;strong&gt;the developers&lt;/strong&gt; who are building the backend for this page &lt;strong&gt;will have to create an algorithm&lt;/strong&gt; to add the &lt;code&gt;.blog__item--large&lt;/code&gt; class to every 5th item, starting from the first item.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thats one extra thing backend developers have to do&lt;/strong&gt; for us (or one extra thing you have to do if you’re developing the backend yourself).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It gets very complicated on the desktop viewport.&lt;/strong&gt; You’ll now have to remove &lt;code&gt;.blog__item--large&lt;/code&gt; from every fifth item and add it to the every first and seventh item of pattern. (If this sounds confusing, look back up on the desktop layout and you can see that this pattern is made up of ten blocks, and every first and seventh item of the pattern are large blocks).&lt;/p&gt;
&lt;p&gt;And you now have your hands on a horrendous Javascript exercise which can be avoided entirely if your layouts was a little smarter.&lt;/p&gt;
&lt;p&gt;And here’s what you can potentially do instead.&lt;/p&gt;
&lt;h2 id=&quot;making-the-smarter-layout&quot;&gt;Making the Smarter Layout&lt;/h2&gt;
&lt;p&gt;You can target these blog items with pseudo classes instead of using normal classes. In this case, we would remove all class names and are left with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;blog-list&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;!-- We can make this large with CSS pseudo classes --&amp;gt;
    &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The above HTML applies for both the tablet and the desktop views.&lt;/strong&gt; Are you wondering how it can work?&lt;/p&gt;
&lt;p&gt;I mentioned above that you can use pseudo classes to target the correct items for you. Specifically, &lt;strong&gt;the pseudo class you can use is the&lt;/strong&gt; &lt;code&gt;nth-child&lt;/code&gt; &lt;strong&gt;pseudo class&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;We already know that every fifth item, starting from the first, is supposed to be the large block on the tablet. Its now time to stretch your &lt;code&gt;nth-child&lt;/code&gt; selector-fu muscles!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.blog-list {
  &amp;gt; div {
    // .. Normal sized properties here

    &amp;amp;:nth-child(5n+1) {
      // Large sized properties here
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of this output is basically the same as adding &lt;code&gt;blog__item--large&lt;/code&gt; on every 5th item, starting from the first one in the HTML.&lt;/p&gt;
&lt;p&gt;We have to manage the desktop one as well. And we know that every first and seventh item of each repeating pattern of 10 blocks are large blocks. The CSS only for desktop will be very similar to the tablet one, with the exception that the pseudo selectors are changed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.blog-list {
  &amp;gt; div {
    // .. Normal sized properties here

    &amp;amp;:nth-child(10n+1),
    &amp;amp;:nth-child(10n+7) {
      // Large sized properties here
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, we want to put both of these together in the same CSS file. The full code (inclusive of media queries) is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.blog-list {
  &amp;gt; div {
    // .. Mobile styles for the layout here

    @media (min-width: tablet-size) and (max-width: desktop-size){
      // .. Normal sized properties for tablet goes here

      &amp;amp;:nth-child(5n+1) {
        // .. Large sized properties for tablet goes here
      }
    }

    @media (min-width: desktop-sized) {
      // .. Normal sized properties for desktop goes here

      &amp;amp;:nth-child(10n+1),
      &amp;amp;:nth-child(10n+7) {
        // .. Large sized properties for desktop goes here
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s what you’ll need to create a smart layout like Mixpanel’s blog without any additional Javscript. &lt;strong&gt;We are able to do this because we relied on html elements and pseudo classes instead of fully relying on classes&lt;/strong&gt;. Note: I deliberately placed pseudo codes in there so its much easier to read and understand :)&lt;/p&gt;
&lt;h2 id=&quot;building-mixpanel%E2%80%99s-layout-with-susy&quot;&gt;Building Mixpanel’s layout with Susy&lt;/h2&gt;
&lt;p&gt;And as you know by now, Susy allows you to use any selector you want to, and it can help us with creating such a layout. You just have to substitute the commented portions with real code.&lt;/p&gt;
&lt;p&gt;Say if you used the following global settings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$susy: (
  columns: 12,
  gutter-position: split,
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which simple means that you’re using a 12 column grid and you changed the gutter-position to split, the Sass for the tablet view would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.blog-list {
  &amp;gt; div {
    @media (min-width: 768px) and (max-width: 1024px){
      @include span(6);
      margin-bottom: gutter();

      &amp;amp;:nth-child(5n+1) {
        @include span(12);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the Sass for the desktop view would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.blog-list {
  &amp;gt; div {
    @media (min-width: 1025px) {
      @include span(4);
      margin-bottom: gutter();

      &amp;amp;:nth-child(10n+1),
      &amp;amp;:nth-child(10n+7) {
        @include span(8);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The eventual Sass is thus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.blog-list {
  &amp;gt; div {
    // .. Mobile styles for the layout here

    // Tablet Layout Pattern
    @media (min-width: 768px) and (max-width: 1024px){
      @include span(6);
      margin-bottom: gutter();

      &amp;amp;:nth-child(5n+1) {
        @include span(12);
      }
    }

    // Desktop Layout Pattern
    @media (min-width: 1025px) {
      @include span(4);
      margin-bottom: gutter();

      &amp;amp;:nth-child(10n+1),
      &amp;amp;:nth-child(10n+7) {
        @include span(8);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can find the finished sample on Codepen.&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;rufmH&quot; data-default-tab=&quot;result&quot; data-user=&quot;zellwk&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/rufmH/&quot;&gt;rufmH&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This blog post example is just one portion of one of the 20 templates I have created for Learning Susy. The actual template is slightly more difficult to create because there is a need for static grids in Susy. If you liked what you’ve seen here, you’ll definitely want to find out about the others! Hop on over to the &lt;a href=&quot;https://gum.co/CfRd&quot;&gt;full package&lt;/a&gt; if you’re interested to grab all the templates and other good stuff :)&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTML and CSS can be quite smart if you allow it to&lt;/strong&gt;, and that means reducing the dependence on CSS classes which we have all grown accustomed to. It can a hard battle to put down the well crafted habits on CSS classes and I felt very weird initially. However after seeing the results of these experiments, I begin to believe that we can indeed do with lesser classes.&lt;/p&gt;
&lt;p&gt;There are more experiments that I want to share with you, but the article is getting long. Let’s take a break tonight.&lt;/p&gt;
&lt;p&gt;Do take note that if you have to work with IE8, and you want to use this method, you’ll have to add some polyfills to it. That’ll be covered in the next article.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Bootstrap’s grid system vs. susy—a comparison</title>
    <link href="https://zellwk.com/blog/https:/www.sitepoint.com/bootstraps-grid-system-vs-susy-comparison/"/>
    <updated>2014-08-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/https:/www.sitepoint.com/bootstraps-grid-system-vs-susy-comparison/</id>
    <content type="html">&lt;p&gt;There are a lot of grid frameworks for us the to choose from while developing websites nowadays. Of the many frameworks, one of most loved and yet most hated framework is definitely Bootstrap.&lt;/p&gt;
&lt;p&gt;Today, I’ll like to introduce you to a slightly lesser known framework that has caught on for many people – Susy. In this article, I’ll show a comparison between Susy and Bootstrap’s grid system so you can fully understand what Susy is, and whether you’ll want to try it out.&lt;/p&gt;
&lt;!--more--&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating Asymmetric Layouts With Susy</title>
    <link href="https://zellwk.com/blog/asymmetric-layouts-with-susy/"/>
    <updated>2014-08-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/asymmetric-layouts-with-susy/</id>
    <content type="html">&lt;p&gt;When I first heard of asymmetric layouts, it was available only in the Singularity GS framework. It sounded incredibly cool and I really wanted to try creating a layout that uses unequal column widths. At that time, I was really happy with Susyone and was reluctant to make the switch.&lt;/p&gt;
&lt;p&gt;Imagine my delight when Susy 2 came and it supported asymmetric grids!&lt;/p&gt;
&lt;p&gt;In this post, I want to introduce you to asymmetric grids with Susy and show you how easily it can be done.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-we%E2%80%99re-making&quot;&gt;What We’re Making&lt;/h2&gt;
&lt;p&gt;We’re making a simple fluid layout that has an asymmetric layout slapped onto it. I’ve opted to give two sidebars to this layout and also there are two nested items within the content area. &lt;strong&gt;Note: You might want to open this up in Codepen&lt;/strong&gt;&lt;/p&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;uvnyx&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/uvnyx/&quot;&gt;uvnyx&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;configuring-susy-global-settings&quot;&gt;Configuring Susy Global Settings&lt;/h2&gt;
&lt;p&gt;You have to change two of the global settings in order to use asymmetric grids with Susy. They are &lt;code&gt;columns&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;. &lt;code&gt;columns&lt;/code&gt; must be a Sass list if you want to work with Asymmetric grids.&lt;/p&gt;
&lt;p&gt;A Sass list is separated by empty spaces and looks like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
$list : 1 2 3 2 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within &lt;code&gt;$list&lt;/code&gt;, we have 5 items. &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;. If we placed this list into the columns setting, we will get back an asymmetric grid with 5 columns.&lt;/p&gt;
&lt;p&gt;As for the other setting, we have to set &lt;code&gt;output&lt;/code&gt; to &lt;code&gt;isolate&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
$susy : (
  columns: 1 2 3 2 1,
  output: isolate
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After creating the &lt;code&gt;$susy&lt;/code&gt; settings, we are not ready to create the layout with susy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The HTMl and extra CSS we need in this layout can be found within the codepen above. Hit on it and grab the necessary styles and html if you want to try it yourself.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-asymmetric-grid&quot;&gt;Creating the Asymmetric Grid&lt;/h2&gt;
&lt;p&gt;As usual, the important first step is to add a &lt;code&gt;container&lt;/code&gt; mixin to wrap. We will also force the container to a viewport height of 100vh to have a glimpse of the grid since there isn’t any content within &lt;code&gt;.wrap&lt;/code&gt; now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.wrap {
  @include container(1140px);
  height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/asym-grid-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;There is one other thing we need to understand before we can create the grid.&lt;/p&gt;
&lt;p&gt;Because we are using &lt;code&gt;isolate&lt;/code&gt; output mode, we need to tell Susy where to place a particular item on the layout. We have to use the &lt;code&gt;$location&lt;/code&gt; keyword to do this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$location&lt;/code&gt; tells Susy to output the span in a specific location. It takes either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt; or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;at &amp;lt;number&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the item we are trying to place is the first item on the grid, then the &lt;code&gt;first&lt;/code&gt; keyword is used. If its the last item, then the &lt;code&gt;last&lt;/code&gt; keyword is used. If the item starts on a specific column, say 2, then &lt;code&gt;at 2&lt;/code&gt; is used in the &lt;code&gt;span&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;With this knowledge, we can quickly create the output for &lt;code&gt;.sidebar-one&lt;/code&gt;, &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar-two&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.sidebar-one&lt;/code&gt; is the first item on the row and takes up one column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.sidebar-one {
  @include span(1 first);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.sidebar-two&lt;/code&gt; is the last item on the row and takes up one column as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.sidebar-two {
  @include span(1 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.content&lt;/code&gt; takes up 3 columns and starts at column 2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 at 2);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The three elements mentioned above should be positioned nicely on an asymmetrical grid now. If we temporarily remove &lt;code&gt;.nest-one&lt;/code&gt; and &lt;code&gt;.nest-two&lt;/code&gt; from the equation, this should look like&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/Screen-Shot-2014-08-18-at-1.30.30-pm.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Working on the nested elements (&lt;code&gt;.nest-one&lt;/code&gt; and &lt;code&gt;.nest-two&lt;/code&gt;) is slightly more tricky than working with the base items. This is because we now need to give the nested elements the correct context to work with.&lt;/p&gt;
&lt;p&gt;Both nested elements are hosted within content, and we know that content has a context of (2 3 2). It is an asymmetric grid as well.&lt;/p&gt;
&lt;p&gt;When writing for the nested elements, we need to include this context into the &lt;code&gt;span&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.nest-one&lt;/code&gt; is the first item within the content block and takes up one column in the asymmetric grid. &lt;code&gt;.nest-two&lt;/code&gt; is the last item within teh content block and it takes up two columns. This would translate to&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.nest-one {
  @include span(1 of (2 3 2) first);
}
.nest-two {
  @include span(2 of (2 3 2) last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p data-height=&quot;266&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;uvnyx&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/uvnyx/&quot;&gt;uvnyx&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can see, we didn’t have to worry about calculating the exact grid widths in terms or pixels or percentages when working with Susy. You can create asymmetric grids with Susy easily as long as you know the theory behind it, and you can count the number of columns to span.&lt;/p&gt;
&lt;h2 id=&quot;tougher-asymmetric-grids&quot;&gt;Tougher Asymmetric Grids&lt;/h2&gt;
&lt;p&gt;Making simple asymmetric grids like the one above is quite simple. What if we needed to make a responsive layout with asymmetric grids? Thats going to be tough.&lt;/p&gt;
&lt;p&gt;I managed to find a &lt;a href=&quot;https://gridsetapp.com/specs/typekit-demos/chaparral.html?gridset=show&quot;&gt;great asymmetric grid layout created by Nathan Ford&lt;/a&gt; that was created using &lt;a href=&quot;https://gridsetapp.com/&quot;&gt;GridsetApp&lt;/a&gt;. This asymmetric layout was responsive as well and it provided a good stretch to understand whether Susy can do the same.&lt;/p&gt;
&lt;p&gt;Turns out its possible, I’ve recreated the entire layout &lt;a href=&quot;http://sassmeister.com/gist/zellwk/258589c4035f6da40854&quot;&gt;on a Sassmeister gist&lt;/a&gt; and I’ll be explaining how to do this step by step in &lt;a href=&quot;http://bit.ly/learnsusy&quot;&gt;Learning Susy&lt;/a&gt; :)&lt;/p&gt;
&lt;p&gt;Take a look at the Sassmeiter gist and see if you can understand what has happened in there given what you have learnt in this post today. Let me know in the comments below! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding Gutter Positions in Susy</title>
    <link href="https://zellwk.com/blog/susy-gutter-positions/"/>
    <updated>2014-08-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/susy-gutter-positions/</id>
    <content type="html">&lt;p&gt;One question that was asked in the Susy survey I created a month ago really stood out to me. The question is &lt;strong&gt;“how to remove margins or paddings of the first and last column without using first-child and last-child in the grid system?”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This one big question is likely one that has caused huge amounts of headaches to beginners who are just starting to learn about Susy. If we go down into the roots of the question, it is quite likely that you have used the &lt;code&gt;inside&lt;/code&gt; gutter position instead of &lt;code&gt;after&lt;/code&gt; after seeing the many of the tutorials online. To answer this question, you must understand how gutter position affects your layout.&lt;/p&gt;
&lt;p&gt;I feel that gutter position is one of the more important settings in Susy because it causes you code things differently when doing your layout. If you have asked this question before, then this blog post about gutter positions is for you.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-is-gutter-position%3F&quot;&gt;What is Gutter Position?&lt;/h2&gt;
&lt;p&gt;Gutter position is one of the settings that Susy allows you to change for your layouts. It specifies &lt;strong&gt;where the gutter should be output with reference to the columns&lt;/strong&gt;. It also specifies whether they should be output as margins or paddings.&lt;/p&gt;
&lt;p&gt;It can be found in the global settings within the &lt;code&gt;$susy&lt;/code&gt; map. Alternatively, you can also use it within &lt;code&gt;span&lt;/code&gt; shorthands. Let’s stick with the &lt;code&gt;$susy&lt;/code&gt; map for this tutorial.&lt;/p&gt;
&lt;p&gt;Gutter position is set to &lt;code&gt;after&lt;/code&gt; by default in Susy, and can be changed to &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;inside&lt;/code&gt; or &lt;code&gt;inside static&lt;/code&gt;. Here’s how gutter-position will look like in the &lt;code&gt;$susy&lt;/code&gt; map. The items contained within brackets are other possible settings for gutter-position, and we will go through them one by one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Scss
$susy: (
  gutter-position: after (before | after | split | inside | inside-static )
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s create a very simple layout for this tutorial, and understand how these gutter positions work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/grid-final.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;after&quot;&gt;After&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;after&lt;/code&gt; is the default &lt;code&gt;gutter-position&lt;/code&gt; setting and it tells Susy to place a gutter after every single column. In this mode, &lt;strong&gt;you will need to remove the gutters for the last column in the row&lt;/strong&gt;. Gutters are output as margins in this mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-after.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;after&lt;/code&gt;, the default &lt;code&gt;span&lt;/code&gt; mixin will produce 3 properties, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;margin-right&lt;/code&gt; and &lt;code&gt;float: left&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Scss
.test {
  @include span(3 of 4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in the follow CSS output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.test {
  width: 73.68421%;
  float: left;
  margin-right: 5.26316%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;margin-right&lt;/code&gt; is the gutter that Susy has created for the grid.&lt;/p&gt;
&lt;p&gt;You can use the &lt;code&gt;last&lt;/code&gt; keyword with &lt;code&gt;after&lt;/code&gt; to remove the final margin.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Scss
.last {
  @include span(1 of 4 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets the &lt;code&gt;margin-right&lt;/code&gt; to 0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.last {
  width: 21.05263%;
  float: right;
  margin-right: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the layout about, the content area takes up 3 of 4 columns while the sidebar takes up one of 4 columns. Sidebar is also the last item, it translates to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Scss
.content {
  @include span(3 of 4);
}
.sidebar {
  @include span(1 of 4 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Quick summary for after&lt;/strong&gt;: &lt;code&gt;after&lt;/code&gt; is the most intuitive layout styles that you can start with while using Susy. When using &lt;code&gt;after&lt;/code&gt;, you just have to remove the last item in the row with the &lt;code&gt;last&lt;/code&gt; keyword.&lt;/p&gt;
&lt;h2 id=&quot;before&quot;&gt;Before&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;before&lt;/code&gt; is another variation of &lt;code&gt;after&lt;/code&gt; and the basic process is the same. Instead of placing a gutter after every column, &lt;code&gt;before&lt;/code&gt; places the gutter before every column. In this mode, you will &lt;strong&gt;need to remove the gutters for the first column in the row&lt;/strong&gt;. Gutters are also output as margins in this mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-before.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;before&lt;/code&gt;, the default &lt;code&gt;span&lt;/code&gt; mixin will produce 3 properties, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;margin-left&lt;/code&gt; and &lt;code&gt;float: left&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Scss
.test {
  @include span(3 of 4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in the follow CSS output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.test {
  width: 73.68421%;
  float: left;
  margin-left: 5.26316%; /* Notice this is margin left, not right */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;margin-left&lt;/code&gt; property creates the gutter in &lt;code&gt;before&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since this is a complete opposite switch of gutters, its relatively easier to understand once you get to know &lt;code&gt;after&lt;/code&gt;. Instead of placing a &lt;code&gt;last&lt;/code&gt; keyword for the last item, we just have to place a &lt;code&gt;first&lt;/code&gt; keyword for the first item in the column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4 first);
}

.sidebar {
  @include span(1 of 4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we will obtain the same layout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick summary for before&lt;/strong&gt;: &lt;code&gt;before&lt;/code&gt; works exactly the same as &lt;code&gt;after&lt;/code&gt;. The only exception is that you will need to remove margins for the first item in row with the &lt;code&gt;first&lt;/code&gt; key.&lt;/p&gt;
&lt;h2 id=&quot;split&quot;&gt;Split&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; is a totally different to both &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;. In &lt;code&gt;split&lt;/code&gt;, the gutters are divided into two and placed on each side of the column. Gutters are output as margins in this mode, and there is &lt;strong&gt;no need to remove gutters for at the edges of the row&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-split.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we only had &lt;code&gt;.content&lt;/code&gt; and &lt;code&gt;.sidebar&lt;/code&gt;, split gutters are easy. We just need to use the span function as we will normally do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4);
}

.sidebar {
  @include span(1 of 4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-split-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;It won’t be as straightforward though, if either &lt;code&gt;.content&lt;/code&gt; or &lt;code&gt;.sidebar&lt;/code&gt; contains any children elements.&lt;/p&gt;
&lt;p&gt;Lets add two children &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of &lt;code&gt;.child-one&lt;/code&gt; and &lt;code&gt;.child-two&lt;/code&gt; respectively into &lt;code&gt;.content&lt;/code&gt; to help illustrate this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Content&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;child-one&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;Child One&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;child-two&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;Child Two&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And lets try the same method we used previously. &lt;code&gt;.child-one&lt;/code&gt; will take up 2 of 3 columns, while &lt;code&gt;.child-two&lt;/code&gt; will take up 1 of 3 columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4);
}

.child-one {
  @include span(2 of 3);
}

.child-two {
  @include span(1 of 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-split-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Notice how &lt;code&gt;.child-one&lt;/code&gt; and &lt;code&gt;child-two&lt;/code&gt; are completely out of alignment with the grid background!&lt;/p&gt;
&lt;p&gt;This is because when you’re working with &lt;code&gt;split&lt;/code&gt; gutters, you need to be aware of parent and children contexts. The parent in this case is &lt;code&gt;.content&lt;/code&gt; while children are &lt;code&gt;.child-one&lt;/code&gt; and &lt;code&gt;.child-two&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way Susy outputs the CSS for these two contexts are very different. We need to tell Susy that &lt;code&gt;.content&lt;/code&gt; is the parent with the &lt;code&gt;nest&lt;/code&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4 nest); // The nest key is needed
}

.child-one {
  @include span(2 of 3);
}

.child-two {
  @include span(1 of 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-split-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Notice how that the background for &lt;code&gt;.content&lt;/code&gt; is extending past the columns while the &lt;code&gt;.child-one&lt;/code&gt; and &lt;code&gt;.child-two&lt;/code&gt; are now nicely fitted into the grids.&lt;/p&gt;
&lt;p&gt;It may be a little confusing at first. A way to remember is that you are always trying to fit children elements into the correct grids, and that you’ll need to use the &lt;code&gt;nest&lt;/code&gt; key on parent elements.&lt;/p&gt;
&lt;p&gt;If you looked deeper into the actual CSS produced, you’ll find that CSS for &lt;code&gt;.content&lt;/code&gt; and CSS for &lt;code&gt;.child-one&lt;/code&gt; and &lt;code&gt;.child-two&lt;/code&gt; are completely different.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;/* CSS */
.content {
  width: 75%;
  float: left;
}

.child-one {
  width: 60%;
  float: left;
  margin-left: 3.33333%;
  margin-right: 3.33333%;
}

.child-two {
  width: 26.66667%;
  float: left;
  margin-left: 3.33333%;
  margin-right: 3.33333%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parent element has a float the represents the percentage width of the span, without taking into account gutters (75% is 3/4).&lt;/p&gt;
&lt;p&gt;Children elements are the ones that output all the gutters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Summary for Split&lt;/strong&gt;: &lt;code&gt;split&lt;/code&gt; works differently from both &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt;. When working with &lt;code&gt;split&lt;/code&gt;, you have to make sure to add a &lt;code&gt;nest&lt;/code&gt; keyword to all parent containers and to use the &lt;code&gt;span&lt;/code&gt; mixin for all child containers.&lt;/p&gt;
&lt;h2 id=&quot;inside-%2F-inside-static&quot;&gt;Inside / Inside-static&lt;/h2&gt;
&lt;p&gt;Both &lt;code&gt;inside&lt;/code&gt; and &lt;code&gt;inside-static&lt;/code&gt; are very similar to &lt;code&gt;split&lt;/code&gt;. The gutters are split up into two place placed on each side of the column. These gutters however, are output as paddings instead. There is also &lt;strong&gt;no need to remove gutters for at the edges of the row&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-inside.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inside&lt;/code&gt; gutters have the same mechanism as &lt;code&gt;split&lt;/code&gt;. If you didn’t declare a &lt;code&gt;nest&lt;/code&gt; keyword on the parent element, the children elements will go out of place.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4);
}

.child-one {
  @include span(2 of 3);
}

.child-two {
  @include span(1 of 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-inside-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Just remember to add &lt;code&gt;nest&lt;/code&gt; keyword to &lt;code&gt;.content&lt;/code&gt; and you’re set.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Scss
.content {
  @include span(3 of 4 nest); // The nest key is needed
}

.child-one {
  @include span(2 of 3);
}

.child-two {
  @include span(1 of 3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/gp-inside-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inside-static&lt;/code&gt; works exactly the same way as &lt;code&gt;inside&lt;/code&gt;. The only exception is that it produces gutters in units instead of percentages, and if you have given a &lt;code&gt;width&lt;/code&gt; to &lt;code&gt;column-width&lt;/code&gt; setting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Summary&lt;/strong&gt;: &lt;code&gt;inside&lt;/code&gt; works the same way as &lt;code&gt;split&lt;/code&gt;. When working with &lt;code&gt;inside&lt;/code&gt;, you have to make sure to add a &lt;code&gt;nest&lt;/code&gt; keyword to all parent containers and to use the &lt;code&gt;span&lt;/code&gt; mixin for all child containers.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;split&lt;/code&gt; and &lt;code&gt;inside&lt;/code&gt; use the exact same layouts, and you can simply interchange between these two in &lt;code&gt;$susy&lt;/code&gt;&#39;s &lt;code&gt;gutter-position&lt;/code&gt; setting!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Gutter positions affect how you would choose to write your layouts with Susy. Different gutter positions have different quirks and they need to be understood if you want to use it effectively.&lt;/p&gt;
&lt;p&gt;There are two major patterns here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; outputs gutters to one edge and these gutters have to be removed at the extreme edges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split&lt;/code&gt;, &lt;code&gt;inside&lt;/code&gt; and &lt;code&gt;inside-static&lt;/code&gt; splits the gutters up into two and outputs them on either side of the columns. These gutters are not removed at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This blog post is a small excerpt of what I have in the &lt;a href=&quot;https://learnsusy.zellwk.com/&quot;&gt;Learning Susy&lt;/a&gt; book regarding gutter position in Chapter 8. In the book, we will discuss more about these positions and actually create a more complicated layout with them. If you enjoyed this, you’ll definitely want to find out more in the book! :)&lt;/p&gt;
&lt;p&gt;Let me know what you have learnt today in the comments below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Debug Your Susy Layout with the Susy Background Image (Even If The Grid Changes)</title>
    <link href="https://zellwk.com/blog/susy-grid-background-image/"/>
    <updated>2014-08-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/susy-grid-background-image/</id>
    <content type="html">&lt;p&gt;When trying to build your layouts with Susy, the first thing you might have tried is to output Susy’s grid background so you can make sure you’re coding the right thing.&lt;/p&gt;
&lt;p&gt;I know I did.&lt;/p&gt;
&lt;p&gt;But it was tough. I couldn’t figure out that out the first couple of months I used Susy. Even if I did manage to find a way to output the grid, I can’t seem to change the grids when I introduced a change in media queries. It was incredibly frustrating and it was very difficult to learn Susy during that period.&lt;/p&gt;
&lt;p&gt;I’d like to share with you one way you can produce as many grid backgrounds and use them with as many breakpoints as you like to.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-we%E2%80%99re-producing&quot;&gt;What We’re Producing&lt;/h2&gt;
&lt;p&gt;We’re producing a Susy container than has 2 different breakpoints for this tutorial.&lt;/p&gt;
&lt;p&gt;When the viewport is below 800px, we will use a Susy grid with 4 columns. When it is between 800px to 1200px, we will use a Susy grid with 8 columns and when the it is larger than 1200px, we will use a Susy grid with 12 columns.&lt;/p&gt;
&lt;p&gt;Here’s a Codepen view what we’re creating. Try resizing the Codepen browser and notice the grids change at the breakpoints mentioned. (&lt;strong&gt;Note: You will have to open this up on Codepen&lt;/strong&gt;)&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;jDFdI&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/jDFdI/&quot;&gt;Learning To Use Susy Background Grids&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;setting-up-html-and-scss&quot;&gt;Setting up HTML and SCSS&lt;/h2&gt;
&lt;p&gt;The html and css setup for this tutorial is relatively straightforward. Since we’re only dealing with the container, we only need one div to see the magic happen. I’ve chosen to name it &lt;code&gt;.wrap&lt;/code&gt; as I always do for all my sites.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also have to force &lt;code&gt;.wrap&lt;/code&gt; to a specific height in order to show its grid since there are no contents within it. If there are contents within your grid, you don’t have to add this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.wrap {
    height: 100vh;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re now ready to setup Susy.&lt;/p&gt;
&lt;h2 id=&quot;set-up-susy-global-settings-for-debugging&quot;&gt;Set Up Susy Global Settings for Debugging&lt;/h2&gt;
&lt;p&gt;Susy provides you with a map called &lt;code&gt;$susy&lt;/code&gt; that you can use to setup the global defaults for Susy. If you want to output the background image for Susy, the very first thing you will need to do is to set the &lt;code&gt;image&lt;/code&gt; key under &lt;code&gt;debug&lt;/code&gt; to &lt;code&gt;show&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$susy: (
  debug: (image: show)
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-the-susy-grid-background-image&quot;&gt;Using The Susy Grid Background Image&lt;/h2&gt;
&lt;p&gt;When you have set &lt;code&gt;image&lt;/code&gt; to &lt;code&gt;show&lt;/code&gt;, Susy automatically outputs the background image when you call a susy container with the &lt;code&gt;container&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;Since the default &lt;code&gt;columns&lt;/code&gt; settings is 4 columns, you should see a grid with 4 columns when you call the the &lt;code&gt;container&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/grid-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to change the number of grids that show up, change the &lt;code&gt;columns&lt;/code&gt; setting within the &lt;code&gt;$susy&lt;/code&gt; map.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$susy:(
  columns: 8,
  debug: (image:show)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you should now have 8 columns shown on the grid.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/08/grid-8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;changing-susy%E2%80%99s-background-grid-at-different-breakpoints&quot;&gt;Changing Susy’s Background Grid at Different Breakpoints&lt;/h2&gt;
&lt;p&gt;Earlier I said we’re creating a grid that breaks has 3 different breakpoints. Small grid with 4 columns under when the viewport is under 800px, medium grid with 8 breakpoints when the viewport is under 1200px and a large grid with 12 breakpoints when the viewport is under 1200px.&lt;/p&gt;
&lt;p&gt;If we follow the above method, we can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.wrap {
    @include container();

    @media (min-width: 800px) {
        @include container();
    }

    @media (min-width: 1200px) {
        @include container();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This unfortunately produces alot of unnecessary code because the &lt;code&gt;container&lt;/code&gt; mixin produces 3 additional properties that are not necessarily required for other breakpoints – &lt;code&gt;max-width&lt;/code&gt;, &lt;code&gt;margin-left&lt;/code&gt; and &lt;code&gt;margin-right&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Instead, we’re going to use another mixin Susy provides – &lt;code&gt;show-grid&lt;/code&gt;. Show grid can take on one argument which can potentially be a full Susy shorthand, but that is unnecessarily complicated. It needs only a single number – the context.&lt;/p&gt;
&lt;p&gt;We just have to replace the above &lt;code&gt;container()&lt;/code&gt; with &lt;code&gt;show-grid(n)&lt;/code&gt; , where n is the context.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.wrap {
    @include container();

    @media (min-width: 800px) {
        @include show-grid(8);
    }

    @media (min-width: 1200px) {
        @include show-grid(12);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And Tada! Thats all you need to do to change the background image!&lt;/p&gt;
&lt;p data-height=&quot;268&quot; data-theme-id=&quot;7929&quot; data-slug-hash=&quot;jDFdI&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/zellwk/pen/jDFdI/&quot;&gt;Learning To Use Susy Background Grids&lt;/a&gt; by Zell Liew (&lt;a href=&quot;http://codepen.io/zellwk&quot;&gt;@zellwk&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Being able to produce a Susy background grid to help you check your work is definitely the most important and most effective step when learning to work with Susy. Now you’ll be able to get quite visual feedback and know whether you’re doing the right thing!&lt;/p&gt;
&lt;p&gt;I’ve learnt this the hard way after multiple hard knocks while writing &lt;a href=&quot;http://bit.ly/learnsusy&quot;&gt;Learn Susy&lt;/a&gt;, and I’m proud to be able to share this with you :)&lt;/p&gt;
&lt;p&gt;Let me know if you have learnt something very useful today!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Organizing Multiple Theme Styles with Sass</title>
    <link href="https://zellwk.com/blog/organizing-multiple-theme-styles-with-sass/"/>
    <updated>2014-06-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/organizing-multiple-theme-styles-with-sass/</id>
    <content type="html">&lt;p&gt;Maintaining CSS code on a website with multiple themes can really be quite a handful, especially if there is more than one person working on the project at the same time.&lt;/p&gt;
&lt;p&gt;It so happens that one of the projects I’m involved with requires multiple themes, and there is than one person working on the codes. Because of this, I needed make sure that the styles are coded in a way that they’re easy to understand and change.&lt;/p&gt;
&lt;p&gt;Here’s an article on my thoughts on organizing theme styles.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;two-approaches-to-theming&quot;&gt;Two Approaches To Theming&lt;/h2&gt;
&lt;p&gt;While researching for the project, I discovered that very little has been discussed about organizing theme information online. The only source I managed to find some ideas on theme management is on &lt;a href=&quot;https://smacss.com/&quot; title=&quot;SMACSS&quot;&gt;SMACSS&lt;/a&gt; (Scalable and Modular Architure for CSS) by Jonathan Snook.&lt;/p&gt;
&lt;p&gt;In SMACSS, Jonathan recommends that all theme rules should be placed in a separate theme.css file.&lt;/p&gt;
&lt;p&gt;I tried Jonathan’s approach and I didn’t really like how it was working out for me. Hence I went on my own exploration and I discovered another possible method.&lt;/p&gt;
&lt;p&gt;Here’s my approach: all theme rules should be declared within modules whenever possible.&lt;/p&gt;
&lt;p&gt;Which should you choose? Let’s take a look at both approaches and their pros and cons to help you with that decision.&lt;/p&gt;
&lt;h2 id=&quot;smacss-approach%3A-separate-theme.css-file&quot;&gt;SMACSS Approach: Separate Theme.css File&lt;/h2&gt;
&lt;p&gt;Just a quick recap, Jonathan recommends all theme rules to be placed in a separate theme.css file. If haven’t had a chance to read up on &lt;a href=&quot;https://smacss.com/&quot; title=&quot;SMACSS&quot;&gt;SMACSS&lt;/a&gt; yet, I strongly suggest you check that out. Jonathan has given some solid advice with regards to CSS architecture.&lt;/p&gt;
&lt;p&gt;Okay back to topic. Here’s an example he gave on &lt;a href=&quot;http://smacss.com/book/type-theme&quot; title=&quot;Theme rules - SMACSS&quot;&gt;theme rules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Say you have a dialog module that needs to have a border colour of blue, the border itself would be initially defined in the module and then the theme defines the colour:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* in module-name.css */
.mod {
  border: 1px solid;
}

/* in theme.css */
.mod {
  border-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jonathan further goes on to say that you could also take it further and clearly indicate which theme the styles belong to. I believe this is what he’s referring to.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// in theme.css
.blue .mod {
  border-color: blue;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Many use cases work with with Jonathan’s approach. One excellent use cases for this approach is for websites that allows users to choose their own themes as a personalization layer.&lt;/p&gt;
&lt;p&gt;These themes could either be placed together in the theme.css file, or they could be separated into their respective theme-name.css files.&lt;/p&gt;
&lt;p&gt;Another great use case is for a website like BBC, where different categories given slightly different styles to maintain the entire BBC experience. Each page could load a specific category-name.css.&lt;/p&gt;
&lt;p&gt;However, this approach of organizing theme styles breaks the context between module styles and theme styles. Which means that it is easy to become confused when you return to the code at a later time. It can also be confusing for someone else to pick up from where you left off.&lt;/p&gt;
&lt;p&gt;Media queries had exactly the same issue initially as well. In the past, most developers batch viewport styles together and throw them into a media query at the end of the stylesheet. Boy that was confusing.&lt;/p&gt;
&lt;p&gt;A lot of developers that I know (me included) now scatter media queries into layouts and module styles instead of batching everything up at the end. The responsive css became so much easier to understand.&lt;/p&gt;
&lt;p&gt;If its possible to put theme codes within module codes that makes it easy for everyone to understand, why not do that?&lt;/p&gt;
&lt;p&gt;In summary,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Potentially requires loading of lesser styles a theme can be specific to a single page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Requires more than one http request for CSS files.&lt;/li&gt;
&lt;li&gt;Breaks context between theme styles and module styles.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;my-approach%3A-theme-styles-are-declared-modules-files&quot;&gt;My Approach: Theme Styles are declared modules files&lt;/h2&gt;
&lt;p&gt;My suggestion is to declare theme styles at the same place where module styles are declared.&lt;/p&gt;
&lt;p&gt;That school of thought may be a little unconventional and you might not have any idea how this works yet. Allow me to explain further in detail how I intend it to work.&lt;/p&gt;
&lt;p&gt;In the nutshell, here’s what the final CSS might look like with two themes. If you’re writing with sass, the declaration of these styles should found within the same module-name.scss file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.module {
  /* Other Properties ... */
}

.blue-theme .module { color: blue; }
.red-theme .module { color: red; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Writing in this manners makes it exceptionally clear that colors of the &lt;code&gt;.module&lt;/code&gt; needs to be changed according to the theme. It is easy to refer back and understand whats happening.&lt;/p&gt;
&lt;p&gt;But what if we have a lot more themes and properties? That could become a nightmare if we wrote it plainly in CSS. There’s a method to overcome this with Sass.&lt;/p&gt;
&lt;h2 id=&quot;my-approach-with-sass&quot;&gt;My Approach With Sass&lt;/h2&gt;
&lt;p&gt;Say now you have five themes. Each theme has different colors for each property.&lt;/p&gt;
&lt;p&gt;First of all, I would use a Sass Map to store all my theme variables so the code is kept as DRY as possible.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$themes: (
  theme1: (color: red),
  theme2: (color: orange),
  theme3: (color: yellow),
  theme4: (color: green),
  theme5: (color: blue)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example is kept to only one variable to simplify the explanation. You can have as many properties as you want for each theme as long as you declare them.&lt;/p&gt;
&lt;p&gt;The trick to using this map is with an &lt;code&gt;@each&lt;/code&gt; loop.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Sass
@each $theme, $map in $themes {
  .#{$theme} {
    color: map-get($map, color);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@each $theme, $map in $themes&lt;/code&gt; tell Sass to loop over the &lt;code&gt;$themes&lt;/code&gt; map that was defined above.&lt;/p&gt;
&lt;p&gt;On each loop, assign these values to &lt;code&gt;$theme&lt;/code&gt; and &lt;code&gt;$map&lt;/code&gt; respectively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;$theme&lt;/strong&gt; - Theme name&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$map&lt;/strong&gt; - Map of all theme variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You now use the &lt;code&gt;map-get()&lt;/code&gt; function to get any theme variable from &lt;code&gt;$map&lt;/code&gt; and output the correct property for each theme.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* CSS */
.theme1 { color: red; }
.theme2 { color: orange; }
.theme3 { color: yellow; }
.theme4 { color: green; }
.theme5 { color: blue; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s nice and good, but just outputting the theme name wouldn’t be very beneficial since its still impossible to include them within module-name.scss and expect this all to work correctly.&lt;/p&gt;
&lt;p&gt;We have to make a tiny change to the &lt;code&gt;@each&lt;/code&gt; loop to make it helpful for a real world usage. The complexity gets a little bit higher so make sure you’re clear what this &lt;code&gt;@each&lt;/code&gt; loop does before moving on!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Sass
@each $theme, $map in $themes {
  .#{$theme} &amp;amp; { // &amp;lt;--- Notice the &amp;amp; here!
    color: map-get($map, color);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;&lt;/code&gt; refer to parent selectors and placing it after &lt;code&gt;.#{$theme}&lt;/code&gt; tells Sass to output any parent selectors after the theme name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Sass
.module-name  {
  @each $theme, $map in $themes {
    .#{$theme} &amp;amp; { // &amp;lt;--- Notice the &amp;amp; here!
      color: map-get($map, color);
    }
  }
}

/* CSS */
.theme-name .module-name { color: red; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets try this with an example that’s more real.&lt;/p&gt;
&lt;p&gt;Say if you wanted to change the color for the &lt;code&gt;h1&lt;/code&gt; of the module when the theme changes, we can add the each loop within the &lt;code&gt;h1&lt;/code&gt; context:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// SCSS
.module-name {
  h1 {
    @each $theme, $map in $themes {
      .#{$theme} &amp;amp; {
        color: map-get($map, color);
      }
    }
  }
}

/* CSS */
.theme1 .module-name h1 { color: red; }
.theme2 .module-name h1 { color: orange; }
.theme3 .module-name h1 { color: yellow; }
.theme4 .module-name h1 { color: green; }
.theme5 .module-name h1 { color: blue; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This output works great, and we can now include &lt;code&gt;.theme-name&lt;/code&gt; anywhere before &lt;code&gt;.module-name&lt;/code&gt; and ensure that the colors would turn out correctly!&lt;/p&gt;
&lt;p&gt;Note that this can only be used since Sass v3.3.0rc3. The minimum stable version I verified this to work with is Sass v3.3.7. I haven’t personally gone lower to test it out yet.&lt;/p&gt;
&lt;p&gt;Now that you understand how to use this approach, lets dive into its pros and cons.&lt;/p&gt;
&lt;p&gt;When using this method, you keep context between module and theme styles, which makes it easier to understand when you come back to it at a later time. It makes it easier for any fresh pairs of eyes as well.&lt;/p&gt;
&lt;p&gt;Another benefit is that the client only has to load one CSS file.&lt;/p&gt;
&lt;p&gt;But because theme styles are repeatedly created in many modules, there is a potential of creating a very large CSS file, which can slow down rendering of the page.&lt;/p&gt;
&lt;p&gt;In summary,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keeps context between module styles and theme styles&lt;/li&gt;
&lt;li&gt;Only requires one http request for CSS files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Potentially a creates very large CSS file, which slows down rendering&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;making-my-approach-better%3F&quot;&gt;Making My Approach Better?&lt;/h2&gt;
&lt;p&gt;After using it for a few times, I came to realize that constantly writing the full &lt;code&gt;@each&lt;/code&gt; loop can be a little cumbersome.&lt;/p&gt;
&lt;p&gt;I wanted to make it easier to use and I’ve tried adding converting it into a mixin, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// NOTE: Doesn&#39;t work
@mixin themify ($themes: $themes) {
  @each $theme, $map in $themes {
    .#{$theme} &amp;amp;  {
      @content;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, that doesn’t work at all. The &lt;code&gt;$map&lt;/code&gt; variables are stuck within the local scope of the mixin, but &lt;code&gt;@content&lt;/code&gt; forces you to use the global scope. Hence I can’t draw the theme variables out.&lt;/p&gt;
&lt;p&gt;At this point, I’m currently at my wit’s end with any improvements for my approach. I’d love to find a way to improve this and would be glad if you have any suggestions!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We’ve gone through two different approaches to organizing theme styles. Which do you prefer? Try both out and let me know in the comments!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Sexier Float Label Pattern</title>
    <link href="https://zellwk.com/blog/adaptive-placeholders/"/>
    <updated>2014-06-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/adaptive-placeholders/</id>
    <content type="html">&lt;p&gt;Its tough to create forms that are both clean and have great user experience at the same time.&lt;/p&gt;
&lt;p&gt;In an effort to make forms look nicer visually, designers and developers have sacrificed usability by replacing field labels with placeholders. I’ve been guilty of that as well.&lt;/p&gt;
&lt;p&gt;There has been a new convention lately. The Float Label Pattern introduced by Matt D. Smith for an iOS app spread like wildfire and almost everyone is using it now.&lt;/p&gt;
&lt;p&gt;I’ll like to introduce an implementation of my own, and talk about how I came to create this.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;adaptive-placeholder-demo&quot;&gt;Adaptive Placeholder Demo&lt;/h2&gt;
&lt;p&gt;Here’s a quick demo of the project. I’ve named it Adaptive Placeholders because it’s being remodelled after the same concept made by Danny King.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zellwk/adaptivePlaceholders/master/screenshots/input.gif&quot; alt=&quot;&quot; title=&quot;Adaptive Placeholders input&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zellwk/adaptivePlaceholders/master/screenshots/textarea.gif&quot; alt=&quot;&quot; title=&quot;Adaptive Placeholder Textarea&quot;&gt;&lt;/p&gt;
&lt;p&gt;And here’s the &lt;a href=&quot;https://github.com/zellwk/adaptivePlaceholders&quot; title=&quot;Adaptive Placeholders&quot;&gt;repo&lt;/a&gt; if you’re interested.&lt;/p&gt;
&lt;h2 id=&quot;what-prompted-the-project%3F&quot;&gt;What Prompted The Project?&lt;/h2&gt;
&lt;p&gt;Matt’s floating label pattern opened up my horizons the first time I saw it. It was awesome. Because it was such a great user experience, I begun searching online for a implementation that I could use in my own project.&lt;/p&gt;
&lt;p&gt;The ones I’ve found were mainly Javascript based. Although they did the job nicely, I didn’t really liked the idea of adding Javascript unnecessarily.&lt;/p&gt;
&lt;p&gt;On searching further, I found a few CSS implementations that got me totally excited. Here are some examples by &lt;a href=&quot;http://css-tricks.com/float-labels-css/&quot; title=&quot;Float labels&quot;&gt;Chris Coyier&lt;/a&gt;, &lt;a href=&quot;http://snook.ca/archives/htmlandcss/floated-label-pattern-css&quot; title=&quot;Float label pattern&quot;&gt;Jonathan Snook&lt;/a&gt; and &lt;a href=&quot;http://dbushell.com/2013/11/08/form-label-design/&quot;&gt;David Bushell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I found the &lt;em&gt;almost perfect&lt;/em&gt; one. That was &lt;a href=&quot;http://blog.circleci.com/adaptive-placeholders/&quot; title=&quot;Adaptive Placeholders&quot;&gt;Adaptive Placeholders&lt;/a&gt; by Danny King. Unfortunately, it was in LESS. I needed this in Sass. That prompted the whole project.&lt;/p&gt;
&lt;p&gt;Seriously if you haven’t checked it out yet, I highly recommend that you download the &lt;a href=&quot;https://github.com/zellwk/adaptivePlaceholders&quot; title=&quot;Adaptive Placeholders&quot;&gt;repo&lt;/a&gt; and play around with it.&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-special-about-this-project&quot;&gt;What’s Special About This Project&lt;/h2&gt;
&lt;p&gt;Because this is my first project! (Just kidding :))&lt;/p&gt;
&lt;p&gt;I wanted to let you use adaptive placeholders as painlessly as possible, and yet at the same time, allow you to be able to customize it so much that you can fit this into almost any project you desire.&lt;/p&gt;
&lt;p&gt;I’ll go as far as saying that I’ll want this project to be the new standard for form fields.&lt;/p&gt;
&lt;p&gt;Because of that vision, there were a few criteria that this project has to meet.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has to be usable with both input and textareas&lt;/li&gt;
&lt;li&gt;It has to allow users to change its variables easily&lt;/li&gt;
&lt;li&gt;It has to have built in defaults for users to use it out of the box.&lt;/li&gt;
&lt;li&gt;It has to be super simple to use&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Adaptive Placeholder now fulfills all these criteria. Have a look at the the usage guidelines on the &lt;a href=&quot;https://github.com/zellwk/adaptivePlaceholders&quot; title=&quot;Adaptive Placeholders&quot;&gt;repo&lt;/a&gt; to understand how to use it.&lt;/p&gt;
&lt;h2 id=&quot;adaptive-placeholders-can-still-be-improved.&quot;&gt;Adaptive Placeholders Can Still Be Improved.&lt;/h2&gt;
&lt;p&gt;This project is still far from completion. There are still many various ways to improve its implementation and I’ve yet to find the time to do so.&lt;/p&gt;
&lt;p&gt;Here are just some possibilities in future:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Addition of help text&lt;/strong&gt;. Usability can be improved greatly if there were help text added to each label. One obvious use case would be passwords that require interesting combinations for it to be validated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adding Good Form Validation&lt;/strong&gt;. At this point, complex form validation is impossible. Even validating a simple email could be a disaster.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the field is not validated, the user experience fails horribly because the label falls back to being a “placeholder”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zellwk/adaptivePlaceholders/master/screenshots/email.gif&quot; alt=&quot;&quot; title=&quot;Adaptive Placeholder email&quot;&gt;&lt;/p&gt;
&lt;p&gt;It might be possible to add solid validation with the use of Javascript. One example I thought of is to use &lt;a href=&quot;http://parsleyjs.org/&quot;&gt;Parsley.js&lt;/a&gt; to validate the fields.&lt;/p&gt;
&lt;h2 id=&quot;if-you-use-this%E2%80%A6&quot;&gt;If You Use This…&lt;/h2&gt;
&lt;p&gt;Leave a comment and let me know! I’d love to group all your implementations into a large collection for everyone else to see!&lt;/p&gt;
&lt;p&gt;And finally, here’s the &lt;a href=&quot;https://github.com/zellwk/adaptivePlaceholders&quot; title=&quot;Adaptive Placeholders&quot;&gt;repo&lt;/a&gt; again :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Compass vs Autoprefixer</title>
    <link href="https://zellwk.com/blog/compass-vs-autoprefixer/"/>
    <updated>2014-05-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/compass-vs-autoprefixer/</id>
    <content type="html">&lt;p&gt;I wrote about a hacky fix on using the built in Autoprefixer in Codekit 2 with Compass. The article alone wouldn’t have been very helpful if you didn’t know what was autoprefixer and compass.&lt;/p&gt;
&lt;p&gt;This article tries to help you with understanding what Compass and Autoprefixer does.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-is-autoprefixer&quot;&gt;What is Autoprefixer&lt;/h2&gt;
&lt;p&gt;Autoprefixer is a CSS post processor. It combs through compiled CSS files to add or remove vendor prefixes like &lt;code&gt;-webkit&lt;/code&gt; and &lt;code&gt;-moz&lt;/code&gt; after checking the code against &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data on &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse.com&lt;/a&gt; is the most accurate data source on browser support on the internet, be it HTML5, CSS or Javascript. It is the place for frontend developers to check for browser support. Since autoprefixer runs checks against caniuse, its prefixes will be spot on.&lt;/p&gt;
&lt;p&gt;This means that you don’t have to write any vendor prefixes while writing CSS code. Autoprefixer will take care of everything for you.&lt;/p&gt;
&lt;p&gt;If you didn’t know, vendor prefixes are a way for browser makers to add support for newer CSS features that they are still experimenting with. They are used to implement features that hasn’t been fully finalized. Once testing is done, browser makers will automatically remove the need for prefixes for that particular CSS property.&lt;/p&gt;
&lt;p&gt;You can specify which browsers to support by stating them within autoprefixer’s preferences. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;last 1 version&amp;quot;, &amp;quot; &amp;gt; 1% &amp;quot;, &amp;quot;Explorer 7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using autoprefixer in the past was way more difficult that using it now. Previously, you had to be quite knowledgeable development workflows in order to use it. It could be added with dev tools like grunt, gulp, node, ruby, or you had to be comfortable with using the terminal.&lt;/p&gt;
&lt;p&gt;Thankfully, its much easier to use autoprefixer now. With the improvement of preprocesses like &lt;a href=&quot;https://incident57.com/codekit/&quot; title=&quot;Codekit&quot;&gt;Codekit 2&lt;/a&gt; and &lt;a href=&quot;http://alphapixels.com/prepros/&quot; title=&quot;Prepos&quot;&gt;Prepos&lt;/a&gt;, you can use autoprefixer by simply checking a checkbox.&lt;/p&gt;
&lt;p&gt;The only thing you need to know is how to set autoprefixer preferences like the example given above. &lt;a href=&quot;https://github.com/ai/autoprefixer&quot; title=&quot;autoprefixer&quot;&gt;Autoprefixer’s github &lt;/a&gt; has a very complete portion on setting these preferences.&lt;/p&gt;
&lt;h2 id=&quot;what-is-compass&quot;&gt;What is Compass&lt;/h2&gt;
&lt;p&gt;Compass is many things in one. Its website mentioned that it’s an open-source CSS Authoring Framework. That doesn’t tell us much, so lets break it down to see what compass does.&lt;/p&gt;
&lt;p&gt;Compass helps frontend developers out with these few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prefixing CSS&lt;/strong&gt; - Compass adds vendor prefixes by using mixins and that gets compiled into css.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating beautiful typographic rhythms&lt;/strong&gt; - Compass allows you to easilly add vertical rhythms with the help of the vertical rhythms module. I’ve written about using compass vertical rhythms previously &lt;a href=&quot;https://zellwk.com/blog/compass-vertical-rhythm/&quot; title=&quot;Compass vertical rhythm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adding extra helpful CSS Mixins&lt;/strong&gt; - In addition to prefixing, Compass also has various helpful CSS mixins that takes effort out from writing CSS manually. An example of this is the &lt;code&gt;word-break&lt;/code&gt; mixin that helps with adding hyphens and breaking long words up when they reach the end of the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Creating Image Sprites&lt;/strong&gt; - Compass generates images sprites for you with only a few &lt;code&gt;@import&lt;/code&gt; command in the  sass file, which really helps make spriting incredibly simple.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you see, Compass does way more than autoprefixer. If we were to compare the two of them, it is only fair to compare the Compass prefixing section with autoprefixer.&lt;/p&gt;
&lt;h2 id=&quot;autoprefixer-vs-compass-at-prefixing&quot;&gt;Autoprefixer vs Compass at prefixing&lt;/h2&gt;
&lt;p&gt;Autoprefixer is made to be super duper good at vendor prefixing. It only does that does it much better than compass in the following 3 ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cleaner Input&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Compass requires to use mixins they have created in order for prefixing to work properly. This means you’re changing how you write CSS to how compass requires you to write CSS.&lt;/p&gt;
&lt;p&gt;Autoprefixer allows you to write CSS the way it was meant to be in the CSS Spec. This means that you can just remember CSS syntaxes if you use autoprefixer. It is also more future proof.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Cleaner Output&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Compass adds unnecessary prefixes for some browers creates some code bloat while autoprefixer takes care of that by checking properties against &lt;a href=&quot;http://caniuse.com/&quot;&gt;caniuse&lt;/a&gt; as mentioned above. This reduces code bloat by a slight amount.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;Allows changing of prefixing preferences&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is probably the killer feature in the battle between autoprefixer and Compass prefixing. Autoprefixer allows you to choose browser versions and helps you add or remove vendor prefix for only the browsers you need to have. That helps with the cleaner output as well.&lt;/p&gt;
&lt;h2 id=&quot;autoprefixer-and-compass-prefixing-at-work&quot;&gt;Autoprefixer And Compass Prefixing At Work&lt;/h2&gt;
&lt;p&gt;It’s much easier to understand if we ended everything with a good example.&lt;/p&gt;
&lt;p&gt;In this section, we’re going to compare autoprefixer vs compass in vendor prefixing for two properties – one that requires every vendor prefix while another requires none.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;box-sizing&lt;/strong&gt; - a property that requires vendor prefixes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// autoprefixer input
- {
  box-sizing: border-box;
}

// Compass input
- {
  @include box-sizing(border-box);
}

// Output (both autoprefixer and Compass)
- {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is only a slight difference between autoprefixer and compass in this case – You had to use a mixin with compass instead of just writing the &lt;code&gt;box-sizing&lt;/code&gt; property normally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;border-radius&lt;/strong&gt; - a property that does not requires vendor prefixes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// autoprefixer input
.example {
  border-radius: 6px;
}

// autoprefixer ouput
.example {
  border-radius: 6px;
}

// Compass input
.example {
  @include border-radius(6px);
}

// Compass output
.example {
  -moz-border-radius: 6px;
  -webkit-border-radius: 6px;
  border-radius: 6px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Autoprefixer doesn’t add a single line of prefixing because it understands that there is no more need to prefix the&lt;code&gt;border-radius&lt;/code&gt; property given the set preferences. .&lt;/p&gt;
&lt;p&gt;Compass on the other hand, adds all prefixes because there is simply no way to let Compass check whether they are required.&lt;/p&gt;
&lt;h2 id=&quot;can-you-use-autoprefixer-with-compass%3F&quot;&gt;Can you use Autoprefixer With Compass?&lt;/h2&gt;
&lt;p&gt;YES!&lt;/p&gt;
&lt;p&gt;In fact, I highly recommend using autoprefixer in conjunction with Compass in your development workflow because they help out in different ways.&lt;/p&gt;
&lt;p&gt;The only unfortunate thing right now is that Codekit 2 users are still unable to use autoprefixer compass is installed within a project.&lt;/p&gt;
&lt;p&gt;That was the impetus that led to my previous article on &lt;a href=&quot;https://zellwk.com/blog/codekit-2-autoprefixer-with-compass/&quot; title=&quot;Using Codekit 2 Autoprefixer with Compass&quot;&gt;using Codekit 2’s autoprefixer with compass &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m not too sure about whether you could use Prepos with Compass and autoprefixer though, because I’ve never used it. If you have tried and it works great, let me know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using Codekit 2 Autoprefixer With Compass</title>
    <link href="https://zellwk.com/blog/codekit-2-autoprefixer-with-compass/"/>
    <updated>2014-05-20T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/codekit-2-autoprefixer-with-compass/</id>
    <content type="html">&lt;p&gt;Codekit 2 is a great compiler built for Mac. It helps you to quickly compile languages like Sass without going through the command line.&lt;/p&gt;
&lt;p&gt;One awesome new feature in Codekit 2 is the built in support for autoprefixer. Sadly, Codekit 2 currently does not allow the use of autoprefixer with Compass due to technical difficulties.&lt;/p&gt;
&lt;p&gt;But not all is lost if you still want to use certain Compass modules with Codekit 2.&lt;/p&gt;
&lt;p&gt;I’ve managed to find a way and I’d love to share that with you in this post.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;summary-of-the-method&quot;&gt;Summary of the Method&lt;/h2&gt;
&lt;p&gt;When there is a config.rb file within the project, Codekit automatically removes the option to use autoprefixer.&lt;/p&gt;
&lt;p&gt;What we need is a way to use Compass without the need for a config.rb file.&lt;/p&gt;
&lt;p&gt;This means that we will not be able to use Compass normally by calling it with the config.rb file and importing it from the stylesheet.&lt;/p&gt;
&lt;p&gt;One way to do this is to manually add the needed sass files from Compass Core directly into the project folder.&lt;/p&gt;
&lt;p&gt;When using this method, you won’t be able to use any of Compass’s extra functions like spriting.&lt;/p&gt;
&lt;p&gt;**Note: This is an extremely hacky solution. Its not future proof, you are warned :) **&lt;/p&gt;
&lt;h2 id=&quot;add-compass-to-your-sass-project&quot;&gt;Add Compass to Your Sass Project&lt;/h2&gt;
&lt;p&gt;Getting the required Compass sass files is relatively easy because the authors have kept it relatively clean.&lt;/p&gt;
&lt;p&gt;If you would like to use every CSS mixin provided by compass, you could clone the whole compass folder &lt;a href=&quot;https://github.com/chriseppstein/compass&quot;&gt;from the github repo&lt;/a&gt; and navigate it into &lt;code&gt;/frameworks/compass/stylesheets&lt;/code&gt;. Copy the whole stylesheets folder and add it into your sass project.&lt;/p&gt;
&lt;p&gt;You can then import compass as you would import any other sass files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import &amp;quot;compass/utilities&amp;quot;;
@import &amp;quot;compass/typography&amp;quot;;
@import &amp;quot;compass/css3&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I recommend only adding files you really need into the project because it would slow down compilation alot if you added the whole compass core the sass project.&lt;/p&gt;
&lt;p&gt;I only wanted to use vertical rhythms with autoprefixer when I resorted to looking for this hack. I’ve wrote about how to use vertical rhythms previously &lt;a href=&quot;https://zellwk.com/blog/codekit-2-autoprefixer-with-compass/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you wanted to use the same vertical rhythms as I had used above, you have to find the beta branch. I hypothesize that the beta branch is “youcanuseicanuse” because I managed to find the vertical rhythms modules there.&lt;/p&gt;
&lt;p&gt;I’ve prepared the vertical rhythms module for you if you wanted to use it. Grab it &lt;a href=&quot;https://zellwk.com/blog/codekit-2-autoprefixer-with-compass/&quot;&gt;here&lt;/a&gt;. Add it into your sass project folder and import it with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import&amp;quot;compass/vertical-rhythms&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you have added the files you need, you can start using autoprefixer on&lt;/p&gt;
&lt;h2 id=&quot;turn-on-autoprefixer-on-codekit-2&quot;&gt;Turn on Autoprefixer on Codekit 2&lt;/h2&gt;
&lt;p&gt;When you add a project to codekit, you can take a look at the scss file and check autoprefixer to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/05/codekit.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Depending on your project needs, you can also configure Codekit’s autoprefixer settings easily&lt;/p&gt;
&lt;h2 id=&quot;configure-autoprefixer&quot;&gt;Configure Autoprefixer&lt;/h2&gt;
&lt;p&gt;Bring up the project settings by first clicking on the gear icon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/05/codekit-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can find autoprefixer’s settings under &lt;code&gt;Languages &amp;gt; Special Languages Tool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/05/codekit-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since Codekit 2 now includes settings on a project basis, new projects would not automatically have autoprefixer turned on.&lt;/p&gt;
&lt;p&gt;To turn on autoprefixer automatically for all new projects, go to &lt;code&gt;File &amp;gt; Edit defaults for new projects&lt;/code&gt;(or press Cmd + D), then follow the same steps as above to configure the initial properties for autoprefixer.&lt;/p&gt;
&lt;h2 id=&quot;summing-it-up&quot;&gt;Summing it up&lt;/h2&gt;
&lt;p&gt;Autoprefixer works wonderfully with Codekit 2, but it doesn’t play well if Compass is added at the same time.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is the best method I found for adding specific compass modules to Codekit 2 for the moment.&lt;/p&gt;
&lt;p&gt;I look forward to the day Codekit finds a way to make compass work with its built in autoprefixer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Neatly Organized Layouts with Sass Maps and Susy</title>
    <link href="https://zellwk.com/blog/organized-susy-layouts/"/>
    <updated>2014-05-12T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/organized-susy-layouts/</id>
    <content type="html">&lt;p&gt;Sometimes, there is a need to repeatedly declare new layouts as a project goes along. As more layouts gets declared, it can get quite difficult to manage and change these layouts when the need arises.&lt;/p&gt;
&lt;p&gt;Because of this, I’ve been toying with the idea of consolidating different kinds of layouts into a sass map and calling the maps with Susy. Thankfully, I managed to hit onto something decent recently. This post shares my method for organizing layouts with Susy&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;overview-of-the-method&quot;&gt;Overview of the method&lt;/h2&gt;
&lt;p&gt;The very first requirement that I had was that the Sass map could house different layouts for various responsive breakpoints, and the layouts themselves must be easily differentiatable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$layouts: (
  name-of-layout: (
    breakpoint-1: full,
    breakpoint-2: 9 of 12
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In each layout, I was able to add a breakpoint argument and allow it to take any number of keywords that form the &lt;code&gt;span()&lt;/code&gt; mixin that susy provides.&lt;/p&gt;
&lt;p&gt;In addition to this, I would like to be able to recursively get futher layouts within layouts themselves.&lt;/p&gt;
&lt;p&gt;Here’s an example of what I mean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$layouts: (
  content: (
    med: full,
    large: 9 of 12

    gallery: (
      small: full
      large: 3 of 9
    )
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, wouldn’t it be great if we could write something like &lt;code&gt;@include get-layout(content large)&lt;/code&gt; or &lt;code&gt;@include get-layout(content gallery large)&lt;/code&gt; and Susy will create that content block automatically?&lt;/p&gt;
&lt;p&gt;When doing responsive layouts, this makes it as easy as the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.content {
  @include get-layout(content med);
  @include breakpoint(large) {
    @include get-layout(content large);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes a ton of semantic sense and it could be reused for other areas if required.&lt;/p&gt;
&lt;p&gt;Turns out, its relatively simple to accomplish.&lt;/p&gt;
&lt;h2 id=&quot;setting-the-method-up&quot;&gt;Setting the method up&lt;/h2&gt;
&lt;p&gt;3 things are required for setting this up. The first is obviously the layouts map I mentioned above.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$layouts: (
  content: (
    med: full,
    large: 9 of 12
  ),
  sidebar: (
    med: full,
    large: 3 of 12
  ),
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second requirement is the &lt;code&gt;map-fetch&lt;/code&gt; function found &lt;a href=&quot;https://gist.github.com/jlong/8760275&quot; title=&quot;map fetch&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The third and final requirement is to construct a &lt;code&gt;get-layout&lt;/code&gt; function and mixin so you could use it just like how you’ll use a span mixin or function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@mixin get-layout($args, $map: $layouts) {
  @include span(map-fetch($map, $args));
}

@function get-layout($args, $map: $layouts) {
  @return span(map-fetch($map, $args));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to create a neatly organized sass map packed with the juicy Susy features.&lt;/p&gt;
&lt;h2 id=&quot;using-the-method&quot;&gt;Using the method&lt;/h2&gt;
&lt;p&gt;Once you setup the mixins and functions, using it is as simple as calling the key to the map you’re trying to use.&lt;/p&gt;
&lt;p&gt;Once again, here’s a quick example of how to use it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.content {
  @include get-layout(content med);
  @include breakpoint(1200px) {
    @include get-layout(content large);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might want to create a separate map for the breakpoints so large = 1200px and you can write the keyword instead, but thats another topic.&lt;/p&gt;
&lt;p&gt;If you use this or have an improvement to make, let me know what you think!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Static Grids with Susy 2</title>
    <link href="https://zellwk.com/blog/static-grids-with-susy2/"/>
    <updated>2014-04-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/static-grids-with-susy2/</id>
    <content type="html">&lt;p&gt;There are times where you might want to use grids that break that certain points instead of using a fully fluid grid. Susy lets you do that easily as well. But first, you’ll need to do a few quick configurations to get that to work.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;This is the third part of our tutorial series with Susy 2. If you’re completely new, I suggest you check out the &lt;a href=&quot;https://zellwk.com/blog/susy2-tutorial/&quot; title=&quot;A complete tutorial to Susy 2&quot;&gt;first part&lt;/a&gt;, which will get you started quickly.&lt;/p&gt;
&lt;h2 id=&quot;configuring-susy-to-use-static-widths&quot;&gt;Configuring Susy to use Static Widths&lt;/h2&gt;
&lt;p&gt;If you wanted to use static widths with Susy, you need to change math value to &lt;code&gt;static&lt;/code&gt;. You’ll also have to set the &lt;code&gt;column-width&lt;/code&gt; of the grid that you’ll like to use. Valid units are pixels, ems and rems. Let’s work with pixels in this example.&lt;/p&gt;
&lt;p&gt;If you’re going to make the grid responsive, the default susy column should be set to the number of columns in the smallest view.&lt;/p&gt;
&lt;p&gt;// Static Style
$susy: (
math: static,
columns: 4,
column-width: 60px,
gutters: 1 / 4,
use-custom: (rem: true)
);&lt;/p&gt;
&lt;h2 id=&quot;using-susy-static-grids&quot;&gt;Using Susy Static Grids&lt;/h2&gt;
&lt;p&gt;The steps to use Susy is exactly the same as if we had used the fluid grid.&lt;/p&gt;
&lt;p&gt;First we have to include a container. When using Static grids take note to add the &lt;code&gt;$susy&lt;/code&gt; map to the container.&lt;/p&gt;
&lt;p&gt;When Susy is set to static mode, its container widths are set according to the column width, the number of columns given and the gutter width.&lt;/p&gt;
&lt;p&gt;.container {
@include container($susy);
}&lt;/p&gt;
&lt;p&gt;Susy will automatically calculate the max width for you. The CSS output is&lt;/p&gt;
&lt;p&gt;.container {
width: 285px;
width: 15.83333rem;
margin-left: auto;
margin-right: auto;
}&lt;/p&gt;
&lt;p&gt;The only difference between static and fluid grids is that in static mode, Susy calculates a max-width for the container whereas Susy uses a max-width of 100% in fluid mode.&lt;/p&gt;
&lt;h2 id=&quot;responsifying-with-static-grids&quot;&gt;Responsifying with Static Grids&lt;/h2&gt;
&lt;p&gt;Making your grids responsive with Susy in static mode is essentially the same as that when Susy is in fluid mode. There difference is… you guessed it, the container. I’ll only touch on the container in this tutorial, &lt;a href=&quot;https://zellwk.com/blog/susy2-tutorial-2/&quot; title=&quot;A complete Tutorial to susy 2 part 2&quot;&gt;check back here&lt;/a&gt; if you’re interested to find out how to do the rest.&lt;/p&gt;
&lt;p&gt;When working with fluid grids, we didn’t have to be bothered about the container since its going to be 100% anyway. But now, we do.&lt;/p&gt;
&lt;p&gt;Thankfully, its a problem at all. Here’s the best method I found by far.&lt;/p&gt;
&lt;p&gt;.container {
@include container($susy);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Tablet View
@include breakpoint(600px) {
  @include container(12)
}

// Desktop View
@include breakpoint(900px) {
  @include container(16)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Within each breakpoint, redeclare the container with the number of columns as the argument to container.&lt;/p&gt;
&lt;p&gt;If by any chance you’re changing your layout map (which probably wouldn’t happen), add the layout as the argument to container instead.&lt;/p&gt;
&lt;p&gt;The CSS Output is this:&lt;/p&gt;
&lt;p&gt;.wrap {
width: 285px;
width: 15.83333rem;
margin-left: auto;
margin-right: auto;
}
.wrap::after {
content: &amp;quot; &amp;quot;;
display: block;
clear: both;
}
@media (min-width: 600px) {
.wrap {
width: 885px;
width: 49.16667rem;
margin-left: auto;
margin-right: auto;
}
.wrap::after {
content: &amp;quot; &amp;quot;;
display: block;
clear: both;
}
}
@media (min-width: 900px) {
.wrap {
width: 1185px;
width: 65.83333rem;
margin-left: auto;
margin-right: auto;
}
.wrap::after {
content: &amp;quot; &amp;quot;;
display: block;
clear: both;
}
}&lt;/p&gt;
&lt;p&gt;It works, but its also unsightly. There are extra margin-left and margin-right and clearfixes written into the CSS because we redeclared the container.&lt;/p&gt;
&lt;p&gt;I’m pretty sure there’s way a to make the CSS output DRY-er, but I’ve yet to discover it. If you know about this, please let me know in the comments.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the nutshell, the steps to using static grids is exactly the same with fluid grids. You just have to take note of declaring the container at various breakpoints and to set the &lt;code&gt;$susy&lt;/code&gt; map correctly.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Complete Tutorial to Susy 2 (Part 2)</title>
    <link href="https://zellwk.com/blog/susy2-tutorial-2/"/>
    <updated>2014-04-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/susy2-tutorial-2/</id>
    <content type="html">&lt;p&gt;We went through the very basics of Susy 2 and how it could be used to quickly create very complicated layouts in the previous tutorial on Susy. In this tutorial, we’re going to dive deeper into Susy, and explore how it can be used to develop responsive websites easily.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;If you have no clue what Susy 2 is all about, you might want to check out the &lt;a href=&quot;https://zellwk.com/blog/susy2-tutorial&quot;&gt;previous article&lt;/a&gt; before proceeding. I guarantee it’ll be worth it.&lt;/p&gt;
&lt;h2 id=&quot;breakpoint-helpers&quot;&gt;Breakpoint Helpers&lt;/h2&gt;
&lt;p&gt;Susy Two doesn’t come with a breakpoint mixin by default. Instead, it recommends you to use the &lt;a href=&quot;http://breakpoint-sass.com/&quot; title=&quot;breakpoint sass&quot;&gt;breakpoint&lt;/a&gt; gem to help with writing media queries.&lt;/p&gt;
&lt;p&gt;We’re first going to install and import this gem.&lt;/p&gt;
&lt;p&gt;Breakpoint requires Compass. To use it you’ll need to have both gems installed.&lt;/p&gt;
&lt;p&gt;$ sudo gem install compass
$ sudo gem install breakpoint&lt;/p&gt;
&lt;p&gt;You’ll then need to require and import this plugin.&lt;/p&gt;
&lt;h1 id=&quot;config.rb&quot;&gt;config.rb&lt;/h1&gt;
&lt;p&gt;require ‘breakpoint’&lt;/p&gt;
&lt;p&gt;// styles.scss
@import “breakpoint”;&lt;/p&gt;
&lt;p&gt;Now we’re set up and ready to go.&lt;/p&gt;
&lt;h2 id=&quot;using-breakpoint&quot;&gt;Using Breakpoint&lt;/h2&gt;
&lt;p&gt;One thing I like about using Breakpoint is that it is super easy to make mobile first breakpoints. Let me explain.&lt;/p&gt;
&lt;p&gt;To use breakpoint, you’ll have to call the breakpoint mixin and insert a set of arguments to it. These arguments will eventually turn out to be media queries.&lt;/p&gt;
&lt;p&gt;@include breakpoint(&lt;args&gt;) {
/* contents */
}&lt;/args&gt;&lt;/p&gt;
&lt;p&gt;The beauty of this mixin is that if you pass in only one argument, it automatically becomes mobile-first oriented. This argument should be a min-width of the breakpoint you’re looking for.&lt;/p&gt;
&lt;p&gt;// styles.scss
.container {
@include breakpoint(1200px) {
/* contents */
}
}&lt;/p&gt;
&lt;p&gt;This translates to&lt;/p&gt;
&lt;p&gt;/* style.css &lt;em&gt;/
@media (min-width: 1200px) {
.container {
/&lt;/em&gt; contents */
}
}&lt;/p&gt;
&lt;p&gt;The breakpoint mixin is super flexible and you can make &lt;a href=&quot;http://breakpoint-sass.com/#get_started&quot; title=&quot;breakpoint sass docs&quot;&gt;ultra complicated arguments&lt;/a&gt; if you would like to.&lt;/p&gt;
&lt;h2 id=&quot;using-breakpoint-with-susy&quot;&gt;Using Breakpoint with Susy&lt;/h2&gt;
&lt;p&gt;Lets say we wanted a grid that breaks like this. Initially, all divs would span the full width of the browser, and after 900px, they would be laid out in the 10 colum AG grid layout like in the previous tutorial.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy-break.jpg&quot; alt=&quot;Susy Breakpoint 1&quot; title=&quot;Susy Breakpoint 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;To accomplish this, you just have to add the breakpoint correctly in the stylesheet. An example of AG1 would be&lt;/p&gt;
&lt;p&gt;.ag1 {
// Mobile Styles here
@include breakpoint(900px) {
@include span(2 of 10);
}
}&lt;/p&gt;
&lt;p&gt;We didn’t need add any specific styles to the mobile section.  since A div would take up a width of 100% by default, At 900px, we have to add a media query (I call them breakpoints for short) , and make it float according to the susy grid.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;breakpoint(900px)&lt;/code&gt; translate to &lt;code&gt;min-width(900px)&lt;/code&gt; in media queries, &lt;code&gt;span(2 of 10)&lt;/code&gt; will only trigger when the browser width is larger than 900px. This workflow is also perfect for mobile first styling.&lt;/p&gt;
&lt;p&gt;By the same theory, AG2 and AG3 would use similar styles:&lt;/p&gt;
&lt;p&gt;.ag2 {
// Mobile Styles here
@include breakpoint(900px) {
@include span(6 of 10);
@include clearfix;
}
}&lt;/p&gt;
&lt;p&gt;.ag3 {
// Mobile Styles here
@include breakpoint(900px) {
@include span(2 of 10 last);
}
}&lt;/p&gt;
&lt;p&gt;Okay thats all nice and good. But what if you wanted something slightly more complicated?&lt;/p&gt;
&lt;p&gt;Note: If you don’t want to use breakpoint by any chance, you can still use plain old queries with the same steps.&lt;/p&gt;
&lt;h2 id=&quot;having-multiple-breakpoints&quot;&gt;Having Multiple Breakpoints&lt;/h2&gt;
&lt;p&gt;Say you wanted to have a content-sidebar sort of breakpoint before eventually transitioning to the AG10 grid layout.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy-break2.jpg&quot; alt=&quot;Susy breakpoint 2&quot; title=&quot;Susy breakpoint 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is a little more challenging compared to the previous breakpoint. Because AG1 seems to have switched positions all the way to the right! How did that happen?!&lt;/p&gt;
&lt;p&gt;There is a little neat trick over here.&lt;/p&gt;
&lt;p&gt;AG1 and AG3 in the tablet view takes up 2 columns of 6 while AG2 takes up 4 columns. You also know that we wanted AG1 to be above AG3 on the right column.&lt;/p&gt;
&lt;p&gt;The trick lies with the &lt;code&gt;last&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;Let me show you the code first.&lt;/p&gt;
&lt;p&gt;.ag1 {
// tablet view
@include breakpoint(600px) {
@include span(2 of 6 last);
}
// desktop view
@include breakpoint(900px) {
@include span(2 of 10);
}
}&lt;/p&gt;
&lt;p&gt;.ag2 {
@include clearfix;
// tablet view
@include breakpoint(600px) {
@include span(4 of 6);
}
// desktop view
@include breakpoint(900px) {
@include span(6 of 10);
}
}&lt;/p&gt;
&lt;p&gt;.ag3 {
// tablet view
@include breakpoint(600px) {
@include span(2 of 6 last);
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// desktop view
@include breakpoint(900px) {
  @include span(2 of 10 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Notice that in the code above, I added the &lt;code&gt;last&lt;/code&gt; keyword to the &lt;code&gt;span&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;last&lt;/code&gt; keyword tells Susy to float the element right instead of the default float left, hence allowing it to appear on the right since AG2 is floated left.&lt;/p&gt;
&lt;p&gt;At 900px however, the desktop breakpoint kicks in and tells AG1 to float left instead.&lt;/p&gt;
&lt;p&gt;/* style.css &lt;em&gt;/
@media (min-width: 600px) {
.ag1 {
width: 31.03448%;
float: right;
}
}
@media (min-width: 900px) {
/&lt;/em&gt; line 24, …/sass/styles.scss */
.ag1 {
width: 18.36735%;
float: left;
margin-right: 2.04082%;
}
}&lt;/p&gt;
&lt;p&gt;Thats the trick to it! (PS, I also expanded AG2 with some paddings and added margin bottom to AG1 in the tablet view to make it look nicer).&lt;/p&gt;
&lt;h2 id=&quot;the-susy-breakpoint-mixin&quot;&gt;The Susy-Breakpoint Mixin&lt;/h2&gt;
&lt;p&gt;Susy provides an additional &lt;code&gt;susy-breakpoint&lt;/code&gt; mixin that adds onto the breakpoint mixin, allowing a DRY-er Sass if you need to include multiple span declarations within the same breakpoint and layout.&lt;/p&gt;
&lt;p&gt;The syntax for &lt;code&gt;susy-breakpoint&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;@include susy-breakpoint(&lt;breakpoint&gt;, &lt;layout&gt;);
// breakpoint is the argument we supplied to the breakpoint mixin earlier.
// Layout is equivalent to the context&lt;/layout&gt;&lt;/breakpoint&gt;&lt;/p&gt;
&lt;p&gt;In this case, the following two codes are equivalent. Notice how the context (of 6) is lifted up from the span and placed into the breakpoint instead.&lt;/p&gt;
&lt;p&gt;.ag1 {
@include susy-breakpoint(600px, 6) {
@include span (2 last);
}
}&lt;/p&gt;
&lt;p&gt;.ag1 {
@include breakpoint(600px) {
@include span(2 of 6 last);
}
}&lt;/p&gt;
&lt;p&gt;I personally prefer the second method (just using breakpoint), but you can feel free to pick either version since there’s no difference in their output.&lt;/p&gt;
&lt;p&gt;At this point, you may have noticed that it can be a little unsightly to allow the fluid container to go full width if desktop sizes are huge. Lets fix that.&lt;/p&gt;
&lt;h2 id=&quot;constraining-the-container&quot;&gt;Constraining the Container&lt;/h2&gt;
&lt;p&gt;Since we’re using the fluid grid, constraining the container is super easy.&lt;/p&gt;
&lt;p&gt;.container {
@include container(1140px);
}&lt;/p&gt;
&lt;p&gt;Basically this would give the container a &lt;code&gt;max-width&lt;/code&gt; of 1140px. You could also write the same thing like this, whichever floats your boat.&lt;/p&gt;
&lt;p&gt;.container {
@include container;
max-width: 1140px;
}&lt;/p&gt;
&lt;p&gt;Unfortunately, we can’t do the same with a static grid, because Susy handles all the math and calculates the max width at the same time. To deal with static grids, we have to use a slightly different approach.&lt;/p&gt;
&lt;p&gt;Lets leave that for the next tutorial.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Complete Tutorial to Susy 2</title>
    <link href="https://zellwk.com/blog/susy2-tutorial/"/>
    <updated>2014-04-14T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/susy2-tutorial/</id>
    <content type="html">&lt;p&gt;Susy is a helper tool that lets you created ultra customizable grids on the fly easily.&lt;/p&gt;
&lt;p&gt;Its been a while since Susy 2 is officially released. If you loved Susy 1, you will definitely love to use Susy 2 because it offers so much more flexibility.&lt;/p&gt;
&lt;p&gt;This is a two part tutorial for Susy 2, and in this tutorial, I will be sharing with you how to create the Complex AG Grid with Susy 2.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;why-susy%3F&quot;&gt;Why Susy?&lt;/h2&gt;
&lt;p&gt;As I mentioned, Susy is a helper tool that lets you create any kind of grids easily without the need do a ton of math. The beauty about Susy is that it separates presentational CSS from the HTML.&lt;/p&gt;
&lt;p&gt;If you have used traditional grid frameworks like Foundation and Bootstrap before, you already know that the grids that come with these frameworks already have fixed widths and breakpoints. Furthermore, classes have to be added to the HTML if you decide to change your layout.&lt;/p&gt;
&lt;p&gt;Susy removes this layer altogether. You can immediately target any css class and apply a grid to it.&lt;/p&gt;
&lt;p&gt;Yeah I know this is totally abstract and its difficult to grasp. Instead of only talking about theory, we are going to use Susy 2 to help us build a complicated grid system devised by Arnaud Guera (AG) that uses 10 columns. This grid looks like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy2-1.png&quot; alt=&quot;10 column AG grid with susy 2&quot; title=&quot;10 column AG grid with susy 2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;installing-susy-2&quot;&gt;Installing Susy 2&lt;/h2&gt;
&lt;h3 id=&quot;if-you-don%E2%80%99t-already-have-susy-installed&quot;&gt;If You Don’t Already Have Susy Installed&lt;/h3&gt;
&lt;p&gt;Susy requires you to have both Sass installed. If you don’t have them installed, you can install them with the following commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install sass
$ sudo gem install susy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;if-you-already-have-susy-installed&quot;&gt;If You Already Have Susy Installed&lt;/h3&gt;
&lt;p&gt;If you already have Susy installed and have Ruby RVM on your system, you can update the gems.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this doesn’t work, it means you need to try the next method , or &lt;a href=&quot;http://rvm.io/rvm/install&quot;&gt;install Ruby RVM&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;The second method to installing Susy 2 is a little more manual. Its to uninstall the two gems mentioned above and reinstall them. Its the best way to avoid any errors if you didn’t go by the update route.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem uninstall susy
$ sudo gem uninstall sass
$ sudo gem install sass
$ sudo gem install susy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you’re done installing Susy 2, we can now begin setting Susy 2 up.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-susy-2&quot;&gt;Setting Up Susy 2&lt;/h2&gt;
&lt;p&gt;Likewise to the previous version, you need to require susy in the config.rb file if you were to use Susy 2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config.rb
require &#39;susy&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You now need to import and use Susy in your stylesheets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Importing Susy
@import &#39;susy&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Susy 2 has &lt;a href=&quot;http://susydocs.oddbird.net/en/latest/settings/#global-defaults&quot; title=&quot;Susy global defaults&quot;&gt;list of global defaults&lt;/a&gt; that are built into it. You can change the defaults with the code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Configuring Susy 2 Global Defaults
$susy: (
  key : value
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll want to play around with the defaults and try them out depending on how you want to work with Susy. I’ll go a little deeper regarding these defaults in another tutorial. You can use Susy with the defaults immediately now, but since I love working with border-box and rem units, I’m going to change some defaults.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$susy: (
  global-box-sizing: border-box,
  use-custom: (rem: true
    )
  );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Susy uses a fluid layout by default. This means that width of the outer containing element will be 100%.&lt;/p&gt;
&lt;p&gt;If you like to use Susy with fixed widths at certain breakpoints instead, change the &lt;code&gt;math&lt;/code&gt; key to &lt;code&gt;static&lt;/code&gt;. The major difference between these two modes come in when responsifying your styles, which will be covered in another tutorial.&lt;/p&gt;
&lt;p&gt;Also note that you’ll have to include normalize and compass into the project as well. In all, the initial configuration up to this part should be this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import &amp;quot;normalize&amp;quot;;
@import &amp;quot;compass&amp;quot;;
@import &amp;quot;susy&amp;quot;;

// Configuring Susy Defaults
$susy: (
  global-box-sizing: border-box,
  use-custom: (rem: true
    )
  );

@include border-box-sizing;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;html-and-css-for-the-ag-grid&quot;&gt;HTML And CSS For The AG Grid&lt;/h2&gt;
&lt;p&gt;Since we’re going to create the same AG Grid as with the &lt;a href=&quot;https://zellwk.com/blog/a-complete-tutorial-to-susy/&quot; title=&quot;Susy 1 Tutorial&quot;&gt;Susy 1 Tutorial&lt;/a&gt; , the html will remain exactly the same as before.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;The 10 column complex nested grid AG test&amp;lt;/h1&amp;gt;

&amp;lt;div class=&amp;quot;ag ag1&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 1&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag1 --&amp;gt;

&amp;lt;!-- ag4 to ag7 are nested within ag2.--&amp;gt;
&amp;lt;div class=&amp;quot;ag ag2&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 2&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag4&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 4&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag5&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 5&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag6&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 6&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;!-- ag8, ag9 and ag10 are nested within ag7 --&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag7&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 7&amp;lt;/h2&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag8&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 8&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag9&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 9&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag10&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 10&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- /ag7 --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag2 --&amp;gt;

&amp;lt;div class=&amp;quot;ag ag3&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 3&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag3 --&amp;gt;

&amp;lt;/div&amp;gt;
&amp;lt;!-- /container --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply speaking, whenever something is found within another div, you should nest it within the previous div.&lt;/p&gt;
&lt;p&gt;In this case, AG 4 to AG 7 will be nested under AG 2 while AG 8, AG 9 and AG 10 are nested under AG 7.&lt;/p&gt;
&lt;p&gt;The CSS for the grid backgrounds will remain the same as well.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 - Styles for AG grids &amp;amp; Container
 */

.container {
  background-color: #fbeecb;
}

.ag1, .ag3 {
  background-color: #71dad2;
}

.ag2 {
  background-color: #fae7b3;
}

.ag4,.ag5,.ag8,.ag9 {
  background-color: #ee9e9c;
}

.ag6 {
  background-color: #f09671;
}

.ag7 {
  background-color: #f6d784;
}

.ag10 {
  background-color: #ea9fc3;
}

/**
 - Text Styles
 */
h2 {
  text-align: center;
  font-size: 1rem;
  font-weight: normal;
  padding-top: 1.8rem;
  padding-bottom: 1.8rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we’re all prepped up, we can dive into the some more Susy details.&lt;/p&gt;
&lt;h2 id=&quot;important-susy-2-mixins-and-functions&quot;&gt;Important Susy 2 Mixins and Functions&lt;/h2&gt;
&lt;p&gt;Before diving straight into using Susy 2 for the grid, lets go through three very important mixins and functions used in Susy. If you understood these things, you can do anything with Susy.&lt;/p&gt;
&lt;h3 id=&quot;the-container-mixin&quot;&gt;The Container Mixin&lt;/h3&gt;
&lt;p&gt;The first thing you need to do is to define a container for Susy to do its magical calulations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// The Container Mixin
@include container( [&amp;lt;length&amp;gt;] );

// Note: Optional arguments are enclosed in []
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The container mixin has an optional length argument, with allows you to set a max width to the container. If this number is not found, Susy will default to &lt;code&gt;max-width: 100%;&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;If you are using static grids, Susy advises that you should make it auto instead and let Susy calculate the max width for you.&lt;/p&gt;
&lt;p&gt;To keep it auto, you can omit the length argument.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@include container;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;span-(mixin)&quot;&gt;Span (Mixin)&lt;/h3&gt;
&lt;p&gt;The span mixin is the heart of Susy layouts. &lt;a href=&quot;http://susydocs.oddbird.net/en/latest/toolkit/#span-mixin&quot; title=&quot;Susy span mixin&quot;&gt;Susy made it extremely flexible&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I generally follow the Susy way for writing my layouts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@include span( &amp;lt;width&amp;gt; [&amp;lt;wide / wider&amp;gt;] of &amp;lt;layout&amp;gt; [&amp;lt;last&amp;gt;] );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you used Susy 1, you would have noticed that this is very similar to the &lt;code&gt;span-column&lt;/code&gt; mixin, with very subtle differences.&lt;/p&gt;
&lt;p&gt;Let me break this down and full explain whats happening here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;width&amp;gt;&lt;/code&gt; refers to the number of columns the element going to take up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;lt;wide / wider&amp;gt;]&lt;/code&gt;is a optional argument lets you expand the width of the column to include 1 or 2 more gutters respectively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of&lt;/code&gt; is a keyword to let Susy know that the layout is coming up.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;layout&amp;gt;&lt;/code&gt; is the context of the container, along with other optionals that define the layout. (Context refers to the number of columns the parent container is made up of).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;lt;last&amp;gt;]&lt;/code&gt; is an optional argument that tells Susy that this element is supposed to be the last item in the row.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of this at work is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This has a width of 3 columns + 1 gutter, out of 9 columns and is supposed to be the last item within the context.
.some-selector {
  @include span(3 wide of 9 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;span-(function)&quot;&gt;Span (Function)&lt;/h3&gt;
&lt;p&gt;The Span function is similar to the span mixin, with the exception that it only returns the width of the element. You will only need the &lt;code&gt;&amp;lt;width&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;wide/ wider&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;layout&amp;gt;&lt;/code&gt; here.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This has a width of 3 columns out of 9 columns
.some-selector {
  width: span(3 of 9);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This span function makes life a ton easier by not having the need to remember any margins or padding mixins that susy previously uses. Now, you can just use the span function to get the correct width to pad.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This has a padding of 1 column out of 9 columns
.some-selector {
  padding-left: span(1 of 9);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;gutter-function&quot;&gt;Gutter Function&lt;/h3&gt;
&lt;p&gt;The gutter function takes only one argument, the context.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This outputs margin that equals to 1 gutter width in a 9 column layout
.some-selector {
  margin-right: gutter(9);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are all the important functions you need to know when using Susy 2.&lt;/p&gt;
&lt;h2 id=&quot;building-the-ag-grid-with-susy-2&quot;&gt;Building The AG Grid With Susy 2&lt;/h2&gt;
&lt;p&gt;The first the to do when using Susy is to establish the container. Our container in this case is &lt;code&gt;.container&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  @include container;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we also know that the container is going to hold floated elements, we’re gonna give it a clearfix.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  // This is the default clearfix from Compass. You can opt to use other clearfix methods
  @include clearfix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first need to create the layouts on AG1, AG2 and AG3. Upon inspection, the whole container is supposed to take up 10 columns, where AG1 and 3 are to take up 2 columns each and the rest is taken up by AG2. AG2 needs a clearfix as well since its going to be a container for AG 4 to AG 10.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag1 {
  @include span(2 of 10);
}

.ag2 {
  @include span(6 of 10);
  @include clearfix;
}

.ag3 {
  @include span(2 of 10 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you take a look at the output now, you should see this&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy2-2.png&quot; alt=&quot;&quot; title=&quot;Susy 2 with first 3 containers&quot;&gt;&lt;/p&gt;
&lt;p&gt;AG4 and AG5 are nested within AG2 and they each hold a width of 3 columns each&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag4 {
  @include span(3 of 6);
}

.ag5 {
  @include span(3 of 6 last);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can make use of the last mixin and write it this way. The last mixin just changes that element to be the last in the row.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag4,.ag5 {
  @include span(3 of 6);
}
.ag5 {
  @include last;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AG4 and AG5 should now fall nicely in place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy2-3.png&quot; alt=&quot;&quot; title=&quot;Susy 2 with 5 containers&quot;&gt;&lt;/p&gt;
&lt;p&gt;AG6 holds 2 columns and AG 7 holds 4 columns, and AG 7 is the last item in the row. You should probably know the drill by now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag6 {
  @include span(2 of 6);
}

.ag7 {
  @include span(4 of 6 last);
  @include clearfix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy2-4.png&quot; alt=&quot;Susy 2 with all 10 AG containers&quot; title=&quot;Susy 2 with all 10 AG containers&quot;&gt;&lt;/p&gt;
&lt;p&gt;And lets finish up the last few items for the AG Grid&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag8 {
  @include span(2 of 4);
}

.ag9 {
  @include span(2 of 4 last);
}

.ag10 {
  clear: both;
  // Alternatively, you can now use the span mixin with the full keyword to tell Susy this should be a 100% width
  // @include span(full);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/04/susy2-1.png&quot; alt=&quot;10 column AG grid with susy 2&quot; title=&quot;10 column AG grid with susy 2&quot;&gt;&lt;/p&gt;
&lt;p&gt;That was how you could use Susy 2 in the nutshell.&lt;/p&gt;
&lt;p&gt;In the next article, we will go through how to build a responsive template with Susy 2 using the AG Grid as an example as well.&lt;/p&gt;
&lt;p&gt;I hope this was helpful for you. If you have any comments or questions, leave them down and I’ll reply as soon as I can.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Complete Guide to @font-face</title>
    <link href="https://zellwk.com/blog/font-face/"/>
    <updated>2014-03-31T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/font-face/</id>
    <content type="html">&lt;p&gt;Custom fonts changes how typography looks on your website. Using the correct font can be a super big impact on how your website feels to visitors.&lt;/p&gt;
&lt;p&gt;You will have to rely on the @font-face if you want to use a custom font that is not hosted in any webfont service.&lt;/p&gt;
&lt;p&gt;In this post, I’ll share how to add your custom font to your website using the @font-face rule.&lt;/p&gt;
&lt;p&gt;Along with it, I’ll also share how to make slight adjustments to the generated css properties so you can easily use them on your website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;converting-your-typeface-into-a-webfont&quot;&gt;Converting Your Typeface Into a Webfont&lt;/h2&gt;
&lt;p&gt;The first step to converting your typefaces is to make sure that you have the font file in either &lt;code&gt;.otf&lt;/code&gt; or &lt;code&gt;.ttf&lt;/code&gt; format. Feel free to check out &lt;a href=&quot;http://www.fontsquirrel.com/&quot; title=&quot;Font Squirrel&quot;&gt;Font Squirrel&lt;/a&gt; for some free fonts to use for this tutorial.&lt;/p&gt;
&lt;p&gt;Once you get hold of your font, head over to the &lt;a href=&quot;http://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel Webfont Generator&lt;/a&gt; and upload your fonts into the generator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/ff-1.png&quot; alt=&quot;Uploading Fira Sans into Font Squirrel&quot; title=&quot;Uploading Fira Sans into Font Squirrel&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’ve used the Fira Sans Font for this tutorial. The weights that I’ve used are regular, regular italic, bold and bold italic.&lt;/p&gt;
&lt;p&gt;You should be able to download a webfont folder with the following items&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/ff-2.png&quot; alt=&quot;Webfont kit from Font Squirrel&quot; title=&quot;Webfont kit&quot;&gt;&lt;/p&gt;
&lt;p&gt;This list may look daunting, but it really isn’t.&lt;/p&gt;
&lt;p&gt;There is a need to convert every webfont you uploaded into 4 different formats: &lt;code&gt;eot&lt;/code&gt;, &lt;code&gt;woff&lt;/code&gt;, &lt;code&gt;ttf&lt;/code&gt; and &lt;code&gt;svg&lt;/code&gt; to make sure that it is usable for every browser. We had 4 fonts, hence 16 files. From here, you can remove all demo.html files, the speciment_files folder and the generator_config.txt.&lt;/p&gt;
&lt;h2 id=&quot;copy-the-webfont-into-your-stylesheet&quot;&gt;Copy The Webfont Into Your Stylesheet&lt;/h2&gt;
&lt;p&gt;Typically, I place the fonts beside my css directory like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/ff-3.png&quot; alt=&quot;Webfont in project&quot; title=&quot;Webfont in project&quot;&gt;&lt;/p&gt;
&lt;p&gt;Open up the stylesheet.css file in the webfont folder and you should see 4 @font-face declarations that look somewhat like this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
    font-family: &#39;fira_sans_otbold&#39;;
    src: url(&#39;firasansot-bold-webfont.eot&#39;);
    src: url(&#39;firasansot-bold-webfont.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),
         url(&#39;firasansot-bold-webfont.woff&#39;) format(&#39;woff&#39;),
         url(&#39;firasansot-bold-webfont.ttf&#39;) format(&#39;truetype&#39;),
         url(&#39;firasansot-bold-webfont.svg#fira_sans_otbold&#39;) format(&#39;svg&#39;);
    font-weight: normal;
    font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy all the @font-face rules into your main css file delete the styles.css this generated style.css file.&lt;/p&gt;
&lt;p&gt;Depending on where you have placed the font files, you might have to change the &lt;code&gt;src&lt;/code&gt; property to point the css to the correct files. If you had opted to follow the structure I posted above, then you will have to add &lt;code&gt;../fonts/&lt;/code&gt; at the start of all  urls.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@font-face {
    font-family: &#39;fira_sans_otbold&#39;;
    src: url(&#39;../fonts/firasansot-bold-webfont.eot&#39;);
    src: url(&#39;../fonts/firasansot-bold-webfont.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),
         url(&#39;../fonts/firasansot-bold-webfont.woff&#39;) format(&#39;woff&#39;),
         url(&#39;../fonts/firasansot-bold-webfont.ttf&#39;) format(&#39;truetype&#39;),
         url(&#39;../fonts/firasansot-bold-webfont.svg#fira_sans_otbold&#39;) format(&#39;svg&#39;);
    font-weight: normal;
    font-style: normal;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you should be able to use the fonts by using the &lt;code&gt;font-family&lt;/code&gt; attribute. If you wanted to use the Fira Sans Bold in your website, you could have typed &lt;code&gt;font-family: fira_sans_otbold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We now have Fira Sans Regular, Fira Sans Regular Italic, Fira Sans Bold and Fira Sans Bold Italic. Wouldn’t it be much better if we can make it bold simply with &lt;code&gt;font-weight: bold&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let’s make some changes to do that.&lt;/p&gt;
&lt;h2 id=&quot;making-these-webfonts-much-easier-to-use&quot;&gt;Making These Webfonts Much Easier To Use&lt;/h2&gt;
&lt;p&gt;You may have noticed that there are two additional properties in the @font-face rule above. This is precisely what we’re going to use to make it easier to use the webfonts in the project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* Note: I have removed the urls for easier reading. They should still be in your css file. */
@font-face {
    font-family: &#39;Fira Sans&#39;;
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: &#39;Fira Sans&#39;;
    font-weight: normal;
    font-style: italic;
}

@font-face {
    font-family: &#39;Fira Sans&#39;;
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: &#39;Fira Sans&#39;;
    font-weight: bold;
    font-style: italic;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea here is to convert all &lt;code&gt;font-family&lt;/code&gt; properties into Fira Sans, and attach specific font weight and styles to it.&lt;/p&gt;
&lt;p&gt;After adjusting the above, you should be able to use the different weights and styles just like you normally would.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
  font-family: &#39;Fira Sans&#39;, sans-serif;
}

p {
  font-weight: normal;
  font-style: normal;
}

em {
  font-style: italic;
}

strong {
  font-weight: bold;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anything wrapped in between &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; tags will now appear bold. Similarly, anything wrapped between &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/em&amp;gt;&lt;/code&gt; tags will now appear italicized.&lt;/p&gt;
&lt;h2 id=&quot;ending-it-off&quot;&gt;Ending It Off&lt;/h2&gt;
&lt;p&gt;The @font-face rules gives you the flexibility to use very different typefaces for your website, and thats way awesome. But there is one thing you should take note.&lt;/p&gt;
&lt;p&gt;When using @font-face, you should try to only include fonts you need since they can slow down page load speeds dramatically. Whenever possible, try to use fonts hosted on CDN services like Google Webfonts and Typekit instead of using @font-face to host your own fonts.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to structure HTML for an actual website (Part 2)</title>
    <link href="https://zellwk.com/blog/html-structure-2/"/>
    <updated>2014-03-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/html-structure-2/</id>
    <content type="html">&lt;p&gt;This is a continuation of the series on learning to write HTML for an actual website for the first time. We have looked at how to write html structure for the big picture with wrappers in the previous section, and we will be diving into the smaller details in this section.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zell-weekeat.com/html-structure/&quot; title=&quot;HTML Structure for an actual website&quot;&gt;The first part can be found here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-micro-details&quot;&gt;The Micro Details&lt;/h2&gt;
&lt;p&gt;Micro Details refer to the smaller pieces on the web and how they are placed. One example of such a smaller piece is the navigation while another is an article.&lt;/p&gt;
&lt;p&gt;As you may have imagined, navigations and articles are wildly different, and they require very different markups. You’ll also realize that this applies to every other group of elements as well!&lt;/p&gt;
&lt;p&gt;The question is: &lt;strong&gt;How should you write markup for whatever you’re trying to create?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-answer&quot;&gt;The Answer&lt;/h2&gt;
&lt;p&gt;There are really no hard and fast rules to this question. You can use HTML to markup things in anyway you like, as long as they seem reasonable.&lt;/p&gt;
&lt;p&gt;However, precisely because you can write anything you want in HTML, there has been an ongoing battle of &lt;a href=&quot;http://html5doctor.com/lets-talk-about-semantics/&quot;&gt;semantics&lt;/a&gt;(The meaning of things used in HTML).&lt;/p&gt;
&lt;p&gt;Lets take the navigation as an example and walk through the steps&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/11.png&quot; alt=&quot;picture of a navigation area&quot; title=&quot;picture of a navigation area&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first step to finding out what kind of markup and how many levels are required. You should be familiar with this because this is exactly what you have done the last week.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/21.png&quot; alt=&quot;Navigation breakdown&quot; title=&quot;Navigation breakdown&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s quite easy to see that a minimum of two levels are required for this to happen.&lt;/p&gt;
&lt;p&gt;The simplest way that you could write HTML for this nav is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;nav&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;Blog&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Work&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;About&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;Contact&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You then noticed that each item is supposed to be a link. In this case, you can either replace each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag, or simply nest the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag within the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are the two ways in code form.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- option 1 --&amp;gt;
&amp;lt;div class=&amp;quot;nav&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Work&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;!-- option 2 --&amp;gt;
&amp;lt;div class=&amp;quot;nav&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Work&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both ways work, and there is no right or wrong answer.&lt;/p&gt;
&lt;p&gt;If you go with semantics, option 2 is preferred because &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags are usually meant for inline elements, and &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; are for layouts.&lt;/p&gt;
&lt;p&gt;If you dive deeper into semantics, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; are not preferred because &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; doesn’t have a meaning to itself. You need to find something that explains this navigation even more.&lt;/p&gt;
&lt;p&gt;Look at it from another way, a navigation is actually just a list of links. So if you care about semantics, a list works much better.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;nav&amp;quot;&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Work&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the HTML markup has some sort of meaning when you look at it, and its easy to discern this part from others.&lt;/p&gt;
&lt;p&gt;To make it even better, HTML 5 has provided a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element for navigations. The markup can be improved to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Work&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you read the HTML now, it is incredibly clear what this portion is saying, compared to what you have above. It is clearly say thing that this is a navigation area. Within the navigation area, there is a list of 4 items, and each item consist of a link to some other area.&lt;/p&gt;
&lt;h2 id=&quot;does-semantic-matter%3F&quot;&gt;Does Semantic Matter?&lt;/h2&gt;
&lt;p&gt;Yes and no.&lt;/p&gt;
&lt;p&gt;If you are comfortable writing your own HTML. I would suggest to be as semantic as possible, because it helps alot when you’re trying to debug your own code.&lt;/p&gt;
&lt;p&gt;However, if you’re just starting out, don’t worry too much about semantics. Almost everything can be replaced with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, and  HTML was like that in the past.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; works and functions exactly the same as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. If you’re confused about HTML, there’s no point trying to dig a deep hole into semantics yet. Work on understanding layouts and making them appear the way you want it with CSS first.&lt;/p&gt;
&lt;p&gt;When you feel that you’re comfortable learning more, view other people’s source codes and try renaming some of your HTML stuff into more semantic blocks.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to structure HTML for an actual website</title>
    <link href="https://zellwk.com/blog/html-structure/"/>
    <updated>2014-03-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/html-structure/</id>
    <content type="html">&lt;p&gt;One of the first few major hurdles to creating an actual website if you’re just starting out getting clear how you should structure your HTML content. Today, we’re going to do a dive deep into this topic.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;understanding-how-to-structure-html&quot;&gt;Understanding how to Structure HTML&lt;/h2&gt;
&lt;p&gt;You need to be familiar with two kinds of structures when writing HTML.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Big Picture&lt;/strong&gt; – how blocks and wrappers are used in the website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Micro Details&lt;/strong&gt; – within each block of content, what is the best way to present each group of information.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll share with you how I notice and code the big picture in this article, and we can dive into the details in a followup article.&lt;/p&gt;
&lt;h2 id=&quot;the-big-picture&quot;&gt;The Big Picture&lt;/h2&gt;
&lt;p&gt;When trying to understand the big picture, look at the whole website in general and try to look for places wrappers are required. Its much easier to show this with an example, so I’ll use my blog as one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/1.png&quot; alt=&quot;HTML Header&quot; title=&quot;HTML Header&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first is an image of the top portion of my blog.&lt;/p&gt;
&lt;p&gt;The first thing you should try to locate are the obvious areas, namely the header, content, sidebar (if there are) and footer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/1-1.png&quot; alt=&quot;HTML Structure Header&quot; title=&quot;HTML Structure Header&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lets do the same for the footer as well&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/2.png&quot; alt=&quot;Footer image&quot; title=&quot;Footer image&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this case, the obvious area are as follows&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/2-1.png&quot; alt=&quot;HTML structure footer&quot; title=&quot;HTML structure footer&quot;&gt;&lt;/p&gt;
&lt;p&gt;From these two images, you may have realized that there some have used similar structures (Hint: content and sidebar are two examples).&lt;/p&gt;
&lt;p&gt;So if we put them alltogether in one image, the site would look something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/3.jpg&quot; alt=&quot;&quot; title=&quot;HTML structure 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;But, if you look closely at the structure, you’ll also realize that that is a wrapper that contains the left and right blocks, and this wrapper repeats.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/3-1.png&quot; alt=&quot;html structure wraps&quot; title=&quot;html structure wraps&quot;&gt;&lt;/p&gt;
&lt;p&gt;So effectively, the website structure should look something like this&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/3-2.jpg&quot; alt=&quot;HTML structure 3.2&quot; title=&quot;HTML structure 3.2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;writing-the-code&quot;&gt;Writing the Code&lt;/h2&gt;
&lt;p&gt;Once you understand how the picture looks like, its incredibly simple to write the HTML. You always go from top to bottom, left to right. If there is a something within a box, you drill deeper, using the same procedure.&lt;/p&gt;
&lt;p&gt;In this case, the Header will be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;!-- Note that I left the logo out for now, we will come to that in the next article  --&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main area will then have the following html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the footer is something like this, very similar to main&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a basic structure to the website&lt;/p&gt;
&lt;h2 id=&quot;making-the-code-better&quot;&gt;Making the Code Better&lt;/h2&gt;
&lt;p&gt;There are a few improvements if we wanted to make the code above a little better.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The header content area is actually a navigation, hence we should give either a nav element or a nav class&lt;/li&gt;
&lt;li&gt;In Main, Content should almost always be followed by sidebar. This is for responsive purposes because content is much more important. The only exception where it is okay to place sidebar above in the HTML is when there are CSS measures put in place to ensure content shows up first on mobile.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you made the above code adjustments, what you’ll have is similar to this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;!-- nav class is added here --&amp;gt;
    &amp;lt;div class=&amp;quot;content nav&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;!-- content and sidebar are swapped. They can be made to show in the order above with CSS --&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;footer&amp;gt;
  &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;sidebar&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;sidebar&lt;/code&gt; classes are here to help you see what these things are intuitively. You can change any of the above classes to anything you want, and it will still work.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this gives you an insight to how you would structure the layout when you write HTML for the first time. As soon as you understand how these big picture layouts are used, CSS becomes much easier to handle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; This is a little sneak peek to a course that I’ve been cooking up recently. In the course, you will learn how to make websites from scratch, and also understand important considerations behind them. If you like this post and would like to find out more about how I can help you with my course, &lt;a href=&quot;https://zellwk.com/contact&quot;&gt;send me an email&lt;/a&gt; and we can talk more.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding and Using CSS Positions</title>
    <link href="https://zellwk.com/blog/css-positions/"/>
    <updated>2014-03-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-positions/</id>
    <content type="html">&lt;p&gt;CSS Positions allow you to manipulate how elements are positioned to achieve many different visual effects. In this post today, we’re going a little deeper to understand CSS positioning.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;positioning-values&quot;&gt;Positioning Values&lt;/h2&gt;
&lt;p&gt;CSS Position allows up to 5 different values. But essentially only 4 values are commonly used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;div {
  position: static; /* default */
  position: relative;
  position: absolute;
  position: fixed;
  position: inherit; /* Not very common */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;static&quot;&gt;Static&lt;/h3&gt;
&lt;p&gt;All positions are static by default. Meaning they take up the appropriate amount of space they are supposed to take up. Its the default positioning value and every element will use this value, unless otherwise stated.&lt;/p&gt;
&lt;h3 id=&quot;relative&quot;&gt;Relative&lt;/h3&gt;
&lt;p&gt;Position relative allows you to do two different things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To nudge elements in different directions with &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; values.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When set to position relative, elements take up the same amount of space at the same exact position it was supposed to take as if its position was static.&lt;/p&gt;
&lt;p&gt;It can however, appear to be pushed to a different location visually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/posr.jpg&quot; alt=&quot;&quot; title=&quot;position relative&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Allow a child element to be positioned absolutely with reference to it. (See below)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;absolute&quot;&gt;Absolute&lt;/h3&gt;
&lt;p&gt;Position absolute takes the document out of the document flow. This means that it no longer takes up any space like what static and relative does.&lt;/p&gt;
&lt;p&gt;When position absolute is used on an element, it is positioned absolutely with reference to the closest parent that has a position relative value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/posa.jpg&quot; alt=&quot;&quot; title=&quot;position absolute&quot;&gt;&lt;/p&gt;
&lt;p&gt;If there are no parent elements that has a relative position, then the absolutely positioned element will take its reference from the browser window.&lt;/p&gt;
&lt;h3 id=&quot;fixed&quot;&gt;Fixed&lt;/h3&gt;
&lt;p&gt;Similar to position absolute, an element that has fixed position is taken out of the document flow. The major difference is: elements with position fixed is always positioned relative to the browser window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/03/posf.jpg&quot; alt=&quot;&quot; title=&quot;position fixed&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;other-attributes-available-for-positioning&quot;&gt;Other Attributes available for positioning&lt;/h2&gt;
&lt;p&gt;Once an element is set to position relative, absolute or fixed, some other positioning attributes become available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt; - Allows you to set the edge of the element with reference to its containing element. These values can be negative if you want to place them just outside of their containing elements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt; - Z-index controls the vertical stacking order of elements, and take only numbered integers. The higher the integer, the more forward this element is. (Somewhat like the “bring forward/backward” thing in powerpoint and photoshop).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>How to use Mailchimp API in Wordpress</title>
    <link href="https://zellwk.com/blog/mailchimp-api-in-wordpress-1/"/>
    <updated>2014-03-03T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/mailchimp-api-in-wordpress-1/</id>
    <content type="html">&lt;p&gt;There may have been times where you had to update Mailchimp regarding changes in user particulars. Most of the time, a plugin like Autochimp works incredibly well.&lt;/p&gt;
&lt;p&gt;Unfortunately, non of these plugins work exceptionally well if you need to introduce complex things like interest groups.&lt;/p&gt;
&lt;p&gt;In this article, I’ll show you how to set up the Mailchimp API with Wordpress, and how you can use it to update a user interest group when he changes his profile. You’ll learn how to use the Mailchimp API for other purposes along the way.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You should already have a mailchimp account and at least one interest group set up before attempting this.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-a-mailchimp-api-wrapper&quot;&gt;Setting up a Mailchimp API Wrapper&lt;/h2&gt;
&lt;p&gt;The first step to use Mailchimp is to set up an &lt;a href=&quot;http://apidocs.mailchimp.com/api/downloads/&quot; title=&quot;mailchimp wrappers&quot;&gt;API Wrapper&lt;/a&gt; that allows you to quickly and easily use Mailchimp’s commands.&lt;/p&gt;
&lt;p&gt;Since this tutorial is about Wordpress, we’re going to use the &lt;a href=&quot;http://apidocs.mailchimp.com/api/downloads/#php&quot; title=&quot;mailchimp php wrappers&quot;&gt;PHP Wrappers&lt;/a&gt;, particularly the version by &lt;a href=&quot;http://allinthehead.com/&quot; title=&quot;Drew Mclellan&quot;&gt;Drew McLellan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://github.com/drewm/mailchimp-api/&quot;&gt;https://github.com/drewm/mailchimp-api/&lt;/a&gt;and download the zip.&lt;/p&gt;
&lt;p&gt;Remane the folder to mailchimp and place it into your theme. (Note: It might be better to place this into a plugin, but lets work with themes for now)&lt;/p&gt;
&lt;p&gt;Then create a file called mailchimp.php within the mailchimp folder.&lt;/p&gt;
&lt;p&gt;Within mailchimp.php, we can now get ready to use Mailchimp by setting up the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// This is to tell Wordpress our file requires Drewm/MailChimp.php.
require_once( &#39;src/Drewm/MailChimp.php&#39; );
// This is for namespacing since Drew used that.
use \Drewm;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To then link it to your mailchimp account, set up the following code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Your Mailchimp API Key
$api = &#39;f3335c741cb441d9576fa6936eb45813-us3&#39;;
// Initializing the $MailChimp object
$MailChimp = new \Drewm\MailChimp($api);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re done with the setup. Now lets do something awesome.&lt;/p&gt;
&lt;h2 id=&quot;using-the-mailchimp-api&quot;&gt;Using the Mailchimp API&lt;/h2&gt;
&lt;p&gt;The way to use Drew’s API Wrapper as simple as using a method called “call”. Here’s an example to show what I mean.&lt;/p&gt;
&lt;p&gt;Right now, you’re trying to find out about “Mr Potato” is in your list. After checking the mailchimp api reference page, you see a method called “member-info”. Here’s how you would use it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$member_info = $MailChimp-&amp;gt;call(&#39;lists/member-info&#39;, array(
  &#39;id&#39; =&amp;gt; $id, // your mailchimp list id here
  &#39;emails&#39; =&amp;gt; array(
    array(&#39;email&#39; =&amp;gt; &amp;quot;mr.potato@gmail.com&amp;quot;) // Mr Potato&#39;s email here
    )
  )
);

// Essentially, what you&#39;re doing is this
$Mailchimp-&amp;gt;call(&#39;Mailchimp api method here&#39;,
  array(
  // Mailchimp required things here. Refer to Mailchimp API to have a good understanding of what is required since everything is different.
  // Note that you don&#39;t have to use your api key anymore because Drew already took care of that.
  )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats basically it!&lt;/p&gt;
&lt;p&gt;This looks simple. But looking through Mailchimp API methods is probably not so, which is the reason for the next section :)&lt;/p&gt;
&lt;h2 id=&quot;important-api-methods&quot;&gt;Important API Methods&lt;/h2&gt;
&lt;p&gt;You have to check for a few things when a member saves, just to make sure everything runs smoothly. Here’s a few methods I think are important.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;list/member-info&lt;/code&gt; - To find out whether member X is in your list.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list/subscribe&lt;/code&gt; - If member is not in the list, you can subscribe him.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list/update-member&lt;/code&gt; - If member is in the list, you can go ahead and update&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list/interest-groupings&lt;/code&gt; - Since we’re working with interest groups, we need to get the interest group id from here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After understanding which methods you need, you can now nail this in code. In the next post, I’ll walk through the steps of using these methods in wordpress.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Compass Vertical Rhythms</title>
    <link href="https://zellwk.com/blog/compass-vertical-rhythm/"/>
    <updated>2014-02-24T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/compass-vertical-rhythm/</id>
    <content type="html">&lt;p&gt;Vertical Rhythms are part and parcel of good web design. Although they are important, they can be an incredibly chore to calculate.&lt;/p&gt;
&lt;p&gt;Luckily, Compass has a great vertical rhythm module that helps clears this mess up.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;compass-vertical-rhythm&quot;&gt;Compass Vertical Rhythm&lt;/h2&gt;
&lt;p&gt;Compass requires the use of &lt;a href=&quot;http://sass-lang.com/&quot; title=&quot;Sass&quot;&gt;Sass&lt;/a&gt;, a css preprocessor. If you’re not sure whether you want to start using a preprocessor like Sass, &lt;a href=&quot;http://zellwk.com/blog/how-to-organize-and-edit-your-css-painlessly/&quot;&gt;check out one of my previously written articles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://compass-style.org/reference/compass/typography/vertical_rhythm/&quot; title=&quot;Compass vertical rhythm&quot;&gt;Compass Vertical Rhythm&lt;/a&gt; reference is great, but may possibly overwhelm if you’re new to it.&lt;/p&gt;
&lt;p&gt;In this post, we’re going to talk about how to use this powerful  addon.&lt;/p&gt;
&lt;p&gt;Note: You need to have the alpha version of Compass installed to before this tutorial will work. You can install compass alpha with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo gem install compass --pre
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuring-vertical-rhythms&quot;&gt;Configuring Vertical Rhythms&lt;/h2&gt;
&lt;p&gt;The first step to using Compass vertical rhythms is to configure a few variables. You can ignore most of the variables listed on the compass reference page with the exception of these two.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Compass Vertical Rhythm Settings
$base-font-size: 20px; // Sets the base font size
$base-line-height: 36px; // Sets the base line height
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following two modules are useful, but completely optional&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$round-to-nearest-half-line: true; // Allows compass to round to  multiples of 0.5x line height
$rhythm-unit: &amp;quot;rem&amp;quot;; // Sets rhythm unit to rem. Remove to use default em unit.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I personally like to allow compass to automatically round to the nearest half line instead, and this can be very helpful when large header titles have to get bumped to two lines.&lt;/p&gt;
&lt;p&gt;Rem unit is one of my favourites, and I use them for my development. However, it is not supported by IE 8. Unless you’re willing to get a polyfill for the rem unit, you might want to stick with default ems.&lt;/p&gt;
&lt;p&gt;Now that you’ve set the basic compass variables, you’re more to less good to go. I will go one step further and list down basic font sizes that will be used in the website.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Note these are custom. You have to tell compass to use them yourself
$h1-fz: 45px;
$h2-fz: 30px;
$h3-fz: 24px;
$h4-fz: 20px;
$h5-fz: 16px;
$h6-fz: 13px;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-compass-vertical-rhythm&quot;&gt;Using Compass Vertical Rhythm&lt;/h2&gt;
&lt;p&gt;Telling Compass to set the baseline is quite simple, with the use of only one line of code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Establishes baseline with Compass.
@include establish-baseline;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This sets the default font size and line height you have previously declared into the html selector. The output will be slightly different depending on whether you’re using the experimental version of compass.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;/* Standard Compass Version. At the time of writing this is v0.12.2.
Thanks to Maximilien for noticing this */
* html {
  font-size: 125%; }

html {
  font-size: 20px;
  line-height: 1.8em;
}

/* Experimental Compass Version. At the time of writing this is v1.0.0.alpha.18 */
html {
  font-size: 125%;
  line-height: 1.8em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember the various heading font sizes we set earlier? You have to tell compass to use them with the &lt;code&gt;adjustfont-size-to&lt;/code&gt; mixin. This mixin takes up to 3 arguments.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Adjust font size to mixin.
// Note that those in [] are optional arguments.
adjust-font-size-to($to-size, [$lines], [$from-size])

$lines = number of line heights this font is suppose to take up.
$from-size = current font size used to adjust to target font size.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$lines&lt;/code&gt; will default to the nearest line height multiple that can accomodate the target font size. It will round to the nearest half line height if &lt;code&gt;$round-to-nearest-half-line&lt;/code&gt; is set to true. This number need not be an integer.&lt;/p&gt;
&lt;p&gt;For example, if the target font size is 45px, the base-line-height is 36px, the resultant line height will either be 54px or 72px (in em or rem unit), depending on what &lt;code&gt;$round-to-nearest-half-line&lt;/code&gt;is set to. By stating &lt;code&gt;$lines&lt;/code&gt; explicitly, you are telling compass to use your declaration instead of calculating them.&lt;/p&gt;
&lt;p&gt;If you’re using ems as the rhythm unit, you have to tell compass to use the &lt;code&gt;$from-size&lt;/code&gt; variable if the current container has a different font size than the base declared up above.&lt;/p&gt;
&lt;p&gt;If you are using rems, you don’t have to bother about &lt;code&gt;$from-size&lt;/code&gt; at all.&lt;/p&gt;
&lt;p&gt;Here’s how you can use the &lt;code&gt;adjust-font-size-to&lt;/code&gt; mixin. You can use this anywhere you need to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;h1 {
  @include adjust-font-size-to($h1-fz);
}

h2 {
  @include adjust-font-size-to($h2-fz);
}

h3 {
  @include adjust-font-size-to($h3-fz);
}

h4 {
  @include adjust-font-size-to($h4-fz);
}

h5 {
  @include adjust-font-size-to($h5-fz);
}

h6 {
  @include adjust-font-size-to($h6-fz);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-rhythm()-function&quot;&gt;The rhythm() function&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;rhythm()&lt;/code&gt; function is the single most useful function in Compass. It allows you to quickly calculate multiple line-heights worth of margins and paddings without doing the math. This number need not be an integer&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.example-selector {
  margin: rhythm(1) 0; // This translates to 36px margin top and bottom since the declared base lineheight is 36px.
  padding: rhythm(1) 0; Similarly, this adds 36px of padding instead
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;That’s really all to it to using Compass for vertical rhythm. Its incredibly quick and easy. There are many other functions provided that I don’t use often, but you can find them all in the &lt;a href=&quot;http://compass-style.org/reference/compass/typography/vertical_rhythm/&quot; title=&quot;Compass vertical rhythm reference&quot;&gt;reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Try using vertical rhythms in your next project and let me know how you find it!&lt;/p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://24ways.org/2006/compose-to-a-vertical-rhythm/&quot;&gt;http://24ways.org/2006/compose-to-a-vertical-rhythm/&lt;/a&gt;
&lt;a href=&quot;http://typecast.com/blog/4-simple-steps-to-vertical-rhythm&quot;&gt;http://typecast.com/blog/4-simple-steps-to-vertical-rhythm&lt;/a&gt;
&lt;a href=&quot;http://drewish.com/tools/vertical-rhythm/&quot;&gt;http://drewish.com/tools/vertical-rhythm/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding CSS Box Sizing Property</title>
    <link href="https://zellwk.com/blog/understanding-css-box-sizing/"/>
    <updated>2014-02-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/understanding-css-box-sizing/</id>
    <content type="html">&lt;p&gt;The box sizing property is the single most useful property I have found ever since I started making websites. Border-box is the key to most website layouts simpler, to the point that even frameworks like Boostrap, Foundation and Susy use it.&lt;/p&gt;
&lt;p&gt;In this post, you’ll get to understand what this property is, and how it might save you countless hours of frustrations for your next website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;css-box-sizing&quot;&gt;CSS Box Sizing&lt;/h2&gt;
&lt;p&gt;If you know some CSS, you should have heard of the box model.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/02/box-model.jpg&quot; alt=&quot;&quot; title=&quot;Box Model&quot;&gt;&lt;/p&gt;
&lt;p&gt;By default, the content of an element makes up its width. Box sizing allows you to change what makes up the width of the element.&lt;/p&gt;
&lt;h2 id=&quot;box-sizing-values&quot;&gt;Box Sizing Values&lt;/h2&gt;
&lt;p&gt;Box sizing can take up to 3 different values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content-box (default)&lt;/li&gt;
&lt;li&gt;padding-box&lt;/li&gt;
&lt;li&gt;border-box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/02/box-sizing.jpg&quot; alt=&quot;&quot; title=&quot;box-sizing explanation&quot;&gt;&lt;/p&gt;
&lt;p&gt;As we can see above, the width of the element is determined by the box sizing property given.&lt;/p&gt;
&lt;p&gt;At present, only &lt;code&gt;content-box&lt;/code&gt; and &lt;code&gt;border-box&lt;/code&gt; are commonly used and well support by browsers (IE 8+ and other major browsers).&lt;/p&gt;
&lt;p&gt;Although &lt;code&gt;padding-box&lt;/code&gt; might be useful in some cases, &lt;a href=&quot;http://caniuse.com/#search=padding-box&quot; title=&quot;Padding box cross browser support&quot;&gt;support for it is not great&lt;/a&gt; at the moment.&lt;/p&gt;
&lt;h2 id=&quot;whats-the-big-deal%3F&quot;&gt;Whats the big deal?&lt;/h2&gt;
&lt;p&gt;Its much more intuitive to style with &lt;code&gt;border-box&lt;/code&gt; than with content &lt;code&gt;content-box&lt;/code&gt;. Here are two use cases that I often encounter and need border-box for.&lt;/p&gt;
&lt;h3 id=&quot;case-1%3A-setting-up-layouts&quot;&gt;Case 1: Setting Up Layouts&lt;/h3&gt;
&lt;p&gt;When setting up grids, its much easier for me to think this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content takes up 75% of the space&lt;/li&gt;
&lt;li&gt;Padding of 5% for breathing space&lt;/li&gt;
&lt;li&gt;Sidebar takes up 25%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that, my code will be&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.content {
  width: 75%;
  padding: 0 5%;
}

.sidebar {
  width: 25%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content takes up 75% of the space&lt;/li&gt;
&lt;li&gt;Padding of 5% for breathing space&lt;/li&gt;
&lt;li&gt;Content width is therefore 75% - 10% = 65%&lt;/li&gt;
&lt;li&gt;Sidebar takes up 25%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the resulting code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.content {
  width: 65%;
  padding: 0 5%;
}

.sidebar {
  width: 25%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;content-box&lt;/code&gt; introduces a higher cognitive overload.&lt;/p&gt;
&lt;h3 id=&quot;case-2%3A-when-width-of-child-adds-up-to-100%25&quot;&gt;Case 2: When Width of Child Adds up to 100%&lt;/h3&gt;
&lt;p&gt;Instead of trying to explain in words, an example will probably be easier to explain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/02/content-box-example.jpg&quot; alt=&quot;&quot; title=&quot;Content-box example&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/02/border-box-example.jpg&quot; alt=&quot;&quot; title=&quot;Border-box example&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;
&lt;p&gt;Simple! Put these lines of code into your CSS File.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or if you’re using Compass, border-box sizing is already built into a mixin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;* {
  @include box-sizing(border-box);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Performance hits with the &lt;code&gt;*&lt;/code&gt; selector here isn’t an issue according to &lt;a href=&quot;http://www.paulirish.com/2012/box-sizing-border-box-ftw/&quot;&gt;Paul Irish&lt;/a&gt;, so use away!&lt;/p&gt;
&lt;h2 id=&quot;usage-with-ie7&quot;&gt;Usage with IE7&lt;/h2&gt;
&lt;p&gt;By any chance if you require a polyfill for IE7, the one made by &lt;a href=&quot;https://github.com/Schepp/box-sizing-polyfill&quot; title=&quot;Box sizing polyfill&quot;&gt;Schepp&lt;/a&gt; is awesome.&lt;/p&gt;
&lt;h2 id=&quot;edges-cases-where-content-box-might-be-more-useful&quot;&gt;Edges cases where content-box might be more useful&lt;/h2&gt;
&lt;p&gt;There are essentially none. But knowledge of both content-box and border-box allows you switch between the two if you ever need to!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding Wordpress Actions and Filters</title>
    <link href="https://zellwk.com/blog/wordpress-actions-and-filters/"/>
    <updated>2014-02-10T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/wordpress-actions-and-filters/</id>
    <content type="html">&lt;p&gt;Wordpress action and filter hooks are what makes Wordpress incredibly extendable. These hooks are very easy to use if someone else has already wrote them, and you just had to hook something in. Understanding how they work is another matter entirely.&lt;/p&gt;
&lt;p&gt;In this post, I’m going to walk you through my personal understanding of Wordpress action and filer hooks after a few hours of experiments.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-difference-between-actions-and-filters&quot;&gt;The Difference Between Actions and Filters&lt;/h2&gt;
&lt;p&gt;The main difference between actions and filters is the purpose they are used for and how they are declared and used. Here’s a quick summary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;
When something has to be &lt;strong&gt;added&lt;/strong&gt;
declared with &lt;code&gt;add_action()&lt;/code&gt;.
used with &lt;code&gt;do_action()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Filters&lt;/strong&gt;
When something has to be &lt;strong&gt;changed&lt;/strong&gt;
declared with &lt;code&gt;apply_filters()&lt;/code&gt;.
used with &lt;code&gt;add_filters().&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not sure you get what I mean? Lets dive into some examples of creating and using actions and filters.&lt;/p&gt;
&lt;h2 id=&quot;creating-wordpress-actions&quot;&gt;Creating Wordpress Actions&lt;/h2&gt;
&lt;p&gt;You can create a wordpress action with the following code.&lt;/p&gt;
  php
  add_action(&#39;my_action_hook_name&#39;, &#39;my_action_function_name&#39;, $priority);

  function my_action_function_name() {
    // things your function should do
  }
  // Note: $priority is optional, and defaults to 10

Multiple functions to a single action hook, allowing many possibities of adding functionality to a particular area.

When the above code is executed, Wordpress searches the actions list for`&#39;my_action_hook_name&#39;`. If `my_action_hook_name` is not found, Wordpress creates the action hook.

If `my_action_hook_name` is already declared, Wordpress tries to find out when it should execute the function with the `$priority `. The lower a number given to priority, the earlier that particular code will execute.

Since you now know how to create an Wordpress action, the next step is to know how to use it.

## Using Wordpress Actions
You can you the wordpress action with the following code.

  &lt;?php
  do_action(&#39;my_action_hook_name&#39;);

When the action is called, all functions that are &#39;hooked&#39; to this action will get executed.

From what I see, action hooks are usually used to output information or do some additional logic.

Thats it for actions! Lets move on to filters.

## Declaring Wordpress Filters

Wordpress filters are more difficult to understand compared to actions.

Lets first talk about how to declare filters first, followed by understanding how to modify the information used by filters.

Filters are declared with the `apply_filters()` function shown below.

  &lt;?php
  $output = apply_filters(&#39;filter_name&#39;, &#39;filter_args&#39;);

In the code mentioned above, the declared filter has a name of `filter_name` with default value `&#39;filter_args&#39;`. filter arguments can be strings or even arrays if you like them to.

To initialise an array as the default value of a filter, consider writing it like this instead.

  &lt;?php
  $filter_defaults = array(&#39;one&#39;,&#39;two&#39;);
  $output = apply_filters(&#39;filter_name&#39;, $filter_defaults);

In the above example, we initialized an array and assigned `$output` to be `array(&#39;one&#39;,&#39;two&#39;)`.

Next, lets find out how to change the value of `$output` with filter hooks

## Changing the passed value to filter hooks

To change the value of `$output`, you have to pass the value through a filter function.

  &lt;?php
  add_filter(&#39;filter_name&#39;, &#39;my_filter_function&#39;);
  function my_filter_function ( $args ) {
   $args = &#39;my new value&#39;;
   return $args;
  }

In this case, `$args`, which currently contains `array(&#39;one&#39;,&#39;two&#39;)` is the default value passed to `$output`. For the code above, I have changed `$args` to `my_new_value`, which will be passed on to `$output` when the filter function executes. The value of `$output` is now `my_new_value`.

Thats it!

## Summing it up
In essence, Wordpress filters and actions are used for very different purposes, and they are declared very differently.

Here&#39;s a quick summary:

- **Actions**
When something has to be **added**
declared with `add_action()`.
used with `do_action()`.
- **Filters**
When something has to be **changed**
declared with `apply_filters()`.
used with `add_filters().`

Hopefully this clears up the difference between wordpress actions and filters for you.
</content>
  </entry>
  
  <entry>
    <title>How to find the Wordpress CSS File</title>
    <link href="https://zellwk.com/blog/find-wordpress-css/"/>
    <updated>2014-01-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/find-wordpress-css/</id>
    <content type="html">&lt;p&gt;A theme bought off the marketplace can never be 100% what you intended your website to look like. There are always small things that you want to change.&lt;/p&gt;
&lt;p&gt;Travis asked me a question on finding out where to edit Wordpress theme’s CSS files and I thought I’d just share it you.&lt;/p&gt;
&lt;p&gt;If you had bought a Wordpress theme and wanted to change how the website looks in some areas, this post is for you.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-controls-how-a-website-looks&quot;&gt;What controls how a website looks&lt;/h2&gt;
&lt;p&gt;Cascading Style Sheets &lt;strong&gt;(more commonly known as CSS, or stylesheets)&lt;/strong&gt; is a file that tells our browsers how the website should look like.&lt;/p&gt;
&lt;p&gt;When you visit a website, your browser will fetch this css file, along with other important documents, and show it to you.&lt;/p&gt;
&lt;p&gt;Contained within CSS files are code contents that tell your browser how to render(in other words, show) the webpage. An example of a CSS statement is&lt;/p&gt;
&lt;p&gt;/* This tells our browser that it should leave a gap of 18px after each paragraph */
p {
margin-bottom: 18px;
}&lt;/p&gt;
&lt;p&gt;There’s a whole lot more in CSS that the small code snippet above, and its waaay out of topic for this post. If you’re totally new to CSS, I’d suggest at least checking the CSS portion of &lt;a href=&quot;http://www.codeacademy.com/&quot; title=&quot;Code Academy&quot;&gt;Code Academy&lt;/a&gt; before trying to change any CSS files on your wordpress theme.&lt;/p&gt;
&lt;h2 id=&quot;where-is-this-css-file-located&quot;&gt;Where is this CSS file located&lt;/h2&gt;
&lt;p&gt;Finding this CSS file can be a little cumbersome, and it depends on whether the theme author has decided to place the CSS files in another folder (I personally do that).&lt;/p&gt;
&lt;p&gt;You’re probably not sure whether the CSS files are in their default location, so try the following methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SERIOUS NOTE:&lt;/strong&gt; No matter which method you used to edit your CSS files, always save a backup copy before you make any changes! Its going to be a big disaster if you broke your site by accident! You probably wouldn’t want that to happen :)&lt;/p&gt;
&lt;h3 id=&quot;method-1&quot;&gt;Method 1&lt;/h3&gt;
&lt;p&gt;Go under Appearance &amp;gt; Editor and click on style.css.&lt;/p&gt;
&lt;p&gt;You can edit the files directly from this window and hit save when you’re done. Remember to clear your caches if you’re using any CDN or caching plugins. (Not sure? Check your plugins in Wordpress and see if you have activated a plugin with the cache  word.&lt;/p&gt;
&lt;h3 id=&quot;method-2&quot;&gt;Method 2&lt;/h3&gt;
&lt;p&gt;If you had saw very few lines of code, like the image below, you’re outta luck. The theme author has chosen to place the file somewhere else.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/01/Screenshot_15_1_14_6_16_pm.png&quot; alt=&quot;Sample CSS File on Wordpress that has too little code. This means the actuall style.css is somewhere else&quot; title=&quot;Sample CSS File on Wordpress that has too little code&quot;&gt;&lt;/p&gt;
&lt;p&gt;For this method, you’ll need to have access to your domain hosting service (Dreamhost, Hostgater and Bluehost for example).&lt;/p&gt;
&lt;p&gt;Log in to your domain hosting service and select the file manager through cPanel. Select the final option and choose the document root for your website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2014/01/Screenshot_15_1_14_6_11_pm-2.png&quot; alt=&quot;Here&#39;s the how the file manager looks like on cPanel&quot; title=&quot;cPanel File Manager&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to wp-content &amp;gt; themes &amp;gt; &lt;strong&gt;YOUR THEME NAME&lt;/strong&gt; and try to finder a folder that houses the css files. They are usually named CSS stylesheets or styles.&lt;/p&gt;
&lt;p&gt;You can then choose to download it and edit with a text editing program on your computer.&lt;/p&gt;
&lt;p&gt;After editing, head to the same directory you found the CSS files and hit upload.&lt;/p&gt;
&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;Thats two methods of finding and editing your theme CSS files. They’re definitely not coding best practices and editing them in this way is often frowed upon.&lt;/p&gt;
&lt;p&gt;But hey, you don’t have to worry about the best practices stuff if you’re not going to develop themes.&lt;/p&gt;
&lt;p&gt;If you feel like learning about these code stuff though, I have something very special coming up within the next couple of weeks. Join my mailing list below and get first hand information about it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Quicken Wordpress Development with Grunt JS</title>
    <link href="https://zellwk.com/blog/wordpress-with-grunt/"/>
    <updated>2013-12-30T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/wordpress-with-grunt/</id>
    <content type="html">&lt;p&gt;A couple of days ago Chris Coyier’s post regarding &lt;a href=&quot;http://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Grunt JS&lt;/a&gt; on the &lt;a href=&quot;http://24ways.org/&quot;&gt;24ways blog&lt;/a&gt; got me interested in playing with Grunt JS again. I’ve tried tinkering with Grunt but I never gotten it to work correctly for me. After reading Chris’s post and two more days of tinkering, I manage to come up with a configuration have helped hasten my wordpress development dramatically.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The configuration I’m going to talk about helps with 3 processes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Watches for changes on all PHP, Javascript and Sass files and reloads the browser automatically when anything changes (I can’t stress how useful this is during development).&lt;/li&gt;
&lt;li&gt;Processing all development scripts, concatenating and minifying them with one simple command.&lt;/li&gt;
&lt;li&gt;Detection of development and production servers, and automatically serves up the correct styles and javascript files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’m going to break up these three points and explain how to set these things up create the magic. This post might be a little heavy if you’re completely new to Grunt JS since I’m not going to explain everything. If so, it might be best for you if you check out &lt;a href=&quot;http://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;Chris’s article&lt;/a&gt; before continuing. I’ll wait :)&lt;/p&gt;
&lt;h2 id=&quot;setting-up-grunt-js-with-compass&quot;&gt;Setting up Grunt JS with Compass&lt;/h2&gt;
&lt;p&gt;I prefer to work with Compass and Sass when it comes to CSS. In order to work with Compass. I’m going to first explain how to setup Grunt JS to work with Compass. If you have already gotten Compass to work, skip ahead to the next section where the meat is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compass: {
  dev: {
    options: {
      require: &#39;susy&#39;, // optional if you don&#39;t use Susy. But you should!
      sassDir: &#39;dev/scss&#39;,
      cssDir: &#39;dev/css&#39;,
      fontsDir: &#39;dev/fonts&#39;,
      javascriptsDir: &#39;dev/js&#39;,
      imagesDir: &#39;dev/images&#39;,
      relativeAssets: true,
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;watching-and-reloading-the-browser-for-changes&quot;&gt;Watching and Reloading the browser for changes&lt;/h2&gt;
&lt;p&gt;One cool thing I really really like about Grunt JS is that it can reload the browser when any file changes. The tedious part is to figure out how to configure grunt to do that in the first place, which is what we’re going to tackle now.&lt;/p&gt;
&lt;p&gt;To allow Grunt to reload your browser automatically when files changes, you have to setup a task in grunt.&lt;/p&gt;
&lt;p&gt;Fire up the terminal in the folder where you stored your gruntfile.js and install the &lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-watch&quot;&gt;grunt-contrib-watch plugin&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ npm install grunt-contrib-watch --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and load the plugin into your gruntfile.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grunt.loadNpmTasks(&#39;grunt-contrib-watch&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is an example of my watch function where I watched for changes in javascript files, scss files and php files. Adapt this to how you would like to structure your files and use &lt;a href=&quot;http://gruntjs.com/configuring-tasks&quot;&gt;Grunt’s globbing patterns&lt;/a&gt; to target your files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;watch: {
  scripts: {
    files: [&#39;dev/js/*.js&#39;],
    tasks: [&#39;jshint&#39;, &#39;concat&#39;]
  },
  compass: {
    files: [&#39;dev/scss/{,*/}*.{scss,sass}&#39;],
    tasks: [&#39;compass:dev&#39;]
  },
  php: {
    files: [&#39;*.php&#39;, &#39;includes/{,*/}*.php&#39;],
  },
  options: {
    livereload: true,
    spawn: false
  }
},

/**
 * Quick and dirty explanation to Grunt. If you didn&#39;t catch on to the above two code snippets, read this. Otherwise, skip this part.
 */

In grunt, you configure tasks in this way.

The first JSON object literal you see here (watch), refers to the task to be configured.

The second object (scripts, compass and php) refers to targets. These can be named anyway you want them to, and can be trigged independently by running them with the :target suffix in terminal. (For example, grunt watch:compass will only watch for files within compass.)

The third object literal (files and tasks) are configurations that the plugin provides. Some defaults that grunt has are &#39;files&#39;, &#39;src&#39;, &#39;dest&#39; for example.

Options if placed as the second level (alongside scripts, compass and php) stands for global options, and will affect all other targets. IF they are placed within the second level objects like the example below, then they affect only the compass target.

watch : {
  compass: {
    options: &#39;xyz&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I configured my default grunt task to watch the above mentioned files.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Configuring the grunt task
grunt.registerTask(&#39;default&#39;, [&#39;watch&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is just one thing left to have our browsers automatically reload whenever we save a file. We have to insert a javascript snippet that tells our browsers to reload. If you’re working with MAMP or any other server, the &lt;strong&gt;trick here is to make sure this livereload snippet is found at the root of your server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this case, I would create a file called livereload.js in the root folder with the following code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.write(&#39;&amp;lt;script src=&amp;quot;http://&#39; + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0] + &#39;:35729/livereload.js?snipver=1&amp;quot;&amp;gt;&amp;lt;/&#39; + &#39;script&amp;gt;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows the browser to fetch javascript codes that automatically refreshes the browser. The final step to get livereload working is to inject this livereload.js into your Wordpress theme.&lt;/p&gt;
&lt;p&gt;Within the functions.php file,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;add_action( &#39;wp_enqueue_scripts&#39;, &#39;zell_load_dev_scripts&#39; );
function zell_load_dev_scripts(){
  wp_enqueue_script( &#39;livereload&#39;, &#39;http://&#39; . $_SERVER[&#39;SERVER_NAME&#39;] . &#39;/livereload.js&#39;, &#39;&#39;, null, true );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re set and the browser will automatically reload when you save any compass file, javascript file in the dev folder or any php files.&lt;/p&gt;
&lt;h2 id=&quot;processing-development-scripts-into-production-scripts&quot;&gt;Processing development scripts into production scripts&lt;/h2&gt;
&lt;p&gt;We are often told that we should minify and concatenate all styles and script files for production servers. But that work is INCREDIBLY time consuming. There’s a ton of wasted effort if your styles or scripts require changes (and there are always changes aren’t there :) ).&lt;/p&gt;
&lt;p&gt;Grunt makes it super easy for front end developers to minify and concatenate all styles and javascripts with a simple command. The caveat is that you have to set it up first.&lt;/p&gt;
&lt;p&gt;Here’s a sample config I have setup to concatenate javascripts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;concat: {
    dev: {
      src: [
        &#39;dev/js/*.js&#39;, // All JS in the dev/js folder
      ],
      dest: &#39;dev/js/build/dev.js&#39;
    }
  },

uglify: {
  target: {
    src: &#39;&amp;lt;%= concat.dev.dest %&amp;gt;&#39;,
    dest: &#39;dist/js/production.min.js&#39;
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concat(&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-concat&quot;&gt;grunt-contrib-concat&lt;/a&gt;) and uglify(&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-uglify&quot;&gt;grunt-contrib-uglify&lt;/a&gt;) are two grunt plugins that I have used above. The configuration for Concat tells grunt to look out for all files in the dev/js folder, join them up together and spew them into a file called dev.js in dev/js/build while uglify is set to take the oupt from concat and convert it into production.min.js, located in the dist/js folder.&lt;/p&gt;
&lt;p&gt;My configuration for minifying and concatenating these scripts are currently mediocre at best as I’m still focused on developing a website using Grunt. I’ll update this section as soon as I attempt to do more heavyduty converting work.&lt;/p&gt;
&lt;h2 id=&quot;automagic-detection-of-local-and-production-servers&quot;&gt;Automagic detection of local and production servers&lt;/h2&gt;
&lt;p&gt;One neat thing to add to the whole process is to allow our files to automatically differentiate development and production servers. One method of doing so is to look for a file called wp-local-config.php that is only present on my development server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If this file is found, Wordpress will enqueue development stylesheets and javascripts. Otherwise, it will enqueue the production stylesheets and javascripts.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Checking if the wp-local-config.php file exists
$localConfig = $_SERVER[&#39;DOCUMENT_ROOT&#39;] .&#39;/wp-local-config.php&#39;;
if (file_exists($localConfig)) {
  // Load dev styles
  // load dev js
}
else {
  // Load Prod CSS
  // Load Prod JS
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a sample on how to enqueue stylesheets and javascripts.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enqueuing stylesheets
add_action( &#39;wp_enqueue_scripts&#39;, &#39;zell_load_dev_stylesheets&#39; );
function zell_load_dev_stylesheets() {
  if( !is_admin() ) {
    wp_enqueue_style( &#39;zell_dev_stylesheet&#39;, get_stylesheet_directory_uri() . &#39;/app/css/styles.css&#39;, array(), null );
  }
}

Enqueuing javscripts
add_action( &#39;wp_enqueue_scripts&#39;, &#39;zell_load_dev_scripts&#39; );
function zell_load_dev_scripts(){
  wp_enqueue_script( &#39;zell_dev_scripts&#39;, get_stylesheet_directory_uri() . &#39;/app/js/build/dev.js&#39;, array( &#39;jquery&#39; ), null, true );
  wp_enqueue_script( &#39;livereload&#39;, &#39;http://&#39; . $_SERVER[&#39;SERVER_NAME&#39;] . &#39;/livereload.js&#39;, &#39;&#39;, null, true );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the presence of this script, Wordpress will automatically detect the correct files to serve up for both production and development environments. One less job to do and more time to work on cool stuff!&lt;/p&gt;
&lt;h2 id=&quot;problems-and-thoughts&quot;&gt;Problems and thoughts&lt;/h2&gt;
&lt;p&gt;One problem I have yet to solve with the configuration I mentioned above was the order of concatenating javascript files. A possible way would be to create two folders, one to house all vendor related files while the other one holds all my javascript files.&lt;/p&gt;
&lt;p&gt;This would work for small projects, but might become a headache for bigger projects if javascript files have to be arranged in a specific way. It would be great to hear your suggestions on this one.&lt;/p&gt;
&lt;p&gt;Other than that, I think the configuration is good enough as it is for now. Take what I had above and try playing around. Let me know if this helped you or if you have any great suggestions!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Complete Tutorial to Susy (Part 2)</title>
    <link href="https://zellwk.com/blog/a-complete-tutorial-to-susy-part-2/"/>
    <updated>2013-10-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/a-complete-tutorial-to-susy-part-2/</id>
    <content type="html">&lt;p&gt;We have gone through the &lt;a href=&quot;http://www.zellwk.com/blog/a-complete-tutorial-to-susy/&quot;&gt;absolute basics to Susy in the previous week&lt;/a&gt; and looked at how to create complete layout grids simply just by using the span column mixin.&lt;/p&gt;
&lt;p&gt;In this post, we’re going to explore other parts of Susy that lets you easily push or pull your content block left or right. I’ll also share with you how responsiveness is built straight into the Susy framework.&lt;/p&gt;
&lt;p&gt;Lets begin by looking at some of the padding and margins mixins available to us.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;important-update&quot;&gt;Important Update&lt;/h2&gt;
&lt;p&gt;Susy 2 is now released, which makes this tutorial obsolete. Head over &lt;a href=&quot;http://zellwk/blog/susy2-tutorial/&quot;&gt;here&lt;/a&gt; to find the latest article on Susy 2 instead.&lt;/p&gt;
&lt;h2 id=&quot;margin-and-padding-mixins&quot;&gt;Margin and Padding Mixins&lt;/h2&gt;
&lt;p&gt;Margin and padding mixins from susy lets you adjust your content  by the number of columns before or after your content.&lt;/p&gt;
&lt;p&gt;Say for example I wanted to create a design like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/10/Screen-Shot-2013-10-08-at-6.56.48-PM.png&quot; alt=&quot;&quot; title=&quot;Susy with first column missing&quot;&gt;&lt;/p&gt;
&lt;p&gt;In our previous tutorial, this wasn’t possible because we didn’t explore the margin and padding mixins.&lt;/p&gt;
&lt;p&gt;You can now use either margin or padding to produce the desired effect like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag1 {
  display: none;
}

.ag2 {
  @include pre(2,10);
  // @include prefix(2,10);
  // pre adds two columns of margins while prefix adds two columns of padding.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The synxtax to use &lt;code&gt;pre()&lt;/code&gt; and &lt;code&gt;prefix()&lt;/code&gt; are exactly as the same as the synxtax used for &lt;code&gt;span-columns()&lt;/code&gt;. It should be easy for you to play around with margins and paddings to produce the desired effect.&lt;/p&gt;
&lt;p&gt;The other useful mixins are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;scss&quot;&gt;.margin-mixins {
    @include post (2, 10); // Adds two columns of margins after the element

    @include squish(2,2,10); // A shortcut to do both pre and post. This adds two columns of margins before AND after the element
  }

  .padding-mixins {
    @include suffix (2, 10); // Adds two columns of padding after the element

    @include pad(2,2,10); // A shortcut to do both prefix and suffix. This adds two columns of padding before AND after the element
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A full list of mixins are available on the &lt;a href=&quot;http://susydocs.oddbird.net/&quot; title=&quot;Susy Reference Page&quot;&gt;Susy Reference page&lt;/a&gt;. Most of the references were words and I found it difficult to understand at first, which is why I wrote this portion since some examples were great to illustrate these documentations.&lt;/p&gt;
&lt;p&gt;Now that you’re able to manipulate your website to suit whatever grid columns you want, lets dive into the reponsive parts with Susy.&lt;/p&gt;
&lt;h2 id=&quot;creating-responsive-websites-with-susy&quot;&gt;Creating Responsive Websites with Susy&lt;/h2&gt;
&lt;p&gt;The whole purpose for using Susy was to create responsive websites real easy, and what we’ve learnt from the previous sections have helped prepare us to understand how Susy works with responsive design. After this part, you’ll be building responsive websites effortlessly!&lt;/p&gt;
&lt;p&gt;To make our website responsive, we have to revisit the base configuration section of Susy, and make some adjustments to our existing code from our &lt;a href=&quot;http://zellwk.com/blog/a-complete-tutorial-to-susy/&quot; title=&quot;A Complete Tutorial to Susy Part 1&quot;&gt;last tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;understanding-media-layouts&quot;&gt;Understanding Media Layouts&lt;/h3&gt;
&lt;p&gt;Susy supports optional arguments in its media layout options and that given as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$media-layout: &amp;lt;min-width&amp;gt; &amp;lt;layout&amp;gt; &amp;lt;max-width&amp;gt; &amp;lt;ie-fallback&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of these, only min-width or layout are required. Susy will compile all other arguments and label them correctly in CSS Media queries when compiled. A reference of how to use Susy media layouts are &lt;a href=&quot;http://susydocs.oddbird.net/&quot; title=&quot;Susy Media Layouts&quot;&gt;found here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;configuring-media-layouts&quot;&gt;Configuring Media Layouts&lt;/h3&gt;
&lt;p&gt;Susy uses the mobile first concept, so we have to firstly adjust the number of columns to fit on a mobile screen. We’ll also define &lt;code&gt;$med&lt;/code&gt; and &lt;code&gt;$large&lt;/code&gt; to use for tablet and desktop screens respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Configuring Susy defaults
$total-columns: 4; // Switching total columns from 10 to 4.
$column-width: 4rem;
$gutter-width: 1rem;
$grid-padding: 0;

$med: 8;
$large: 10;
// 4, 6 and 10 here refers to the number of columns Susy will use.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;using-media-layouts&quot;&gt;Using Media Layouts&lt;/h3&gt;
&lt;p&gt;Since we’ve already configured the layouts, its now the time to use them.&lt;/p&gt;
&lt;p&gt;Let’s say we’re modifying our 10 Grid Column test from &lt;a href=&quot;http://zellwk.com/blog/a-complete-tutorial-to-susy/&quot; title=&quot;A Complete Tutorial to Susy Part 1&quot;&gt;the last tutorial&lt;/a&gt;. We want to show only the middle columns on a mobile device, middle and right column on a tablet and the 10 grids once enough space is available. &lt;a href=&quot;http://zellwk.com/blog/zellwk/demo/susy-demo-2/&quot; title=&quot;Susy Responsive Demo&quot;&gt;Check out this demo&lt;/a&gt; for a visual representation of what we’re going to create over here.&lt;/p&gt;
&lt;p&gt;This can be done with the help of a the &lt;code&gt;$at-breakpoint()&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;One of the first problems I encountered while using Susy to do responsive designs was that I couldn’t manage to find out why my layout differs so greatly from the susy background. After pulling my hairs out for over a week, I found the solution. You have to tell Susy to reset the grid background at every breakpoint.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  @include container($total-columns, $med, $large);
  // Inserting media layouts into container tells Susy that we have 3 different grids that we want to use at different sizes, and Susy should output them as requested when the at-breakpoint mixin is called.
  // Feel free to comment out all Susy grid backgrounds if you don&#39;t need them.

  @include susy-grid-background;
  // Everything without a at-breakpoint mixin will show up with $total-columns layout.

  @include at-breakpoint($med) {
    @include susy-grid-background;
    // Switching up susy grid background when layout changes
  }

  @include at-breakpoint($large) {
    @include susy-grid-background;
    // Switching up susy grid background when layout changes
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The setup is now ready and we’re all packed up and ready to roll!&lt;/p&gt;
&lt;h3 id=&quot;creating-the-layouts&quot;&gt;Creating the layouts&lt;/h3&gt;
&lt;p&gt;We’re going to create the layout mentioned above and in this &lt;a href=&quot;http://zellwk.com/blog/zellwk/demo/susy-demo-2/&quot; title=&quot;Susy Responsive Demo&quot;&gt;demo&lt;/a&gt;. Let’s take a look at the code and I’ll explain along with it. Since I want to make this tutorial short and easy to go along with, I’m going to neglect accessibility issues and remove the display of our sidebars when we wont want it around.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag1 {
  display: none;
  // removes the left sidebar

  // Tells Susy that this portion should be used only in the large media query
  @include at-breakpoint($large) {
    display: block;
    // shows the left sidebar at the $large layout
    @include span-columns(2, 10);
  }
}

.ag2 {
  // small layout
  @include span-columns(4, 4);
  overflow: hidden;

  // medium layout
  @include at-breakpoint($med) {
    @include span-columns(6, 8);
  }

  // large layout
  @include at-breakpoint($large) {
    @include span-columns(6, 10);
  }
}

.ag3 {
  // small layout
  display: none;

  // medium layout
  @include at-breakpoint($med) {
    display: block;
    @include span-columns(2 omega, 8);
  }

  // large layout
  @include at-breakpoint($large) {
    @include span-columns(2 omega, 10);
    // notice we don&#39;t need a display:block here because changes cascade from small to large in Susy. Since display block is declared in the medium layout, the large layout will have the display:block property through inheritance.
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That’s really all you need to use Susy effectively. With Susy in your toolbelt, your CSS and HTML are now truely separate and you can easily switch up your styles without even touching any part of the HTML?&lt;/p&gt;
&lt;p&gt;Its a great win for doing lesser math, another great win for easy responsiven designs and a final one for decoupling HTML from CSS dont you think?&lt;/p&gt;
&lt;p&gt;Feel free to look at the demo again or grab the source codes! &lt;br&gt;
&lt;a href=&quot;http://zellwk.com/blog/zellwk/demo/susy-demo-2/&quot; class=&quot;btn&quot;&gt;View Demo&lt;/a&gt;
&lt;a href=&quot;https://zellwk.com/images/2013/10/susy-demo-2.zip&quot; class=&quot;btn&quot;&gt;Download Source&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Complete Tutorial to Susy</title>
    <link href="https://zellwk.com/blog/a-complete-tutorial-to-susy/"/>
    <updated>2013-09-22T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/a-complete-tutorial-to-susy/</id>
    <content type="html">&lt;p&gt;Susy is a plugin to Compass that allows you to create customizable grid frameworks easily. It makes responsive design extremely easy by removing the need to manually calculate widths.&lt;/p&gt;
&lt;p&gt;If you need to create repsonsive websites do not want to constrain your design with available frameworks out in the open, Susy might be the perfect answer.&lt;/p&gt;
&lt;p&gt;This is the first of a two part tutorial that covers the basics of Susy.&lt;/p&gt;
&lt;p&gt;In this tutorial, we are going to install Susy, set up Susy defaults and understand how to create the &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt; 10-column complex nested grid AG test &lt;/a&gt; found on the susy website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;important-update&quot;&gt;Important Update&lt;/h2&gt;
&lt;p&gt;Susy 2 is now released, which makes this tutorial obsolete. Head over &lt;a href=&quot;https://zellwk.com/blog/susy2-tutorial/&quot;&gt;here&lt;/a&gt; to find the latest article on Susy 2 instead.&lt;/p&gt;
&lt;h2 id=&quot;installing-susy&quot;&gt;Installing Susy&lt;/h2&gt;
&lt;p&gt;Susy requires Sass and Compass.&lt;/p&gt;
&lt;p&gt;This tutorial assumes that you already have Sass and Compass installed. If not, I suggest you check out some awesome video tutorials at &lt;a href=&quot;http://leveluptuts.com/&quot; title=&quot;Level Up Tuts&quot;&gt;LevelUpTuts&lt;/a&gt; for &lt;a href=&quot;http://leveluptuts.com/tutorials/sass-tutorials&quot; title=&quot;Sass Tutorials&quot;&gt;Sass&lt;/a&gt; and &lt;a href=&quot;http://leveluptuts.com/tutorials/compass-tutorials&quot; title=&quot;Compass Tutorials&quot;&gt;Compass&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have Sass and Compass installed, go ahead and install Susy from the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Command line
$ sudo gem install susy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; Susy has been upgraded to Susy 2, and a lot of the configurations is changed. If you have any errors running Susy, I would recommended you to uninstall all versions of Sass, Compass and Susy, and reinstall them altogether. The most important thing here is that sass and compass needs to upgrade if you are using old versions (I have no clue how to update so I just reinstalled everything)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem uninstall sass
sudo gem uninstall compass
sudo gem uninstall susy

# I personally use --pre, but you should be able to get by without the --pre since Susy 2.0 was officially released.
sudo gem install sass --pre
sudo gem install compass --pre
sudo gem install susy --pre
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process to use Susy in a project is to add a line of code in the config.rb found in the compass.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# in config.rb
require &#39;susy&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can get into the very basics of using Susy.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-susy&quot;&gt;Setting up Susy&lt;/h2&gt;
&lt;p&gt;The very first step of using Susy in your project is to import Susy in your sass file and set its defaults.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@import &amp;quot;_normalize.scss&amp;quot;;
// To revert all browser default styles

  @import &amp;quot;susyone&amp;quot;;
// susy is now reserved for susy 2. For the rest of this tutorial, you have to use susyone instead of importing &amp;quot;susy&amp;quot; as in previous versions.


// Configuring Susy defaults
// Susy accepts px, em and rem for the magic and fixed grid, and % for the fluid grid
$total-columns: 10;
$column-width: 4rem;
$gutter-width: 1rem;
$grid-padding: $gutter-width / 2;

$container-style: magic; // default to magic. Switch to fluid or fixed if desired
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ll also recommend using border boxes to help you with creating layouts. Susy has a built-in mixin for border-box sizing. Read on about &lt;a href=&quot;http://css-tricks.com/box-sizing/&quot; title=&quot;Border Box&quot;&gt;border-box&lt;/a&gt; over at CSS Tricks if have no idea what it is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@include border-box-sizing;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, the susy grid background helps alot when trying to understand how columns are placed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  @include susy-grid-background;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this, we are now ready to tackle the 10 column AG test.&lt;/p&gt;
&lt;h2 id=&quot;setting-up-the-ag-grid-test&quot;&gt;Setting Up The AG Grid Test&lt;/h2&gt;
&lt;p&gt;This is what we are going to obtain by the end of the tutorial&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/ag1-10.png&quot; alt=&quot;Susy Example AG 1 - AG 10&quot; title=&quot;Susy Example AG 1 - AG 10&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-html&quot;&gt;The HTML&lt;/h3&gt;
&lt;p&gt;The HTML for the grid test is as follows.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;The 10 column complex nested grid AG test&amp;lt;/h1&amp;gt;

&amp;lt;div class=&amp;quot;ag ag1&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 1&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag1 --&amp;gt;

&amp;lt;!-- ag3 to ag7 are nested within ag2.--&amp;gt;
&amp;lt;div class=&amp;quot;ag ag2&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 2&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag4&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 4&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag5&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 5&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag6&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 6&amp;lt;/h2&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;!-- ag8, ag9 and ag10 are nested within ag7 --&amp;gt;
  &amp;lt;div class=&amp;quot;ag ag7&amp;quot;&amp;gt;
    &amp;lt;h2&amp;gt;AG 7&amp;lt;/h2&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag8&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 8&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag9&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 9&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;ag ag10&amp;quot;&amp;gt;
      &amp;lt;h2&amp;gt;AG 10&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- /ag7 --&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag2 --&amp;gt;

&amp;lt;div class=&amp;quot;ag ag3&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;AG 3&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;!-- /ag3 --&amp;gt;

&amp;lt;/div&amp;gt;
&amp;lt;!-- /container --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simply speaking, whenever something is found within another div, you should nest it within the previous div.&lt;/p&gt;
&lt;p&gt;In our case, AG 3 to AG 7 will be nested under AG 2 while AG 8, AG 9 and AG 10 are nested under AG 7.&lt;/p&gt;
&lt;h3 id=&quot;the-sass&quot;&gt;The Sass&lt;/h3&gt;
&lt;p&gt;We’re going give each ag a color like the one on Susy’s main webpage.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Styles for AG grids &amp;amp; Container
*/&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  background-color: #fbeecb;
}

.ag1, .ag3 {
  background-color: #71dad2;
}

.ag2 {
  background-color: #fae7b3;
}

.ag4,.ag5,.ag8,.ag9 {
  background-color: #ee9e9c;
}

.ag6 {
  background-color: #f09671;
}

.ag7 {
  background-color: #f6d784;
}

.ag10 {
  background-color: #ea9fc3;
}

/**
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Text Styles
*/
h2 {
text-align: center;
font-size: 1rem;
font-weight: normal;
padding-top: 1.8rem;
padding-bottom: 1.8rem;
}&lt;/p&gt;
&lt;h2 id=&quot;susy-mixins-and-functions&quot;&gt;Susy Mixins and Functions&lt;/h2&gt;
&lt;p&gt;Before diving into writing susy mixins, I hope you wont mind if I explained how they work.&lt;/p&gt;
&lt;h3 id=&quot;container&quot;&gt;Container&lt;/h3&gt;
&lt;p&gt;Container establishes the grid containing element for the webpage. Given our html, the container mixin will be applied to the container class. This tells Susy where to start all the calculations from.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  @include container;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If were are to use Susy with responsive design, we have to pass some arguments into container. This will be elaborated on in part 2 of the tutorial.&lt;/p&gt;
&lt;h3 id=&quot;span-columns&quot;&gt;Span Columns&lt;/h3&gt;
&lt;p&gt;The Span Column mixin is probably the one used most while using Susy. It allows you to align an element to the grid you would like defined.&lt;/p&gt;
&lt;p&gt;The span column mixin takes a minimum of 1 argument and has the potential to accept a few more to customize to your needs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@include span-columns( &amp;lt;$columns&amp;gt; [ &amp;lt;omega&amp;gt; , &amp;lt;$context&amp;gt;, &amp;lt;$padding&amp;gt;, &amp;lt;$from&amp;gt;, &amp;lt;$style&amp;gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important arguments to be included here in span-columns are $columns, omega and $context. The rest of the explanation can be viewed on the &lt;a href=&quot;http://susydocs.oddbird.net/&quot; title=&quot;Susy Documentation&quot;&gt;Susy Reference page.&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$columns&lt;/strong&gt; means the number of columns you would like the particular element to take up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;omega&lt;/strong&gt; is an optional flag to tell Susy that this is the final element in a row.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;$context&lt;/strong&gt; tells Susy the current nesting context. It defaults to the total number of columns you specified within the container. In our case, it is 10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we’re clear of the two basic mixins used, we can start applying them to create the grid.&lt;/p&gt;
&lt;h2 id=&quot;using-susy-for-the-ag-grid-test&quot;&gt;Using Susy for the AG Grid Test&lt;/h2&gt;
&lt;p&gt;As we have mentioned above, we need to tell Susy what is the containing element for the Susy grid. In our case, the containing element is .container.&lt;/p&gt;
&lt;p&gt;We must also make the container clear its childrens since Susy makes use of floats to align our grids. For simplicity, I’m using overflow hidden as the self clearing method here. Other methods can be found on &lt;a href=&quot;http://css-tricks.com/snippets/css/clear-fix/&quot; title=&quot;Clearfix&quot;&gt;Chris Coyier’s page.&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  @include container;
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets start applying susy span column mixins to the rest of our grids. Taking the image as a reference, we count that ag1 takes up 2 columns, ag2 takes up 6 columns and ag3 takes up the final two columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag1 {
  @include span-columns(2);
}

.ag2 {
  @include span-columns(6, 10);
  // Optionally, you can choose to include the context.
}
.ag3 {
  @include span-columns(2 omega);
  // The omega flag is set here to tell Susy that ag3 is the final column.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This CSS output Susy has created for us.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.container {
  *zoom: 1;
  // Susy has calculated and provided fallbacks in px for the rem unit I used
  max-width: 784px;
  max-width: 49rem;
  _width: 784px;
  padding-left: 0;
  padding-right: 0;
  margin-left: auto;
  margin-right: auto;
  overflow: hidden; }

.ag1 {
  width: 18.36735%; // Size of 2 columns + 1 Gutter
  float: left;
  margin-right: 2.04082%;
  display: inline; }

.ag2 {
  width: 59.18367%; // Size of 6 columns + 5 Gutters
  float: left;
  margin-right: 2.04082%;
  display: inline; }

.ag3 {
  width: 18.36735%;
  float: right; // Omega flag creates a float right instead of float left
  margin-right: 0;
  *margin-left: -1rem;
  display: inline; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/ag1-3.png&quot; alt=&quot;Susy Example AG 1 to AG 3&quot; title=&quot;AG 1 to AG 3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Susy takes into account the container’s width at 49rem (or 784px) and proceeds to convert all our calculations into percentages. Its alot simpler to work with numbers like 2 and 6 instead of absolute percentages!&lt;/p&gt;
&lt;p&gt;Although this doesn’t seem like much right now, you will see that its extremely awesome when responsive design comes into play in the next tutorial.&lt;/p&gt;
&lt;p&gt;Let’s proceed to complete the rest of the grids that are within AG 2.&lt;/p&gt;
&lt;h2 id=&quot;creating-elements-within-ag-2.&quot;&gt;Creating Elements Within AG 2.&lt;/h2&gt;
&lt;p&gt;Here, we have to be very careful with the $context because $context defaults to the $total-columns, which was declared right at the top of our Sass file.&lt;/p&gt;
&lt;p&gt;If left untouched, Susy will use 10 columns to calculate the width of everything within AG 2.&lt;/p&gt;
&lt;p&gt;AG 2 consists of 6 columns and we want our items within the grid to have a context of 6 columns as well. In this case, we have to specify the context manually with the number 6.&lt;/p&gt;
&lt;p&gt;The rest of the mixins can be used in the same manner as above.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag2 {
  // overflow hidden is used to self clear children
  overflow: hidden;
}

.ag4 {
  // Specifying the context with 6
  @include span-columns(3, 6);
}

.ag5 {
  // Additionally, adding omega to signify the last column
  @include span-columns(3 omega, 6);
}

.ag6 {
  @include span-columns(2, 6);
}

.ag7 {
  @include span-columns(4 omega, 6);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/ag1-7.png&quot; alt=&quot;Susy Example AG 1 - AG 7&quot; title=&quot;AG 1 - 7&quot;&gt;
What’s left now is everything within the AG 7 column.&lt;/p&gt;
&lt;h2 id=&quot;creating-elements-within-ag-7&quot;&gt;Creating Elements Within AG 7&lt;/h2&gt;
&lt;p&gt;Repeat the process with everything you have done with the elements in AG 2. The context within AG 7 is 4 columns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ag7 {
  overflow: hidden;
}

.ag8 {
  @include span-columns(2, 4);
}

.ag9 {
  @include span-columns(2 omega, 4);
}

.ag10 {
  // There is no need to use span columns on AG 10 since elements take up 100% of the space by default in display block. In this case, we just have to make sure to clear the floats from ag8 and ag9.
  clear: both;

  // You can still use span-columns if you want to though. There&#39;s no fault in using that.
  @include span-columns(4, 4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we’re done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/ag1-10.png&quot; alt=&quot;Susy Example AG 1 - AG 10&quot; title=&quot;Susy Example AG 1 - AG 10&quot;&gt;&lt;/p&gt;
&lt;p&gt;Feel free to grab the source code and view the demo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.zell-weekeat.com/zellwk/susy/&quot; class=&quot;btn&quot;&gt;View Demo&lt;/a&gt;
&lt;a href=&quot;https://zellwk.com/images/2013/09/Susy-Example.zip&quot; class=&quot;btn&quot;&gt;Download Source&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;wrapping-up-the-first-part&quot;&gt;Wrapping Up the First Part&lt;/h2&gt;
&lt;p&gt;I hope this quick tutorial has given you the opportunity to familiarize yourself with Susy and to understand how span columns and containers are used.&lt;/p&gt;
&lt;p&gt;In the next part of the tutorial next week, we will cover the use of Susy with responsonsive designs, altering the AG grid at various sizes. We will also look into using some of Susy’s helper mixins that provides additional padding or magin to really make our design fully customized.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tools I use for learning and using colors</title>
    <link href="https://zellwk.com/blog/color-tools/"/>
    <updated>2013-09-16T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/color-tools/</id>
    <content type="html">&lt;p&gt;I mentioned how I felt that &lt;a href=&quot;http://zellwk.com/blog/why-color-pickers-and-palettes-are-bad-for-you/&quot;&gt;Color Picker and Palette Galleries hinders our workflow process&lt;/a&gt; in my previous post and I thought I’d just complement that post with a few tools that I find are exceptionally useful.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Here’s a list of these tools before we begin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools to help with identifying colors&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Color Snapper&lt;/li&gt;
&lt;li&gt;Alfred 2 (Color Workflow)&lt;/li&gt;
&lt;li&gt;HSL Trainer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While learning about colors, it is helpful to stick to a color format (Hex, RGB or HSL) and try to recognize colors associated with each value.&lt;/p&gt;
&lt;p&gt;I prefer to learn about colors in the HSL format because they seem to be the most intuitive to me because of how each value changes the color. HSL is the abbreviation for Hue, Saturation and Lightness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hue&lt;/strong&gt; – Changing hue changes the color&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Saturation&lt;/strong&gt; – Changes the amount of grays in the color&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lightness&lt;/strong&gt; – Changes the amount of black and white in the color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The caveat with HSL is that it is difficult to get hold of. Photoshop for example, does not support HSL. (It supports the HSV format, which is a little different).&lt;/p&gt;
&lt;h2 id=&quot;color-snapper&quot;&gt;Color Snapper&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://colorsnapper.com/&quot; title=&quot;Color Snapper&quot;&gt;Color Snapper&lt;/a&gt; is a great tool for the Mac that lets you easily get any color you want on the screen. It supports all major formats such as Hex, RGB and HSL.&lt;/p&gt;
&lt;h3 id=&quot;how-to-use&quot;&gt;How to Use&lt;/h3&gt;
&lt;p&gt;Its extremely simple. Simply just select Color Snapper, click on  the color you want to obtain. It will be copied to your clipboard and you can paste that info somewhere. Done.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/color-snapper.png&quot; alt=&quot;Color Snapper&quot; title=&quot;Color Snapper&quot;&gt;&lt;/p&gt;
&lt;p&gt;Color Snapper gives you the option to select two different formats to copy the color code. I set the first format to hex and the second format to HSL, and I get the second format by holding down the option key when I click on a color (The key is configurable).&lt;/p&gt;
&lt;h3 id=&quot;how-i-use&quot;&gt;How I Use&lt;/h3&gt;
&lt;p&gt;Color Snapper is incredibly simple to use and I use it heavily for two things. For picking out colors I like to learn more about, and for speeding up my workflow.&lt;/p&gt;
&lt;p&gt;Whenever I chance upon a color combination on the web that looks nice, I’ll copy those colors and throw them into HSL Trainer. (More of this will be mentioned below in HSL Trainer section)&lt;/p&gt;
&lt;p&gt;In the second case where I’ll like to speed up my workflow, I’ll use the modifier key and select the color that I wanted to copy (a color in photoshop for example), and immediately paste it into my code editor.&lt;/p&gt;
&lt;h3 id=&quot;free-alternative&quot;&gt;Free Alternative&lt;/h3&gt;
&lt;p&gt;It takes $4.99 to purchase Color Snapper, and if you’re not willing to fork out that money, there is a slightly tedious workaround to accomplish the same thing that Color Snapper does.&lt;/p&gt;
&lt;p&gt;To get any color you want, take a screenshot with that color, import it into photoshop and use the color dropper tool. You’ll be able to obtain the Hex code and convert it into other forms with other means.&lt;/p&gt;
&lt;h2 id=&quot;alfred-2&quot;&gt;Alfred 2&lt;/h2&gt;
&lt;p&gt;Alfred 2 is a productivity app for the Mac that helps with opening files, shortcuts and various neat tricks.&lt;/p&gt;
&lt;p&gt;One of the functions I use Alfred 2 for is to switch color formats with the use of this &lt;a href=&quot;http://www.alfredforum.com/topic/805-colors%E2%80%94a-css-color-conversion-workflow-with-color-picker-support/&quot;&gt;color workflow&lt;/a&gt; by Tyler Eich.&lt;/p&gt;
&lt;h3 id=&quot;how-to-use-2&quot;&gt;How to use&lt;/h3&gt;
&lt;p&gt;To convert from one color format to another, open up Alfred type either #, rgb or hsl, followed by their respective color code. You should be able to see the color displayed in all other formats and you can easily save them into your clipboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/alfred-color-workflow.png&quot; alt=&quot;&quot; title=&quot;Alfred 2 Color Workflow&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-i-use-2&quot;&gt;How I use&lt;/h3&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.alfredapp.com/&quot; title=&quot;Alfred 2&quot;&gt;Alfred 2&lt;/a&gt; to quickly convert any color from one format to another. When using tools like photoshop, I can easily convert colors from Hex to HSL to use in my CSS files and from HSL to Hex to use in photoshop.&lt;/p&gt;
&lt;h3 id=&quot;free-alternative-2&quot;&gt;Free Alternative&lt;/h3&gt;
&lt;p&gt;Alfred 2 is free, but workflows and other additional addons come at £17. The free alternative to this conversion process is to use the &lt;a href=&quot;http://hslpicker.com/&quot; title=&quot;HSL Picker&quot;&gt;HSL Picker&lt;/a&gt; by Brandon Mathis&lt;/p&gt;
&lt;h2 id=&quot;hsl-trainer&quot;&gt;HSL Trainer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://hsltrainer.herokuapp.com/&quot; title=&quot;HSL Trainer&quot;&gt;HSL Trainer&lt;/a&gt; is a webapp I created to help designers train their eyes to recognize colors in the HSL format. I needed something like this for my workflow and to help me identify how colors was changed. There was nothing satisfactory I found, so I created this.&lt;/p&gt;
&lt;h3 id=&quot;how-to-use-3&quot;&gt;How to use&lt;/h3&gt;
&lt;p&gt;Start using HSL trainer by either inserting a hex color (6 digit hex only at the time of writing) or select a random color.&lt;/p&gt;
&lt;p&gt;In the next screen, you can start playing around with HSL values in the reference area to try and match and the colors you have chosen in the previous step.&lt;/p&gt;
&lt;p&gt;Once you’re confident, enter you answers on the answer checking area and you check you answer to know how well you did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/09/hsl-trainer.jpg&quot; alt=&quot;HSL Trainer&quot; title=&quot;HSL Trainer&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-i-use-3&quot;&gt;How I use&lt;/h3&gt;
&lt;p&gt;I use HSL Trainer heavily with Color Snapper mentioned above. Whenever I find a color that looks good, I’ll whip out color snapper, get the color and proceed to play around with the color in HSL Trainer. In doing so, I slowly accustomize my eyes to the various shades of color, just like how musicians when they train their ears.&lt;/p&gt;
&lt;h3 id=&quot;free-alternative-3&quot;&gt;Free Alternative&lt;/h3&gt;
&lt;p&gt;HSL Trainer is free, so use away!&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;There you have 3 of my prized tools for working with colors and my workflows that go along with learning about them. It’ll be great if you can go ahead and try using them and let me know how you think they help in the comments.&lt;/p&gt;
&lt;p&gt;If you’ve any other tools, feel free to share them as well!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why color pickers and palettes are bad for you</title>
    <link href="https://zellwk.com/blog/why-color-pickers-and-palettes-are-bad-for-you/"/>
    <updated>2013-09-09T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/why-color-pickers-and-palettes-are-bad-for-you/</id>
    <content type="html">&lt;p&gt;Color is one complicating element that is very difficult to get correct when designing. While scouring the web in search for methods to learn select colors for my designs, I inevitably find many articles about picking colors with tools such as Adobe Kuler, palette galleries like COLOURlovers.&lt;/p&gt;
&lt;p&gt;While all these are great methods, they ironically may hinder our learning and workflow much more than they help…&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let me say in advance that using the methods mentioned above are great ways of finding colors and I do not mean to discredit them with this article. What I am trying to do instead is to provide another point of view to this subject.&lt;/p&gt;
&lt;h2 id=&quot;the-problems-with-using-these-methods&quot;&gt;The problems with using these methods&lt;/h2&gt;
&lt;p&gt;There are 3 main problems when using the above mentioned methods when choosing colors for our designs.&lt;/p&gt;
&lt;h3 id=&quot;1.-they-don%E2%80%99t-focus-on-sending-our-message-across&quot;&gt;1. They don’t focus on sending our message across&lt;/h3&gt;
&lt;p&gt;I am deeply influenced by Sacha Greif when he mentioned that &lt;strong&gt;picking colors is not really about colors&lt;/strong&gt;. It is about &lt;strong&gt;communication.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to understand why they don’t focus on what we want to communicate in our designs, consider how these tools come up with color combinations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Color Pickers&lt;/strong&gt; –
Color pickers like adobe kuler borrow color theory concepts while suggesting color combinations. While color theory is valid, colors derived from these tools are ultimately derived from mathematical formulas and thus, may not suit out design well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Color Palette Galleries&lt;/strong&gt; –
Color palette galleries provides us with curated color palettes. Although these palettes look beautiful, they are not created with message we want to put across. How will these colors then communicate our messages across?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why would it make sense to use a total stranger’s color palette? These colors might look great, but do they have anything to do with your product and message?
&lt;a href=&quot;http://sachagreif.com/&quot; title=&quot;Sacha Greif&quot;&gt;Sacha Greif&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Probably the most important thing in a design is to make sure the audience gets the intended message. Colors play a very big part in it and it simply doesn’t make sense to do up a design without considering the message and the audience.&lt;/p&gt;
&lt;h3 id=&quot;2.-you-stop-learning-and-improving&quot;&gt;2. You stop learning and improving&lt;/h3&gt;
&lt;p&gt;We tend to get lazy easy, and the number of choices and ease of selecing a palette with these tools makes even easier for us.&lt;/p&gt;
&lt;p&gt;The problem of having it this easy, is that &lt;strong&gt;we stop improving.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consider this scenario.&lt;/p&gt;
&lt;p&gt;You either start browsing online for a color palette or use a color picker tool to easily get a palette for your design. You then proceed to try to make your design with work with it.&lt;/p&gt;
&lt;p&gt;At first it seems great.&lt;/p&gt;
&lt;p&gt;After a while, it doesn’t seem to work as well as you might have expected.&lt;/p&gt;
&lt;p&gt;You go back to browsing color palettes or try to get another palette out of the color picker you used.&lt;/p&gt;
&lt;p&gt;This is what I used to do. Whenever I do so, I noticed that &lt;strong&gt;I stopped thinking.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Without thinking, I tried to find a solution to my problems by searching online, hoping that I can come across a miraculous color palette that is perfect for what I am trying to convey.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is no perfect solution. Color decisions are always subjective. If you are not able to answer to yourself why you chose a certain color, you might have to rethink about your decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One can only build up his experiences with a color by experimenting&lt;/strong&gt; with different choices, by analyzing how they feel when paired together with other colors. While using  color palettes created by others &lt;strong&gt;I stopped thinking and analyzing. I effectively stop learning during these moments.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;3.-you-make-slower-and-worse-decisions&quot;&gt;3. You make slower and worse decisions&lt;/h3&gt;
&lt;p&gt;The number of choices you are exposed to with these tools are enormous.&lt;/p&gt;
&lt;p&gt;As designers, we understand the effect of giving people too many choices. The more choices given, the more confused people will be. They make slower decisions. The worse part is that they make decisions that are worse off. Sometimes, they end up not choosing at all.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We end up walking away, or decide not to choose because it’s too hard to figure out what’s best.
Sheena Iyengar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We know this, yet we are sabotaging ourselves by giving ourselves too many choices.&lt;/p&gt;
&lt;h2 id=&quot;what-you-can-do-instead&quot;&gt;What you can do instead&lt;/h2&gt;
&lt;p&gt;When it comes down to colors, experience is all that matters. Rather than depending on external tools to create colors for our designs, &lt;strong&gt;lets build our own palettes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Only by doing so, we are forced to weigh the consequences of selecting each color. **The labour we put into the choosing process allows us to understand and use them better as we improve. **&lt;/p&gt;
&lt;p&gt;I wrote this post not intending to say that I’m an expert with colors, but as a reminder to myself that I still have much more to learn. I generally find myself jumping straight into using other people’s color palettes and I found myself repeating the whole process without learning deeply about colors. I think a change in processes will do me good.&lt;/p&gt;
&lt;p&gt;How have you been selecting colors for your designs? Have you been using color pickers or palettes? How do they affect your decisions? I’ll love to hear what you think about choosing colors, and how you learnt to make your choices.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wordpress 101 – 5 critical things you need to know to use Wordpress effectively.</title>
    <link href="https://zellwk.com/blog/wordpress101/"/>
    <updated>2013-08-18T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/wordpress101/</id>
    <content type="html">&lt;p&gt;People who have used Wordpress for ages all say that it is extremely to use. Those who are new to wordpress, however, dont usually think that way when they first set their eyes on the backend.&lt;/p&gt;
&lt;p&gt;I felt the same way when I first started with Wordpress. Stuff just gets easier and easier to do overtime and I learnt more becoming a theme developer.&lt;/p&gt;
&lt;p&gt;In this post, I’ll like to share with you the very basics of setting up a wordpress, and talk about 5 critical things you need to know to use Wordpress.&lt;/p&gt;
&lt;p&gt;After knowing these, the things such as changing your navigation menu and creating a post would be a walk in the park.&lt;/p&gt;
&lt;p&gt;Let’s jump into this real quick.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The five items I’m going to share with you today are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install a Wordpress Theme&lt;/li&gt;
&lt;li&gt;Customize your Logo and Tagline&lt;/li&gt;
&lt;li&gt;Upload Pictures, Videos and other files&lt;/li&gt;
&lt;li&gt;Create Posts or Pages&lt;/li&gt;
&lt;li&gt;Create a navigation menu&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1.-install-a-wordpress-theme&quot;&gt;1. Install a Wordpress Theme&lt;/h2&gt;
&lt;p&gt;You are going to need to know how to do this unless your designer or developer is going to do it for you (Or you if like to stick with the default Wordpress theme).&lt;/p&gt;
&lt;p&gt;To &lt;strong&gt;change a theme or install a new wordpress theme&lt;/strong&gt;, go into &lt;strong&gt;Appearance &lt;code&gt;&amp;gt;&lt;/code&gt; Themes&lt;/strong&gt; as shown in the picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/1.-Appearance-theme.jpg&quot; alt=&quot;&quot; title=&quot;Location of themes in wordpress backend&quot;&gt;&lt;/p&gt;
&lt;p&gt;If your theme has already been installed, you can click onto &lt;strong&gt;Activate Theme&lt;/strong&gt; to start using it.&lt;/p&gt;
&lt;p&gt;Otherwise, click onto the install themes tab and select &lt;strong&gt;upload&lt;/strong&gt;. Note that your theme must be in a &lt;strong&gt;zip format&lt;/strong&gt;. If you like to browse other free themes, you can also do so in the install theme screen.&lt;/p&gt;
&lt;p&gt;Be sure to activate your theme after installing it!&lt;/p&gt;
&lt;h2 id=&quot;2.-customize-your-site-title-and-tagline&quot;&gt;2. Customize your Site Title and Tagline&lt;/h2&gt;
&lt;p&gt;The most cruicial part about creating your website for the first time is to customize your website logo, site title and tagline.
A site title to a website is akin to a name for a shop, afterall, you will want to name your own creations.&lt;/p&gt;
&lt;p&gt;The site title or tagline would be the most important things for people to find your website online. Behind the scenes, **most wordpress themes will tell Google to look at the site title or tagline to tell people that you’re here. **&lt;/p&gt;
&lt;p&gt;To &lt;strong&gt;change the site title or tagline&lt;/strong&gt;, go into &lt;strong&gt;Appearance &lt;code&gt;&amp;gt;&lt;/code&gt; Customize&lt;/strong&gt; as shown in the picture. You can then customize your site title and tagline by changing them in the left hand column.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/2.-Appearance-Customize.jpg&quot; alt=&quot;&quot; title=&quot;Location of customize in wordpress backend&quot;&gt;
&lt;img src=&quot;https://zellwk.com/images/2013/08/3.-Site-title-and-tagline.jpg&quot; alt=&quot;&quot; title=&quot;Customizing your website title and tagline&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3.-upload-pictures%2C-videos-and-other-files&quot;&gt;3. Upload Pictures, Videos and other files&lt;/h2&gt;
&lt;p&gt;If you want to show pictures and videos, or even allow your users to download files, “media” is your friend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To upload a file,&lt;/strong&gt; open up &lt;strong&gt;Media &lt;code&gt;&amp;gt;&lt;/code&gt; Add New&lt;/strong&gt; and drag your files into the uploader.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;library&lt;/strong&gt; contains all files you have previously uploaded and you can find them easily by heading into &lt;strong&gt;Media &lt;code&gt;&amp;gt;&lt;/code&gt; Library&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/4.-Media-Library.jpg&quot; alt=&quot;&quot; title=&quot;Location of Media&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4.-create-posts-or-pages&quot;&gt;4. Create Posts or Pages&lt;/h2&gt;
&lt;p&gt;I’m going to spend a little more time in creating posts or pages   because this is where most wordpress users find it the most confusing. I’ll first walk you through the text editor, followed by inserting media (images, videos or PDFs) into your post, and finally publishing it.&lt;/p&gt;
&lt;h3 id=&quot;text-editor-area&quot;&gt;Text editor area&lt;/h3&gt;
&lt;p&gt;Let me first touch on the text editor area and talk about some important icons where you will need to know, beginning with the most basic ones and ending with the most important ones.&lt;/p&gt;
&lt;p&gt;In the text editor area, if you are not trained in HTML, make sure you click the &lt;strong&gt;visual&lt;/strong&gt; mode at the top right corner&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/5.Visual-tab.jpg&quot; alt=&quot;&quot; title=&quot;Editing styles, visual and HTML&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you are in this mode, the following applies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text styles&lt;/strong&gt; – turn text to bold, italic, underline or strikethrough&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/6.-font-styles.jpg&quot; alt=&quot;&quot; title=&quot;Text styles, Bold, italics, underline and strikethrough&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text Alignment&lt;/strong&gt; – Set alignment to left, middle, right ot justify. If left untouched, text will default to left alignment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/7.-Alignment.jpg&quot; alt=&quot;&quot; title=&quot;Text alignment, left, middle, right, justify&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bullet, Numbered list&lt;/strong&gt; – Set selected text into a bullet or numbered list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/8.-lists.jpg&quot; alt=&quot;&quot; title=&quot;bullet or numbered list&quot;&gt;&lt;/p&gt;
&lt;p&gt;Everything up till here is similar to Microsoft Word and I’m sure you know what they do. You might not have seen the upcoming items before and I will accompany them with some quick explanation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blockquotes&lt;/strong&gt; – Sets selected text into a blockquote style. This is very useful if you are quoting someone, or would like to emphasize a point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/9.blockquote.jpg&quot; alt=&quot;&quot; title=&quot;Blockquotes&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Link Tags&lt;/strong&gt; – These two buttons allow you to add/remove a link to/from another website. This allows you to link to another website and the reader gets redirected to the linked area. You can even link to your own posts!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/10-links.jpg&quot; alt=&quot;&quot; title=&quot;link tags&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wordpress More Tag&lt;/strong&gt; – This is the tag to use if you like to limit the words should in your blogroll page. As an example, if you use the more tag after the first paragraph, people viewing your blog page will only be able to see the paragraphs above the more tag (The first paragraph in this case). If you like to view  the article, the will have to click into the article.&lt;/p&gt;
&lt;p&gt;Setting up Wordpress more tag is definitely a good habit to get into.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/11.-more.jpg&quot; alt=&quot;&quot; title=&quot;Wordpress more tag&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Text Format&lt;/strong&gt; – &lt;strong&gt;The text format switch is easily the most important item.&lt;/strong&gt; This allows Wordpress to know which words are  supposed to be a subheading (heading 2 for most wordpress themes) and which words are body text (paragraph).&lt;/p&gt;
&lt;p&gt;Do remember to set your text format to help your readers have an easier time as they read through your articles. Allow room for subheadings by remembering to switch them to Heading 2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/12.textformat.jpg&quot; alt=&quot;&quot; title=&quot;Text format. Switch between headings and paragraphs&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For HTML users&lt;/strong&gt;, if you are comfortable with writing in HTML, feel free to use HTML in the &lt;strong&gt;HTML&lt;/strong&gt; mode. I would actually recommend using HTML because you will be able to control your document much more thoroughly than compared to using the visual mode.&lt;/p&gt;
&lt;h3 id=&quot;using-media&quot;&gt;Using media&lt;/h3&gt;
&lt;p&gt;To use media in your post or page, click on the media button, select your media, change any settings if necessary and click on insert to post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/13.media-button.jpg&quot; alt=&quot;&quot; title=&quot;Media button&quot;&gt;&lt;/p&gt;
&lt;p&gt;Media settings are applicable only to images and the  explanation are as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt; – Title of media
&lt;strong&gt;Caption&lt;/strong&gt; – Small text you would like the image to be accompanied with. Used to provide further context
&lt;strong&gt;Alt text&lt;/strong&gt; – Alternate text to display if image cannot be shown (Always remember to set this, for SEO purposes!)
&lt;strong&gt;Descrption&lt;/strong&gt; – Description of the image if you would like to include it (optional)
&lt;strong&gt;Alignment&lt;/strong&gt; – Option to align image to the left, right or middle.
&lt;strong&gt;Link To&lt;/strong&gt; – Sets the location for which the media should link to (I leave this option as none for most images in my blog post)
&lt;strong&gt;Size&lt;/strong&gt; – Size of the image to be displayed&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/14.-Media-settings.jpg&quot; alt=&quot;&quot; title=&quot;Media settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;The important things you have to configure are “title”, “alt text”, “alignment”, “link to” and “size”.&lt;/p&gt;
&lt;h3 id=&quot;publishing-or-scheduling-a-post%2Fpage&quot;&gt;Publishing or scheduling a post/page&lt;/h3&gt;
&lt;p&gt;There are a few options you can do over at the publish panel within the editing page you are currently on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/15.-publish-settings.png&quot; alt=&quot;&quot; title=&quot;Publish tab &quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preview&lt;/strong&gt; – allows you to preview the page without publishing it. You can have a look firsthand how this post will look like before throwing it out there&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Save Draft&lt;/strong&gt; – allows you to save the work to come back and edit at a later date&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Publish&lt;/strong&gt; – lets you publish the work when you click on the publish button. You can edit the publish times and schedule the post to make wordpress post at a later time instead if you like to.&lt;/p&gt;
&lt;h2 id=&quot;5.-adding-a-navigation-menu&quot;&gt;5. Adding a navigation menu&lt;/h2&gt;
&lt;p&gt;Finally, the navigation menu is the website menu where you see things like home, blog, contact etc. Once you have created some awesome content, you will want people to be able to find them in your website menu.&lt;/p&gt;
&lt;p&gt;The page to create/edit navigation menu is located under &lt;strong&gt;Appearance &lt;code&gt;&amp;gt;&lt;/code&gt; Menu&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;creating-the-menu&quot;&gt;Creating the menu&lt;/h3&gt;
&lt;p&gt;To create a menu, you first have to click the plus sign as shown in the picture and give it a name. I’ve created a menu called new menu as an example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/16.-NEW-MENU.jpg&quot; alt=&quot;&quot; title=&quot;Adding a new menu to your website&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, you have to add the menu you have created to your theme, located under the theme locations tab. Select your primary navigation and add the menu you have created into it. Hit Save and we can proceed to add items into it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/17.-set-menu.jpg&quot; alt=&quot;&quot; title=&quot;Setting up a menu on yout website&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;adding-items-to-the-menu&quot;&gt;Adding items to the menu&lt;/h3&gt;
&lt;p&gt;There are 3 ways to add to the menu, and they are located under theme locations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Custom Links&lt;/strong&gt; – Allows you to add custom links to the menu. This option allows you to link away from your website into other websites. This option is rarely used, but if you want one item in your navigation menu to link to another website, enter the website url here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pages&lt;/strong&gt; – Allows you to insert any page you have created into the menu. Pages are the most common items you’ll find in menus and things like blog, contact, about pages go here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; – Categories are like blog pages, but they allow you to display groups of posts for specifically for that category.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/08/18.-adding-to-menu.jpg&quot; alt=&quot;&quot; title=&quot;Methods to add items to menu&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;summing-it-all-up.&quot;&gt;Summing it all up.&lt;/h2&gt;
&lt;p&gt;Thats it, these are the 5 critical things you will need to know to make wordpress work for you. I bet you’ll be able to do create a post and/or page effortlessly without having to refer to my post after you’ve done it once or twice.&lt;/p&gt;
&lt;p&gt;Hope this helps if you are just starting out with Wordpress, and feel free to ask any questions or let me know if you want me to cover something in the comments!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>5 things you can do to keep learning when things turn unexpectedly difficult</title>
    <link href="https://zellwk.com/blog/learning/"/>
    <updated>2013-07-28T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/learning/</id>
    <content type="html">&lt;p&gt;Learning anything from scratch isn’t a problem. In the beginning, milestones between each difficulty level are small and it is easy to get a sense of accomplishment for each small step you take.&lt;/p&gt;
&lt;p&gt;After one or two weeks, “reality” sets in. It becomes increasingly difficult to hit the next milestone. Sometimes people just forget the initial enthusiam they. Sometimes, they become “too busy”. Most people give up on learning at this stage. Some persist for another month or two before giving up. Yet, others continue to learn and thereafter begin to excel in whatever they do. Is there a secret in learning?&lt;/p&gt;
&lt;p&gt;Over the last half a year, I have gone from knowing nothing about designing and coding, to building two wordpress themes and I am still learning. My motivation is still strong.&lt;/p&gt;
&lt;p&gt;In this post, I would like to share with you how I view learning after persevering for 6 months and how I kept my motivation levels up.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;how-each-learning-journey-looks-like&quot;&gt;How each learning journey looks like&lt;/h2&gt;
&lt;p&gt;Before even begin diving down into the tips on learning. I feel that it is crucial to address how each learning process looks like and the emotional impact we feel from it.&lt;/p&gt;
&lt;p&gt;We traditionally think that the learning curve looks somewhat like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/07/Skills-Usual-Thinking.jpg&quot; alt=&quot;&quot; title=&quot;Traditional thinking on learning curve&quot;&gt;&lt;/p&gt;
&lt;p&gt;I feel that the learning process is not just a smooth diminishing curve shown above. It is just a little more complex.&lt;/p&gt;
&lt;p&gt;Each learning journey invariably takes a similar shape to each other with no regard of the subject discussed. It doesn’t matter if you’re trying to learn to draw, program, design, negotiate, network or anything else for the record. Although the skills you need to pick up are different in each scenario, each journey will probably look something like this. (My drawing sucks, bear with me for a while)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/07/skills-what-I-feel.jpg&quot; alt=&quot;&quot; title=&quot;What the learning curve should instead look like&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lets say for example you start off at 0, an arbitrary number given our current level of skill (or actually 0 if you don’t know anything). Initially, as you begin to put more effort into learning the skills, you see that our skills improve dramatically with a small amount of effort. Everything seems to be going along smoothly, and it doesn’t seem difficult at all. It looks like you have the talent to make it!&lt;/p&gt;
&lt;p&gt;Eventually, you reach a plateau. This plateau sometimes takes a lot of effort to break through. Other times, it is pretty easy.
Sometimes, no matter how much you try, it doesn’t look like your skills are improving and you begin to feel frustrated. This is very normal and we humans usually tend to start undermining ourselves at this juncture and begin to wonder whether we are overly optimistic at the beginning, and whether we had any talent in the skill we are trying to develop.&lt;/p&gt;
&lt;p&gt;With enough effort, it is possible that you break through to the next level. Things goes smoothly for another period, the future looks bright and nothing seems impossible again. Unfortunately, further down the road, you meet the same problem again. Your skills seem to get stagnant.&lt;/p&gt;
&lt;p&gt;This happens to me a lot, in many skills that I have tried to pick up. That includes playing the guitar, learning to draw, learning to design websites, learning to code and other areas. I had the experience of giving up in the first plateau, sometimes second, sometimes third. Sometimes, I manage to strive on despite the difficulties. After reviewing my past successes and failures, I found a pattern.&lt;/p&gt;
&lt;p&gt;The learning of any skill follows a cycle, where there is rapid improvement, followed by slow improvement, and a plateau.&lt;/p&gt;
&lt;p&gt;It’s not surprising that our emotions follow a pattern that is closely related to the skills cycle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/07/skills-and-emotions.jpg&quot; alt=&quot;&quot; title=&quot;Relationship between the Learning Curve and Emotions we feel&quot;&gt;&lt;/p&gt;
&lt;p&gt;At each breakthrough, optimism and other positive emotions wins over.&lt;/p&gt;
&lt;p&gt;At each plateau, frustration and other negative emotions build up. We start to feel like shit. The next instance you know, people start quitting.&lt;/p&gt;
&lt;p&gt;The key therefore, is to make sure that you, for the lack of a better term, &lt;strong&gt;pull through each emotion hurdle.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In 6 months, I went from not knowing any code at all, to developing two wordpress themes at the time in writing. I have encountered many ups and downs, cried over my designs looking too ugly, and sometimes felt that I was the dumbest person on earth. After going through these, I have learnt a few lessons keeping myself happy and thus perservering through the tough situations.&lt;/p&gt;
&lt;h2 id=&quot;how-to-make-it-through-each-emotional-hurdle&quot;&gt;How to make it through each emotional hurdle&lt;/h2&gt;
&lt;p&gt;Learning to overcome emotional setbacks is no easy task. Like any other skill, learning this one takes time, effort and perserverance.&lt;/p&gt;
&lt;p&gt;The first step to learning to overcome emotional setbacks is to learn to identify your feelings. The better you are able to articulate what you feel at any point in time, the better poised you are to determine what actions you have to take.&lt;/p&gt;
&lt;p&gt;What do you currently feel? Angry? Worthless? Apathy? Bored? Happy? Relaxed? Invincible?&lt;/p&gt;
&lt;p&gt;If your emotional state is positive, then forget about monitoring it and carry on whatever you want to do&lt;/p&gt;
&lt;p&gt;If your emotional state is anything negative, the second step is to change it. The goal is to remove negative emotions as quickly as possible.&lt;/p&gt;
&lt;p&gt;Here are a list of activities that you can do to switch your feelings.&lt;/p&gt;
&lt;h3 id=&quot;1.-meditate&quot;&gt;1. Meditate&lt;/h3&gt;
&lt;p&gt;Its a cliche you here everywhere. The thing is, the cliche works.&lt;/p&gt;
&lt;p&gt;The thing about meditation is not trying to sit still for hours and not to count breaths.&lt;/p&gt;
&lt;p&gt;The thing about meditation is to learn to know what you feel now, to accept it and sometimes to dive further into asking yourself why you feel that way.&lt;/p&gt;
&lt;p&gt;Meditation is one good way to begin learning how to identify your emotions and also a good way to clear out any negative emotions you might be having.&lt;/p&gt;
&lt;p&gt;Try: Make a habit out of meditating by doing it twice a day, 15mins every morning and every night. I imagine that you will start to feel its effects after keeping it up for at least a month.&lt;/p&gt;
&lt;p&gt;If you’re totally clueless to meditation, one resource I find particularly helpful to start out with &lt;a href=&quot;http://www.peterrussell.com/HMWET/index.php&quot; title=&quot;How to meditate without trying&quot;&gt;Peter Russell’s meditation course – How to meditate without even trying&lt;/a&gt;. This course operates on a pay what you wish scheme, and you can get it at a very low price of $1 if you wish to begin trying it out.&lt;/p&gt;
&lt;h3 id=&quot;2.-create-a-journal.&quot;&gt;2. Create a journal.&lt;/h3&gt;
&lt;p&gt;Writing is probably one of the best ways to keep track of what you have done. Simply the process of offloading what you have been thinking can be a tremendous help to empty your mind to let thoughts flow.&lt;/p&gt;
&lt;p&gt;I tend to find writing as one good way to think to myself. If I try to think about a difficult problem, I usually get nowhere and I get frustrated easily. However, when I start writing down my problems and thoughts, solutions naturally emerge.&lt;/p&gt;
&lt;p&gt;To help myself understand how far I have came (which is a good motivation booster), I set weekly goals for whatever I am trying to learn, and I write down my thoughts and what I did daily.&lt;/p&gt;
&lt;p&gt;Try: Set a goal for the task you are trying to learn, and write down what you did daily.&lt;/p&gt;
&lt;h3 id=&quot;3.-stay-away-from-critics&quot;&gt;3. Stay away from critics&lt;/h3&gt;
&lt;p&gt;A common problem I found is that whenever my learning becomes stagnant and I start to get frustrated, I have the urge to talk to people about what I am experiencing, and to find answers as to how I should continue.&lt;/p&gt;
&lt;p&gt;I often talked about what I was experiencing with friends or family, they are the easiest people to reach, but are often not the ideal candidates to talk to.&lt;/p&gt;
&lt;p&gt;Critics are people who expresses an unfavourable opinion of something. It turns out that most of my friends around are critics in disguise. Whenever I share a new design with these people, subconciously, they shoot down certain areas where they think are not good enough.&lt;/p&gt;
&lt;p&gt;Try: If you know who these people are, try not to talk to them when you are not feeling in the game, it is very likely that they can conciously or unconciously cause you to give up on what you’re doing.&lt;/p&gt;
&lt;p&gt;Who should I talk to if I should not talk to my friends? Find people who are smarter than you, or have done it before.&lt;/p&gt;
&lt;h3 id=&quot;4.-get-an-accountability-group&quot;&gt;4. Get an accountability group&lt;/h3&gt;
&lt;p&gt;There are tons of accountability groups out in the internet with people that are far smarter than you and I combined. When looking for accountability partners or for advice, it is extremely important to find someone who has already done it before you, and can show you the way if you get lost.&lt;/p&gt;
&lt;p&gt;More often than not, these group of people are not our close friends that we currently have (at least not for me at the time of writing). However, they can be easily found all around the internet in various tribes.&lt;/p&gt;
&lt;p&gt;Just as an example, I have had the opportunity to be part of &lt;a href=&quot;http://www.lifestyleliberationacademy.com/&quot; title=&quot;Lifestyle Liberation Academy&quot;&gt;Henri Juntilla’s Lifestyle Liberation Academy&lt;/a&gt; and &lt;a href=&quot;http://go.ramitsbraintrust.com/&quot; title=&quot;Ramit&#39;s Brain Trust&quot;&gt;Ramit’s Brain Trust.&lt;/a&gt; Both groups feature people who have already made it far past the level that I am at. Answers from these groups of people are far more likely to be applicable to my situation compared to advice given by close friends that have not made it.&lt;/p&gt;
&lt;p&gt;Try: Find a group online that talks about the things that you are trying to learn. Join them, participate actively and ask questions.&lt;/p&gt;
&lt;h3 id=&quot;5.-play-and-have-fun&quot;&gt;5. Play and have fun&lt;/h3&gt;
&lt;p&gt;Last but not least, humans learn best when we are having fun. Consider the time you were in school and was forced to learn a subject you didn’t like versus another that you liked. How did the learning process go?&lt;/p&gt;
&lt;p&gt;Similarly, if you find joy in the learning process, then it will be much easier for you to continue learning. The unfortunate thing is that in the current society, we are indoctrinated not to play.&lt;/p&gt;
&lt;p&gt;I have been on both sides of the coin and fluctuate between these two mental modes while learning about web design. I have also noticed that when I try to adopt a playful mentality, it is easier for me to carry on learning and experimenting with different colors, grid layouts and other fundamental design aspects. However, if I were to go into a serious no joke mood, the results often turn out to be disastrous.&lt;/p&gt;
&lt;p&gt;Try: Adopting a playful attitude towards whatever you are trying to learn. Try experimenting with many different combinations and see what you come up with!&lt;/p&gt;
&lt;h2 id=&quot;ending-it-all-off&quot;&gt;Ending it all off&lt;/h2&gt;
&lt;p&gt;Mastering the learning process couldd eventually very much impact many major areas of our lives. I hope this short sharing session of what I think about learning and what you can do to aid in your own learning process is helpful in whatever you are trying to learn.&lt;/p&gt;
&lt;p&gt;Did you have any other tips or process that you use to aid yourself in the learning process, I’ll really love to hear more about them.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to organize and edit your CSS painlessly</title>
    <link href="https://zellwk.com/blog/css-preprocessors/"/>
    <updated>2013-06-17T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/css-preprocessors/</id>
    <content type="html">&lt;p&gt;It is very common to have to change CSS codes midway in a design at some point or another. Because of the way most CSS codes are structured, it is usually painful to sieve through the whole code and look for the particular area where you would like changed.&lt;/p&gt;
&lt;p&gt;Whats more, if colors or text sizes have to be changed, it can be disastrous if you miss out on a few elements and an absolute headache if you can’t find where they’re located&lt;/p&gt;
&lt;p&gt;In this article, I’m going to introduce one simple add-on that really helped me with organizing and changing my CSS codes.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;introduction-to-css-preprocessors&quot;&gt;Introduction to CSS preprocessors&lt;/h2&gt;
&lt;p&gt;CSS preprocessors are programs that allow you to write in a language similar to CSS, and these preprocessors will automatically convert the languages into CSS.&lt;/p&gt;
&lt;p&gt;These preprocessors come with extremely powerful abilities that solves all of the above problems and adds performance benefits to the final CSS code. In short, they’re just great stuff and I’ll explain more on the benefits and give examples of how they helped me later in the article.&lt;/p&gt;
&lt;p&gt;The two most common CSS preprocessors out in the market are &lt;a href=&quot;http://lesscss.org/&quot; title=&quot;The dynamic stylesheet language&quot;&gt;LESS&lt;/a&gt; and &lt;a href=&quot;http://sass-lang.com/&quot; title=&quot;SASS - Synthetically awesome stylesheets&quot;&gt;SASS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The benefits discussed later in the article applies to all preprocessors in general. However, since I only have experience with SASS personally, and would focus the discussion and examples on SASS.&lt;/p&gt;
&lt;h2 id=&quot;what-are-the-benefits-of-sass%3F&quot;&gt;What are the benefits of SASS?&lt;/h2&gt;
&lt;p&gt;SASS provides two different syntaxes for designers to use, sass and scss. &lt;strong&gt;I prefer scss more than sass because it is totally the same as normal css.&lt;/strong&gt; If you have experience with programming in python though, sass might be more attractive to you.&lt;/p&gt;
&lt;p&gt;All my code examples later in the article will be typed with the scss syntax because I use them.&lt;/p&gt;
&lt;p&gt;SASS provides many benefits to us designers and allows us to shorten the amount of code we have to write. Here are some of the benefits that I felt after starting to use SASS for my projects in the last two months.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Easier to organize and find code&lt;/li&gt;
&lt;li&gt;Easier to change code&lt;/li&gt;
&lt;li&gt;Reduced need to remember specific things&lt;/li&gt;
&lt;li&gt;Reduced need for calculations&lt;/li&gt;
&lt;li&gt;Increased the performance of deployed code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a list of SASS features that I have been actively using.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nesting&lt;/li&gt;
&lt;li&gt;Partials&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;Other awesome stuff&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I go through each feature in detail and explain which how the feature has helped me with the above benefits.&lt;/p&gt;
&lt;h2 id=&quot;feature-1%3A-nesting&quot;&gt;Feature 1: Nesting&lt;/h2&gt;
&lt;p&gt;Wikipedia defines nesting as enclosing of control structures one into another, usually indicated through different indentation levels within the source code.&lt;/p&gt;
&lt;p&gt;**In simple terms, nesting relates to showing items at the same indentation levels if they are within the same parent. **&lt;/p&gt;
&lt;p&gt;SASS nesting works the same way as most programming nesting work. Here’s an example of SASS nesting at work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/nesting-example.png&quot; alt=&quot;&quot; title=&quot;Nesting example with an anchor tag selector in a h5 selector&quot;&gt;&lt;/p&gt;
&lt;p&gt;Within each parent bracket, if there is a child selector within,  the output to CSS will contain the parent selector, followed by the child selector, and any properties mentioned will be group together smartly.&lt;/p&gt;
&lt;p&gt;I find that the ability to clearly see child selectors within parent selectors are extremely helpful.&lt;/p&gt;
&lt;p&gt;Compared to the previously wordy selectors, SASS nesting allows me to write short and concise selectors that I can easily glance at and know what I am currently working on.&lt;/p&gt;
&lt;p&gt;When I come back to find things within my code, I can easily remember how the code looks like and quickly get to the portion that I want to edit.&lt;/p&gt;
&lt;h2 id=&quot;feature-2%3A-partials&quot;&gt;Feature 2: Partials&lt;/h2&gt;
&lt;p&gt;The second feature that I find very helpful in organizing my code is to break them up into smaller pieces with partials.&lt;/p&gt;
&lt;p&gt;If you have been working with CSS for a while, you might know of the @import statement, where you can import another CSS file into the current CSS file for execution.&lt;/p&gt;
&lt;p&gt;For those that don’t know, @import statements allow you to break up your CSS files into smaller pieces, like header, main, footer, sidebar sections and piece each bit together in a style.css file.&lt;/p&gt;
&lt;p&gt;@import statements require browsers to send an extra HTTP request to fetch the separate CSS file. This means that the user will have to wait a little longer to be able to see the website.&lt;/p&gt;
&lt;p&gt;The more @import statements there are, the slower your website will load. Hence, the practice of using @important statements within deployed code are generally frowned upon.&lt;/p&gt;
&lt;p&gt;Partials work the same way with one major difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With partials and SASS, importing happens when the CSS file is produced.&lt;/strong&gt; There will be no need for browsers to send extra requests that lengthen the wait time for our readers and users.&lt;/p&gt;
&lt;p&gt;Because of this benefit, I can safely break down my files into many different partials to organize my code and I’m not afraid that it will hinder the performance of the final code.&lt;/p&gt;
&lt;p&gt;To use partials, you have to save the filename starting with an underscore, like “_typography.scss” or “_header.scss” for example.&lt;/p&gt;
&lt;p&gt;Importing these partials work exactly the same as as importing CSS files. Within a main scss file, you just have to write @import “name of partial”;&lt;/p&gt;
&lt;p&gt;Below is an example of how I used SCSS partials on a project that I am currently working on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/partials-example.jpg&quot; alt=&quot;&quot; title=&quot;How to save partials  and import them into a SASS project&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, I have broken up my SASS files into very many partials including typography, color, different sections of the website. This allows me to find my code quickly and easily.&lt;/p&gt;
&lt;p&gt;I am still very new to the practice of breaking up code and organizing them like the example shown above, and the example shown is definitely not the best way to go about doing things.&lt;/p&gt;
&lt;p&gt;There are many other frameworks that hold best practices on how one can organize his or her SASS files. Of them, probably the most famous one is &lt;a href=&quot;http://smacss.com/&quot; title=&quot;Scalable and Modular Architecture for CSS&quot;&gt;SMACSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It doesn’t matter if you use a framework or just go about doing it your way when you are just starting out. In my experience, the practice of just breaking up code into smaller and manageable pieces saves tons of heartache in the long run, and I’m still using my hacky way of organizing code at the moment.&lt;/p&gt;
&lt;h2 id=&quot;feature-3%3A-variables&quot;&gt;Feature 3: Variables&lt;/h2&gt;
&lt;p&gt;Variables are a die for feature that I have deeply fell in love with ever since using them once for a simple project. I think you will too. &lt;strong&gt;This is the pill to solve most your needs to change CSS codes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Variables, as its name suggests, give you the option to store anything as a variable. The stored items can be changed at any time and proerties using the variable will be updated automatically.&lt;/p&gt;
&lt;p&gt;Here’s a quick example&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/variables-example.png&quot; alt=&quot;&quot; title=&quot;Sass Variables example &quot;&gt;&lt;/p&gt;
&lt;p&gt;Variables are very very powerful and allows you to easily change anything on your website as long as you use them.&lt;/p&gt;
&lt;p&gt;Great candidates for using varables are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Colors (ALL colors)&lt;/li&gt;
&lt;li&gt;Font Family&lt;/li&gt;
&lt;li&gt;Font size&lt;/li&gt;
&lt;li&gt;Line heights&lt;/li&gt;
&lt;li&gt;Baseline&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I firmly believe the ability to use variables in SASS is already more than enough reason to spend some time on learning it since it reduces a whole lot of pain in future projects.&lt;/p&gt;
&lt;p&gt;In my last project, I had to switch colors and font sizes for some items for some items in the design. Instead of crawling around my whole css file and making sure everything is correctly changed, I simply head over to my variables partial and switch the colors and font sizes.&lt;/p&gt;
&lt;p&gt;What was supposed to be a 2-hour worth of senseless combing suddenly became a quick 2mins work.&lt;/p&gt;
&lt;h2 id=&quot;feature-4%3A-mixins&quot;&gt;Feature 4: Mixins&lt;/h2&gt;
&lt;p&gt;Mixins are useful helpers that can be predetermined and used at various areas while coding.&lt;/p&gt;
&lt;p&gt;I feel that mixins are helpful because it reduces the need to remember things such as the specific code to produce a circle and various vendor prefixes.&lt;/p&gt;
&lt;p&gt;Here’s a quick example of how it looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/mixin-example.png&quot; alt=&quot;&quot; title=&quot;Mixin example with self defined mixin and compass mixins&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the above code, the circle mixin was predefined myself by copying the required code off from the internet. The vendor prefixes added with box shadow are predefined in a mixin library called &lt;a href=&quot;http://compass-style.org/&quot; title=&quot;Compass - A sass mixin library&quot;&gt;Compass&lt;/a&gt; referenced above.&lt;/p&gt;
&lt;p&gt;Compass is a solid mixin library that provides plenty of mixins that is more than enough to do almost everything you might require. To learn to use compass mixins, give the &lt;a href=&quot;http://compass-style.org/reference/compass/&quot; title=&quot;Compass reference page&quot;&gt;reference pages&lt;/a&gt; a quick look and see the examples in action.&lt;/p&gt;
&lt;p&gt;There are other notable mixin libraries out there and &lt;a href=&quot;http://bourbon.io/&quot; title=&quot;Burbon - a lightweight Sass mixin library&quot;&gt;burbon&lt;/a&gt; is another one of them.&lt;/p&gt;
&lt;p&gt;No matter which you would like to choose, installing these mixin libraries along with SASS is very a easy thing to do, especially on a mac, and I highly recommend going with one of them. I personally use compass.&lt;/p&gt;
&lt;p&gt;I saved a lot of time and effort on CSS coding without the need to remember prefixes and other commonly used codes. This is something a little more advanced, but is immensely useful as you start to adopt SASS.&lt;/p&gt;
&lt;p&gt;Here’s another quick example of using mixins for media queries&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/CSS-media-queries.png&quot; alt=&quot;&quot; title=&quot;Media queries with Sass&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;feature-5%3A-other-awesome-stuff&quot;&gt;Feature 5: Other awesome stuff&lt;/h2&gt;
&lt;p&gt;SASS comes along with very many helper functions that allows a ton of code to be programmatically correct without the need to do calculations yourself.&lt;/p&gt;
&lt;p&gt;There are so many helper functions that I can’t even remember them all. Here are my top 2 most used random things to date&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Basic mathematical expressions&lt;/p&gt;
&lt;p&gt;Basic mathematical expressions can be carried out straight while writing SASS. Because of this, you’ll catch me often writing things like&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/helper-math.png&quot; alt=&quot;&quot; title=&quot;Multiplying values with Sass&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Color alteration functions&lt;/p&gt;
&lt;p&gt;I usually use color alteration functions within my variables partials and they look like this&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $head-c:#e2e2e2;
 $body-c:darken($head-c,20%);
 // $body-c has the color #afafaf because it was darked 20% from #e2e2e2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Visit the &lt;a href=&quot;http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html&quot; title=&quot;Sass reference page&quot;&gt;Sass reference page&lt;/a&gt; to find out more about other functions.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;SASS is a very powerful addon to have in your arsenal while writing CSS. It allows your to forget about the various nuances and focus your time in creating beautiful layouts and designs while at the same time provide flexibility for changes that happen along the way.&lt;/p&gt;
&lt;p&gt;I honestly say that if I didn’t encounter SASS, I would probably have spent a whole lot more time trying to change colors, font-sizes and basically struggling with CSS.&lt;/p&gt;
&lt;p&gt;I hope this was a good introduction to SASS and how you could benefit from using SASS as well. I didn’t regret learning about Sass at all, and I don’t think you will too.&lt;/p&gt;
&lt;p&gt;If you want to get start with Sass, a very good video source that will explain many things in detail, including how to get Sass up and running on your computer can be found at &lt;a href=&quot;http://leveluptuts.com/&quot;&gt;levelup tuts&lt;/a&gt;. I highly recommend looking through the videos and learning at least you saw what Sass can do with nesting, variables, mixins, partials and extensions.&lt;/p&gt;
&lt;p&gt;Have fun playing with Sass!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Make your website more professional with 1 simple step</title>
    <link href="https://zellwk.com/blog/make-your-website-more-professional-with-1-simple-step-watch-the-space-between-lines-of-text/"/>
    <updated>2013-06-02T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/make-your-website-more-professional-with-1-simple-step-watch-the-space-between-lines-of-text/</id>
    <content type="html">&lt;p&gt;One of the blocks I had while I designed my first website was how much space should I leave after my headings or paragraphs. Along the same question, how much space should I give within the line of text themselves. My first approach to this whole process was to eyeball it. You might have done the same&lt;/p&gt;
&lt;p&gt;There’s nothing wrong with eyeballing the amount of space and setting it according to your gut feeling. However, there is a much better approach to setting this amount of space and we’re going to cover it in this article today.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;so-how-do-i-set-the-amount-of-space%3F&quot;&gt;So how do I set the amount of space?&lt;/h2&gt;
&lt;p&gt;Imagine right now you are trying to write on a blank piece of paper instead of designing for the web &lt;em&gt;(I know, a piece of paper is totally unlike the web. Bear with me for a sec).&lt;/em&gt; More often than not, the handwriting will turn out terrible and words good all over the place.&lt;/p&gt;
&lt;p&gt;Now instead of writing on a blank piece of paper, recall the times in school where we had to write on notebooks with lines. Compared to the writing on a blank piece of paper, don’t your writing look nicer? (I know mine did).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/handwrite-vs-lines.jpg&quot; alt=&quot;Writing on a blank piece of paper vs writing on a page with guide lines&quot; title=&quot;Writing on a blank piece of paper vs writing on a page with guide lines&quot;&gt;&lt;/p&gt;
&lt;p&gt;The concept of setting lines is called Vertical Rhythm. Vertical Rhythm has been echoed numerous times previously in the print design industry. It has withstood the test of time and has now found its way into web design.&lt;/p&gt;
&lt;h2 id=&quot;why-is-vertical-rhythm-so-important%3F&quot;&gt;Why is Vertical Rhythm so important?&lt;/h2&gt;
&lt;p&gt;No amount of writing will beat examples. Right in the next image is a screenshot of a webpage I took that is constructed without a proper vertical rhythm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/Pic-without-vertical-Rhythm.png&quot; alt=&quot;Example of a webpage without vertical rhythm&quot; title=&quot;Example of a webpage without vertical rhythm&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here is another screenshot where I did a little bit of correction with Vertical Rhythm set in place&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/Pic-with-vertical-rhythm.png&quot; alt=&quot;Example of the same webpage with vertical rhythme&quot; title=&quot;Example of the same webpage with vertical rhythme&quot;&gt;&lt;/p&gt;
&lt;p&gt;I only changed a few things in this example. Here is what I changed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Changed the spacing between heading and body text.&lt;/li&gt;
&lt;li&gt;Changed the spacing between bullet points and body text.&lt;/li&gt;
&lt;li&gt;Changed the spacing within the small header on the top right&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thats it.&lt;/p&gt;
&lt;p&gt;Minor changes in the spacing between text, paragraphs and headings play a very big part in how we read things. If the space provided is not similar, we get disrupted, and it is tiring for us to continue reading further.&lt;/p&gt;
&lt;p&gt;There are other things that can be improved with other design principles, but thats a topic for another day.&lt;/p&gt;
&lt;h2 id=&quot;so-how-do-i-use-vertical-rhythm-in-my-website%3F&quot;&gt;So how do I use vertical rhythm in my website?&lt;/h2&gt;
&lt;p&gt;Understanding what is vertical rhythm first is paramount to using it in your website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first step&lt;/strong&gt; to creating a vertical rhythm is to &lt;strong&gt;establish a baseline.&lt;/strong&gt; A baseline simply refers to the guide lines as with the writing analogy above. As designers, we have the power to change this property and it is important for us to use it wisely.&lt;/p&gt;
&lt;p&gt;The baseline is determined by the line height of one of your website text. Most use the body text line height to determine the baseline. A general rule to setting this line height is that it should be approximately 1.2 to 1.5times the font size of whatever you chose as the proxy. I personally feel that a line height of at least 1.4 times the font size looks alot more appealing.&lt;/p&gt;
&lt;p&gt;For example, I used a font size of 20px in my website and a line height of 30px.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second step&lt;/strong&gt; is to &lt;strong&gt;ensure what all vertical margins, paddings and borders used adds up to a multiple of the line height&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our example, the sentence means that all top or bottom margins, paddings and borders must add up to a multiple of 30px.&lt;/p&gt;
&lt;p&gt;These margins, paddings or borders can be used in any combination as long as it adds up to such a multiple. You can make margin-top to be 20px while margin-bottom 10px to achieve the same effect.&lt;/p&gt;
&lt;p&gt;Not all is well though.&lt;/p&gt;
&lt;p&gt;Lets say you have a heading size of 36px. Setting a line height of 30px means that the second line of text will overlap the first line of text, not pretty. If a line height of 60px was used instead, then the spacing between the lines gets too large.&lt;/p&gt;
&lt;p&gt;During these situations, the vertical rhythm rules seems to be a little too rigid. Some say that it is impossible to establish a perfect vertical rhythm as we can not possibly know how many lines of text a given heading would consist of.&lt;/p&gt;
&lt;p&gt;Instead, I’ll love to expand the rules of vertical rhythm just a tiny bit. to accommodate multiples of 0.5.&lt;/p&gt;
&lt;p&gt;In our example, 36px heading could have a 45px line height, problem solved. If its still not good, consider increasing the font size of your heading text.&lt;/p&gt;
&lt;p&gt;The system seems to be wonderful and allows me to deal with most situations without a hitch. Thats what I found so far after creating 2-3 websites. I might be wrong, please feel free to argue this point.&lt;/p&gt;
&lt;p&gt;By following these two simple steps, we have website that has a consistent rhythm that flows and it aids our users in reading our content.&lt;/p&gt;
&lt;p&gt;In summary, the steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Establish a baseline&lt;/li&gt;
&lt;li&gt;Make all top or bottom paddings, margins, borders and line heights add up to a 0.5 multple of the line height.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;do-all-professional-web-designers-use-a-vertical-rhythm%3F&quot;&gt;Do all professional web designers use a vertical rhythm?&lt;/h2&gt;
&lt;p&gt;They all establish a vertical rhythm, but they dont strictly adhere to the rigid definitions set above.&lt;/p&gt;
&lt;p&gt;As we all know, rules are meant to be broken, but it is only advisable to break the rules once you know how to use them.&lt;/p&gt;
&lt;p&gt;Here’s an example of how Typecast decided to create its vertical rhythms.&lt;/p&gt;
&lt;p&gt;**Note: They use em as measurement, but I’m gonna convert to pixels to help better understand their process. **&lt;/p&gt;
&lt;p&gt;**Note2: These are my interpretations **&lt;/p&gt;
&lt;p&gt;Lets begin by first looking at an overview of one of typecast’s posts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/Typecast-pic1.jpg&quot; alt=&quot;Example of vertical rhythm – Typecast Case Study&quot; title=&quot;Example of vertical rhythm – Typecast Case Study&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first step to looking at vertical rhythm is to determine the  baseline. I’m assumming that Typecast uses the body text as baseline as follows&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1: Find the baseline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/body-text.jpg&quot; alt=&quot;Determining whether hero text adheres to baseline&quot; title=&quot;Determining whether hero text adheres to baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the screen shot shown above, there are two main areas where type is different. I’m going to call them “Hero text” for the portion where the first paragraph is shown and “Heading” for the header plus meta text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: Determine whether other text adheres to the baseline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/Hero-text.jpg&quot; alt=&quot;Determining whether hero text adheres to baseline&quot; title=&quot;Determining whether hero text adheres to baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/06/Heading-text.jpg&quot; alt=&quot;Determining whether headline and meta text adhere to the baseline&quot; title=&quot;Determining whether headline and meta text adhere to the baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Typecast’s case, it does seem that they have a standard vertical rhythm fixed into the website at 31px. However, they do not strictly obey the standard and there is one area where the rhythm is broken at the hero text.&lt;/p&gt;
&lt;h2 id=&quot;what-does-this-all-mean%3F&quot;&gt;What does this all mean?&lt;/h2&gt;
&lt;p&gt;Spaces between text plays a very important role in helping readers feel comfortable while reading in a page. Thus, when there is some sort of vertical rhythm built into a page, it looks alot more professional that one that is simply hacked together.&lt;/p&gt;
&lt;p&gt;Vertical rhythm is important, but there is no need to rigidly follow the fixed rules. As long as you are experienced with building a good rhythm on a page, feel free to break the rule, but only after you’ve understood it completely!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Have you tried building a webpage with a vertical rhythm built in? Let me know how it goes!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a clean and simple website (Part 3 - Style the content and 6 items to take note)</title>
    <link href="https://zellwk.com/blog/creating-a-clean-and-simple-website-part-3-style-the-content-and-6-items-to-take-note/"/>
    <updated>2013-05-26T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/creating-a-clean-and-simple-website-part-3-style-the-content-and-6-items-to-take-note/</id>
    <content type="html">&lt;p&gt;Now that you’ve managed to create the layout and header sections, its time to move into the meat of the series. In this article, I’ll discuss how I styled the content section on my blog and also mention various elements that are easily overlooked by first time designers. If you’re working on your own blog, this would be a great post to pick up important design considerations and to see if you missed anything out.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Note: This is the third article of the series on creating a clean and simple website. If you’re new here, you might want to check out &lt;a href=&quot;https://zellwk.com/blog/creating-a-clean-and-simple-website-part-1-html/&quot; title=&quot;Creating a clean and simple website - Write the HTML&quot;&gt;Part 1 on creating the HTML&lt;/a&gt; and &lt;a href=&quot;https://zellwk.com/blog/creating-a-clean-and-simple-website-part-2-styling-the-header/&quot; title=&quot;Creating a clean and simple website - Style the header&quot;&gt;Part 2 on styling the header section&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;Okay lets begin!&lt;/p&gt;
&lt;h2 id=&quot;let-me-give-you-a-heads-up-on-the-6-items-you-need-to-take-note-of&quot;&gt;Let me give you a heads up on the 6 items you need to take note of&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Text.&lt;/li&gt;
&lt;li&gt;Font styles (think about bold and italic text)&lt;/li&gt;
&lt;li&gt;Links&lt;/li&gt;
&lt;li&gt;Images, videos, audio&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Blockquotes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of the above items are extremely important and could break a blog post if they are not properly styled. (Honestly, I forgot to style &lt;strong&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;&lt;/strong&gt; and &lt;em&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;&lt;/em&gt; tags and discovered that none of my text were bold when I used them. Not fun, and I don’t think you’ll want that to happen to you.)&lt;/p&gt;
&lt;h2 id=&quot;1.-text&quot;&gt;1. Text&lt;/h2&gt;
&lt;p&gt;There are very many factors when it comes to choosing the text that you use in your website. The most common problem of them all is probably “how to choose a typeface”, and its a whole discipline by itself and is way out of scope in this article.&lt;/p&gt;
&lt;p&gt;**No matter which typeface you have chosen, the same steps are involved in making sure your article is easy to read. **&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choose the text size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The default font size on modern browsers today is 16px. I recommend choosing a font size slightly larger than 16px because it aids legibility. It is up to you to choose. I personally like 18px or 20px for my own designs.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Select a comfortable leading (Line-height in css)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leading refers to the amount of space inbetween each line of text. The general convention is to use a multiple between 1.2 to 1.5. The larger the width of your text (also called measure), the larger your leading should be.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Create a vertical rhythm&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vertical rhythm is a big term. Simply put, it means to create visual consistency, and that would allow user’s eyes to be able to follow your text without the need to concentrate. Basically, its just a fancy pants term that says &lt;strong&gt;&amp;quot;create margins or paddings that are a multiple of the line height&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ll post my take on the vertical rhythm in the next blog post. If you are interested in knowing what it is in the meantime, do check out these two awesome articles on vertical rhythm.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://24ways.org/2006/compose-to-a-vertical-rhythm/&quot;&gt;Compose a Vertical Rhythm&lt;/a&gt; on 24ways&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://typecast.com/blog/4-simple-steps-to-vertical-rhythm&quot;&gt;4 Simple Steps to Vertical Rhythm&lt;/a&gt; on the typecast blog&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2.-font-style-and-font-weight&quot;&gt;2. Font Style and Font Weight&lt;/h2&gt;
&lt;p&gt;Closely linked with text are font styles and weights. I mentioned earlier that I totally missed these two things and had wondered why my text couldn’t be &lt;strong&gt;bolded&lt;/strong&gt; nor &lt;em&gt;italicised&lt;/em&gt;. This was simply because I didn’t remember to style the &lt;code&gt;strong&lt;/code&gt; and &lt;code&gt;em&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;Here are the codes you’ll need.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;strong { font-weight: bold;  }
em     { font-style: italic; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;3.-links&quot;&gt;3. Links&lt;/h2&gt;
&lt;p&gt;Links have &lt;strong&gt;5 different states&lt;/strong&gt; to be styled. We touched on this a little while styling the navigation last session.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Link - appearance of links&lt;/li&gt;
&lt;li&gt;Visited - appearance of visited links&lt;/li&gt;
&lt;li&gt;Hover - appearance of links when the mouse lands on it&lt;/li&gt;
&lt;li&gt;Focus - appearance of links when it is tabbed to&lt;/li&gt;
&lt;li&gt;Active - appearance of links when it is clicked on&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of the 5 states, I believe only the active state is not essential. I will style the rest of the states to make sure its consistent with my design.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: you have to style them in the order stated above. Expect hiccups otherwise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An acronym to remember these link states goes by &lt;strong&gt;L&lt;/strong&gt;o&lt;strong&gt;V&lt;/strong&gt;e &lt;strong&gt;HA&lt;/strong&gt;te. Oh the irony.&lt;/p&gt;
&lt;p&gt;Focus is not included in the acronym. As a rule of thumb, whenever you use hover, use the same style for focus.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a {
    color: #ce6f20;
}

a:visited {
    color: #ce6f20;
    /* Visited color set to the color as a link because I wanted them to look the same */
}
a:hover,
a:focus {
    color: #45433f;
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;4.-images&quot;&gt;4. Images&lt;/h2&gt;
&lt;p&gt;Images are styled in a different way that you might expect in content management systems such as wordpress. When inserting images, you are given the opportunity to select the alignment of your image. There are 4 choices: “none”, “align left”, “center” or “align right”.&lt;/p&gt;
&lt;p&gt;What these choices does is that it adds the specifc class to your image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The image is automatically given an alignleft class if you chose to align it to the left.&lt;/strong&gt; This is what happens for the other alignment options as well.&lt;/p&gt;
&lt;p&gt;To style images, it is important to style all the possible align ment styles.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img,
a img{
    max-width: 100%;
    height: auto;
}

.alignnone,
a img.alignnone {
    display: inline;
    margin: 0 27px 27px;
}

.aligncenter,
a img.aligncenter  {
    display: block;
    margin: 0 auto 27px;
}

.alignright,
a img.alignright {
    float: right;
    margin: 0 0 27px 27px;
}

.alignleft,
img.alignleft {
    float: left;
    margin: 0 27px 27px 0;
}

/* Wordpress automatically wraps the image in a paragraph, hence margin-bottom: 0; removes the margin that we have previously set in the images above. */
#content p &amp;gt; img {
    margin-bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;5.-lists&quot;&gt;5. Lists&lt;/h2&gt;
&lt;p&gt;List posts anyone? Nah, these lists are not for list posts. **Lists make up bullet points, and you would have encountered a few of my own above. **&lt;/p&gt;
&lt;p&gt;Lists are important because people use them. I was using a wordpress backend coded by an outsourced company in my current work and felt totally horrible when I had to use lists in my presentation, simply because the lists are not styled.&lt;/p&gt;
&lt;p&gt;Note that some CSS resets remove all list styles. Check your CSS reset and see if they do so and enable the styles, at least for the content portion.&lt;/p&gt;
&lt;p&gt;Here’s what I did for mine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.entry ul {
  list-style: disc;
}
.entry ol {
  list-style: decimal;
}

/* pads the ul or ol to the right and ensures there is a margin at the bottom  */
.entry ul, .entry ol {
  padding-left: 27px;
  margin-left: 27px;
  margin-bottom: 27px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;6.-blockquotes&quot;&gt;6. Blockquotes&lt;/h2&gt;
&lt;p&gt;Blockquotes are not exceptionally important for some, but are crucial for others. I leave you to see if they are important for you.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blockquote {
  padding: 14px 27px 14px 27px;
  margin-bottom: 27px;
}

blockquote p {
  display: inline;
}

/* This is the part to cite the author of the quote */
blockquote cite {
  text-align: right;
  display: block;
}
blockquote cite::before {
  content: &amp;quot;– &amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is the end of the 3 part series on creating a website. I think I might have loaded the posts with a little too much information if you’re just starting, but I hope it was informational enough for you to make sense of everything.&lt;/p&gt;
&lt;p&gt;The CSS I showed you is nowhere perfect. There are very many flaws within the codes. What is more important to get out of these posts is practice. The more you practice, the more you will get the hang of using CSS.&lt;/p&gt;
&lt;p&gt;**Have fun coding! And do share with me your creations, I’m interested! :) **&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a clean and simple website (Part 2 – Styling the header)</title>
    <link href="https://zellwk.com/blog/creating-a-clean-and-simple-website-part-2-styling-the-header/"/>
    <updated>2013-05-13T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/creating-a-clean-and-simple-website-part-2-styling-the-header/</id>
    <content type="html">&lt;p&gt;Continuing the series on creating a clean and simple website, I’m going to share with you how I coded my blog from scratch. In this article, I’ll discuss how to go about first creating fixed width layouts using pixels. If you’re new to this, you might want to check out the previous article on &lt;a href=&quot;https://zellwk.com/blog/creating-a-clean-and-simple-website-part-1-html/&quot; title=&quot;Creating a clean and simple website part 1 - HTML&quot;&gt;writing HTML&lt;/a&gt; for the website that we’re creating&lt;/p&gt;
&lt;p&gt;II’ll try to explain everything clearly and simply in a way that you should be able to follow even if its your first time looking at CSS. My blog design definitely doesn’t have the bells and whistles around the internet, and thats why I think its such a good place to start from.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;linking-your-css-files-to-your-html-files%23%23&quot;&gt;Linking your CSS files to your HTML files##&lt;/h2&gt;
&lt;p&gt;The easiest way to link your CSS files to your HTML files is to use the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag and is to be placed within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; of the HTML document.
If you stylesheet is placed in the same directory as the HTML file, simply type the name of the stylesheet to the href attribute. (I usually name my file as style.css.)&lt;/p&gt;
&lt;p&gt;If the stylesheet is placed in a folder above, type &lt;code&gt;../&lt;/code&gt; infront of the name.
If the stylesheet is placed in a folder below, type the folder name, followed by the stylesheet name.&lt;/p&gt;
&lt;p&gt;This is how the code should look like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
// if stylesheet is in the same folder

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/style.css&amp;quot;&amp;gt;
// if stylesheet is in the folder named css.

&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;../css/style.css&amp;quot;&amp;gt;
// if stylesheet is a sibling folder named css. Not as often used
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;1.-css-reset&quot;&gt;1. CSS Reset&lt;/h2&gt;
&lt;p&gt;Before even attempting to play with CSS, it is important to use a CSS reset. By default, each browser, Safari, Chrome, Firefox and Internet Explorer inclusive, has its own default styles for a website to make sure that everything looks at least with hierarchy if no styles are being set. This however, severely hinders our cause as we now have to remove them to start off with a blank slate. A CSS reset does this.&lt;/p&gt;
&lt;p&gt;Two very good CSS resets are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eric Meyer’s Css reset&lt;/li&gt;
&lt;li&gt;Normalize.css&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Choose either one, and place it right at the top of your css file. You should know what the reset contains, but lets leave that discussion for another day.&lt;/p&gt;
&lt;h2 id=&quot;2.-look-at-the-big-picture&quot;&gt;2. Look at the big picture&lt;/h2&gt;
&lt;p&gt;Lets revisit the big picture that we previously spoke of while writing up the initial HTML&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/04/website.jpg&quot; alt=&quot;Big picture&quot; title=&quot;Big picture&quot;&gt;&lt;/p&gt;
&lt;p&gt;Recall that we have marked 4 areas with ids and inserted several .wrap classes into the HTML markup in our previous article. Incase you were wondering, we will be using these ids and classes to tell the browser which part of the webpage should take up which styles.&lt;/p&gt;
&lt;p&gt;Lets also take a look at our HTML without any styling involved
&lt;img src=&quot;https://zellwk.com/images/2013/05/img-5.png&quot; alt=&quot;HTML without styles&quot; title=&quot;HTML without styles&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3.-style-the-header&quot;&gt;3. Style the Header&lt;/h2&gt;
&lt;p&gt;The first thing we notice is that the header takes up the whole width in the browser window, no matter what the size of the window is. (We say it spans the whole width in more technical terms). In this case, we must make sure that a div that spans the whole width of the window encompasses the items within.&lt;/p&gt;
&lt;p&gt;Looking back to our HTML document, we know that #header is the div containing the background while .wrap is the div that contains our contents within the header.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#header {
  background-color: #2b2927;
   /* This shows the background color */

  margin-bottom: 81px;
   /* This ensures that there is a margin of 81px between the header of other elements */

  overflow: hidden;
  /* Overflow hidden is used because we will be floating all children elements. */
}

.wrap {
  width: 1152px;
  /* Sets the width of the elements to be 1152 pixels. */

  margin: 0 auto;
  /* Shorthand for margin. Auto on left and right allows .wrap to be centered in the browser */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the header, there are a few things we have to take care of as well, specifically the title of the website and the navigation panels. Here’s a quick refresher of the HTML that we have previously coded:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
        &amp;lt;div id=&amp;quot;title-area&amp;quot;&amp;gt;
            &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Zell Liew&amp;lt;/a&amp;gt;
            &amp;lt;/h1&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;nav&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Services&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the CSS to style the title area. Explanations are found within the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#header {
  background-color: #2b2927;
  /* This shows the background color */

  margin-bottom: 81px;
  /* This ensures that there is a margin of 81px between the header of other elements */

  overflow: hidden;
  /* Overflow hidden is used because we will be floating all children elements. */
}

.wrap {
  width: 1152px;
  /* Sets the width of the elements to be 1152 pixels. */

  margin: 0 auto;
  /* Shorthand for margin. Auto on left and right allows .wrap to be centered in the browser */
}

#title-area {
  display:block;
  /* Display block allows setting of width and height values  */

  line-height: 108px;
  height: 108px;
  /* height determines the amount of vertical space allocated for the header.

  Also, a line-height that equals the height ensures that the element is centered on the horizontal axis */

  width: 30%;
  /*A small width is to ensure that there is space for navigational elements*/

  float: left;
  /* floating the title area left ensures that it can be placed side by side with the navigational elements, which would be floated to the left as well */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The navigation area is marked up in the HTML as an unordered list. In this case, we have to set the display of each list item either inline, or we would have to float them to the left. Its a choice that you can make, and either works fine. I coded it in this manner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nav {
  line-height: 108px;
  height: 108px;
  float: right;
  width: 65%;
}

nav li{
  display: inline;
}

nav ul {
  text-transform: uppercase;
  /* This is to convert all letters to uppercase */
  text-align:justify;
  /* text-align: justify and the following few lines of codes inclusive allows my navigation elements to have equal spaces within between them no matter how many elements there are.*/
}
nav ul:after {
  content:&#39;&#39;;
  display:inline-block;
  width: 100%;
  height: 0;
}

nav a {
  padding: 1em 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you could use paddings on a tags to enlarge the clickable area and separate the navigation options. This would be much easier to achieve. To find out more about my above code in creating items that are spreaded evenly, check out Chris Coyier’s post on
&lt;a href=&quot;http://css-tricks.com/equidistant-objects-with-css/&quot; title=&quot;equidistant objects with CSS&quot;&gt;equidistant objects with CSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is what we currently have after the above steps. Not too pretty eh? Next up, lets fix the color of the text, typefaces and sizes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/05/img-2.png&quot; alt=&quot;Header after initial styles&quot; title=&quot;Header after initial styles&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4.-text-styles-and-sizes&quot;&gt;4. Text styles and sizes&lt;/h2&gt;
&lt;p&gt;Lets first begin by setting the correct typeface as the text. In my actual website, I used the font “Proxima Nova”. Since its a paid font, lets use Montserrat (a free substitute) for this portion of the tutorial.&lt;/p&gt;
&lt;p&gt;Head over to Google Web Fonts on and get the link to &lt;a href=&quot;http://www.google.com/fonts#UsePlace:use/Collection:Montserrat&quot; title=&quot;Montserrat Font&quot;&gt;Montserrat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The steps to using this font is very similar to the process we linked our HTML to our stylesheet. &lt;strong&gt;Make sure you check both 400 and 700 weights&lt;/strong&gt;. The font will be loaded if you insert the following code &lt;strong&gt;BEFORE&lt;/strong&gt; the link to the stylesheet.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;link href=&#39;http://fonts.googleapis.com/css?family=Montserrat:400,700&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;
  /* Link to Montserrat font */
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to add the font family to our CSS files. We’re going to use Montserrat for both the header title and navigation items. While we’re at it, lets determine the font families for the rest of our website as well. This is what the codes look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
  font: normal 18px/1.5 &amp;quot;Montserrat&amp;quot;, helvetica, arial, sans-serif;
  /* This is a font shorthand that allows you to set many variables at one go, in this case its:
  font weight:    normal;
  font-size:      18px;
  line-height:    1.5;
  font-family:    &amp;quot;Montserrat&amp;quot;, helvetica, arial, sans-serif; */
}

#title,
nav {
/* commas allow you to add more than one selector to have the same styles.
Since we want the text in both #title and nav to be bold, we can specify font-weight: bold; to both of them in this manner */
    font-weight: bold;
}

#title {
  font-size: 60px;
  /* This is to enlarge the font on the title text */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahh much better. Here’s what we have at the moment:
&lt;img src=&quot;https://zellwk.com/images/2013/05/img-3.png&quot; alt=&quot;Header after inserting text styles&quot; title=&quot;Header after inserting text styles&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5.-adding-colors&quot;&gt;5. Adding Colors&lt;/h2&gt;
&lt;p&gt;Next up, we deal with colors of the text. Lets first deal with the color of the text. We set the color of the anchor tag to be #faf3e7 and we also use a pseudo element :visited on the anchor tag, and set the same color to #faf3e7.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:visited&lt;/code&gt; pseudo element targets links that readers have already visited before. By default, a dark purple color will be applied to these links and we want to change it to what we like.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a {
  text-decoration: none;
  /* This removes the underline in anchor tags */
}

#title a, nav a,
/* This targets the &amp;lt;a&amp;gt; tag within #title and #nav respectively */
#title a:visited, nav a:visited
/* This targets links that were already visited before by the user  */
{
  color: #faf3e7;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking way better now.
&lt;img src=&quot;https://zellwk.com/images/2013/05/img-4.png&quot; alt=&quot;Header after styling colors&quot; title=&quot;Header after styling colors&quot;&gt;&lt;/p&gt;
&lt;p&gt;To add on to the experience, we’re going to add some hover styles that changes the color of the navigation element when the user mouses over it. This added effect enhances the interaction between the user and the website, and you will definitely have seen it elsewhere before. In this time, we will also set focus and active states for screen readers to show the same styles as hover.&lt;/p&gt;
&lt;p&gt;Here we go:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#title a:focus, /*Focus takes effect when the tab shortcut is used to navigate the links */
#title a:hover,  /* Hover takes effect when you mouse enter the specific area */
#title a:active  /* active takes effect when its the active page */
{
  color: #faf3e7;
  text-decoration: none;
  /* This ensures the header text doesn&#39;t change color on hover */
}

nav a:focus, nav a:hover, nav a:active
{
  color: #ce6f20;
  text-decoration: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is it for this tutorial, its quite a lot to take in for just styling the header portion if you’re just starting to learn CSS. I’ll continue the series with styling the content and footer areas in the next article. In the meantime, play around with HTML and CSS codes to make your own stuff! I’m pretty sure my codes here are not perfect, and you’ll hone your skills if you discover the areas where I should improve :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zellwk.com/images/2013/05/Archive.zip&quot; title=&quot;HTML and CSS codes&quot;&gt;Here’s the codes&lt;/a&gt; we currently have so far. We will also talk about how to order the codes properly further down the road.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>9 Important CSS Properties You Must Know</title>
    <link href="https://zellwk.com/blog/9-important-css-properties-you-must-know/"/>
    <updated>2013-05-05T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/9-important-css-properties-you-must-know/</id>
    <content type="html">&lt;p&gt;CSS can be seem to be difficult at a first glance when you’re new to it. You may be confused about the different CSS properties, what they do and what they are for. Don’t worry, I got you covered.&lt;/p&gt;
&lt;p&gt;Have you heard of the 80/20 rule where 80% of the results come from 20% of the effort? Its the same in CSS. Which is why in this post, I’m going to talk about the most highly used CSS properties you will definitely need to know.&lt;/p&gt;
&lt;p&gt;Its going to be a post packed full of information. Lets dig in.&lt;/p&gt;
&lt;!--more--&gt;
&lt;img src=&quot;https://zellwk.com/images/2013/05/9-important-CSS-properties-you-must-know.jpg&quot; alt=&quot;9-important-CSS-properties-you-must-know&quot; width=&quot;593&quot; height=&quot;381&quot; class=&quot;aligncenter size-full wp-image-164&quot;&gt;
&lt;h2 id=&quot;1%3A-display&quot;&gt;1: Display&lt;/h2&gt;
&lt;p&gt;Display takes on many different values, but only 4 are most commonly used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div {
    display: block;
    display: inline-block;
    display: inline;
    display: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;block:&lt;/strong&gt; Many HTML elements are set to this mode of display by browsers’ stylesheets. They include &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and text blocks like &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. Block level elements by default take up as much space as they can, and they cannot be placed on the same horizontal line with any other display modes, include other block elements. (Exception: unless they are floated)&lt;/p&gt;
&lt;p&gt;With block elements, you gain the ability to alter the element’s width and height to your liking, which is why they are &lt;a href=&quot;http://zellwk.com/blog/layouts-of-a-website/&quot; title=&quot;used for layouts&quot;&gt;used for layouts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;inline:&lt;/strong&gt; The inline mode wraps many HTML elements tighty around them and is the defaults for all elements that are not specified with any other display values. Elements can be placed side by side on the same line as inline elements. Think about the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag that &lt;strong&gt;bolds elements&lt;/strong&gt;, the &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag that creates &lt;em&gt;italics&lt;/em&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags that allow you to link to other web pages. These are all examples of inline elements. You will not be able to change an inline element’s width and height.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;inline-block&lt;/strong&gt;: This is one display value that combines the properties of both block elements and inline elements. You get the ability to set a height and width, and the element can appear on the same horizontal line as other elements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;: Display none hides the element from the website and it will not be shown visually. This is very useful for CSS Dropdown menus where additional options appear when you hover on navigation menus. The rationale is that elements are set to a display value of none initially,  and the display value is changed to block on hover.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/05/display-values.jpg&quot; alt=&quot;Display values&quot; title=&quot;Display values&quot;&gt;&lt;/p&gt;
&lt;p&gt;Other display values can be found on the &lt;a href=&quot;http://www.w3schools.com/cssref/pr_class_display.asp&quot; title=&quot;W3 Schools Display values&quot;&gt;W3 Schools website&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2%3A-width-and-height&quot;&gt;2: Width and Height&lt;/h2&gt;
&lt;p&gt;Width and height properties are used closely with display:block and display:inline to set the width and height of HTML elements while creating a website. Common units units for Width and Height are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;px&lt;/strong&gt; - Pixels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;em&lt;/strong&gt; - A unit of measurement, where 1 em = current font size.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rem&lt;/strong&gt; - Root em. Same measurement as em, but makes life much easier without the inheritance problem&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%&lt;/strong&gt; - Percentages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt; - highly useful unit, will explain below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other units of measurement can be found at the &lt;a href=&quot;http://www.w3schools.com/cssref/css_units.asp&quot; title=&quot;W3 Schools CSS units &quot;&gt;W3 Schools website&lt;/a&gt;. If you’re wondering about the difference between px, em and rem, check out this great article on &lt;a href=&quot;http://snook.ca/archives/html_and_css/font-size-with-rem&quot; title=&quot;font sizing with rem&quot;&gt;font sizing with rem by Jonathan Snook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Extremely useful properties like max-width, min-width, max-height and min-height come into play as well when you’re making responsive websites. Here’s one example of how auto and max-width can be used to make sure images fit tightly and snugly into available space:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img {
    max-width: 100%;
    height: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;3%3A-margin-and-padding&quot;&gt;3: Margin and Padding&lt;/h2&gt;
&lt;p&gt;Margins are paddings are things that will definitely appear. Knowing how these things work will be extremely beneficial when writing CSS.&lt;/p&gt;
&lt;p&gt;Margins and Paddings dictate the spaces between elements on your website. They are very similar and have the same units as Width and Height mentioned above.&lt;/p&gt;
&lt;p&gt;The only difference between margins and paddings is the area the exert control over. Margins affect the area outside of borders whereas paddings affect areas inside the border. It is useful to refer to the box model below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/05/box-model.jpg&quot; alt=&quot;CSS Box Model&quot; title=&quot;CSS Box Model&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ordinarily, margins are written in this manner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div{
    margin-top: 20px;
    margin-bottom: 20px;
    margin-right: 10px;
    margin-left: 10px
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;They can be written in shorthand to simplify the lines of codes and make it easier to read. In fact, shorthands are the standard practice and you should know them. Here’s a quick explanation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div{
   margin: 20px 10px 20px 10px;
   /*  This shorthand refers to TOP, Right, Bottom, Left. Its easier to picture a clock at 12, 3, 6 and 9 respectively */

   margin: 20px 10px 20px;
   /* This refers to Top, Left and Right, Bottom */

   margin: 20px 10px;
   /* This refers to Top and Bottom, Left and Right */

   margin: 20px;
   /* This refers to 20px worth of margin on all 4 sides */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Extra tip:&lt;/strong&gt; margins with auto on the left and right are used to center an element with a display value of block. Its written simply as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div {
   margin: 0 auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;4%3A-border&quot;&gt;4: Border&lt;/h2&gt;
&lt;p&gt;Borders are… borders. I’m pretty sure you don’t need an explanation of what borders are.&lt;/p&gt;
&lt;p&gt;Borders have 3 different properties that you have take care of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;border-width&lt;/strong&gt; – width of the border. Same units as width and height&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;border-style&lt;/strong&gt; – style of the border. Usual values are solid and dashed. For a complete list, take a look at &lt;a href=&quot;http://www.w3schools.com/cssref/pr_border-style.asp&quot; title=&quot;W3 Schools Border Styles&quot;&gt;W3 Schools Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;border-color&lt;/strong&gt; – color of the border. Hex, and rgb values can be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of writing the longer version, you could declare the border shorthand in this way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;div{
    border: 1px solid black;
    /* border width, style and color */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Likewise to margins and paddings, borders refer to all 4 sides. If you are only interested in applying borders to 1 or 2 sides, I generally prefer to stick by border-top, border-bottom, border-left or border-right.&lt;/p&gt;
&lt;h2 id=&quot;5%3A-floats&quot;&gt;5: Floats&lt;/h2&gt;
&lt;p&gt;Floats are one of the core elements in today’s website. If you see two columns of text side by side, a sidebar / content configuration like what you see on my blog if your browser window is above 800px, you have noticed floats in action. Another commonly used area for floats are navigation items.&lt;/p&gt;
&lt;p&gt;In the nutshell, what float simply does it to position the edge of the targeted HTML content at the edge of one side of the parent container. Subsequent floats will then be placed at the edge of your first floated content. (depending on whether you float it left or right)&lt;/p&gt;
&lt;p&gt;Floats have 3 basic properties that you might use often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;left&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;right&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;none&lt;/strong&gt; - removes the float&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may want to check out the this post on &lt;a href=&quot;http://coding.smashingmagazine.com/2007/05/01/css-float-theory-things-you-should-know/&quot; title=&quot;float theory&quot;&gt;float theory&lt;/a&gt; as well&lt;/p&gt;
&lt;h2 id=&quot;6%3A-clearing-floats&quot;&gt;6: Clearing Floats&lt;/h2&gt;
&lt;p&gt;Even though floats are immensely useful, they are sometimes a headache if they are not cleared properly. In general, 2 kinds of problems may occur:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zellwk.com/images/2013/05/float-problems.jpg&quot; alt=&quot;Float Problems&quot; title=&quot;Float Problems&quot;&gt;&lt;/p&gt;
&lt;p&gt;The are 3 main methods for clearing floats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;: The Clear property takes in 3 values. left, right or both. As you might have suspected, &lt;code&gt;clear:left;&lt;/code&gt; simply clears any floats on the left side, &lt;code&gt;clear:right;&lt;/code&gt; clears floats on the right side while &lt;code&gt;clear:both;&lt;/code&gt; ensures that all floats elements are cleared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;overflow:hidden&lt;/strong&gt;: This method is great for ensuring the parent element does not collapse like in problem 2. &lt;code&gt;overflow:hidden;&lt;/code&gt; is set to the parent element to combat the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;clearfix&lt;/strong&gt;: No doubt you will have heard of or seen clearfix in tutorials. It is also set to the parent element to ensure float issues do not arise. The rationale behind the clearfix hack is to insert some content (a period) after the parent element to force the parent element to self clear since there is content after the floats.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &lt;a href=&quot;http://css-tricks.com/snippets/css/clear-fix/&quot; title=&quot;clearfix&quot;&gt;post by Chris Coyier&lt;/a&gt; has a great snippets on the clearfix hack. Read more about the clearfix hack on the pages he link to, or just head right down to the bottom section to grab the latest version.&lt;/p&gt;
&lt;h2 id=&quot;7%3A-color&quot;&gt;7: Color&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Color&lt;/strong&gt; here refers to text color. It takes on a #hex value or a rgb value as with border colors.&lt;/p&gt;
&lt;h2 id=&quot;8%3A-background&quot;&gt;8: Background&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt; refers to the background of the HTML element. Like many CSS properties, &lt;code&gt;background&lt;/code&gt; has a shorthand to it as well.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
    background:transparent image-url(&#39;image.png&#39;) left top no-repeat;
    /* All background definitions are option, but at least one must be stated. The above are default values given to background if you have left anything undefined */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the explanations for the background properties in order from left to right:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;background-color:&lt;/strong&gt; color of the background. Takes #hex value or an rgb value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;background-image:&lt;/strong&gt;  url(URI). Takes on the path to your image. Use the example above if the image is in the same folder.&lt;/p&gt;
&lt;p&gt;To go down one folder, simple type the file name before the image.png. Example: css/image.png.&lt;/p&gt;
&lt;p&gt;To go up one folder, type the file name with “…/”. Example: …/css/image.png&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;background-repeat:&lt;/strong&gt; whether you would like the background to repeat if the width exceeds the background size. Other values are repeat, repeat-x and repeat-y.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;background-position:&lt;/strong&gt; position of the background relative to the HTML element. Two values are needed here, X and Y, where X is the amount of offset from the left and Y is the amount of offset from the top. Takes on either unit values (as with width and height) or left,center,right and top,center,bottom for left and right respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9%3A-font&quot;&gt;9: Font&lt;/h2&gt;
&lt;p&gt;Fonts in general refer to the appearance of text in your website. There are a few things to look out for. Like other properties, font has a shorthand. Do note that it is common to see the font shorthand declaration only once in the whole CSS file. It is common to use the different properties at other times:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;body {
    font: italic small-caps bold 20px/1.5 &amp;quot;Proxima Nova&amp;quot;, helvetica, arial, sans-serif;
    /* font shorthand */
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the explanations for the font properties in order from left to right:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;font-style&lt;/strong&gt;: Style of the font. valid values are either italic or normal. Defaults to normal. Optional property in font shorthand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;font-variant:&lt;/strong&gt; variant of the font. valid values are normal and small caps. Defaults to normal. Optional property in font shorthand and is not often used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;font-weight:&lt;/strong&gt; weight of font. determines if text is bold. valid values are normal, bold, bolder, or 100 - 900. Optional property in font shorthand&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;font-size:&lt;/strong&gt; size of font. Takes a value thats the same as width and height&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;line-height:&lt;/strong&gt; determines the amount of space above and below the text. Very important to ensure good readability. Takes on the same values as font, and also a unitless value. If a unitless value is used, it means the line height is a multiple of the value provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;font-family:&lt;/strong&gt; area to declare typefaces and fontstack that you would like to use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thats it. Listed above are the 9 CSS properties that you absolutely must know. What’s left for you to do now is to keep this page somewhere as a backup if you are unsure of the important CSS properties you need to remember. If you found this post useful, please do me a favor and share it with others over twitter or facebook.&lt;/p&gt;
&lt;p&gt;Now code away!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating a clean and simple website (Part 1 – HTML)</title>
    <link href="https://zellwk.com/blog/creating-a-clean-and-simple-website-part-1-html/"/>
    <updated>2013-04-29T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/creating-a-clean-and-simple-website-part-1-html/</id>
    <content type="html">&lt;p&gt;After getting to know the structure of the website look like, its time to create them. In this article, we’re going to explore how to create the HTML content of a website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;what-you-need&quot;&gt;What you need&lt;/h2&gt;
&lt;p&gt;All you need is just a simple text editor. If you have not gotten one yet, I suggest checking out here and just grab a recommended one. Whip out your text editor and lets get started!&lt;/p&gt;
&lt;h2 id=&quot;identifying-elements%2C-ids-and-classes&quot;&gt;Identifying Elements, IDs and Classes&lt;/h2&gt;
&lt;p&gt;There are a total of 3 different was for CSS documents to target HTML documents. These methods have to be included while writing the HTML in order for you to play around with the design at a later stage.&lt;/p&gt;
&lt;p&gt;The 3 methods are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Targeting with the HTML element. These include things like &lt;code&gt;&amp;lt;div&amp;gt;, &amp;lt;h1&amp;gt;, &amp;lt;p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Targeting with a Class. Classes are given to areas where there is duplicated content. They are referenced in css with a dot, like: &lt;code&gt;.class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Targeting with an ID. IDs are given to areas where there is no duplication and are referenced in CSS with a # like this: &lt;code&gt;#id&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The preferred order is to target the HTML element whenever possible, followed by classes and IDs&lt;/p&gt;
&lt;h2 id=&quot;writing-the-html&quot;&gt;Writing the HTML&lt;/h2&gt;
&lt;p&gt;When writing HTML, always go in this direction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Left to right&lt;/li&gt;
&lt;li&gt;Top to bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before taking a dive into the HTML, lets take a step back and revisit how our website strucutre look like. If this is new to you, I recommend starting from the previous article over
&lt;a href=&quot;http://www.zell-weekeat.com/layouts-of-a-website&quot; title=&quot;Layout of your website&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a quick view of the structure that we’re working with.
&lt;img src=&quot;https://zellwk.com/images/2013/04/website.jpg&quot; alt=&quot;Full Website Layout&quot; title=&quot;Full Website Layout&quot;&gt;&lt;/p&gt;
&lt;p&gt;First, lets write get the basic HTML starters down into our document.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;

    &amp;lt;head&amp;gt;
        &amp;lt;meta charset= &amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/style.css&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt; My First Website &amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;

    &amp;lt;body&amp;gt;
    &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Heading from top to bottom, we first encounter the header area. We will give this an id of header for to easily style and target its inner elements in CSS.
Notice also how the header are has a &lt;code&gt;.wrap&lt;/code&gt; that is duplicated throughout the webpage.&lt;/p&gt;
&lt;p&gt;We will also dive into &lt;code&gt;#header&lt;/code&gt; get the navigation element in the top right in this quick html file below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;header&amp;quot;&amp;gt;
        &amp;lt;!-- #header given to allow better targeting for CSS at a later stage  --&amp;gt;
        &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
            &amp;lt;!-- .wrap given  because multiple elements use the same wrap --&amp;gt;
            &amp;lt;div id=&amp;quot;title-area&amp;quot;&amp;gt;
                &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;
                    &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Zell Liew&amp;lt;/a&amp;gt;
                    &amp;lt;!-- anchor tags are given href of # for demo purposes. --&amp;gt;
                &amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;nav&amp;gt;
                &amp;lt;ul&amp;gt;
                &amp;lt;!-- An unordered list is used for navigation --&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Services&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;About Me&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Contact &amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;/ul&amp;gt;
            &amp;lt;/nav&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might have noticed that HTML is just a bunch of tags, combined with the words you would normally use. These tags allow us to tell the computer what each element is, and what they are supposed to do.&lt;/p&gt;
&lt;p&gt;In the middle section of the page, we have a &lt;code&gt;#content&lt;/code&gt; and a &lt;code&gt;#sidebar&lt;/code&gt;. In this case, we go by a left to right order and create the stuff in &lt;code&gt;#content&lt;/code&gt; first before &lt;code&gt;#sidebar&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;post&amp;quot;&amp;gt;
        &amp;lt;h2 class=&amp;quot;entry-title&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;
            &amp;lt;!-- We use an anchor tag here because we want the post preview to link to the post itself --&amp;gt;
                The Layout of a Website
                &amp;lt;!-- Title of post goes here --&amp;gt;
            &amp;lt;/a&amp;gt;
        &amp;lt;/h2&amp;gt;
        &amp;lt;div class=&amp;quot;postinfo&amp;quot;&amp;gt;
            APRIL 21, 2013
            &amp;lt;!-- Post info, like time goes here --&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;entry-content&amp;quot;&amp;gt;
            &amp;lt;!-- Actual post items goes here --&amp;gt;
            &amp;lt;img src=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot;&amp;gt;
            &amp;lt;p&amp;gt;
                Some post information
            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within &lt;code&gt;#content&lt;/code&gt;, items in &lt;code&gt;.post&lt;/code&gt; are repeated as many times as required.&lt;/p&gt;
&lt;p&gt;Without complicating things too much, the basic structure of the sidebar is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;sidebar&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;widget-wrap&amp;quot;&amp;gt;
        &amp;lt;!-- Similarly, a wrap is used here to allow easy duplicating of layouts in the sidebar --&amp;gt;
        &amp;lt;h4 class=&amp;quot;widgettitle&amp;quot;&amp;gt;
            Title of sidebar item
        &amp;lt;/h4&amp;gt;
        &amp;lt;p&amp;gt;
            Sidebar item text
        &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the footer of the website:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;footer&amp;quot; class=&amp;quot;footer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;wrap&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;creds&amp;quot;&amp;gt;
            &amp;lt;p&amp;gt;Copyright &amp;amp;#x000A9; 2013 &amp;amp;middot;
                &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Zell Liew&amp;lt;/a&amp;gt; &amp;amp;middot; Built on the &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Genesis Framework&amp;lt;/a&amp;gt;
            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h2&gt;
&lt;p&gt;HTML, as you can see, is a series of tags and text. It’s not exceptionally difficult to grasp and I’d recommend you to sign up for my newsletter and grab the getting ebook on how to get started if you’re having difficulties. It’ll make things much clearer.&lt;/p&gt;
&lt;p&gt;This example is also a tad more complicated because I wanted to give you a clearer picture of how a website would look like. If it is too complicated, let me know in the comments and I’ll make a shorter one instead.&lt;/p&gt;
&lt;p&gt;In the next post, I’ll break down how to style the HTML that we have created using CSS.&lt;/p&gt;
&lt;p&gt;Finally, &lt;a href=&quot;https://zellwk.com/images/2013/04/Website-HTML.html&quot; title=&quot;HTML Codes&quot;&gt;click here&lt;/a&gt; for the full code that we have created together&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The Layout of a Website</title>
    <link href="https://zellwk.com/blog/layouts-of-a-website/"/>
    <updated>2013-04-21T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/layouts-of-a-website/</id>
    <content type="html">&lt;p&gt;Websites have a structure, just like houses have pillars. Understanding the structure of a website and how it is made up is an essential first step in creating a website. Today, I’ll dive into the overview of what a website structure look like, and how planning this structure in advance can really help you learn to create a website.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;the-basic-building-block&quot;&gt;The Basic Building Block&lt;/h2&gt;
&lt;p&gt;Many HTML elements make up the website that you see on a browser. There are generally two types of elements – block elements and inline elements. Don’t worry if you can’t remember all the elements though, if you start making a website, you’ll quickly understand which is which.&lt;/p&gt;
&lt;p&gt;I’m going to focus on creating the layout of a website today, and I’ll focus on the block elements since 95% of elements used in layout are block elements.&lt;/p&gt;
&lt;h2 id=&quot;what-are-block-elements%3F&quot;&gt;What are Block Elements?&lt;/h2&gt;
&lt;p&gt;Block elements are HTML elements that have been set to &lt;code&gt;block&lt;/code&gt; as a default display method in CSS. Here’s a quick picture of how it looks like.
&lt;img src=&quot;https://zellwk.com/images/2013/04/Widths.jpg&quot; alt=&quot;HTML Block Elements&quot; title=&quot;HTML Block Elements&quot;&gt;&lt;/p&gt;
&lt;p&gt;Width and height of the element could be controlled with other units as well. Other commonly used units are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pixels&lt;/li&gt;
&lt;li&gt;em&lt;/li&gt;
&lt;li&gt;rem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The width thing is part of CSS, and I’ll explain how to place them in CSS in &lt;a href=&quot;https://zellwk.com/blog/9-important-css-properties-you-must-know&quot;&gt;another blog post&lt;/a&gt;. For now, just grasp the theory behind how elements could be used.&lt;/p&gt;
&lt;h2 id=&quot;common-usage-of-elements-for-layout&quot;&gt;Common Usage of Elements for Layout&lt;/h2&gt;
&lt;p&gt;Here are some common layouts you see around the web:
&lt;img src=&quot;https://zellwk.com/images/2013/04/Content-Layouts.jpg&quot; alt=&quot;Content Layouts&quot; title=&quot;Content Layouts&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;nesting-html-elements&quot;&gt;Nesting HTML Elements&lt;/h2&gt;
&lt;p&gt;Another point to note regarding HTML elements is that they don’t appear alone in any website. Each website makes use of many HTML elements in order to attain the visual effect that you see. Nesting of elements simply refers to placing an element within another element. An example of such code is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;outer&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;Some text&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Some text&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;inner&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is what you will see on a web browser
&lt;img src=&quot;https://zellwk.com/images/2013/04/Nesting.jpg&quot; alt=&quot;Nested HTML Elements&quot; title=&quot;Nested HTML Elements&quot;&gt;&lt;/p&gt;
&lt;p&gt;Note: A simple mistake that I made when I first started out in web design is that I didn’t understand how HTML elements work. One important concept that you have to know is that elements &lt;strong&gt;cannot intersect each other&lt;/strong&gt;.
&lt;img src=&quot;https://zellwk.com/images/2013/04/no-intersect.jpg&quot; alt=&quot; HTML elements cannot intersect &quot; title=&quot;HTML elements cannot intersect&quot;&gt;&lt;/p&gt;
&lt;p&gt;The final sample here is a detailed layout of my blog, and you can see how the elements come together to make up the whole website.
&lt;img src=&quot;https://zellwk.com/images/2013/04/My-blog-layout.jpg&quot; alt=&quot;Zell&#39;s Blog Layout&quot; title=&quot;Zell&#39;s Blog Layout&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;I hope this was a great introduction to looking at structures in a website. &lt;strong&gt;Let me know if I made anything too complicated in the comments!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P.S. I’ll dive into how to use these elements and create them in the same exact layout as my blog in the next session. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Why I started learning about web design and how you can do it too</title>
    <link href="https://zellwk.com/blog/why-i-started-learning-about-web-design-and-how-you-can-do-it-too/"/>
    <updated>2013-03-23T00:00:00-00:00</updated>
    <id>https://zellwk.com/blog/why-i-started-learning-about-web-design-and-how-you-can-do-it-too/</id>
    <content type="html">&lt;p&gt;Until a few months ago, I always thought programming was something that I would never venture into. I really see the value, yet, I never really dared venture into the massive lines of code.&lt;/p&gt;
&lt;p&gt;Honestly, I was afraid. I was afraid of the thought of giving up halfway because the workload was so tough. I gave up along the way a few times, but managed to pull through till today. It wasn’t as bad as I thought after all. People have the misconception that you have to be damn smart to program, but it really isn’t the case.&lt;/p&gt;
&lt;p&gt;If you feel the same, this post about my story could give you something to think about.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;a href=&quot;https://zellwk.com/images/2013/03/Web-Design.jpg&quot;&gt;&lt;img src=&quot;https://zellwk.com/images/2013/03/Web-Design.jpg&quot; alt=&quot;Web Design&quot; width=&quot;1280&quot; height=&quot;853&quot; class=&quot;aligncenter size-full wp-image-44&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;My story&lt;/h2&gt;
Some facts before I start:
&lt;ul&gt;
  &lt;li&gt;I was 24 when I finally decided to learn about web design.&lt;/li&gt;
  &lt;li&gt;I had neither prior design nor coding experience.&lt;/li&gt;
&lt;/ul&gt;
I come up with a few ideas that I am excited about every now and then, but, I always run into problems. &lt;strong&gt;I didn’t know how to materialize ideas myself&lt;/strong&gt;, and I was not able to find someone to do it for me. Did that happened to you too?
&lt;p&gt;After sitting around for 5 years, I came across to a cold hard fact:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Who am I to dictate a programmer to work on my idea, if all I can do … is nothing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With that, I finally jumped into the sea of codes.&lt;/p&gt;
&lt;p&gt;I initially started with learning photoshop for purely design purposes, but I quickly felt that I needed to learn HTML and CSS to convert these designs into something workable and presentable. &lt;strong&gt;The more I learnt, the more I felt I needed to learn.&lt;/strong&gt; Semantic HTML, responsive design, Javascript, backend programming like PHP or Python all came into the mix one by one. &lt;strong&gt;I was overwhelmed. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I felt this whole programming thing was too hard and not my cup of tea. I quited. A week later, realizing I was back in the same position where I started, and I still could not get anything done, I grumpily decided to plow on with learning.&lt;/p&gt;
&lt;p&gt;Instead of trying to learn everything under the sun all at once, &lt;strong&gt;I decided to focus&lt;/strong&gt; on the basic aspects: HTML and CSS first, and I plowed on to this day. The results from that process my current blog theme.&lt;/p&gt;
&lt;p&gt;And that is the story of how I got to where I am today.&lt;/p&gt;
&lt;h2&gt;The purpose of this blog&lt;/h2&gt;
My purpose of starting this blog is simple.
&lt;p&gt;&lt;strong&gt;I want to help you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have kept reading till this point, something must have been similar in our experiences. Having threaded the path before you,&lt;strong&gt; I know some ins and outs&lt;/strong&gt; that have made me stall for a couple of times, and &lt;strong&gt;I want to make it easier for you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you don’t know anything about programming at all, its okay.&lt;strong&gt; As long as you are willing to learn, I believe you will be able to do it.&lt;/strong&gt; Also, it is never too late to start. I was 24 when I started, and it was already much older than anyone around me.&lt;/p&gt;
&lt;p&gt;I have to admit though, that the learning process is not easy. You have to be ready to be frustrated with yourself in order to improve.&lt;/p&gt;
&lt;p&gt;If you want to find out more, I invite you to join my community and fill in your email address below.&lt;/p&gt;
&lt;p&gt;Till then!&lt;/p&gt;
&lt;p&gt;P.S. I’d love to hear your questions, comments and feedback below. If you want to keep the conversation private instead, &lt;a href=&quot;http://www.zell-weekeat.com/contact/&quot;&gt;feel free to the use the contact form&lt;/a&gt;. I’ll read everything and reply as soon as I can.&lt;/p&gt;
</content>
  </entry>
</feed>
